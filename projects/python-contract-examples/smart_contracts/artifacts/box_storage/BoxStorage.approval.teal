#pragma version 10

smart_contracts.box_storage.contract.BoxStorage.approval_program:
    callsub __puya_arc4_router__
    return


// smart_contracts.box_storage.contract.BoxStorage.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@40
    method "get_box()uint64"
    method "get_item_box_map(uint64)string"
    method "get_box_map()string"
    method "get_box_ref()void"
    method "maybe_box()(uint64,bool)"
    method "maybe_box_map()(string,bool)"
    method "maybe_box_ref()(byte[],bool)"
    method "get_box_example()(uint64,byte[],string)"
    method "get_box_map_example()bool"
    method "maybe_box_example()void"
    method "maybe_box_map_example()void"
    method "get_box_map_struct(uint64)(string,uint64,uint64)"
    method "set_box(uint64)void"
    method "set_box_map(uint64,string)void"
    method "set_box_map_struct(uint64,(string,uint64,uint64))bool"
    method "set_box_example(uint64,byte[],string)void"
    method "delete_box()void"
    method "delete_box_map(uint64)void"
    method "delete_box_ref()void"
    method "box_map_length()uint64"
    method "length_box_ref()uint64"
    method "box_map_struct_length()bool"
    method "box_map_length_example()void"
    method "length_box_ref_example()void"
    method "extract_box_ref()void"
    method "manipulate_box_ref()void"
    method "value_box()void"
    method "exist_box()bool"
    method "exist_box_example()(bool,bool,bool)"
    method "slice_box()void"
    method "arc4_box()void"
    method "key_box()byte[]"
    method "key_box_example()void"
    method "box_map_exists(uint64)bool"
    method "box_map_struct_exists(uint64)bool"
    method "key_prefix_box_map()byte[]"
    txna ApplicationArgs 0
    match __puya_arc4_router___get_box_route@2 __puya_arc4_router___get_item_box_map_route@3 __puya_arc4_router___get_box_map_route@4 __puya_arc4_router___get_box_ref_route@5 __puya_arc4_router___maybe_box_route@6 __puya_arc4_router___maybe_box_map_route@7 __puya_arc4_router___maybe_box_ref_route@8 __puya_arc4_router___get_box_example_route@9 __puya_arc4_router___get_box_map_example_route@10 __puya_arc4_router___maybe_box_example_route@11 __puya_arc4_router___maybe_box_map_example_route@12 __puya_arc4_router___get_box_map_struct_route@13 __puya_arc4_router___set_box_route@14 __puya_arc4_router___set_box_map_route@15 __puya_arc4_router___set_box_map_struct_route@16 __puya_arc4_router___set_box_example_route@17 __puya_arc4_router___delete_box_route@18 __puya_arc4_router___delete_box_map_route@19 __puya_arc4_router___delete_box_ref_route@20 __puya_arc4_router___box_map_length_route@21 __puya_arc4_router___length_box_ref_route@22 __puya_arc4_router___box_map_struct_length_route@23 __puya_arc4_router___box_map_length_example_route@24 __puya_arc4_router___length_box_ref_example_route@25 __puya_arc4_router___extract_box_ref_route@26 __puya_arc4_router___manipulate_box_ref_route@27 __puya_arc4_router___value_box_route@28 __puya_arc4_router___exist_box_route@29 __puya_arc4_router___exist_box_example_route@30 __puya_arc4_router___slice_box_route@31 __puya_arc4_router___arc4_box_route@32 __puya_arc4_router___key_box_route@33 __puya_arc4_router___key_box_example_route@34 __puya_arc4_router___box_map_exists_route@35 __puya_arc4_router___box_map_struct_exists_route@36 __puya_arc4_router___key_prefix_box_map_route@37
    int 0
    retsub

__puya_arc4_router___get_box_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_box
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___get_item_box_map_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub get_item_box_map
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___get_box_map_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_box_map
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___get_box_ref_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_box_ref
    int 1
    retsub

__puya_arc4_router___maybe_box_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub maybe_box
    swap
    itob
    byte 0x00
    int 0
    uncover 3
    setbit
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___maybe_box_map_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub maybe_box_map
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x00
    int 0
    uncover 3
    setbit
    byte 0x0003
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___maybe_box_ref_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub maybe_box_ref
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x00
    int 0
    uncover 3
    setbit
    byte 0x0003
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___get_box_example_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_box_example
    cover 2
    swap
    itob
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    byte 0x000c
    concat
    swap
    dup
    len
    int 12
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___get_box_map_example_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_box_map_example
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___maybe_box_example_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub maybe_box_example
    int 1
    retsub

__puya_arc4_router___maybe_box_map_example_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub maybe_box_map_example
    int 1
    retsub

__puya_arc4_router___get_box_map_struct_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub get_box_map_struct
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___set_box_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub set_box
    int 1
    retsub

__puya_arc4_router___set_box_map_route@15:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    callsub set_box_map
    int 1
    retsub

__puya_arc4_router___set_box_map_struct_route@16:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    callsub set_box_map_struct
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___set_box_example_route@17:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    callsub set_box_example
    int 1
    retsub

__puya_arc4_router___delete_box_route@18:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub delete_box
    int 1
    retsub

__puya_arc4_router___delete_box_map_route@19:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub delete_box_map
    int 1
    retsub

__puya_arc4_router___delete_box_ref_route@20:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub delete_box_ref
    int 1
    retsub

__puya_arc4_router___box_map_length_route@21:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub box_map_length
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___length_box_ref_route@22:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub length_box_ref
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___box_map_struct_length_route@23:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub box_map_struct_length
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___box_map_length_example_route@24:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub box_map_length_example
    int 1
    retsub

__puya_arc4_router___length_box_ref_example_route@25:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub length_box_ref_example
    int 1
    retsub

__puya_arc4_router___extract_box_ref_route@26:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub extract_box_ref
    int 1
    retsub

__puya_arc4_router___manipulate_box_ref_route@27:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub manipulate_box_ref
    int 1
    retsub

__puya_arc4_router___value_box_route@28:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub value_box
    int 1
    retsub

__puya_arc4_router___exist_box_route@29:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub exist_box
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___exist_box_example_route@30:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub exist_box_example
    cover 2
    swap
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 2
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x00
    int 0
    uncover 3
    setbit
    swap
    int 0
    getbit
    uncover 2
    int 1
    uncover 2
    setbit
    swap
    int 0
    getbit
    int 2
    swap
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___slice_box_route@31:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub slice_box
    int 1
    retsub

__puya_arc4_router___arc4_box_route@32:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc4_box
    int 1
    retsub

__puya_arc4_router___key_box_route@33:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub key_box
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___key_box_example_route@34:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub key_box_example
    int 1
    retsub

__puya_arc4_router___box_map_exists_route@35:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub box_map_exists
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___box_map_struct_exists_route@36:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub box_map_struct_exists
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___key_prefix_box_map_route@37:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub key_prefix_box_map
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___bare_routing@40:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@44
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@44:
    int 0
    retsub


// smart_contracts.box_storage.contract.BoxStorage.get_box() -> uint64:
get_box:
    proto 0 1
    byte "box_int"
    box_get
    swap
    btoi
    swap
    assert // check self.box_int exists
    retsub


// smart_contracts.box_storage.contract.BoxStorage.get_item_box_map(key: uint64) -> bytes:
get_item_box_map:
    proto 1 1
    frame_dig -1
    itob
    box_get
    assert // check self.box_map entry exists
    retsub


// smart_contracts.box_storage.contract.BoxStorage.get_box_map() -> bytes:
get_box_map:
    proto 0 1
    int 1
    itob
    box_get
    byte "default"
    cover 2
    select
    retsub


// smart_contracts.box_storage.contract.BoxStorage.get_box_ref() -> void:
get_box_ref:
    proto 0 0
    byte "blob"
    int 32
    box_create
    assert
    txn Sender
    byte "blob"
    box_del
    assert
    byte "blob"
    box_get
    dig 2
    cover 2
    select
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.maybe_box() -> uint64, uint64:
maybe_box:
    proto 0 2
    byte "box_int"
    box_get
    swap
    btoi
    swap
    retsub


// smart_contracts.box_storage.contract.BoxStorage.maybe_box_map() -> bytes, uint64:
maybe_box_map:
    proto 0 2
    int 1
    itob
    box_get
    dup
    uncover 2
    swap
    bnz maybe_box_map_after_if_else@2
    byte ""
    frame_bury 1

maybe_box_map_after_if_else@2:
    frame_dig 1
    frame_dig 0
    uncover 3
    uncover 3
    retsub


// smart_contracts.box_storage.contract.BoxStorage.maybe_box_ref() -> bytes, uint64:
maybe_box_ref:
    proto 0 2
    byte "blob"
    int 32
    box_create
    assert
    byte "blob"
    box_get
    dup
    uncover 2
    swap
    bnz maybe_box_ref_after_if_else@2
    byte 0x
    frame_bury 1

maybe_box_ref_after_if_else@2:
    frame_dig 1
    frame_dig 0
    uncover 3
    uncover 3
    retsub


// smart_contracts.box_storage.contract.BoxStorage.get_box_example() -> uint64, bytes, bytes:
get_box_example:
    proto 0 3
    byte "box_int"
    box_get
    swap
    btoi
    swap
    assert // check self.box_int exists
    byte "b"
    box_get
    assert // check self.box_dynamic_bytes exists
    extract 2 0
    byte 0x424f585f43
    box_get
    assert // check self.box_string exists
    retsub


// smart_contracts.box_storage.contract.BoxStorage.get_box_map_example() -> uint64:
get_box_map_example:
    proto 0 1
    int 1
    itob
    box_get
    byte "default"
    cover 2
    select
    byte "default"
    ==
    assert
    int 1
    retsub


// smart_contracts.box_storage.contract.BoxStorage.maybe_box_example() -> void:
maybe_box_example:
    proto 0 0
    byte "box_int"
    box_del
    pop
    byte "box_int"
    box_get
    swap
    btoi
    int 42
    swap
    uncover 2
    select
    int 42
    ==
    assert
    byte "box_int"
    box_get
    swap
    btoi
    swap
    !
    assert
    !
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.maybe_box_map_example() -> void:
maybe_box_map_example:
    proto 0 0
    int 1
    itob
    box_get
    bury 1
    !
    assert
    int 0
    itob
    box_len
    bury 1
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.get_box_map_struct(key: bytes) -> bytes:
get_box_map_struct:
    proto 1 1
    byte "users"
    frame_dig -1
    concat
    box_get
    assert // check self.box_map_struct entry exists
    retsub


// smart_contracts.box_storage.contract.BoxStorage.set_box(value_int: uint64) -> void:
set_box:
    proto 1 0
    frame_dig -1
    itob
    byte "box_int"
    swap
    box_put
    retsub


// smart_contracts.box_storage.contract.BoxStorage.set_box_map(key: uint64, value: bytes) -> void:
set_box_map:
    proto 2 0
    frame_dig -2
    itob
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub


// smart_contracts.box_storage.contract.BoxStorage.set_box_map_struct(key: bytes, value: bytes) -> uint64:
set_box_map_struct:
    proto 2 1
    byte "users"
    frame_dig -2
    concat
    dup
    box_del
    pop
    dup
    frame_dig -1
    box_put
    box_get
    assert // check self.box_map_struct entry exists
    frame_dig -1
    ==
    assert
    int 1
    retsub


// smart_contracts.box_storage.contract.BoxStorage.set_box_example(value_int: uint64, value_dbytes: bytes, value_string: bytes) -> void:
set_box_example:
    proto 3 0
    frame_dig -3
    itob
    byte "box_int"
    swap
    box_put
    byte "b"
    box_del
    pop
    byte "b"
    frame_dig -2
    box_put
    byte 0x424f585f43
    box_del
    pop
    byte 0x424f585f43
    frame_dig -1
    box_put
    frame_dig -2
    extract 2 0
    byte "box_bytes"
    box_del
    pop
    byte "box_bytes"
    swap
    box_put
    byte "b"
    box_get
    assert // check self.box_dynamic_bytes exists
    byte "b"
    box_get
    assert // check self.box_dynamic_bytes exists
    int 0
    extract_uint16
    swap
    int 0
    extract_uint16
    ==
    assert // direct reference should match copy
    byte "box_int"
    box_get
    swap
    btoi
    swap
    assert // check self.box_int exists
    int 3
    +
    itob
    byte "box_int"
    swap
    box_put
    retsub


// smart_contracts.box_storage.contract.BoxStorage.delete_box() -> void:
delete_box:
    proto 0 0
    byte "box_int"
    box_del
    pop
    byte "b"
    box_del
    pop
    byte 0x424f585f43
    box_del
    pop
    byte "box_int"
    box_get
    swap
    btoi
    int 42
    swap
    uncover 2
    select
    int 42
    ==
    assert
    byte "b"
    box_get
    byte 0x00023432
    cover 2
    select
    extract 2 0
    byte 0x3432
    ==
    assert
    byte 0x424f585f43
    box_get
    byte 0x00023432
    cover 2
    select
    byte 0x00023432
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.delete_box_map(key: uint64) -> void:
delete_box_map:
    proto 1 0
    frame_dig -1
    itob
    box_del
    pop
    retsub


// smart_contracts.box_storage.contract.BoxStorage.delete_box_ref() -> void:
delete_box_ref:
    proto 0 0
    byte "box_ref"
    int 32
    box_create
    pop
    byte "box_ref"
    box_len
    bury 1
    assert // has data
    byte "box_ref"
    box_del
    pop
    byte "blob"
    box_get
    !
    assert
    byte 0x
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.box_map_length() -> uint64:
box_map_length:
    proto 0 1
    int 0
    itob
    dup
    box_len
    bury 1
    bnz box_map_length_after_if_else@2
    int 0
    swap
    retsub

box_map_length_after_if_else@2:
    frame_dig 0
    box_len
    assert // check self.box_map entry exists
    swap
    retsub


// smart_contracts.box_storage.contract.BoxStorage.length_box_ref() -> uint64:
length_box_ref:
    proto 0 1
    byte "blob"
    int 32
    box_create
    assert
    byte "blob"
    box_len
    assert // check BoxRef exists
    retsub


// smart_contracts.box_storage.contract.BoxStorage.box_map_struct_length() -> uint64:
box_map_struct_length:
    proto 0 1
    byte 0x75736572730000000000000000
    box_del
    pop
    byte 0x75736572730000000000000000
    byte 0x0012000000000000004600000000000000020008746573744e616d65
    box_put
    byte 0x75736572730000000000000000
    box_len
    assert // check self.box_map_struct entry exists
    int 28
    ==
    assert
    byte 0x75736572730000000000000000
    box_len
    assert // check self.box_map_struct entry exists
    int 28
    ==
    assert
    int 1
    retsub


// smart_contracts.box_storage.contract.BoxStorage.box_map_length_example() -> void:
box_map_length_example:
    proto 0 0
    int 0
    itob
    dup
    box_del
    pop
    dup
    byte "Hmmmmm"
    box_put
    dup
    box_len
    assert // check self.box_map entry exists
    int 6
    ==
    assert
    box_len
    assert // check self.box_map entry exists
    int 6
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.length_box_ref_example() -> void:
length_box_ref_example:
    proto 0 0
    byte "blob"
    int 32
    box_create
    assert
    byte "blob"
    box_len
    assert // check BoxRef exists
    int 64
    ==
    assert
    byte 0x626c6f62
    int 32
    box_create
    assert
    byte 0x626c6f62
    box_len
    assert // check BoxRef exists
    int 64
    ==
    assert
    byte 0x626c6f62
    int 32
    box_create
    assert
    byte 0x626c6f62
    box_len
    assert // check BoxRef exists
    int 64
    ==
    assert
    byte "blob"
    int 32
    box_create
    assert
    byte "blob"
    box_len
    assert // check BoxRef exists
    int 64
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.extract_box_ref() -> void:
extract_box_ref:
    proto 0 0
    byte "blob"
    int 32
    box_create
    assert
    global CurrentApplicationAddress
    txn Sender
    byte "blob"
    int 0
    dig 2
    box_replace
    byte "blob"
    int 0
    dup
    dig 4
    box_splice
    byte "blob"
    int 64
    byte 0x68656c6c6f
    box_replace
    byte "blob"
    int 0
    int 69
    box_extract
    cover 2
    concat
    byte 0x68656c6c6f
    concat
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.manipulate_box_ref() -> void:
manipulate_box_ref:
    proto 0 0
    byte "blob"
    int 32
    box_create
    assert
    byte "blob"
    box_len
    bury 1
    assert // has data
    global CurrentApplicationAddress
    txn Sender
    byte "blob"
    int 0
    dig 2
    box_replace
    byte "blob"
    int 0
    dup
    dig 4
    box_splice
    byte "blob"
    int 64
    byte 0x68656c6c6f
    box_replace
    byte "blob"
    int 0
    int 69
    box_extract
    dig 2
    dig 2
    concat
    byte 0x68656c6c6f
    concat
    ==
    assert
    byte "blob"
    box_del
    assert
    swap
    concat
    byte "blob"
    swap
    box_put
    byte "blob"
    box_len
    bury 1
    assert // Blob exists
    byte "blob"
    box_len
    assert // check BoxRef exists
    int 64
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.value_box() -> void:
value_box:
    proto 0 0
    byte "box_int"
    box_get
    swap
    btoi
    swap
    assert // check self.box_int exists
    int 10
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.exist_box() -> uint64:
exist_box:
    proto 0 1
    byte "box_int"
    box_len
    bury 1
    retsub


// smart_contracts.box_storage.contract.BoxStorage.exist_box_example() -> uint64, uint64, uint64:
exist_box_example:
    proto 0 3
    byte "b"
    box_len
    bury 1
    byte 0x424f585f43
    box_len
    bury 1
    byte "box_bytes"
    box_len
    bury 1
    retsub


// smart_contracts.box_storage.contract.BoxStorage.slice_box() -> void:
slice_box:
    proto 0 0
    byte "0"
    box_del
    pop
    byte "0"
    byte 0x54657374696e672074657374696e6720313233
    box_put
    byte "0"
    box_len
    pop
    dup
    int 0
    dig 2
    select
    swap
    int 7
    dig 1
    <
    int 7
    swap
    select
    dig 1
    -
    byte "0"
    cover 2
    box_extract
    byte 0x54657374696e67
    ==
    assert
    byte 0x424f585f43
    box_del
    pop
    byte 0x424f585f43
    byte 0x000548656c6c6f
    box_put
    byte 0x424f585f43
    box_len
    pop
    int 2
    dig 1
    <
    swap
    dup
    int 2
    uncover 3
    select
    swap
    int 10
    dig 1
    <
    int 10
    swap
    select
    dig 1
    -
    byte 0x424f585f43
    cover 2
    box_extract
    byte 0x48656c6c6f
    ==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.arc4_box() -> void:
arc4_box:
    proto 0 0
    byte 0x64
    byte 0x00010203
    box_put
    byte 0x64
    box_get
    assert // check Box exists
    extract 0 1 // on error: Index access is out of bounds
    byte 0x00
    b==
    assert
    byte 0x64
    box_get
    assert // check Box exists
    extract 1 1 // on error: Index access is out of bounds
    byte 0x01
    b==
    assert
    byte 0x64
    box_get
    assert // check Box exists
    extract 2 1 // on error: Index access is out of bounds
    byte 0x02
    b==
    assert
    byte 0x64
    box_get
    assert // check Box exists
    extract 3 1 // on error: Index access is out of bounds
    byte 0x03
    b==
    assert
    retsub


// smart_contracts.box_storage.contract.BoxStorage.key_box() -> bytes:
key_box:
    proto 0 1
    byte "box_int"
    retsub


// smart_contracts.box_storage.contract.BoxStorage.key_box_example() -> void:
key_box_example:
    proto 0 0
    int 0
    assert // box string key ok
    retsub


// smart_contracts.box_storage.contract.BoxStorage.box_map_exists(key: uint64) -> uint64:
box_map_exists:
    proto 1 1
    frame_dig -1
    itob
    box_len
    bury 1
    retsub


// smart_contracts.box_storage.contract.BoxStorage.box_map_struct_exists(key: bytes) -> uint64:
box_map_struct_exists:
    proto 1 1
    byte "users"
    frame_dig -1
    concat
    box_len
    bury 1
    retsub


// smart_contracts.box_storage.contract.BoxStorage.key_prefix_box_map() -> bytes:
key_prefix_box_map:
    proto 0 1
    byte ""
    retsub
