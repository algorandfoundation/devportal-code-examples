#pragma version 10

smart_contracts.arc4_types.contract.Arc4Tuple.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.arc4_types.contract.Arc4Tuple.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@6
    method "add_contact_info((string,string,uint64))uint64"
    method "return_contact()(string,string,uint64)"
    txna ApplicationArgs 0
    match __puya_arc4_router___add_contact_info_route@2 __puya_arc4_router___return_contact_route@3
    int 0
    retsub

__puya_arc4_router___add_contact_info_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub add_contact_info
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___return_contact_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub return_contact
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___bare_routing@6:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@10
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@10:
    int 0
    retsub


// smart_contracts.arc4_types.contract.Arc4Tuple.add_contact_info(contact: bytes) -> uint64:
add_contact_info:
    proto 1 1
    frame_dig -1
    int 0
    extract_uint16
    frame_dig -1
    int 2
    extract_uint16
    frame_dig -1
    uncover 2
    dig 2
    substring3
    swap
    frame_dig -1
    len
    frame_dig -1
    cover 2
    substring3
    swap
    frame_dig -1
    extract 4 8 // on error: Index access is out of bounds
    cover 2
    extract 2 0
    byte "Alice"
    ==
    assert
    extract 2 0
    byte "alice@something.com"
    ==
    assert
    dup
    byte 0x00000000211d1ae3
    b==
    assert
    byte "contact_info"
    frame_dig -1
    app_global_put
    btoi
    retsub


// smart_contracts.arc4_types.contract.Arc4Tuple.return_contact() -> bytes:
return_contact:
    proto 0 1
    int 0
    byte "contact_info"
    app_global_get_ex
    assert // check self.contact_info exists
    retsub


// smart_contracts.arc4_types.contract.Arc4Tuple.__init__() -> void:
__init__:
    proto 0 0
    byte "contact_info"
    byte 0x000c000e000000000000000000000000
    app_global_put
    retsub
