#pragma version 10

smart_contracts.arc4_types.contract.Arc4Tuple.approval_program:
    callsub __puya_arc4_router__
    return


// smart_contracts.arc4_types.contract.Arc4Tuple.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@6
    method "arc4_tuple_argument((uint8,string,uint64,uint32[]))string"
    method "arc4_tuple_return()(uint128,string)"
    txna ApplicationArgs 0
    match __puya_arc4_router___arc4_tuple_argument_route@2 __puya_arc4_router___arc4_tuple_return_route@3
    int 0
    retsub

__puya_arc4_router___arc4_tuple_argument_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub arc4_tuple_argument
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___arc4_tuple_return_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc4_tuple_return
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___bare_routing@6:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@10
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@10:
    int 0
    retsub


// smart_contracts.arc4_types.contract.Arc4Tuple.arc4_tuple_argument(a: bytes) -> bytes:
arc4_tuple_argument:
    proto 1 1
    frame_dig -1
    extract 0 1 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    extract 3 8 // on error: Index access is out of bounds
    btoi
    +
    frame_dig -1
    int 11
    extract_uint16
    dup
    frame_dig -1
    len
    frame_dig -1
    cover 2
    substring3
    dup
    int 0
    extract_uint16
    int 0

arc4_tuple_argument_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz arc4_tuple_argument_after_for@4
    frame_dig 2
    extract 2 0
    frame_dig 4
    dup
    cover 2
    int 4
    *
    int 4
    extract3 // on error: Index access is out of bounds
    btoi
    frame_dig 0
    +
    frame_bury 0
    int 1
    +
    frame_bury 4
    b arc4_tuple_argument_for_header@1

arc4_tuple_argument_after_for@4:
    frame_dig -1
    int 1
    extract_uint16
    frame_dig -1
    swap
    frame_dig 1
    substring3
    frame_bury 0
    retsub


// smart_contracts.arc4_types.contract.Arc4Tuple.arc4_tuple_return() -> bytes:
arc4_tuple_return:
    proto 0 1
    byte 0x0000000000000000000000000000002a0012000d68656c6c6f2c20776f726c6421
    retsub
