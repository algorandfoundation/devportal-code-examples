{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 22,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "47: pushbytes \"This account is rich!\""
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "74: pushbytes \"This account is doing well.\"",
              "77: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "79: isRich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "85: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "99: pushbytes \"Even\""
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "117: isEven_ternary_false@3:",
              "120: pushbytes \"Odd\"",
              "121: b isEven_ternary_merge@4"
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15 -> 16 -> 18 -> 19 -> 21 -> 22 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "125: forLoop:",
              "126: intc_1",
              "127: pushbytes \"\"",
              "128: dupn 4",
              "131: pushbytes 0x0000",
              "132: dup",
              "135: intc_1"
            ],
            [
              "137: forLoop_for_header@2:",
              "140: dup",
              "141: pushint 4",
              "142: <",
              "143: bz forLoop_after_for@5"
            ],
            [
              "171: forLoop_after_for@5:",
              "174: dig 1",
              "175: intc_1",
              "176: extract_uint16",
              "177: bury 8",
              "178: intc_1",
              "179: bury 6",
              "180: dig 2",
              "181: bury 9"
            ],
            [
              "183: forLoop_for_header@6:",
              "186: dig 5",
              "187: dig 8",
              "188: <",
              "189: bz forLoop_after_for@9"
            ],
            [
              "221: forLoop_after_for@9:",
              "224: intc_1",
              "225: bury 4",
              "228: dig 8",
              "229: intc_1",
              "230: extract_uint16",
              "231: bury 7",
              "232: intc_1",
              "233: bury 5"
            ],
            [
              "235: forLoop_for_header@10:",
              "238: dig 4",
              "239: dig 7",
              "240: <",
              "241: bz forLoop_after_for@13"
            ],
            [
              "260: forLoop_after_for@13:",
              "263: dig 3",
              "264: pushint 6",
              "265: ==",
              "266: assert",
              "269: bytec_0",
              "270: dig 9",
              "271: concat",
              "272: log",
              "273: intc_0",
              "274: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 26 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "294: pushbytes \"Monday\""
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 29 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "324: pushbytes \"Tuesday\"",
              "327: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 31 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "341: pushbytes \"Wednesday\"",
              "344: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 33 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "358: pushbytes \"Thursday\"",
              "361: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 35 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "375: pushbytes \"Friday\"",
              "378: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 37 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "392: pushbytes \"Saturday\"",
              "395: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 39 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "409: pushbytes \"Sunday\"",
              "412: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 40 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "414: getDay_after_if_else@22:",
              "417: pushbytes \"Invalid day\"",
              "420: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 42 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "447: intc_2"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 46 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "483: pushint 64",
              "486: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 48 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "501: pushint 256",
              "504: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 50 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "519: pushint 1024",
              "522: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 52 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "537: pushint 32000",
              "540: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 53 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "542: calculateBoxStorageCost_after_if_else@16:",
              "545: intc_1",
              "548: b calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 56 -> 58 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "580: dig 1",
              "581: pushint 5",
              "582: >",
              "583: bz loop_after_if_else@5"
            ],
            [
              "600: loop_after_if_else@5:",
              "603: dig 1",
              "604: intc_3",
              "605: -",
              "606: dup",
              "607: bury 3",
              "610: dig 1",
              "611: intc_0",
              "612: +",
              "613: bury 2",
              "616: intc_0",
              "617: ==",
              "618: bz loop_while_top@2"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 22,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "47: pushbytes \"This account is rich!\""
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "74: pushbytes \"This account is doing well.\"",
              "77: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "79: isRich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "85: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "99: pushbytes \"Even\""
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "117: isEven_ternary_false@3:",
              "120: pushbytes \"Odd\"",
              "121: b isEven_ternary_merge@4"
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15 -> 16 -> 18 -> 19 -> 21 -> 22 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "125: forLoop:",
              "126: intc_1",
              "127: pushbytes \"\"",
              "128: dupn 4",
              "131: pushbytes 0x0000",
              "132: dup",
              "135: intc_1"
            ],
            [
              "137: forLoop_for_header@2:",
              "140: dup",
              "141: pushint 4",
              "142: <",
              "143: bz forLoop_after_for@5"
            ],
            [
              "171: forLoop_after_for@5:",
              "174: dig 1",
              "175: intc_1",
              "176: extract_uint16",
              "177: bury 8",
              "178: intc_1",
              "179: bury 6",
              "180: dig 2",
              "181: bury 9"
            ],
            [
              "183: forLoop_for_header@6:",
              "186: dig 5",
              "187: dig 8",
              "188: <",
              "189: bz forLoop_after_for@9"
            ],
            [
              "221: forLoop_after_for@9:",
              "224: intc_1",
              "225: bury 4",
              "228: dig 8",
              "229: intc_1",
              "230: extract_uint16",
              "231: bury 7",
              "232: intc_1",
              "233: bury 5"
            ],
            [
              "235: forLoop_for_header@10:",
              "238: dig 4",
              "239: dig 7",
              "240: <",
              "241: bz forLoop_after_for@13"
            ],
            [
              "260: forLoop_after_for@13:",
              "263: dig 3",
              "264: pushint 6",
              "265: ==",
              "266: assert",
              "269: bytec_0",
              "270: dig 9",
              "271: concat",
              "272: log",
              "273: intc_0",
              "274: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 26 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "294: pushbytes \"Monday\""
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 29 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "324: pushbytes \"Tuesday\"",
              "327: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 31 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "341: pushbytes \"Wednesday\"",
              "344: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 33 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "358: pushbytes \"Thursday\"",
              "361: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 35 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "375: pushbytes \"Friday\"",
              "378: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 37 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "392: pushbytes \"Saturday\"",
              "395: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 39 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "409: pushbytes \"Sunday\"",
              "412: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 40 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "414: getDay_after_if_else@22:",
              "417: pushbytes \"Invalid day\"",
              "420: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 42 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "447: intc_2"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 46 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "483: pushint 64",
              "486: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 48 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "501: pushint 256",
              "504: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 50 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "519: pushint 1024",
              "522: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 52 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "537: pushint 32000",
              "540: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 53 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "542: calculateBoxStorageCost_after_if_else@16:",
              "545: intc_1",
              "548: b calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 56 -> 58 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "580: dig 1",
              "581: pushint 5",
              "582: >",
              "583: bz loop_after_if_else@5"
            ],
            [
              "600: loop_after_if_else@5:",
              "603: dig 1",
              "604: intc_3",
              "605: -",
              "606: dup",
              "607: bury 3",
              "610: dig 1",
              "611: intc_0",
              "612: +",
              "613: bury 2",
              "616: intc_0",
              "617: ==",
              "618: bz loop_while_top@2"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 22,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "47: pushbytes \"This account is rich!\""
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "74: pushbytes \"This account is doing well.\"",
              "77: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "79: isRich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "85: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "99: pushbytes \"Even\""
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "117: isEven_ternary_false@3:",
              "120: pushbytes \"Odd\"",
              "121: b isEven_ternary_merge@4"
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15 -> 16 -> 18 -> 19 -> 21 -> 22 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "125: forLoop:",
              "126: intc_1",
              "127: pushbytes \"\"",
              "128: dupn 4",
              "131: pushbytes 0x0000",
              "132: dup",
              "135: intc_1"
            ],
            [
              "137: forLoop_for_header@2:",
              "140: dup",
              "141: pushint 4",
              "142: <",
              "143: bz forLoop_after_for@5"
            ],
            [
              "171: forLoop_after_for@5:",
              "174: dig 1",
              "175: intc_1",
              "176: extract_uint16",
              "177: bury 8",
              "178: intc_1",
              "179: bury 6",
              "180: dig 2",
              "181: bury 9"
            ],
            [
              "183: forLoop_for_header@6:",
              "186: dig 5",
              "187: dig 8",
              "188: <",
              "189: bz forLoop_after_for@9"
            ],
            [
              "221: forLoop_after_for@9:",
              "224: intc_1",
              "225: bury 4",
              "228: dig 8",
              "229: intc_1",
              "230: extract_uint16",
              "231: bury 7",
              "232: intc_1",
              "233: bury 5"
            ],
            [
              "235: forLoop_for_header@10:",
              "238: dig 4",
              "239: dig 7",
              "240: <",
              "241: bz forLoop_after_for@13"
            ],
            [
              "260: forLoop_after_for@13:",
              "263: dig 3",
              "264: pushint 6",
              "265: ==",
              "266: assert",
              "269: bytec_0",
              "270: dig 9",
              "271: concat",
              "272: log",
              "273: intc_0",
              "274: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 26 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "294: pushbytes \"Monday\""
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 29 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "324: pushbytes \"Tuesday\"",
              "327: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 31 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "341: pushbytes \"Wednesday\"",
              "344: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 33 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "358: pushbytes \"Thursday\"",
              "361: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 35 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "375: pushbytes \"Friday\"",
              "378: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 37 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "392: pushbytes \"Saturday\"",
              "395: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 39 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "409: pushbytes \"Sunday\"",
              "412: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 40 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "414: getDay_after_if_else@22:",
              "417: pushbytes \"Invalid day\"",
              "420: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 42 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "447: intc_2"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 46 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "483: pushint 64",
              "486: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 48 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "501: pushint 256",
              "504: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 50 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "519: pushint 1024",
              "522: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 52 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "537: pushint 32000",
              "540: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 53 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "542: calculateBoxStorageCost_after_if_else@16:",
              "545: intc_1",
              "548: b calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 56 -> 58 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "580: dig 1",
              "581: pushint 5",
              "582: >",
              "583: bz loop_after_if_else@5"
            ],
            [
              "600: loop_after_if_else@5:",
              "603: dig 1",
              "604: intc_3",
              "605: -",
              "606: dup",
              "607: bury 3",
              "610: dig 1",
              "611: intc_0",
              "612: +",
              "613: bury 2",
              "616: intc_0",
              "617: ==",
              "618: bz loop_while_top@2"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 22,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "47: pushbytes \"This account is rich!\""
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "74: pushbytes \"This account is doing well.\"",
              "77: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "79: isRich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "85: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "99: pushbytes \"Even\""
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "117: isEven_ternary_false@3:",
              "120: pushbytes \"Odd\"",
              "121: b isEven_ternary_merge@4"
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15 -> 16 -> 18 -> 19 -> 21 -> 22 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "125: forLoop:",
              "126: intc_1",
              "127: pushbytes \"\"",
              "128: dupn 4",
              "131: pushbytes 0x0000",
              "132: dup",
              "135: intc_1"
            ],
            [
              "137: forLoop_for_header@2:",
              "140: dup",
              "141: pushint 4",
              "142: <",
              "143: bz forLoop_after_for@5"
            ],
            [
              "171: forLoop_after_for@5:",
              "174: dig 1",
              "175: intc_1",
              "176: extract_uint16",
              "177: bury 8",
              "178: intc_1",
              "179: bury 6",
              "180: dig 2",
              "181: bury 9"
            ],
            [
              "183: forLoop_for_header@6:",
              "186: dig 5",
              "187: dig 8",
              "188: <",
              "189: bz forLoop_after_for@9"
            ],
            [
              "221: forLoop_after_for@9:",
              "224: intc_1",
              "225: bury 4",
              "228: dig 8",
              "229: intc_1",
              "230: extract_uint16",
              "231: bury 7",
              "232: intc_1",
              "233: bury 5"
            ],
            [
              "235: forLoop_for_header@10:",
              "238: dig 4",
              "239: dig 7",
              "240: <",
              "241: bz forLoop_after_for@13"
            ],
            [
              "260: forLoop_after_for@13:",
              "263: dig 3",
              "264: pushint 6",
              "265: ==",
              "266: assert",
              "269: bytec_0",
              "270: dig 9",
              "271: concat",
              "272: log",
              "273: intc_0",
              "274: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 26 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "294: pushbytes \"Monday\""
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 29 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "324: pushbytes \"Tuesday\"",
              "327: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 31 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "341: pushbytes \"Wednesday\"",
              "344: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 33 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "358: pushbytes \"Thursday\"",
              "361: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 35 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "375: pushbytes \"Friday\"",
              "378: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 37 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "392: pushbytes \"Saturday\"",
              "395: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 39 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "409: pushbytes \"Sunday\"",
              "412: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 40 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "414: getDay_after_if_else@22:",
              "417: pushbytes \"Invalid day\"",
              "420: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 42 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "447: intc_2"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 46 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "483: pushint 64",
              "486: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 48 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "501: pushint 256",
              "504: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 50 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "519: pushint 1024",
              "522: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 52 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "537: pushint 32000",
              "540: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 53 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "542: calculateBoxStorageCost_after_if_else@16:",
              "545: intc_1",
              "548: b calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 56 -> 58 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "580: dig 1",
              "581: pushint 5",
              "582: >",
              "583: bz loop_after_if_else@5"
            ],
            [
              "600: loop_after_if_else@5:",
              "603: dig 1",
              "604: intc_3",
              "605: -",
              "606: dup",
              "607: bury 3",
              "610: dig 1",
              "611: intc_0",
              "612: +",
              "613: bury 2",
              "616: intc_0",
              "617: ==",
              "618: bz loop_while_top@2"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 23,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "47: pushbytes \"This account is rich!\""
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "74: pushbytes \"This account is doing well.\"",
              "77: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "79: isRich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "85: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "99: pushbytes \"Even\""
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "117: isEven_ternary_false@3:",
              "120: pushbytes \"Odd\"",
              "121: b isEven_ternary_merge@4"
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15 -> 16 -> 18 -> 19 -> 21 -> 22 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "125: forLoop:",
              "126: intc_1",
              "127: pushbytes \"\"",
              "128: dupn 4",
              "131: pushbytes 0x0000",
              "132: dup",
              "135: intc_1"
            ],
            [
              "137: forLoop_for_header@2:",
              "140: dup",
              "141: pushint 4",
              "142: <",
              "143: bz forLoop_after_for@5"
            ],
            [
              "171: forLoop_after_for@5:",
              "174: dig 1",
              "175: intc_1",
              "176: extract_uint16",
              "177: bury 8",
              "178: intc_1",
              "179: bury 6",
              "180: dig 2",
              "181: bury 9"
            ],
            [
              "183: forLoop_for_header@6:",
              "186: dig 5",
              "187: dig 8",
              "188: <",
              "189: bz forLoop_after_for@9"
            ],
            [
              "221: forLoop_after_for@9:",
              "224: intc_1",
              "225: bury 4",
              "228: dig 8",
              "229: intc_1",
              "230: extract_uint16",
              "231: bury 7",
              "232: intc_1",
              "233: bury 5"
            ],
            [
              "235: forLoop_for_header@10:",
              "238: dig 4",
              "239: dig 7",
              "240: <",
              "241: bz forLoop_after_for@13"
            ],
            [
              "260: forLoop_after_for@13:",
              "263: dig 3",
              "264: pushint 6",
              "265: ==",
              "266: assert",
              "269: bytec_0",
              "270: dig 9",
              "271: concat",
              "272: log",
              "273: intc_0",
              "274: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 26 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "294: pushbytes \"Monday\""
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 29 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "324: pushbytes \"Tuesday\"",
              "327: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 31 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "341: pushbytes \"Wednesday\"",
              "344: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 33 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "358: pushbytes \"Thursday\"",
              "361: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 35 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "375: pushbytes \"Friday\"",
              "378: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 37 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "392: pushbytes \"Saturday\"",
              "395: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 39 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "409: pushbytes \"Sunday\"",
              "412: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 40 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "414: getDay_after_if_else@22:",
              "417: pushbytes \"Invalid day\"",
              "420: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 42 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "447: intc_2"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 46 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "483: pushint 64",
              "486: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 48 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "501: pushint 256",
              "504: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 50 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "519: pushint 1024",
              "522: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 52 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "537: pushint 32000",
              "540: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 53 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "542: calculateBoxStorageCost_after_if_else@16:",
              "545: intc_1",
              "548: b calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 56 -> 58 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "580: dig 1",
              "581: pushint 5",
              "582: >",
              "583: bz loop_after_if_else@5"
            ],
            [
              "600: loop_after_if_else@5:",
              "603: dig 1",
              "604: intc_3",
              "605: -",
              "606: dup",
              "607: bury 3",
              "610: dig 1",
              "611: intc_0",
              "612: +",
              "613: bury 2",
              "616: intc_0",
              "617: ==",
              "618: bz loop_while_top@2"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "22: main___algots__.defaultCreate@13:",
              "25: txn OnCompletion",
              "26: !",
              "27: txn ApplicationID",
              "28: !",
              "29: &&",
              "30: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 23,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "47: pushbytes \"This account is rich!\""
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "74: pushbytes \"This account is doing well.\"",
              "77: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "34: isRich:",
              "37: txna ApplicationArgs 1",
              "38: btoi",
              "39: dup",
              "42: pushint 1000",
              "43: >",
              "44: bz isRich_else_body@3"
            ],
            [
              "65: isRich_else_body@3:",
              "68: dup",
              "69: pushint 100",
              "70: >",
              "71: bz isRich_else_body@5"
            ],
            [
              "79: isRich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "85: b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6"
            ],
            [
              "49: isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:",
              "52: dup",
              "53: len",
              "54: itob",
              "55: extract 6 2",
              "56: swap",
              "57: concat",
              "58: bytec_0",
              "59: swap",
              "60: concat",
              "61: log",
              "62: intc_0",
              "63: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "99: pushbytes \"Even\""
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "89: isEven:",
              "92: txna ApplicationArgs 1",
              "93: btoi",
              "96: intc_3",
              "97: %",
              "98: bnz isEven_ternary_false@3"
            ],
            [
              "117: isEven_ternary_false@3:",
              "120: pushbytes \"Odd\"",
              "121: b isEven_ternary_merge@4"
            ],
            [
              "101: isEven_ternary_merge@4:",
              "104: dup",
              "105: len",
              "106: itob",
              "107: extract 6 2",
              "108: swap",
              "109: concat",
              "110: bytec_0",
              "111: swap",
              "112: concat",
              "113: log",
              "114: intc_0",
              "115: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15 -> 16 -> 18 -> 19 -> 21 -> 22 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "125: forLoop:",
              "126: intc_1",
              "127: pushbytes \"\"",
              "128: dupn 4",
              "131: pushbytes 0x0000",
              "132: dup",
              "135: intc_1"
            ],
            [
              "137: forLoop_for_header@2:",
              "140: dup",
              "141: pushint 4",
              "142: <",
              "143: bz forLoop_after_for@5"
            ],
            [
              "171: forLoop_after_for@5:",
              "174: dig 1",
              "175: intc_1",
              "176: extract_uint16",
              "177: bury 8",
              "178: intc_1",
              "179: bury 6",
              "180: dig 2",
              "181: bury 9"
            ],
            [
              "183: forLoop_for_header@6:",
              "186: dig 5",
              "187: dig 8",
              "188: <",
              "189: bz forLoop_after_for@9"
            ],
            [
              "221: forLoop_after_for@9:",
              "224: intc_1",
              "225: bury 4",
              "228: dig 8",
              "229: intc_1",
              "230: extract_uint16",
              "231: bury 7",
              "232: intc_1",
              "233: bury 5"
            ],
            [
              "235: forLoop_for_header@10:",
              "238: dig 4",
              "239: dig 7",
              "240: <",
              "241: bz forLoop_after_for@13"
            ],
            [
              "260: forLoop_after_for@13:",
              "263: dig 3",
              "264: pushint 6",
              "265: ==",
              "266: assert",
              "269: bytec_0",
              "270: dig 9",
              "271: concat",
              "272: log",
              "273: intc_0",
              "274: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 26 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "294: pushbytes \"Monday\""
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 29 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "324: pushbytes \"Tuesday\"",
              "327: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 31 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "341: pushbytes \"Wednesday\"",
              "344: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 33 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "358: pushbytes \"Thursday\"",
              "361: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 35 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "375: pushbytes \"Friday\"",
              "378: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 37 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "392: pushbytes \"Saturday\"",
              "395: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 39 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "409: pushbytes \"Sunday\"",
              "412: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25 -> 28 -> 30 -> 32 -> 34 -> 36 -> 38 -> 40 -> 27",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "278: getDay:",
              "281: txna ApplicationArgs 1",
              "282: btoi",
              "283: dup",
              "286: intc_0",
              "287: ==",
              "291: bz getDay_after_if_else@4"
            ],
            [
              "312: getDay_after_if_else@4:",
              "315: dup",
              "316: intc_3",
              "317: ==",
              "321: bz getDay_after_if_else@7"
            ],
            [
              "329: getDay_after_if_else@7:",
              "332: dup",
              "333: pushint 3",
              "334: ==",
              "338: bz getDay_after_if_else@10"
            ],
            [
              "346: getDay_after_if_else@10:",
              "349: dup",
              "350: pushint 4",
              "351: ==",
              "355: bz getDay_after_if_else@13"
            ],
            [
              "363: getDay_after_if_else@13:",
              "366: dup",
              "367: pushint 5",
              "368: ==",
              "372: bz getDay_after_if_else@16"
            ],
            [
              "380: getDay_after_if_else@16:",
              "383: dup",
              "384: pushint 6",
              "385: ==",
              "389: bz getDay_after_if_else@19"
            ],
            [
              "397: getDay_after_if_else@19:",
              "400: dup",
              "401: pushint 7",
              "402: ==",
              "406: bz getDay_after_if_else@22"
            ],
            [
              "414: getDay_after_if_else@22:",
              "417: pushbytes \"Invalid day\"",
              "420: b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24"
            ],
            [
              "296: getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:",
              "299: dup",
              "300: len",
              "301: itob",
              "302: extract 6 2",
              "303: swap",
              "304: concat",
              "305: bytec_0",
              "306: swap",
              "307: concat",
              "308: log",
              "309: intc_0",
              "310: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 42 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "447: intc_2"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 46 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "483: pushint 64",
              "486: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 48 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "501: pushint 256",
              "504: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 50 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "519: pushint 1024",
              "522: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 52 -> 43 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "537: pushint 32000",
              "540: b calculateBoxStorageCost_block@18"
            ],
            [
              "449: calculateBoxStorageCost_block@18:",
              "452: dig 1",
              "453: +",
              "454: pushint 400",
              "455: *",
              "456: pushint 2500",
              "457: +"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 41 -> 45 -> 47 -> 49 -> 51 -> 53 -> 44",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "424: calculateBoxStorageCost:",
              "427: txna ApplicationArgs 1",
              "428: extract 2 0",
              "429: dup",
              "430: txna ApplicationArgs 2",
              "431: extract 2 0",
              "434: len",
              "435: swap",
              "438: pushbytes \"xs\"",
              "439: ==",
              "444: bz calculateBoxStorageCost_after_if_else@4"
            ],
            [
              "470: calculateBoxStorageCost_after_if_else@4:",
              "473: dig 1",
              "474: pushbytes \"sm\"",
              "475: ==",
              "480: bz calculateBoxStorageCost_after_if_else@7"
            ],
            [
              "488: calculateBoxStorageCost_after_if_else@7:",
              "491: dig 1",
              "492: pushbytes \"md\"",
              "493: ==",
              "498: bz calculateBoxStorageCost_after_if_else@10"
            ],
            [
              "506: calculateBoxStorageCost_after_if_else@10:",
              "509: dig 1",
              "510: pushbytes \"lg\"",
              "511: ==",
              "516: bz calculateBoxStorageCost_after_if_else@13"
            ],
            [
              "524: calculateBoxStorageCost_after_if_else@13:",
              "527: dig 1",
              "528: pushbytes \"max\"",
              "529: ==",
              "534: bz calculateBoxStorageCost_after_if_else@16"
            ],
            [
              "542: calculateBoxStorageCost_after_if_else@16:",
              "545: intc_1",
              "548: b calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19"
            ],
            [
              "459: calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:",
              "462: itob",
              "463: bytec_0",
              "464: swap",
              "465: concat",
              "466: log",
              "467: intc_0",
              "468: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 56 -> 58 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "580: dig 1",
              "581: pushint 5",
              "582: >",
              "583: bz loop_after_if_else@5"
            ],
            [
              "600: loop_after_if_else@5:",
              "603: dig 1",
              "604: intc_3",
              "605: -",
              "606: dup",
              "607: bury 3",
              "610: dig 1",
              "611: intc_0",
              "612: +",
              "613: bury 2",
              "616: intc_0",
              "617: ==",
              "618: bz loop_while_top@2"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 54 -> 55 -> 59",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654",
              "18: txna ApplicationArgs 0",
              "19: match isRich isEven forLoop getDay calculateBoxStorageCost loop"
            ],
            [
              "552: loop:",
              "555: pushint 10",
              "558: intc_1"
            ],
            [
              "560: loop_while_top@2:",
              "576: dig 1",
              "577: bz loop_block@10"
            ],
            [
              "620: loop_block@10:",
              "623: dup",
              "624: itob",
              "625: bytec_0",
              "626: swap",
              "627: concat",
              "628: log",
              "629: intc_0",
              "630: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 8 2",
              "7: bytecblock 0x151f7c75 0x0001",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@13"
            ],
            [
              "22: main___algots__.defaultCreate@13:",
              "25: txn OnCompletion",
              "26: !",
              "27: txn ApplicationID",
              "28: !",
              "29: &&",
              "30: return"
            ]
          ]
        }
      ]
    }
  ]
}