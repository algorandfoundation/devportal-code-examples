{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "36: demonstrateScratchStorage:",
              "39: intc_1",
              "40: store 0",
              "43: bytec_0",
              "44: store 1",
              "47: intc_2",
              "48: store 2",
              "51: intc_3",
              "52: store 15",
              "55: load 2",
              "58: load 15",
              "61: load 1",
              "64: load 0",
              "67: intc_1",
              "68: ==",
              "69: assert",
              "72: bytec_0",
              "73: ==",
              "74: assert",
              "77: swap",
              "78: intc_2",
              "79: ==",
              "80: assert",
              "83: intc_3",
              "84: ==",
              "85: assert",
              "88: pushbytes 0x151f7c7580",
              "89: log",
              "90: intc_0",
              "91: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "95: readFromGroupTransaction:",
              "98: txna ApplicationArgs 1",
              "99: btoi",
              "100: txna ApplicationArgs 2",
              "101: btoi",
              "104: gloadss",
              "107: itob",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "117: readBytesFromGroupTransaction:",
              "120: txna ApplicationArgs 1",
              "121: btoi",
              "122: txna ApplicationArgs 2",
              "123: btoi",
              "126: gloadss",
              "129: dup",
              "130: len",
              "131: itob",
              "132: extract 6 2",
              "133: swap",
              "134: concat",
              "135: bytec_1",
              "136: swap",
              "137: concat",
              "138: log",
              "139: intc_0",
              "140: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "36: demonstrateScratchStorage:",
              "39: intc_1",
              "40: store 0",
              "43: bytec_0",
              "44: store 1",
              "47: intc_2",
              "48: store 2",
              "51: intc_3",
              "52: store 15",
              "55: load 2",
              "58: load 15",
              "61: load 1",
              "64: load 0",
              "67: intc_1",
              "68: ==",
              "69: assert",
              "72: bytec_0",
              "73: ==",
              "74: assert",
              "77: swap",
              "78: intc_2",
              "79: ==",
              "80: assert",
              "83: intc_3",
              "84: ==",
              "85: assert",
              "88: pushbytes 0x151f7c7580",
              "89: log",
              "90: intc_0",
              "91: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "95: readFromGroupTransaction:",
              "98: txna ApplicationArgs 1",
              "99: btoi",
              "100: txna ApplicationArgs 2",
              "101: btoi",
              "104: gloadss",
              "107: itob",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "117: readBytesFromGroupTransaction:",
              "120: txna ApplicationArgs 1",
              "121: btoi",
              "122: txna ApplicationArgs 2",
              "123: btoi",
              "126: gloadss",
              "129: dup",
              "130: len",
              "131: itob",
              "132: extract 6 2",
              "133: swap",
              "134: concat",
              "135: bytec_1",
              "136: swap",
              "137: concat",
              "138: log",
              "139: intc_0",
              "140: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "36: demonstrateScratchStorage:",
              "39: intc_1",
              "40: store 0",
              "43: bytec_0",
              "44: store 1",
              "47: intc_2",
              "48: store 2",
              "51: intc_3",
              "52: store 15",
              "55: load 2",
              "58: load 15",
              "61: load 1",
              "64: load 0",
              "67: intc_1",
              "68: ==",
              "69: assert",
              "72: bytec_0",
              "73: ==",
              "74: assert",
              "77: swap",
              "78: intc_2",
              "79: ==",
              "80: assert",
              "83: intc_3",
              "84: ==",
              "85: assert",
              "88: pushbytes 0x151f7c7580",
              "89: log",
              "90: intc_0",
              "91: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "95: readFromGroupTransaction:",
              "98: txna ApplicationArgs 1",
              "99: btoi",
              "100: txna ApplicationArgs 2",
              "101: btoi",
              "104: gloadss",
              "107: itob",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "117: readBytesFromGroupTransaction:",
              "120: txna ApplicationArgs 1",
              "121: btoi",
              "122: txna ApplicationArgs 2",
              "123: btoi",
              "126: gloadss",
              "129: dup",
              "130: len",
              "131: itob",
              "132: extract 6 2",
              "133: swap",
              "134: concat",
              "135: bytec_1",
              "136: swap",
              "137: concat",
              "138: log",
              "139: intc_0",
              "140: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "36: demonstrateScratchStorage:",
              "39: intc_1",
              "40: store 0",
              "43: bytec_0",
              "44: store 1",
              "47: intc_2",
              "48: store 2",
              "51: intc_3",
              "52: store 15",
              "55: load 2",
              "58: load 15",
              "61: load 1",
              "64: load 0",
              "67: intc_1",
              "68: ==",
              "69: assert",
              "72: bytec_0",
              "73: ==",
              "74: assert",
              "77: swap",
              "78: intc_2",
              "79: ==",
              "80: assert",
              "83: intc_3",
              "84: ==",
              "85: assert",
              "88: pushbytes 0x151f7c7580",
              "89: log",
              "90: intc_0",
              "91: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "95: readFromGroupTransaction:",
              "98: txna ApplicationArgs 1",
              "99: btoi",
              "100: txna ApplicationArgs 2",
              "101: btoi",
              "104: gloadss",
              "107: itob",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "117: readBytesFromGroupTransaction:",
              "120: txna ApplicationArgs 1",
              "121: btoi",
              "122: txna ApplicationArgs 2",
              "123: btoi",
              "126: gloadss",
              "129: dup",
              "130: len",
              "131: itob",
              "132: extract 6 2",
              "133: swap",
              "134: concat",
              "135: bytec_1",
              "136: swap",
              "137: concat",
              "138: log",
              "139: intc_0",
              "140: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "36: demonstrateScratchStorage:",
              "39: intc_1",
              "40: store 0",
              "43: bytec_0",
              "44: store 1",
              "47: intc_2",
              "48: store 2",
              "51: intc_3",
              "52: store 15",
              "55: load 2",
              "58: load 15",
              "61: load 1",
              "64: load 0",
              "67: intc_1",
              "68: ==",
              "69: assert",
              "72: bytec_0",
              "73: ==",
              "74: assert",
              "77: swap",
              "78: intc_2",
              "79: ==",
              "80: assert",
              "83: intc_3",
              "84: ==",
              "85: assert",
              "88: pushbytes 0x151f7c7580",
              "89: log",
              "90: intc_0",
              "91: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "95: readFromGroupTransaction:",
              "98: txna ApplicationArgs 1",
              "99: btoi",
              "100: txna ApplicationArgs 2",
              "101: btoi",
              "104: gloadss",
              "107: itob",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "117: readBytesFromGroupTransaction:",
              "120: txna ApplicationArgs 1",
              "121: btoi",
              "122: txna ApplicationArgs 2",
              "123: btoi",
              "126: gloadss",
              "129: dup",
              "130: len",
              "131: itob",
              "132: extract 6 2",
              "133: swap",
              "134: concat",
              "135: bytec_1",
              "136: swap",
              "137: concat",
              "138: log",
              "139: intc_0",
              "140: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "23: main___algots__.defaultCreate@10:",
              "27: txn OnCompletion",
              "28: !",
              "29: txn ApplicationID",
              "30: !",
              "31: &&",
              "32: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "36: demonstrateScratchStorage:",
              "39: intc_1",
              "40: store 0",
              "43: bytec_0",
              "44: store 1",
              "47: intc_2",
              "48: store 2",
              "51: intc_3",
              "52: store 15",
              "55: load 2",
              "58: load 15",
              "61: load 1",
              "64: load 0",
              "67: intc_1",
              "68: ==",
              "69: assert",
              "72: bytec_0",
              "73: ==",
              "74: assert",
              "77: swap",
              "78: intc_2",
              "79: ==",
              "80: assert",
              "83: intc_3",
              "84: ==",
              "85: assert",
              "88: pushbytes 0x151f7c7580",
              "89: log",
              "90: intc_0",
              "91: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "95: readFromGroupTransaction:",
              "98: txna ApplicationArgs 1",
              "99: btoi",
              "100: txna ApplicationArgs 2",
              "101: btoi",
              "104: gloadss",
              "107: itob",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "13: txn OnCompletion",
              "14: !",
              "15: assert",
              "16: txn ApplicationID",
              "17: assert",
              "18: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "19: txna ApplicationArgs 0",
              "20: match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction"
            ],
            [
              "117: readBytesFromGroupTransaction:",
              "120: txna ApplicationArgs 1",
              "121: btoi",
              "122: txna ApplicationArgs 2",
              "123: btoi",
              "126: gloadss",
              "129: dup",
              "130: len",
              "131: itob",
              "132: extract 6 2",
              "133: swap",
              "134: concat",
              "135: bytec_1",
              "136: swap",
              "137: concat",
              "138: log",
              "139: intc_0",
              "140: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock \"Hello, Algorand!\" 0x151f7c75",
              "11: txn NumAppArgs",
              "12: bz main___algots__.defaultCreate@10"
            ],
            [
              "23: main___algots__.defaultCreate@10:",
              "27: txn OnCompletion",
              "28: !",
              "29: txn ApplicationID",
              "30: !",
              "31: &&",
              "32: return"
            ]
          ]
        }
      ]
    }
  ]
}