{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 8 -> 12 -> 9",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "77: main_demonstrateScratchStorage_route@3:",
              "80: txn OnCompletion",
              "81: !",
              "82: assert",
              "83: txn ApplicationID",
              "84: assert",
              "85: callsub demonstrateScratchStorage"
            ],
            [
              "111: demonstrateScratchStorage:",
              "114: intc_1",
              "115: store 0",
              "118: bytec_1",
              "119: store 1",
              "122: intc_2",
              "123: store 2",
              "126: intc_3",
              "127: store 15",
              "130: load 2",
              "133: load 15",
              "136: load 1",
              "139: load 0",
              "142: intc_1",
              "143: ==",
              "144: assert",
              "147: bytec_1",
              "148: ==",
              "149: assert",
              "152: swap",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_3",
              "159: ==",
              "160: assert",
              "163: intc_0",
              "164: retsub"
            ],
            [
              "86: pushbytes 0x00",
              "87: pushint 0",
              "88: uncover 2",
              "89: setbit",
              "90: bytec_0",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_0",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6 -> 13 -> 7",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "51: main_readFromGroupTransaction_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "62: txna ApplicationArgs 1",
              "63: btoi",
              "64: txna ApplicationArgs 2",
              "65: btoi",
              "68: callsub readFromGroupTransaction"
            ],
            [
              "168: readFromGroupTransaction:",
              "172: proto 2 1",
              "175: frame_dig -2",
              "176: frame_dig -1",
              "177: gloadss",
              "178: retsub"
            ],
            [
              "69: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "73: log",
              "74: intc_0",
              "75: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "20: main_readBytesFromGroupTransaction_route@5:",
              "23: txn OnCompletion",
              "24: !",
              "25: assert",
              "26: txn ApplicationID",
              "27: assert",
              "31: txna ApplicationArgs 1",
              "32: btoi",
              "33: txna ApplicationArgs 2",
              "34: btoi",
              "37: callsub readBytesFromGroupTransaction"
            ],
            [
              "182: readBytesFromGroupTransaction:",
              "186: proto 2 1",
              "189: frame_dig -2",
              "190: frame_dig -1",
              "191: gloadss",
              "192: retsub"
            ],
            [
              "38: dup",
              "39: len",
              "40: itob",
              "41: extract 6 2",
              "42: swap",
              "43: concat",
              "44: bytec_0",
              "45: swap",
              "46: concat",
              "47: log",
              "48: intc_0",
              "49: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 8 -> 12 -> 9",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "77: main_demonstrateScratchStorage_route@3:",
              "80: txn OnCompletion",
              "81: !",
              "82: assert",
              "83: txn ApplicationID",
              "84: assert",
              "85: callsub demonstrateScratchStorage"
            ],
            [
              "111: demonstrateScratchStorage:",
              "114: intc_1",
              "115: store 0",
              "118: bytec_1",
              "119: store 1",
              "122: intc_2",
              "123: store 2",
              "126: intc_3",
              "127: store 15",
              "130: load 2",
              "133: load 15",
              "136: load 1",
              "139: load 0",
              "142: intc_1",
              "143: ==",
              "144: assert",
              "147: bytec_1",
              "148: ==",
              "149: assert",
              "152: swap",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_3",
              "159: ==",
              "160: assert",
              "163: intc_0",
              "164: retsub"
            ],
            [
              "86: pushbytes 0x00",
              "87: pushint 0",
              "88: uncover 2",
              "89: setbit",
              "90: bytec_0",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_0",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6 -> 13 -> 7",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "51: main_readFromGroupTransaction_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "62: txna ApplicationArgs 1",
              "63: btoi",
              "64: txna ApplicationArgs 2",
              "65: btoi",
              "68: callsub readFromGroupTransaction"
            ],
            [
              "168: readFromGroupTransaction:",
              "172: proto 2 1",
              "175: frame_dig -2",
              "176: frame_dig -1",
              "177: gloadss",
              "178: retsub"
            ],
            [
              "69: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "73: log",
              "74: intc_0",
              "75: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "20: main_readBytesFromGroupTransaction_route@5:",
              "23: txn OnCompletion",
              "24: !",
              "25: assert",
              "26: txn ApplicationID",
              "27: assert",
              "31: txna ApplicationArgs 1",
              "32: btoi",
              "33: txna ApplicationArgs 2",
              "34: btoi",
              "37: callsub readBytesFromGroupTransaction"
            ],
            [
              "182: readBytesFromGroupTransaction:",
              "186: proto 2 1",
              "189: frame_dig -2",
              "190: frame_dig -1",
              "191: gloadss",
              "192: retsub"
            ],
            [
              "38: dup",
              "39: len",
              "40: itob",
              "41: extract 6 2",
              "42: swap",
              "43: concat",
              "44: bytec_0",
              "45: swap",
              "46: concat",
              "47: log",
              "48: intc_0",
              "49: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 8 -> 12 -> 9",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "77: main_demonstrateScratchStorage_route@3:",
              "80: txn OnCompletion",
              "81: !",
              "82: assert",
              "83: txn ApplicationID",
              "84: assert",
              "85: callsub demonstrateScratchStorage"
            ],
            [
              "111: demonstrateScratchStorage:",
              "114: intc_1",
              "115: store 0",
              "118: bytec_1",
              "119: store 1",
              "122: intc_2",
              "123: store 2",
              "126: intc_3",
              "127: store 15",
              "130: load 2",
              "133: load 15",
              "136: load 1",
              "139: load 0",
              "142: intc_1",
              "143: ==",
              "144: assert",
              "147: bytec_1",
              "148: ==",
              "149: assert",
              "152: swap",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_3",
              "159: ==",
              "160: assert",
              "163: intc_0",
              "164: retsub"
            ],
            [
              "86: pushbytes 0x00",
              "87: pushint 0",
              "88: uncover 2",
              "89: setbit",
              "90: bytec_0",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_0",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6 -> 13 -> 7",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "51: main_readFromGroupTransaction_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "62: txna ApplicationArgs 1",
              "63: btoi",
              "64: txna ApplicationArgs 2",
              "65: btoi",
              "68: callsub readFromGroupTransaction"
            ],
            [
              "168: readFromGroupTransaction:",
              "172: proto 2 1",
              "175: frame_dig -2",
              "176: frame_dig -1",
              "177: gloadss",
              "178: retsub"
            ],
            [
              "69: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "73: log",
              "74: intc_0",
              "75: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "20: main_readBytesFromGroupTransaction_route@5:",
              "23: txn OnCompletion",
              "24: !",
              "25: assert",
              "26: txn ApplicationID",
              "27: assert",
              "31: txna ApplicationArgs 1",
              "32: btoi",
              "33: txna ApplicationArgs 2",
              "34: btoi",
              "37: callsub readBytesFromGroupTransaction"
            ],
            [
              "182: readBytesFromGroupTransaction:",
              "186: proto 2 1",
              "189: frame_dig -2",
              "190: frame_dig -1",
              "191: gloadss",
              "192: retsub"
            ],
            [
              "38: dup",
              "39: len",
              "40: itob",
              "41: extract 6 2",
              "42: swap",
              "43: concat",
              "44: bytec_0",
              "45: swap",
              "46: concat",
              "47: log",
              "48: intc_0",
              "49: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 8 -> 12 -> 9",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "77: main_demonstrateScratchStorage_route@3:",
              "80: txn OnCompletion",
              "81: !",
              "82: assert",
              "83: txn ApplicationID",
              "84: assert",
              "85: callsub demonstrateScratchStorage"
            ],
            [
              "111: demonstrateScratchStorage:",
              "114: intc_1",
              "115: store 0",
              "118: bytec_1",
              "119: store 1",
              "122: intc_2",
              "123: store 2",
              "126: intc_3",
              "127: store 15",
              "130: load 2",
              "133: load 15",
              "136: load 1",
              "139: load 0",
              "142: intc_1",
              "143: ==",
              "144: assert",
              "147: bytec_1",
              "148: ==",
              "149: assert",
              "152: swap",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_3",
              "159: ==",
              "160: assert",
              "163: intc_0",
              "164: retsub"
            ],
            [
              "86: pushbytes 0x00",
              "87: pushint 0",
              "88: uncover 2",
              "89: setbit",
              "90: bytec_0",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_0",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6 -> 13 -> 7",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "51: main_readFromGroupTransaction_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "62: txna ApplicationArgs 1",
              "63: btoi",
              "64: txna ApplicationArgs 2",
              "65: btoi",
              "68: callsub readFromGroupTransaction"
            ],
            [
              "168: readFromGroupTransaction:",
              "172: proto 2 1",
              "175: frame_dig -2",
              "176: frame_dig -1",
              "177: gloadss",
              "178: retsub"
            ],
            [
              "69: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "73: log",
              "74: intc_0",
              "75: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "20: main_readBytesFromGroupTransaction_route@5:",
              "23: txn OnCompletion",
              "24: !",
              "25: assert",
              "26: txn ApplicationID",
              "27: assert",
              "31: txna ApplicationArgs 1",
              "32: btoi",
              "33: txna ApplicationArgs 2",
              "34: btoi",
              "37: callsub readBytesFromGroupTransaction"
            ],
            [
              "182: readBytesFromGroupTransaction:",
              "186: proto 2 1",
              "189: frame_dig -2",
              "190: frame_dig -1",
              "191: gloadss",
              "192: retsub"
            ],
            [
              "38: dup",
              "39: len",
              "40: itob",
              "41: extract 6 2",
              "42: swap",
              "43: concat",
              "44: bytec_0",
              "45: swap",
              "46: concat",
              "47: log",
              "48: intc_0",
              "49: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 8 -> 12 -> 9",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "77: main_demonstrateScratchStorage_route@3:",
              "80: txn OnCompletion",
              "81: !",
              "82: assert",
              "83: txn ApplicationID",
              "84: assert",
              "85: callsub demonstrateScratchStorage"
            ],
            [
              "111: demonstrateScratchStorage:",
              "114: intc_1",
              "115: store 0",
              "118: bytec_1",
              "119: store 1",
              "122: intc_2",
              "123: store 2",
              "126: intc_3",
              "127: store 15",
              "130: load 2",
              "133: load 15",
              "136: load 1",
              "139: load 0",
              "142: intc_1",
              "143: ==",
              "144: assert",
              "147: bytec_1",
              "148: ==",
              "149: assert",
              "152: swap",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_3",
              "159: ==",
              "160: assert",
              "163: intc_0",
              "164: retsub"
            ],
            [
              "86: pushbytes 0x00",
              "87: pushint 0",
              "88: uncover 2",
              "89: setbit",
              "90: bytec_0",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_0",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6 -> 13 -> 7",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "51: main_readFromGroupTransaction_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "62: txna ApplicationArgs 1",
              "63: btoi",
              "64: txna ApplicationArgs 2",
              "65: btoi",
              "68: callsub readFromGroupTransaction"
            ],
            [
              "168: readFromGroupTransaction:",
              "172: proto 2 1",
              "175: frame_dig -2",
              "176: frame_dig -1",
              "177: gloadss",
              "178: retsub"
            ],
            [
              "69: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "73: log",
              "74: intc_0",
              "75: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "20: main_readBytesFromGroupTransaction_route@5:",
              "23: txn OnCompletion",
              "24: !",
              "25: assert",
              "26: txn ApplicationID",
              "27: assert",
              "31: txna ApplicationArgs 1",
              "32: btoi",
              "33: txna ApplicationArgs 2",
              "34: btoi",
              "37: callsub readBytesFromGroupTransaction"
            ],
            [
              "182: readBytesFromGroupTransaction:",
              "186: proto 2 1",
              "189: frame_dig -2",
              "190: frame_dig -1",
              "191: gloadss",
              "192: retsub"
            ],
            [
              "38: dup",
              "39: len",
              "40: itob",
              "41: extract 6 2",
              "42: swap",
              "43: concat",
              "44: bytec_0",
              "45: swap",
              "46: concat",
              "47: log",
              "48: intc_0",
              "49: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "97: main_bare_routing@8:",
              "101: txn OnCompletion",
              "102: bnz main_after_if_else@12"
            ],
            [
              "103: txn ApplicationID",
              "104: !",
              "105: assert",
              "106: intc_0",
              "107: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 8 -> 12 -> 9",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "77: main_demonstrateScratchStorage_route@3:",
              "80: txn OnCompletion",
              "81: !",
              "82: assert",
              "83: txn ApplicationID",
              "84: assert",
              "85: callsub demonstrateScratchStorage"
            ],
            [
              "111: demonstrateScratchStorage:",
              "114: intc_1",
              "115: store 0",
              "118: bytec_1",
              "119: store 1",
              "122: intc_2",
              "123: store 2",
              "126: intc_3",
              "127: store 15",
              "130: load 2",
              "133: load 15",
              "136: load 1",
              "139: load 0",
              "142: intc_1",
              "143: ==",
              "144: assert",
              "147: bytec_1",
              "148: ==",
              "149: assert",
              "152: swap",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_3",
              "159: ==",
              "160: assert",
              "163: intc_0",
              "164: retsub"
            ],
            [
              "86: pushbytes 0x00",
              "87: pushint 0",
              "88: uncover 2",
              "89: setbit",
              "90: bytec_0",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_0",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6 -> 13 -> 7",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "51: main_readFromGroupTransaction_route@4:",
              "54: txn OnCompletion",
              "55: !",
              "56: assert",
              "57: txn ApplicationID",
              "58: assert",
              "62: txna ApplicationArgs 1",
              "63: btoi",
              "64: txna ApplicationArgs 2",
              "65: btoi",
              "68: callsub readFromGroupTransaction"
            ],
            [
              "168: readFromGroupTransaction:",
              "172: proto 2 1",
              "175: frame_dig -2",
              "176: frame_dig -1",
              "177: gloadss",
              "178: retsub"
            ],
            [
              "69: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "73: log",
              "74: intc_0",
              "75: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "13: pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66",
              "14: txna ApplicationArgs 0",
              "15: match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
            ],
            [
              "20: main_readBytesFromGroupTransaction_route@5:",
              "23: txn OnCompletion",
              "24: !",
              "25: assert",
              "26: txn ApplicationID",
              "27: assert",
              "31: txna ApplicationArgs 1",
              "32: btoi",
              "33: txna ApplicationArgs 2",
              "34: btoi",
              "37: callsub readBytesFromGroupTransaction"
            ],
            [
              "182: readBytesFromGroupTransaction:",
              "186: proto 2 1",
              "189: frame_dig -2",
              "190: frame_dig -1",
              "191: gloadss",
              "192: retsub"
            ],
            [
              "38: dup",
              "39: len",
              "40: itob",
              "41: extract 6 2",
              "42: swap",
              "43: concat",
              "44: bytec_0",
              "45: swap",
              "46: concat",
              "47: log",
              "48: intc_0",
              "49: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 42 100 999",
              "7: bytecblock 0x151f7c75 \"Hello, Algorand!\"",
              "11: txn NumAppArgs",
              "12: bz main_bare_routing@8"
            ],
            [
              "97: main_bare_routing@8:",
              "101: txn OnCompletion",
              "102: bnz main_after_if_else@12"
            ],
            [
              "103: txn ApplicationID",
              "104: !",
              "105: assert",
              "106: intc_0",
              "107: return"
            ]
          ]
        }
      ]
    }
  ]
}