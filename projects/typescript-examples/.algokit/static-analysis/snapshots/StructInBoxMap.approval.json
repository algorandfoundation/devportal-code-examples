{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "34: boxMapTest:",
              "37: bytec_1",
              "40: box_del",
              "41: pop",
              "44: bytec_1",
              "47: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "48: box_put",
              "51: bytec_2",
              "52: log",
              "53: intc_0",
              "54: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "58: boxMapSet:",
              "61: txna ApplicationArgs 1",
              "62: btoi",
              "63: txna ApplicationArgs 2",
              "66: swap",
              "67: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: dup",
              "79: dig 2",
              "80: box_put",
              "87: dup",
              "88: intc_1",
              "89: intc_2",
              "90: box_extract",
              "91: btoi",
              "94: dig 2",
              "95: intc_1",
              "96: extract_uint64",
              "103: ==",
              "104: swap",
              "105: intc_3",
              "106: intc_2",
              "107: box_extract",
              "108: btoi",
              "111: uncover 2",
              "112: intc_3",
              "113: extract_uint64",
              "120: ==",
              "121: &&",
              "122: intc_0",
              "123: &&",
              "124: assert",
              "127: bytec_2",
              "128: log",
              "129: intc_0",
              "130: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "134: boxMapGet:",
              "137: txna ApplicationArgs 1",
              "138: btoi",
              "141: itob",
              "144: bytec_0",
              "145: swap",
              "146: concat",
              "149: box_get",
              "150: assert",
              "153: bytec_3",
              "154: swap",
              "155: concat",
              "156: log",
              "157: intc_0",
              "158: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "162: boxMapExists:",
              "165: txna ApplicationArgs 1",
              "166: btoi",
              "169: itob",
              "172: bytec_0",
              "173: swap",
              "174: concat",
              "177: box_len",
              "178: bury 1",
              "181: pushbytes 0x00",
              "182: pushint 0",
              "183: uncover 2",
              "184: setbit",
              "185: bytec_3",
              "186: swap",
              "187: concat",
              "188: log",
              "189: intc_0",
              "190: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "34: boxMapTest:",
              "37: bytec_1",
              "40: box_del",
              "41: pop",
              "44: bytec_1",
              "47: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "48: box_put",
              "51: bytec_2",
              "52: log",
              "53: intc_0",
              "54: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "58: boxMapSet:",
              "61: txna ApplicationArgs 1",
              "62: btoi",
              "63: txna ApplicationArgs 2",
              "66: swap",
              "67: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: dup",
              "79: dig 2",
              "80: box_put",
              "87: dup",
              "88: intc_1",
              "89: intc_2",
              "90: box_extract",
              "91: btoi",
              "94: dig 2",
              "95: intc_1",
              "96: extract_uint64",
              "103: ==",
              "104: swap",
              "105: intc_3",
              "106: intc_2",
              "107: box_extract",
              "108: btoi",
              "111: uncover 2",
              "112: intc_3",
              "113: extract_uint64",
              "120: ==",
              "121: &&",
              "122: intc_0",
              "123: &&",
              "124: assert",
              "127: bytec_2",
              "128: log",
              "129: intc_0",
              "130: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "134: boxMapGet:",
              "137: txna ApplicationArgs 1",
              "138: btoi",
              "141: itob",
              "144: bytec_0",
              "145: swap",
              "146: concat",
              "149: box_get",
              "150: assert",
              "153: bytec_3",
              "154: swap",
              "155: concat",
              "156: log",
              "157: intc_0",
              "158: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "162: boxMapExists:",
              "165: txna ApplicationArgs 1",
              "166: btoi",
              "169: itob",
              "172: bytec_0",
              "173: swap",
              "174: concat",
              "177: box_len",
              "178: bury 1",
              "181: pushbytes 0x00",
              "182: pushint 0",
              "183: uncover 2",
              "184: setbit",
              "185: bytec_3",
              "186: swap",
              "187: concat",
              "188: log",
              "189: intc_0",
              "190: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "34: boxMapTest:",
              "37: bytec_1",
              "40: box_del",
              "41: pop",
              "44: bytec_1",
              "47: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "48: box_put",
              "51: bytec_2",
              "52: log",
              "53: intc_0",
              "54: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "58: boxMapSet:",
              "61: txna ApplicationArgs 1",
              "62: btoi",
              "63: txna ApplicationArgs 2",
              "66: swap",
              "67: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: dup",
              "79: dig 2",
              "80: box_put",
              "87: dup",
              "88: intc_1",
              "89: intc_2",
              "90: box_extract",
              "91: btoi",
              "94: dig 2",
              "95: intc_1",
              "96: extract_uint64",
              "103: ==",
              "104: swap",
              "105: intc_3",
              "106: intc_2",
              "107: box_extract",
              "108: btoi",
              "111: uncover 2",
              "112: intc_3",
              "113: extract_uint64",
              "120: ==",
              "121: &&",
              "122: intc_0",
              "123: &&",
              "124: assert",
              "127: bytec_2",
              "128: log",
              "129: intc_0",
              "130: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "134: boxMapGet:",
              "137: txna ApplicationArgs 1",
              "138: btoi",
              "141: itob",
              "144: bytec_0",
              "145: swap",
              "146: concat",
              "149: box_get",
              "150: assert",
              "153: bytec_3",
              "154: swap",
              "155: concat",
              "156: log",
              "157: intc_0",
              "158: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "162: boxMapExists:",
              "165: txna ApplicationArgs 1",
              "166: btoi",
              "169: itob",
              "172: bytec_0",
              "173: swap",
              "174: concat",
              "177: box_len",
              "178: bury 1",
              "181: pushbytes 0x00",
              "182: pushint 0",
              "183: uncover 2",
              "184: setbit",
              "185: bytec_3",
              "186: swap",
              "187: concat",
              "188: log",
              "189: intc_0",
              "190: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "34: boxMapTest:",
              "37: bytec_1",
              "40: box_del",
              "41: pop",
              "44: bytec_1",
              "47: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "48: box_put",
              "51: bytec_2",
              "52: log",
              "53: intc_0",
              "54: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "58: boxMapSet:",
              "61: txna ApplicationArgs 1",
              "62: btoi",
              "63: txna ApplicationArgs 2",
              "66: swap",
              "67: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: dup",
              "79: dig 2",
              "80: box_put",
              "87: dup",
              "88: intc_1",
              "89: intc_2",
              "90: box_extract",
              "91: btoi",
              "94: dig 2",
              "95: intc_1",
              "96: extract_uint64",
              "103: ==",
              "104: swap",
              "105: intc_3",
              "106: intc_2",
              "107: box_extract",
              "108: btoi",
              "111: uncover 2",
              "112: intc_3",
              "113: extract_uint64",
              "120: ==",
              "121: &&",
              "122: intc_0",
              "123: &&",
              "124: assert",
              "127: bytec_2",
              "128: log",
              "129: intc_0",
              "130: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "134: boxMapGet:",
              "137: txna ApplicationArgs 1",
              "138: btoi",
              "141: itob",
              "144: bytec_0",
              "145: swap",
              "146: concat",
              "149: box_get",
              "150: assert",
              "153: bytec_3",
              "154: swap",
              "155: concat",
              "156: log",
              "157: intc_0",
              "158: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "162: boxMapExists:",
              "165: txna ApplicationArgs 1",
              "166: btoi",
              "169: itob",
              "172: bytec_0",
              "173: swap",
              "174: concat",
              "177: box_len",
              "178: bury 1",
              "181: pushbytes 0x00",
              "182: pushint 0",
              "183: uncover 2",
              "184: setbit",
              "185: bytec_3",
              "186: swap",
              "187: concat",
              "188: log",
              "189: intc_0",
              "190: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "34: boxMapTest:",
              "37: bytec_1",
              "40: box_del",
              "41: pop",
              "44: bytec_1",
              "47: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "48: box_put",
              "51: bytec_2",
              "52: log",
              "53: intc_0",
              "54: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "58: boxMapSet:",
              "61: txna ApplicationArgs 1",
              "62: btoi",
              "63: txna ApplicationArgs 2",
              "66: swap",
              "67: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: dup",
              "79: dig 2",
              "80: box_put",
              "87: dup",
              "88: intc_1",
              "89: intc_2",
              "90: box_extract",
              "91: btoi",
              "94: dig 2",
              "95: intc_1",
              "96: extract_uint64",
              "103: ==",
              "104: swap",
              "105: intc_3",
              "106: intc_2",
              "107: box_extract",
              "108: btoi",
              "111: uncover 2",
              "112: intc_3",
              "113: extract_uint64",
              "120: ==",
              "121: &&",
              "122: intc_0",
              "123: &&",
              "124: assert",
              "127: bytec_2",
              "128: log",
              "129: intc_0",
              "130: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "134: boxMapGet:",
              "137: txna ApplicationArgs 1",
              "138: btoi",
              "141: itob",
              "144: bytec_0",
              "145: swap",
              "146: concat",
              "149: box_get",
              "150: assert",
              "153: bytec_3",
              "154: swap",
              "155: concat",
              "156: log",
              "157: intc_0",
              "158: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "162: boxMapExists:",
              "165: txna ApplicationArgs 1",
              "166: btoi",
              "169: itob",
              "172: bytec_0",
              "173: swap",
              "174: concat",
              "177: box_len",
              "178: bury 1",
              "181: pushbytes 0x00",
              "182: pushint 0",
              "183: uncover 2",
              "184: setbit",
              "185: bytec_3",
              "186: swap",
              "187: concat",
              "188: log",
              "189: intc_0",
              "190: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "22: main___algots__.defaultCreate@11:",
              "25: txn OnCompletion",
              "26: !",
              "27: txn ApplicationID",
              "28: !",
              "29: &&",
              "30: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "34: boxMapTest:",
              "37: bytec_1",
              "40: box_del",
              "41: pop",
              "44: bytec_1",
              "47: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "48: box_put",
              "51: bytec_2",
              "52: log",
              "53: intc_0",
              "54: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "58: boxMapSet:",
              "61: txna ApplicationArgs 1",
              "62: btoi",
              "63: txna ApplicationArgs 2",
              "66: swap",
              "67: itob",
              "70: bytec_0",
              "71: swap",
              "72: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: dup",
              "79: dig 2",
              "80: box_put",
              "87: dup",
              "88: intc_1",
              "89: intc_2",
              "90: box_extract",
              "91: btoi",
              "94: dig 2",
              "95: intc_1",
              "96: extract_uint64",
              "103: ==",
              "104: swap",
              "105: intc_3",
              "106: intc_2",
              "107: box_extract",
              "108: btoi",
              "111: uncover 2",
              "112: intc_3",
              "113: extract_uint64",
              "120: ==",
              "121: &&",
              "122: intc_0",
              "123: &&",
              "124: assert",
              "127: bytec_2",
              "128: log",
              "129: intc_0",
              "130: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "134: boxMapGet:",
              "137: txna ApplicationArgs 1",
              "138: btoi",
              "141: itob",
              "144: bytec_0",
              "145: swap",
              "146: concat",
              "149: box_get",
              "150: assert",
              "153: bytec_3",
              "154: swap",
              "155: concat",
              "156: log",
              "157: intc_0",
              "158: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3",
              "18: txna ApplicationArgs 0",
              "19: match boxMapTest boxMapSet boxMapGet boxMapExists"
            ],
            [
              "162: boxMapExists:",
              "165: txna ApplicationArgs 1",
              "166: btoi",
              "169: itob",
              "172: bytec_0",
              "173: swap",
              "174: concat",
              "177: box_len",
              "178: bury 1",
              "181: pushbytes 0x00",
              "182: pushint 0",
              "183: uncover 2",
              "184: setbit",
              "185: bytec_3",
              "186: swap",
              "187: concat",
              "188: log",
              "189: intc_0",
              "190: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 2 8 10",
              "7: bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algots__.defaultCreate@11"
            ],
            [
              "22: main___algots__.defaultCreate@11:",
              "25: txn OnCompletion",
              "26: !",
              "27: txn ApplicationID",
              "28: !",
              "29: &&",
              "30: return"
            ]
          ]
        }
      ]
    }
  ]
}