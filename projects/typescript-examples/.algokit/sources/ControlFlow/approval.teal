#pragma version 11
#pragma typetrack false


main:
    intcblock 1 0 8 2
    bytecblock 0x151f7c75 0x0001


    txn NumAppArgs
    bz main___algots__.defaultCreate@13
    txn OnCompletion
    !
    assert
    txn ApplicationID
    assert
    pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654
    txna ApplicationArgs 0
    match isRich isEven forLoop getDay calculateBoxStorageCost loop
    err

main___algots__.defaultCreate@13:


    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return



isRich:



    txna ApplicationArgs 1
    btoi
    dup


    pushint 1000
    >
    bz isRich_else_body@3


    pushbytes "This account is rich!"

isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6:



    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0
    swap
    concat
    log
    intc_0
    return

isRich_else_body@3:


    dup
    pushint 100
    >
    bz isRich_else_body@5


    pushbytes "This account is doing well."



    b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6

isRich_else_body@5:


    pushbytes "This account is poor :("



    b isRich_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich@6



isEven:



    txna ApplicationArgs 1
    btoi


    intc_3
    %
    bnz isEven_ternary_false@3
    pushbytes "Even"

isEven_ternary_merge@4:



    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0
    swap
    concat
    log
    intc_0
    return

isEven_ternary_false@3:


    pushbytes "Odd"
    b isEven_ternary_merge@4



forLoop:
    intc_1
    pushbytes ""
    dupn 4


    pushbytes 0x0000
    dup


    intc_1

forLoop_for_header@2:


    dup
    pushint 4
    <
    bz forLoop_after_for@5


    dupn 2
    itob
    bytec_1
    swap
    concat
    extract 2 0
    dig 3
    swap
    concat
    dup
    extract 2 0
    len
    intc_2
    /
    itob
    extract 6 2
    replace2 0
    bury 3


    intc_0
    +
    bury 1
    b forLoop_for_header@2

forLoop_after_for@5:


    dig 1
    intc_1
    extract_uint16
    bury 8
    intc_1
    bury 6
    dig 2
    bury 9

forLoop_for_header@6:


    dig 5
    dig 8
    <
    bz forLoop_after_for@9
    dig 1
    extract 2 0
    dig 6
    dup
    cover 2
    intc_2
    *
    intc_2
    extract3


    bytec_1
    swap
    concat
    dig 10
    extract 2 0
    concat
    dup
    extract 2 0
    len
    intc_2
    /
    itob
    extract 6 2
    replace2 0
    bury 10
    intc_0
    +
    bury 6
    b forLoop_for_header@6

forLoop_after_for@9:


    intc_1
    bury 4


    dig 8
    intc_1
    extract_uint16
    bury 7
    intc_1
    bury 5

forLoop_for_header@10:


    dig 4
    dig 7
    <
    bz forLoop_after_for@13
    dig 8
    extract 2 0
    dig 5
    dup
    cover 2
    intc_2
    *
    extract_uint64


    dig 5
    +
    bury 5
    intc_0
    +
    bury 5
    b forLoop_for_header@10

forLoop_after_for@13:


    dig 3
    pushint 6
    ==
    assert



    bytec_0
    dig 9
    concat
    log
    intc_0
    return



getDay:



    txna ApplicationArgs 1
    btoi
    dup


    intc_0
    ==



    bz getDay_after_if_else@4


    pushbytes "Monday"

getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24:



    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0
    swap
    concat
    log
    intc_0
    return

getDay_after_if_else@4:


    dup
    intc_3
    ==



    bz getDay_after_if_else@7


    pushbytes "Tuesday"



    b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24

getDay_after_if_else@7:


    dup
    pushint 3
    ==



    bz getDay_after_if_else@10


    pushbytes "Wednesday"



    b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24

getDay_after_if_else@10:


    dup
    pushint 4
    ==



    bz getDay_after_if_else@13


    pushbytes "Thursday"



    b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24

getDay_after_if_else@13:


    dup
    pushint 5
    ==



    bz getDay_after_if_else@16


    pushbytes "Friday"



    b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24

getDay_after_if_else@16:


    dup
    pushint 6
    ==



    bz getDay_after_if_else@19


    pushbytes "Saturday"



    b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24

getDay_after_if_else@19:


    dup
    pushint 7
    ==



    bz getDay_after_if_else@22


    pushbytes "Sunday"



    b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24

getDay_after_if_else@22:


    pushbytes "Invalid day"



    b getDay_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay@24



calculateBoxStorageCost:



    txna ApplicationArgs 1
    extract 2 0
    dup
    txna ApplicationArgs 2
    extract 2 0


    len
    swap


    pushbytes "xs"
    ==




    bz calculateBoxStorageCost_after_if_else@4


    intc_2

calculateBoxStorageCost_block@18:


    dig 1
    +
    pushint 400
    *
    pushint 2500
    +

calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19:



    itob
    bytec_0
    swap
    concat
    log
    intc_0
    return

calculateBoxStorageCost_after_if_else@4:


    dig 1
    pushbytes "sm"
    ==




    bz calculateBoxStorageCost_after_if_else@7


    pushint 64


    b calculateBoxStorageCost_block@18

calculateBoxStorageCost_after_if_else@7:


    dig 1
    pushbytes "md"
    ==




    bz calculateBoxStorageCost_after_if_else@10


    pushint 256


    b calculateBoxStorageCost_block@18

calculateBoxStorageCost_after_if_else@10:


    dig 1
    pushbytes "lg"
    ==




    bz calculateBoxStorageCost_after_if_else@13


    pushint 1024


    b calculateBoxStorageCost_block@18

calculateBoxStorageCost_after_if_else@13:


    dig 1
    pushbytes "max"
    ==




    bz calculateBoxStorageCost_after_if_else@16


    pushint 32000


    b calculateBoxStorageCost_block@18

calculateBoxStorageCost_after_if_else@16:


    intc_1



    b calculateBoxStorageCost_after_inlined_contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost@19



loop:


    pushint 10


    intc_1

loop_while_top@2:















    dig 1
    bz loop_block@10


    dig 1
    pushint 5
    >
    bz loop_after_if_else@5


    dig 1
    intc_0
    -
    bury 2


    dup
    intc_0
    +
    bury 1


    b loop_while_top@2

loop_after_if_else@5:


    dig 1
    intc_3
    -
    dup
    bury 3


    dig 1
    intc_0
    +
    bury 2


    intc_0
    ==
    bz loop_while_top@2

loop_block@10:



    dup
    itob
    bytec_0
    swap
    concat
    log
    intc_0
    return
