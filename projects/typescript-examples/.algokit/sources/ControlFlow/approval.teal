#pragma version 10
#pragma typetrack false


main:
    intcblock 1 0 8 2
    bytecblock 0x151f7c75 0x0000 0x0001


    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654
    txna ApplicationArgs 0
    match main_isRich_route@3 main_isEven_route@4 main_forLoop_route@5 main_getDay_route@6 main_calculateBoxStorageCost_route@7 main_loop_route@8

main_after_if_else@15:
    err

main_loop_route@8:


    txn OnCompletion
    !
    assert
    txn ApplicationID
    assert
    callsub loop
    itob
    bytec_0
    swap
    concat
    log
    intc_0
    return

main_calculateBoxStorageCost_route@7:


    txn OnCompletion
    !
    assert
    txn ApplicationID
    assert


    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0


    callsub calculateBoxStorageCost
    itob
    bytec_0
    swap
    concat
    log
    intc_0
    return

main_getDay_route@6:


    txn OnCompletion
    !
    assert
    txn ApplicationID
    assert


    txna ApplicationArgs 1
    btoi


    callsub getDay
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0
    swap
    concat
    log
    intc_0
    return

main_forLoop_route@5:


    txn OnCompletion
    !
    assert
    txn ApplicationID
    assert
    callsub forLoop
    bytec_0
    swap
    concat
    log
    intc_0
    return

main_isEven_route@4:


    txn OnCompletion
    !
    assert
    txn ApplicationID
    assert


    txna ApplicationArgs 1
    btoi


    callsub isEven
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0
    swap
    concat
    log
    intc_0
    return

main_isRich_route@3:


    txn OnCompletion
    !
    assert
    txn ApplicationID
    assert


    txna ApplicationArgs 1
    btoi


    callsub isRich
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0
    swap
    concat
    log
    intc_0
    return

main_bare_routing@11:


    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert
    intc_0
    return



isRich:



    proto 1 1


    frame_dig -1
    pushint 1000
    >
    bz isRich_else_body@2


    pushbytes "This account is rich!"
    retsub

isRich_else_body@2:


    frame_dig -1
    pushint 100
    >
    bz isRich_else_body@4


    pushbytes "This account is doing well."
    retsub

isRich_else_body@4:


    pushbytes "This account is poor :("
    retsub



isEven:



    proto 1 1


    frame_dig -1
    intc_3
    %
    bnz isEven_ternary_false@2
    pushbytes "Even"
    retsub

isEven_ternary_false@2:


    pushbytes "Odd"
    retsub



forLoop:



    proto 0 1
    intc_1
    pushbytes ""
    dupn 4


    bytec_1


    intc_1


    bytec_1

forLoop_for_header@1:


    frame_dig 7
    pushint 4
    <
    bz forLoop_after_for@4


    frame_dig 7
    dup
    itob
    bytec_2
    swap
    concat
    extract 2 0
    frame_dig 8
    swap
    concat
    dup
    extract 2 0
    len
    intc_2
    /
    itob
    extract 6 2
    replace2 0
    frame_bury 8


    intc_0
    +
    frame_bury 7
    b forLoop_for_header@1

forLoop_after_for@4:


    frame_dig 8
    intc_1
    extract_uint16
    frame_bury 1
    intc_1
    frame_bury 3
    frame_dig 6
    frame_bury 0

forLoop_for_header@5:


    frame_dig 3
    frame_dig 1
    <
    bz forLoop_after_for@8
    frame_dig 8
    extract 2 0
    frame_dig 3
    dup
    cover 2
    intc_2
    *
    intc_2
    extract3


    bytec_2
    swap
    concat
    frame_dig 0
    extract 2 0
    concat
    dup
    extract 2 0
    len
    intc_2
    /
    itob
    extract 6 2
    replace2 0
    frame_bury 0
    intc_0
    +
    frame_bury 3
    b forLoop_for_header@5

forLoop_after_for@8:


    intc_1
    frame_bury 5


    frame_dig 0
    intc_1
    extract_uint16
    frame_bury 2
    intc_1
    frame_bury 4

forLoop_for_header@9:


    frame_dig 4
    frame_dig 2
    <
    bz forLoop_after_for@12
    frame_dig 0
    extract 2 0
    frame_dig 4
    dup
    cover 2
    intc_2
    *
    extract_uint64


    frame_dig 5
    +
    frame_bury 5
    intc_0
    +
    frame_bury 4
    b forLoop_for_header@9

forLoop_after_for@12:


    frame_dig 5
    pushint 6
    ==
    assert


    retsub



getDay:



    proto 1 1


    frame_dig -1
    intc_0
    ==



    bz getDay_after_if_else@3


    pushbytes "Monday"
    retsub

getDay_after_if_else@3:


    frame_dig -1
    intc_3
    ==



    bz getDay_after_if_else@6


    pushbytes "Tuesday"
    retsub

getDay_after_if_else@6:


    frame_dig -1
    pushint 3
    ==



    bz getDay_after_if_else@9


    pushbytes "Wednesday"
    retsub

getDay_after_if_else@9:


    frame_dig -1
    pushint 4
    ==



    bz getDay_after_if_else@12


    pushbytes "Thursday"
    retsub

getDay_after_if_else@12:


    frame_dig -1
    pushint 5
    ==



    bz getDay_after_if_else@15


    pushbytes "Friday"
    retsub

getDay_after_if_else@15:


    frame_dig -1
    pushint 6
    ==



    bz getDay_after_if_else@18


    pushbytes "Saturday"
    retsub

getDay_after_if_else@18:


    frame_dig -1
    pushint 7
    ==



    bz getDay_after_if_else@21


    pushbytes "Sunday"
    retsub

getDay_after_if_else@21:


    pushbytes "Invalid day"
    retsub



calculateBoxStorageCost:



    proto 2 1


    frame_dig -1
    len


    frame_dig -2
    pushbytes "xs"
    ==




    bz calculateBoxStorageCost_after_if_else@3


    intc_2

calculateBoxStorageCost_block@17:


    frame_dig 0
    +
    pushint 400
    *
    pushint 2500
    +


    swap
    retsub

calculateBoxStorageCost_after_if_else@3:


    frame_dig -2
    pushbytes "sm"
    ==




    bz calculateBoxStorageCost_after_if_else@6


    pushint 64


    b calculateBoxStorageCost_block@17

calculateBoxStorageCost_after_if_else@6:


    frame_dig -2
    pushbytes "md"
    ==




    bz calculateBoxStorageCost_after_if_else@9


    pushint 256


    b calculateBoxStorageCost_block@17

calculateBoxStorageCost_after_if_else@9:


    frame_dig -2
    pushbytes "lg"
    ==




    bz calculateBoxStorageCost_after_if_else@12


    pushint 1024


    b calculateBoxStorageCost_block@17

calculateBoxStorageCost_after_if_else@12:


    frame_dig -2
    pushbytes "max"
    ==




    bz calculateBoxStorageCost_after_if_else@15


    pushint 32000


    b calculateBoxStorageCost_block@17

calculateBoxStorageCost_after_if_else@15:


    intc_1
    swap
    retsub



loop:



    proto 0 1


    pushint 10


    intc_1

loop_while_top@1:















    frame_dig 0
    bz loop_block@9


    frame_dig 0
    pushint 5
    >
    bz loop_after_if_else@4


    frame_dig 0
    intc_0
    -
    frame_bury 0


    frame_dig 1
    intc_0
    +
    frame_bury 1


    b loop_while_top@1

loop_after_if_else@4:


    frame_dig 0
    intc_3
    -
    dup
    frame_bury 0


    frame_dig 1
    intc_0
    +
    frame_bury 1


    intc_0
    ==
    bz loop_while_top@1

loop_block@9:


    frame_dig 1
    frame_bury 0
    retsub
