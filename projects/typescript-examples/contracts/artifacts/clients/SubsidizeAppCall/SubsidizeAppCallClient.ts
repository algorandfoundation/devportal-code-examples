/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"SubsidizeAppCall","structs":{},"methods":[{"name":"subsidize","args":[],"returns":{"type":"bool","desc":"True if the transaction should be approved"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"This Contract Account will subsidize the fees for any AppCall transaction directed to an application.","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"A contract that subsidizes app call fees","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[23],"errorMessage":"OnCompletion is not NoOp"},{"pc":[56],"errorMessage":"can only call when creating"},{"pc":[26],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAQAAACYBADEbQQArgARV4yOqNhoAjgEAAiNDMRkURDEYRIgAHYABACNPAlSABBUffHVMULAiQzEZQP/dMRgURCJDigABMRYiCTEQIhJBAFMxBzEAEkEASzEIQABGMSAyAxJBAD4xCTIDEkEANjEBgQIyAAsSQQArMQQkDkEAJDIRKBJBAB2LADgQgQYSQQATiwA4GCUSQQAKiwA4AUAAAyJMiSNC//o=","clear":"CoEBQw=="},"events":[],"templateVariables":{"EXPIRATION_ROUND":{"type":"AVMUint64"},"KNOWN_APP":{"type":"AVMUint64"},"TARGET_NETWORK_GENESIS":{"type":"AVMBytes"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  EXPIRATION_ROUND: bigint,
  KNOWN_APP: bigint,
  TARGET_NETWORK_GENESIS: Uint8Array,
}

/**
 * The argument types for the SubsidizeAppCall contract
 */
export type SubsidizeAppCallArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'subsidize()bool': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'subsidize()bool': []
  }
}

/**
 * The return type for each method
 */
export type SubsidizeAppCallReturns = {
  'subsidize()bool': boolean
}

/**
 * Defines the types of available calls and state of the SubsidizeAppCall smart contract.
 */
export type SubsidizeAppCallTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'subsidize()bool' | 'subsidize', {
      argsObj: SubsidizeAppCallArgs['obj']['subsidize()bool']
      argsTuple: SubsidizeAppCallArgs['tuple']['subsidize()bool']
      /**
       * True if the transaction should be approved
       */
      returns: SubsidizeAppCallReturns['subsidize()bool']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type SubsidizeAppCallSignatures = keyof SubsidizeAppCallTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SubsidizeAppCallNonVoidMethodSignatures = keyof SubsidizeAppCallTypes['methods'] extends infer T ? T extends keyof SubsidizeAppCallTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the SubsidizeAppCall smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SubsidizeAppCallSignatures> = SubsidizeAppCallTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the SubsidizeAppCall smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SubsidizeAppCallSignatures> = SubsidizeAppCallTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type SubsidizeAppCallCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type SubsidizeAppCallDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SubsidizeAppCallCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the SubsidizeAppCall smart contract
 */
export abstract class SubsidizeAppCallParamsFactory {
  /**
   * Constructs a no op call for the subsidize()bool ABI method
   *
   * This Contract Account will subsidize the fees for any AppCall transaction directed to an application.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static subsidize(params: CallParams<SubsidizeAppCallArgs['obj']['subsidize()bool'] | SubsidizeAppCallArgs['tuple']['subsidize()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'subsidize()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the SubsidizeAppCall smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SubsidizeAppCallFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SubsidizeAppCallFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SubsidizeAppCallClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SubsidizeAppCallClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the SubsidizeAppCall smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SubsidizeAppCallDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new SubsidizeAppCallClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SubsidizeAppCall smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SubsidizeAppCall smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the SubsidizeAppCall smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new SubsidizeAppCallClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the SubsidizeAppCall smart contract
 */
export class SubsidizeAppCallClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SubsidizeAppCallClient`
   *
   * @param appClient An `AppClient` instance which has been created with the SubsidizeAppCall app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SubsidizeAppCallClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SubsidizeAppCallNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `SubsidizeAppCallClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SubsidizeAppCallClient> {
    return new SubsidizeAppCallClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SubsidizeAppCallClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SubsidizeAppCallClient> {
    return new SubsidizeAppCallClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the SubsidizeAppCall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the SubsidizeAppCall smart contract using the `subsidize()bool` ABI method.
     *
     * This Contract Account will subsidize the fees for any AppCall transaction directed to an application.
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if the transaction should be approved
     */
    subsidize: (params: CallParams<SubsidizeAppCallArgs['obj']['subsidize()bool'] | SubsidizeAppCallArgs['tuple']['subsidize()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(SubsidizeAppCallParamsFactory.subsidize(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the SubsidizeAppCall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the SubsidizeAppCall smart contract using the `subsidize()bool` ABI method.
     *
     * This Contract Account will subsidize the fees for any AppCall transaction directed to an application.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if the transaction should be approved
     */
    subsidize: (params: CallParams<SubsidizeAppCallArgs['obj']['subsidize()bool'] | SubsidizeAppCallArgs['tuple']['subsidize()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(SubsidizeAppCallParamsFactory.subsidize(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the SubsidizeAppCall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the SubsidizeAppCall smart contract using the `subsidize()bool` ABI method.
     *
     * This Contract Account will subsidize the fees for any AppCall transaction directed to an application.
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if the transaction should be approved
     */
    subsidize: async (params: CallParams<SubsidizeAppCallArgs['obj']['subsidize()bool'] | SubsidizeAppCallArgs['tuple']['subsidize()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(SubsidizeAppCallParamsFactory.subsidize(params))
      return {...result, return: result.return as unknown as (undefined | SubsidizeAppCallReturns['subsidize()bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SubsidizeAppCallClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current SubsidizeAppCall app
   */
  state = {
  }

  public newGroup(): SubsidizeAppCallComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a subsidize()bool method call against the SubsidizeAppCall contract
       */
      subsidize(params: CallParams<SubsidizeAppCallArgs['obj']['subsidize()bool'] | SubsidizeAppCallArgs['tuple']['subsidize()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.subsidize(params)))
        resultMappers.push((v) => client.decodeReturnValue('subsidize()bool', v))
        return this
      },
      /**
       * Add a clear state call to the SubsidizeAppCall contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SubsidizeAppCallComposer
  }
}
export type SubsidizeAppCallComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the subsidize()bool ABI method.
   *
   * This Contract Account will subsidize the fees for any AppCall transaction directed to an application.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  subsidize(params?: CallParams<SubsidizeAppCallArgs['obj']['subsidize()bool'] | SubsidizeAppCallArgs['tuple']['subsidize()bool']>): SubsidizeAppCallComposer<[...TReturns, SubsidizeAppCallReturns['subsidize()bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the SubsidizeAppCall smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SubsidizeAppCallComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SubsidizeAppCallComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SubsidizeAppCallComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SubsidizeAppCallComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SubsidizeAppCallComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SubsidizeAppCallComposerResults<TReturns>>
}
export type SubsidizeAppCallComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

