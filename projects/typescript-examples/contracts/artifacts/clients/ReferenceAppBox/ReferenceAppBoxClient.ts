/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"ReferenceAppBox","structs":{},"methods":[{"name":"incrementBoxCounter","args":[{"type":"pay","name":"payMbr","desc":"Payment transaction covering the box MBR"}],"returns":{"type":"uint64","desc":"The new counter value"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Increments the counter for the transaction sender\nRequires a payment transaction to cover the MBR for the box","events":[],"recommendations":{}},{"name":"getBoxCounter","args":[],"returns":{"type":"uint64","desc":"The current counter value or 0 if not set"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Gets the current counter value for the transaction sender","events":[],"recommendations":{}},{"name":"getBoxCounterForAccount","args":[{"type":"address","name":"account","desc":"The account to check"}],"returns":{"type":"uint64","desc":"The current counter value or 0 if not set"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Gets the current counter value for any account","events":[],"recommendations":{}},{"name":"getBoxMbr","args":[],"returns":{"type":"uint64","desc":"The MBR cost in microAlgos"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the MBR cost for creating a box","events":[],"recommendations":{}},{"name":"getBoxConfiguration","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","desc":"A tuple containing [keyLength, valueLength, boxSize, boxMbr]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns all the box size configuration values","events":[],"recommendations":{}},{"name":"updateBoxConfiguration","args":[{"type":"uint64","name":"newKeyLength","desc":"The new key length"},{"type":"uint64","name":"newValueLength","desc":"The new value length"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Updates the box size configuration values","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"A contract that uses box storage to maintain a counter for each account\nEach account needs to pay for the Minimum Balance Requirement (MBR) for their box\nConstants for box storage are stored in global state","networks":{},"state":{"schema":{"global":{"ints":4,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"keyLength":{"keyType":"AVMString","valueType":"AVMUint64","key":"a2V5TGVuZ3Ro"},"valueLength":{"keyType":"AVMString","valueType":"AVMUint64","key":"dmFsdWVMZW5ndGg="},"boxSize":{"keyType":"AVMString","valueType":"AVMUint64","key":"Ym94U2l6ZQ=="},"boxMbr":{"keyType":"AVMString","valueType":"AVMUint64","key":"Ym94TWJy"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"accountBoxCounter":{"keyType":"address","valueType":"uint64","prefix":"Y291bnRlcg=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[151,171,187,204,224,241],"errorMessage":"OnCompletion is not NoOp"},{"pc":[296],"errorMessage":"Payment must be to the contract"},{"pc":[288],"errorMessage":"Payment must cover the box MBR"},{"pc":[273],"errorMessage":"can only call when creating"},{"pc":[154,174,190,207,227,244],"errorMessage":"can only call when not creating"},{"pc":[76,286,377,382,387,392,396,427],"errorMessage":"check GlobalState exists"},{"pc":[254],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAQAIkAMmBglrZXlMZW5ndGgGYm94TWJyBBUffHUHY291bnRlcgt2YWx1ZUxlbmd0aAdib3hTaXplMRhAABwogTNnJwQkZyMoZUQkCCcFSwFnJQuBxBMIKUxnMRtBAKeCBgQECiNeBFQloUUE6STl4AS7tSOeBBrv5/UEDjhRYjYaAI4GAFsASgA2ACUAFQABADEZFEQxGEQ2GgEXNhoCF4gA9iJDMRkURDEYRIgAySpMULAiQzEZFEQxGESIALQWKkxQsCJDMRkURDEYRDYaAYgAixYqTFCwIkMxGRREMRhEiABlFipMULAiQzEZFEQxGEQxFiIJSTgQIhJEiAASFipMULAiQzEZQP+FMRgURCJDigEBi/84CCMpZUQSRIv/OAcyChJEKzEAUL5MF0xBAA6LACIIKzEAUEsBFr9MiSsxAFAiFr8iTImKAAErMQBQvkwXTEEABIsATIkjTImKAQEri/9QvkwXTEEABIsATIkjTIkjKWVEiSMoZUQjJwRlRCMnBWVEIyllRE8DFk8DFlBPAhZQTBZQiYoCACiL/mcnBIv/ZyMoZUSL/wgnBUsBZyULgcQTCClMZ4k=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ReferenceAppBox contract
 */
export type ReferenceAppBoxArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'incrementBoxCounter(pay)uint64': {
      /**
       * Payment transaction covering the box MBR
       */
      payMbr: AppMethodCallTransactionArgument
    }
    'getBoxCounter()uint64': Record<string, never>
    'getBoxCounterForAccount(address)uint64': {
      /**
       * The account to check
       */
      account: string
    }
    'getBoxMbr()uint64': Record<string, never>
    'getBoxConfiguration()(uint64,uint64,uint64,uint64)': Record<string, never>
    'updateBoxConfiguration(uint64,uint64)void': {
      /**
       * The new key length
       */
      newKeyLength: bigint | number
      /**
       * The new value length
       */
      newValueLength: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'incrementBoxCounter(pay)uint64': [payMbr: AppMethodCallTransactionArgument]
    'getBoxCounter()uint64': []
    'getBoxCounterForAccount(address)uint64': [account: string]
    'getBoxMbr()uint64': []
    'getBoxConfiguration()(uint64,uint64,uint64,uint64)': []
    'updateBoxConfiguration(uint64,uint64)void': [newKeyLength: bigint | number, newValueLength: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type ReferenceAppBoxReturns = {
  'incrementBoxCounter(pay)uint64': bigint
  'getBoxCounter()uint64': bigint
  'getBoxCounterForAccount(address)uint64': bigint
  'getBoxMbr()uint64': bigint
  'getBoxConfiguration()(uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint]
  'updateBoxConfiguration(uint64,uint64)void': void
}

/**
 * Defines the types of available calls and state of the ReferenceAppBox smart contract.
 */
export type ReferenceAppBoxTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'incrementBoxCounter(pay)uint64' | 'incrementBoxCounter', {
      argsObj: ReferenceAppBoxArgs['obj']['incrementBoxCounter(pay)uint64']
      argsTuple: ReferenceAppBoxArgs['tuple']['incrementBoxCounter(pay)uint64']
      /**
       * The new counter value
       */
      returns: ReferenceAppBoxReturns['incrementBoxCounter(pay)uint64']
    }>
    & Record<'getBoxCounter()uint64' | 'getBoxCounter', {
      argsObj: ReferenceAppBoxArgs['obj']['getBoxCounter()uint64']
      argsTuple: ReferenceAppBoxArgs['tuple']['getBoxCounter()uint64']
      /**
       * The current counter value or 0 if not set
       */
      returns: ReferenceAppBoxReturns['getBoxCounter()uint64']
    }>
    & Record<'getBoxCounterForAccount(address)uint64' | 'getBoxCounterForAccount', {
      argsObj: ReferenceAppBoxArgs['obj']['getBoxCounterForAccount(address)uint64']
      argsTuple: ReferenceAppBoxArgs['tuple']['getBoxCounterForAccount(address)uint64']
      /**
       * The current counter value or 0 if not set
       */
      returns: ReferenceAppBoxReturns['getBoxCounterForAccount(address)uint64']
    }>
    & Record<'getBoxMbr()uint64' | 'getBoxMbr', {
      argsObj: ReferenceAppBoxArgs['obj']['getBoxMbr()uint64']
      argsTuple: ReferenceAppBoxArgs['tuple']['getBoxMbr()uint64']
      /**
       * The MBR cost in microAlgos
       */
      returns: ReferenceAppBoxReturns['getBoxMbr()uint64']
    }>
    & Record<'getBoxConfiguration()(uint64,uint64,uint64,uint64)' | 'getBoxConfiguration', {
      argsObj: ReferenceAppBoxArgs['obj']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']
      argsTuple: ReferenceAppBoxArgs['tuple']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']
      /**
       * A tuple containing [keyLength, valueLength, boxSize, boxMbr]
       */
      returns: ReferenceAppBoxReturns['getBoxConfiguration()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'updateBoxConfiguration(uint64,uint64)void' | 'updateBoxConfiguration', {
      argsObj: ReferenceAppBoxArgs['obj']['updateBoxConfiguration(uint64,uint64)void']
      argsTuple: ReferenceAppBoxArgs['tuple']['updateBoxConfiguration(uint64,uint64)void']
      returns: ReferenceAppBoxReturns['updateBoxConfiguration(uint64,uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        keyLength: bigint
        valueLength: bigint
        boxSize: bigint
        boxMbr: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        accountBoxCounter: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ReferenceAppBoxSignatures = keyof ReferenceAppBoxTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ReferenceAppBoxNonVoidMethodSignatures = keyof ReferenceAppBoxTypes['methods'] extends infer T ? T extends keyof ReferenceAppBoxTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ReferenceAppBox smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ReferenceAppBoxSignatures> = ReferenceAppBoxTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ReferenceAppBox smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ReferenceAppBoxSignatures> = ReferenceAppBoxTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ReferenceAppBoxTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = ReferenceAppBoxTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ReferenceAppBoxCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ReferenceAppBoxDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ReferenceAppBoxCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ReferenceAppBox smart contract
 */
export abstract class ReferenceAppBoxParamsFactory {
  /**
   * Constructs a no op call for the incrementBoxCounter(pay)uint64 ABI method
   *
  * Increments the counter for the transaction sender
  Requires a payment transaction to cover the MBR for the box

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static incrementBoxCounter(params: CallParams<ReferenceAppBoxArgs['obj']['incrementBoxCounter(pay)uint64'] | ReferenceAppBoxArgs['tuple']['incrementBoxCounter(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'incrementBoxCounter(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payMbr],
    }
  }
  /**
   * Constructs a no op call for the getBoxCounter()uint64 ABI method
   *
   * Gets the current counter value for the transaction sender
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxCounter(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounter()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounter()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxCounter()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getBoxCounterForAccount(address)uint64 ABI method
   *
   * Gets the current counter value for any account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxCounterForAccount(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounterForAccount(address)uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounterForAccount(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxCounterForAccount(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the getBoxMbr()uint64 ABI method
   *
   * Returns the MBR cost for creating a box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxMbr(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxMbr()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxMbr()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxMbr()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getBoxConfiguration()(uint64,uint64,uint64,uint64) ABI method
   *
   * Returns all the box size configuration values
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxConfiguration(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxConfiguration()(uint64,uint64,uint64,uint64)'] | ReferenceAppBoxArgs['tuple']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxConfiguration()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the updateBoxConfiguration(uint64,uint64)void ABI method
   *
   * Updates the box size configuration values
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateBoxConfiguration(params: CallParams<ReferenceAppBoxArgs['obj']['updateBoxConfiguration(uint64,uint64)void'] | ReferenceAppBoxArgs['tuple']['updateBoxConfiguration(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateBoxConfiguration(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newKeyLength, params.args.newValueLength],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ReferenceAppBox smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ReferenceAppBoxFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ReferenceAppBoxFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ReferenceAppBoxClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ReferenceAppBoxClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ReferenceAppBox smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ReferenceAppBoxDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ReferenceAppBoxClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ReferenceAppBox smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ReferenceAppBox smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ReferenceAppBox smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ReferenceAppBoxClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ReferenceAppBox smart contract
 */
export class ReferenceAppBoxClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ReferenceAppBoxClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ReferenceAppBox app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ReferenceAppBoxClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ReferenceAppBoxNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `ReferenceAppBoxClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ReferenceAppBoxClient> {
    return new ReferenceAppBoxClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ReferenceAppBoxClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ReferenceAppBoxClient> {
    return new ReferenceAppBoxClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ReferenceAppBox smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `incrementBoxCounter(pay)uint64` ABI method.
     *
    * Increments the counter for the transaction sender
    Requires a payment transaction to cover the MBR for the box

     *
     * @param params The params for the smart contract call
     * @returns The call params: The new counter value
     */
    incrementBoxCounter: (params: CallParams<ReferenceAppBoxArgs['obj']['incrementBoxCounter(pay)uint64'] | ReferenceAppBoxArgs['tuple']['incrementBoxCounter(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ReferenceAppBoxParamsFactory.incrementBoxCounter(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxCounter()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the current counter value for the transaction sender
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current counter value or 0 if not set
     */
    getBoxCounter: (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounter()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ReferenceAppBoxParamsFactory.getBoxCounter(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxCounterForAccount(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the current counter value for any account
     *
     * @param params The params for the smart contract call
     * @returns The call params: The current counter value or 0 if not set
     */
    getBoxCounterForAccount: (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounterForAccount(address)uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounterForAccount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ReferenceAppBoxParamsFactory.getBoxCounterForAccount(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxMbr()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the MBR cost for creating a box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The MBR cost in microAlgos
     */
    getBoxMbr: (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxMbr()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxMbr()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ReferenceAppBoxParamsFactory.getBoxMbr(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxConfiguration()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns all the box size configuration values
     *
     * @param params The params for the smart contract call
     * @returns The call params: A tuple containing [keyLength, valueLength, boxSize, boxMbr]
     */
    getBoxConfiguration: (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxConfiguration()(uint64,uint64,uint64,uint64)'] | ReferenceAppBoxArgs['tuple']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ReferenceAppBoxParamsFactory.getBoxConfiguration(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `updateBoxConfiguration(uint64,uint64)void` ABI method.
     *
     * Updates the box size configuration values
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateBoxConfiguration: (params: CallParams<ReferenceAppBoxArgs['obj']['updateBoxConfiguration(uint64,uint64)void'] | ReferenceAppBoxArgs['tuple']['updateBoxConfiguration(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ReferenceAppBoxParamsFactory.updateBoxConfiguration(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ReferenceAppBox smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `incrementBoxCounter(pay)uint64` ABI method.
     *
    * Increments the counter for the transaction sender
    Requires a payment transaction to cover the MBR for the box

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The new counter value
     */
    incrementBoxCounter: (params: CallParams<ReferenceAppBoxArgs['obj']['incrementBoxCounter(pay)uint64'] | ReferenceAppBoxArgs['tuple']['incrementBoxCounter(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ReferenceAppBoxParamsFactory.incrementBoxCounter(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxCounter()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the current counter value for the transaction sender
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current counter value or 0 if not set
     */
    getBoxCounter: (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounter()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ReferenceAppBoxParamsFactory.getBoxCounter(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxCounterForAccount(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the current counter value for any account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The current counter value or 0 if not set
     */
    getBoxCounterForAccount: (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounterForAccount(address)uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounterForAccount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ReferenceAppBoxParamsFactory.getBoxCounterForAccount(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxMbr()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the MBR cost for creating a box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The MBR cost in microAlgos
     */
    getBoxMbr: (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxMbr()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxMbr()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ReferenceAppBoxParamsFactory.getBoxMbr(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxConfiguration()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns all the box size configuration values
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: A tuple containing [keyLength, valueLength, boxSize, boxMbr]
     */
    getBoxConfiguration: (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxConfiguration()(uint64,uint64,uint64,uint64)'] | ReferenceAppBoxArgs['tuple']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ReferenceAppBoxParamsFactory.getBoxConfiguration(params))
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `updateBoxConfiguration(uint64,uint64)void` ABI method.
     *
     * Updates the box size configuration values
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateBoxConfiguration: (params: CallParams<ReferenceAppBoxArgs['obj']['updateBoxConfiguration(uint64,uint64)void'] | ReferenceAppBoxArgs['tuple']['updateBoxConfiguration(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ReferenceAppBoxParamsFactory.updateBoxConfiguration(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ReferenceAppBox smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `incrementBoxCounter(pay)uint64` ABI method.
     *
    * Increments the counter for the transaction sender
    Requires a payment transaction to cover the MBR for the box

     *
     * @param params The params for the smart contract call
     * @returns The call result: The new counter value
     */
    incrementBoxCounter: async (params: CallParams<ReferenceAppBoxArgs['obj']['incrementBoxCounter(pay)uint64'] | ReferenceAppBoxArgs['tuple']['incrementBoxCounter(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.incrementBoxCounter(params))
      return {...result, return: result.return as unknown as (undefined | ReferenceAppBoxReturns['incrementBoxCounter(pay)uint64'])}
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxCounter()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the current counter value for the transaction sender
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current counter value or 0 if not set
     */
    getBoxCounter: async (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounter()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounter()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.getBoxCounter(params))
      return {...result, return: result.return as unknown as (undefined | ReferenceAppBoxReturns['getBoxCounter()uint64'])}
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxCounterForAccount(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the current counter value for any account
     *
     * @param params The params for the smart contract call
     * @returns The call result: The current counter value or 0 if not set
     */
    getBoxCounterForAccount: async (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounterForAccount(address)uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounterForAccount(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.getBoxCounterForAccount(params))
      return {...result, return: result.return as unknown as (undefined | ReferenceAppBoxReturns['getBoxCounterForAccount(address)uint64'])}
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxMbr()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the MBR cost for creating a box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The MBR cost in microAlgos
     */
    getBoxMbr: async (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxMbr()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxMbr()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.getBoxMbr(params))
      return {...result, return: result.return as unknown as (undefined | ReferenceAppBoxReturns['getBoxMbr()uint64'])}
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `getBoxConfiguration()(uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns all the box size configuration values
     *
     * @param params The params for the smart contract call
     * @returns The call result: A tuple containing [keyLength, valueLength, boxSize, boxMbr]
     */
    getBoxConfiguration: async (params: CallParams<ReferenceAppBoxArgs['obj']['getBoxConfiguration()(uint64,uint64,uint64,uint64)'] | ReferenceAppBoxArgs['tuple']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.getBoxConfiguration(params))
      return {...result, return: result.return as unknown as (undefined | ReferenceAppBoxReturns['getBoxConfiguration()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ReferenceAppBox smart contract using the `updateBoxConfiguration(uint64,uint64)void` ABI method.
     *
     * Updates the box size configuration values
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateBoxConfiguration: async (params: CallParams<ReferenceAppBoxArgs['obj']['updateBoxConfiguration(uint64,uint64)void'] | ReferenceAppBoxArgs['tuple']['updateBoxConfiguration(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.updateBoxConfiguration(params))
      return {...result, return: result.return as unknown as (undefined | ReferenceAppBoxReturns['updateBoxConfiguration(uint64,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ReferenceAppBoxClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the ReferenceAppBox smart contract using the `getBoxCounter()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Gets the current counter value for the transaction sender
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current counter value or 0 if not set
   */
  async getBoxCounter(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounter()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounter()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.getBoxCounter(params))
    return result.return as unknown as ReferenceAppBoxReturns['getBoxCounter()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ReferenceAppBox smart contract using the `getBoxCounterForAccount(address)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Gets the current counter value for any account
   *
   * @param params The params for the smart contract call
   * @returns The call result: The current counter value or 0 if not set
   */
  async getBoxCounterForAccount(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounterForAccount(address)uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounterForAccount(address)uint64']>) {
    const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.getBoxCounterForAccount(params))
    return result.return as unknown as ReferenceAppBoxReturns['getBoxCounterForAccount(address)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ReferenceAppBox smart contract using the `getBoxMbr()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the MBR cost for creating a box
   *
   * @param params The params for the smart contract call
   * @returns The call result: The MBR cost in microAlgos
   */
  async getBoxMbr(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxMbr()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxMbr()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.getBoxMbr(params))
    return result.return as unknown as ReferenceAppBoxReturns['getBoxMbr()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ReferenceAppBox smart contract using the `getBoxConfiguration()(uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns all the box size configuration values
   *
   * @param params The params for the smart contract call
   * @returns The call result: A tuple containing [keyLength, valueLength, boxSize, boxMbr]
   */
  async getBoxConfiguration(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxConfiguration()(uint64,uint64,uint64,uint64)'] | ReferenceAppBoxArgs['tuple']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(ReferenceAppBoxParamsFactory.getBoxConfiguration(params))
    return result.return as unknown as ReferenceAppBoxReturns['getBoxConfiguration()(uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current ReferenceAppBox app
   */
  state = {
    /**
     * Methods to access global state for the current ReferenceAppBox app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          keyLength: result.keyLength,
          valueLength: result.valueLength,
          boxSize: result.boxSize,
          boxMbr: result.boxMbr,
        }
      },
      /**
       * Get the current value of the keyLength key in global state
       */
      keyLength: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("keyLength")) as bigint | undefined },
      /**
       * Get the current value of the valueLength key in global state
       */
      valueLength: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("valueLength")) as bigint | undefined },
      /**
       * Get the current value of the boxSize key in global state
       */
      boxSize: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("boxSize")) as bigint | undefined },
      /**
       * Get the current value of the boxMbr key in global state
       */
      boxMbr: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("boxMbr")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ReferenceAppBox app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the accountBoxCounter map in box state
       */
      accountBoxCounter: {
        /**
         * Get all current values of the accountBoxCounter map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("accountBoxCounter")) as Map<string, bigint> },
        /**
         * Get a current value of the accountBoxCounter map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("accountBoxCounter", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): ReferenceAppBoxComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a incrementBoxCounter(pay)uint64 method call against the ReferenceAppBox contract
       */
      incrementBoxCounter(params: CallParams<ReferenceAppBoxArgs['obj']['incrementBoxCounter(pay)uint64'] | ReferenceAppBoxArgs['tuple']['incrementBoxCounter(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.incrementBoxCounter(params)))
        resultMappers.push((v) => client.decodeReturnValue('incrementBoxCounter(pay)uint64', v))
        return this
      },
      /**
       * Add a getBoxCounter()uint64 method call against the ReferenceAppBox contract
       */
      getBoxCounter(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounter()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxCounter(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxCounter()uint64', v))
        return this
      },
      /**
       * Add a getBoxCounterForAccount(address)uint64 method call against the ReferenceAppBox contract
       */
      getBoxCounterForAccount(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounterForAccount(address)uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounterForAccount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxCounterForAccount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxCounterForAccount(address)uint64', v))
        return this
      },
      /**
       * Add a getBoxMbr()uint64 method call against the ReferenceAppBox contract
       */
      getBoxMbr(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxMbr()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxMbr()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxMbr(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxMbr()uint64', v))
        return this
      },
      /**
       * Add a getBoxConfiguration()(uint64,uint64,uint64,uint64) method call against the ReferenceAppBox contract
       */
      getBoxConfiguration(params: CallParams<ReferenceAppBoxArgs['obj']['getBoxConfiguration()(uint64,uint64,uint64,uint64)'] | ReferenceAppBoxArgs['tuple']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxConfiguration(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxConfiguration()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a updateBoxConfiguration(uint64,uint64)void method call against the ReferenceAppBox contract
       */
      updateBoxConfiguration(params: CallParams<ReferenceAppBoxArgs['obj']['updateBoxConfiguration(uint64,uint64)void'] | ReferenceAppBoxArgs['tuple']['updateBoxConfiguration(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateBoxConfiguration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ReferenceAppBox contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ReferenceAppBoxComposer
  }
}
export type ReferenceAppBoxComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the incrementBoxCounter(pay)uint64 ABI method.
   *
  * Increments the counter for the transaction sender
  Requires a payment transaction to cover the MBR for the box

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  incrementBoxCounter(params?: CallParams<ReferenceAppBoxArgs['obj']['incrementBoxCounter(pay)uint64'] | ReferenceAppBoxArgs['tuple']['incrementBoxCounter(pay)uint64']>): ReferenceAppBoxComposer<[...TReturns, ReferenceAppBoxReturns['incrementBoxCounter(pay)uint64'] | undefined]>

  /**
   * Calls the getBoxCounter()uint64 ABI method.
   *
   * Gets the current counter value for the transaction sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxCounter(params?: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounter()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounter()uint64']>): ReferenceAppBoxComposer<[...TReturns, ReferenceAppBoxReturns['getBoxCounter()uint64'] | undefined]>

  /**
   * Calls the getBoxCounterForAccount(address)uint64 ABI method.
   *
   * Gets the current counter value for any account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxCounterForAccount(params?: CallParams<ReferenceAppBoxArgs['obj']['getBoxCounterForAccount(address)uint64'] | ReferenceAppBoxArgs['tuple']['getBoxCounterForAccount(address)uint64']>): ReferenceAppBoxComposer<[...TReturns, ReferenceAppBoxReturns['getBoxCounterForAccount(address)uint64'] | undefined]>

  /**
   * Calls the getBoxMbr()uint64 ABI method.
   *
   * Returns the MBR cost for creating a box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxMbr(params?: CallParams<ReferenceAppBoxArgs['obj']['getBoxMbr()uint64'] | ReferenceAppBoxArgs['tuple']['getBoxMbr()uint64']>): ReferenceAppBoxComposer<[...TReturns, ReferenceAppBoxReturns['getBoxMbr()uint64'] | undefined]>

  /**
   * Calls the getBoxConfiguration()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns all the box size configuration values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxConfiguration(params?: CallParams<ReferenceAppBoxArgs['obj']['getBoxConfiguration()(uint64,uint64,uint64,uint64)'] | ReferenceAppBoxArgs['tuple']['getBoxConfiguration()(uint64,uint64,uint64,uint64)']>): ReferenceAppBoxComposer<[...TReturns, ReferenceAppBoxReturns['getBoxConfiguration()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the updateBoxConfiguration(uint64,uint64)void ABI method.
   *
   * Updates the box size configuration values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateBoxConfiguration(params?: CallParams<ReferenceAppBoxArgs['obj']['updateBoxConfiguration(uint64,uint64)void'] | ReferenceAppBoxArgs['tuple']['updateBoxConfiguration(uint64,uint64)void']>): ReferenceAppBoxComposer<[...TReturns, ReferenceAppBoxReturns['updateBoxConfiguration(uint64,uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ReferenceAppBox smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ReferenceAppBoxComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ReferenceAppBoxComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ReferenceAppBoxComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ReferenceAppBoxComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ReferenceAppBoxComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ReferenceAppBoxComposerResults<TReturns>>
}
export type ReferenceAppBoxComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

