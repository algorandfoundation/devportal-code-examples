/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"GlobalStorage","structs":{},"methods":[{"name":"readGlobalState","args":[],"returns":{"type":"(uint64,uint64,byte[],string,bool,address)","desc":"A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]\nwhere each value corresponds to the current state of the respective global variable"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Reads and returns all global state values from the contract","events":[],"recommendations":{}},{"name":"hasGlobalState","args":[],"returns":{"type":"(uint64,bool)","desc":"A tuple containing [value, hasValue] where value is the current globalIntNoDefault value\nand hasValue indicates if the value has been initialized"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Checks if a global state value exists and returns it","events":[],"recommendations":{}},{"name":"writeGlobalState","args":[{"type":"string","name":"valueString"},{"type":"bool","name":"valueBool","desc":"New value for globalBool"},{"type":"account","name":"valueAccount","desc":"New value for globalAccount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Updates multiple global state values","events":[],"recommendations":{}},{"name":"writeDynamicGlobalState","args":[{"type":"string","name":"key","desc":"The key to store the value under in global state"},{"type":"string","name":"value","desc":"The string value to store in global state"}],"returns":{"type":"string","desc":"The stored string value, confirming successful storage"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Writes a value to global state using a dynamic key and returns the stored value","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"A contract demonstrating global storage functionality","networks":{},"state":{"schema":{"global":{"ints":3,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"globalInt":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsSW50"},"globalIntNoDefault":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsSW50Tm9EZWZhdWx0"},"globalBytes":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2xvYmFsQnl0ZXM="},"globalString":{"keyType":"AVMString","valueType":"AVMString","key":"Z2xvYmFsU3RyaW5n"},"globalBool":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsQm9vbA=="},"globalAccount":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2xvYmFsQWNjb3VudA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[405],"errorMessage":"Global state not set."},{"pc":[177,214,243,270],"errorMessage":"OnCompletion is not NoOp"},{"pc":[356],"errorMessage":"can only call when creating"},{"pc":[180,217,246,273],"errorMessage":"can only call when not creating"},{"pc":[365,370,374,379,383,387,402,426,434,442,460,469],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBwxnbG9iYWxTdHJpbmcKZ2xvYmFsQm9vbBJnbG9iYWxJbnROb0RlZmF1bHQNZ2xvYmFsQWNjb3VudAQVH3x1CWdsb2JhbEludAtnbG9iYWxCeXRlczEYQAAkJwWBMmcnBoAGU2lsdmlvZyiABk1pY2FsaWcpI2cqImcrMQBnMRtBANOCBATTj2ByBEe0XNEE96BO3gRKTGv2NhoAjgQAXwBEACcAAiJDMRkURDEYRDYaAVcCADYaAlcCAIgA/EkVFlcGAkxQJwRMULAjQzEZFEQxGEQ2GgFXAgA2GgIiUzYaAxfAHIgAqiNDMRkURDEYRIgAjUwWgAEAIk8DVFAnBExQsCNDMRkURDEYRIgAUk8FFk8FFksFFRZXBgJPBlBLBRUWVwYCTwZQgAEAIk8HVE8ETwRQgAIANVBLAxWBNQgWVwYCUExQTwNQTwJQTFAnBExQsCNDMRlA/0sxGBREI0OKAAYiK2VEIicFZUQiKmVEIicGZUQiKGVEIillRE8FiYoAAiIqZUUBIiplREsBREyJigMAKIv9ZymL/mcri/9nIihlRIv9EkQiKWVEi/4SRCIrZUSL/xJEiYoCAYv+i/9nIov+ZUSL/xJEIov+ZUSJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":3,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the GlobalStorage contract
 */
export type GlobalStorageArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'readGlobalState()(uint64,uint64,byte[],string,bool,address)': Record<string, never>
    'hasGlobalState()(uint64,bool)': Record<string, never>
    'writeGlobalState(string,bool,account)void': {
      valueString: string
      /**
       * New value for globalBool
       */
      valueBool: boolean
      /**
       * New value for globalAccount
       */
      valueAccount: Uint8Array | string
    }
    'writeDynamicGlobalState(string,string)string': {
      /**
       * The key to store the value under in global state
       */
      key: string
      /**
       * The string value to store in global state
       */
      value: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'readGlobalState()(uint64,uint64,byte[],string,bool,address)': []
    'hasGlobalState()(uint64,bool)': []
    'writeGlobalState(string,bool,account)void': [valueString: string, valueBool: boolean, valueAccount: Uint8Array | string]
    'writeDynamicGlobalState(string,string)string': [key: string, value: string]
  }
}

/**
 * The return type for each method
 */
export type GlobalStorageReturns = {
  'readGlobalState()(uint64,uint64,byte[],string,bool,address)': [bigint, bigint, Uint8Array, string, boolean, string]
  'hasGlobalState()(uint64,bool)': [bigint, boolean]
  'writeGlobalState(string,bool,account)void': void
  'writeDynamicGlobalState(string,string)string': string
}

/**
 * Defines the types of available calls and state of the GlobalStorage smart contract.
 */
export type GlobalStorageTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'readGlobalState()(uint64,uint64,byte[],string,bool,address)' | 'readGlobalState', {
      argsObj: GlobalStorageArgs['obj']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']
      argsTuple: GlobalStorageArgs['tuple']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']
      /**
      * A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]
      where each value corresponds to the current state of the respective global variable

       */
      returns: GlobalStorageReturns['readGlobalState()(uint64,uint64,byte[],string,bool,address)']
    }>
    & Record<'hasGlobalState()(uint64,bool)' | 'hasGlobalState', {
      argsObj: GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)']
      argsTuple: GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']
      /**
      * A tuple containing [value, hasValue] where value is the current globalIntNoDefault value
      and hasValue indicates if the value has been initialized

       */
      returns: GlobalStorageReturns['hasGlobalState()(uint64,bool)']
    }>
    & Record<'writeGlobalState(string,bool,account)void' | 'writeGlobalState', {
      argsObj: GlobalStorageArgs['obj']['writeGlobalState(string,bool,account)void']
      argsTuple: GlobalStorageArgs['tuple']['writeGlobalState(string,bool,account)void']
      returns: GlobalStorageReturns['writeGlobalState(string,bool,account)void']
    }>
    & Record<'writeDynamicGlobalState(string,string)string' | 'writeDynamicGlobalState', {
      argsObj: GlobalStorageArgs['obj']['writeDynamicGlobalState(string,string)string']
      argsTuple: GlobalStorageArgs['tuple']['writeDynamicGlobalState(string,string)string']
      /**
       * The stored string value, confirming successful storage
       */
      returns: GlobalStorageReturns['writeDynamicGlobalState(string,string)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        globalInt: bigint
        globalIntNoDefault: bigint
        globalBytes: BinaryState
        globalString: string
        globalBool: bigint
        globalAccount: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type GlobalStorageSignatures = keyof GlobalStorageTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GlobalStorageNonVoidMethodSignatures = keyof GlobalStorageTypes['methods'] extends infer T ? T extends keyof GlobalStorageTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the GlobalStorage smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GlobalStorageSignatures> = GlobalStorageTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GlobalStorage smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GlobalStorageSignatures> = GlobalStorageTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = GlobalStorageTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type GlobalStorageCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type GlobalStorageDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GlobalStorageCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the GlobalStorage smart contract
 */
export abstract class GlobalStorageParamsFactory {
  /**
   * Constructs a no op call for the readGlobalState()(uint64,uint64,byte[],string,bool,address) ABI method
   *
   * Reads and returns all global state values from the contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readGlobalState(params: CallParams<GlobalStorageArgs['obj']['readGlobalState()(uint64,uint64,byte[],string,bool,address)'] | GlobalStorageArgs['tuple']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'readGlobalState()(uint64,uint64,byte[],string,bool,address)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the hasGlobalState()(uint64,bool) ABI method
   *
   * Checks if a global state value exists and returns it
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasGlobalState(params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hasGlobalState()(uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the writeGlobalState(string,bool,account)void ABI method
   *
   * Updates multiple global state values
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static writeGlobalState(params: CallParams<GlobalStorageArgs['obj']['writeGlobalState(string,bool,account)void'] | GlobalStorageArgs['tuple']['writeGlobalState(string,bool,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'writeGlobalState(string,bool,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.valueString, params.args.valueBool, params.args.valueAccount],
    }
  }
  /**
   * Constructs a no op call for the writeDynamicGlobalState(string,string)string ABI method
   *
   * Writes a value to global state using a dynamic key and returns the stored value
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static writeDynamicGlobalState(params: CallParams<GlobalStorageArgs['obj']['writeDynamicGlobalState(string,string)string'] | GlobalStorageArgs['tuple']['writeDynamicGlobalState(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'writeDynamicGlobalState(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.value],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the GlobalStorage smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GlobalStorageFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GlobalStorageFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GlobalStorageClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GlobalStorageClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the GlobalStorage smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GlobalStorageDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new GlobalStorageClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GlobalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GlobalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GlobalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new GlobalStorageClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the GlobalStorage smart contract
 */
export class GlobalStorageClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GlobalStorageClient`
   *
   * @param appClient An `AppClient` instance which has been created with the GlobalStorage app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GlobalStorageClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GlobalStorageNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GlobalStorageClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GlobalStorageClient> {
    return new GlobalStorageClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GlobalStorageClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GlobalStorageClient> {
    return new GlobalStorageClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the GlobalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `readGlobalState()(uint64,uint64,byte[],string,bool,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Reads and returns all global state values from the contract
     *
     * @param params The params for the smart contract call
    * @returns The call params: A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]
    where each value corresponds to the current state of the respective global variable

     */
    readGlobalState: (params: CallParams<GlobalStorageArgs['obj']['readGlobalState()(uint64,uint64,byte[],string,bool,address)'] | GlobalStorageArgs['tuple']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(GlobalStorageParamsFactory.readGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `hasGlobalState()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if a global state value exists and returns it
     *
     * @param params The params for the smart contract call
    * @returns The call params: A tuple containing [value, hasValue] where value is the current globalIntNoDefault value
    and hasValue indicates if the value has been initialized

     */
    hasGlobalState: (params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(GlobalStorageParamsFactory.hasGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `writeGlobalState(string,bool,account)void` ABI method.
     *
     * Updates multiple global state values
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    writeGlobalState: (params: CallParams<GlobalStorageArgs['obj']['writeGlobalState(string,bool,account)void'] | GlobalStorageArgs['tuple']['writeGlobalState(string,bool,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GlobalStorageParamsFactory.writeGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `writeDynamicGlobalState(string,string)string` ABI method.
     *
     * Writes a value to global state using a dynamic key and returns the stored value
     *
     * @param params The params for the smart contract call
     * @returns The call params: The stored string value, confirming successful storage
     */
    writeDynamicGlobalState: (params: CallParams<GlobalStorageArgs['obj']['writeDynamicGlobalState(string,string)string'] | GlobalStorageArgs['tuple']['writeDynamicGlobalState(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GlobalStorageParamsFactory.writeDynamicGlobalState(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the GlobalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `readGlobalState()(uint64,uint64,byte[],string,bool,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Reads and returns all global state values from the contract
     *
     * @param params The params for the smart contract call
    * @returns The call transaction: A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]
    where each value corresponds to the current state of the respective global variable

     */
    readGlobalState: (params: CallParams<GlobalStorageArgs['obj']['readGlobalState()(uint64,uint64,byte[],string,bool,address)'] | GlobalStorageArgs['tuple']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(GlobalStorageParamsFactory.readGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `hasGlobalState()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if a global state value exists and returns it
     *
     * @param params The params for the smart contract call
    * @returns The call transaction: A tuple containing [value, hasValue] where value is the current globalIntNoDefault value
    and hasValue indicates if the value has been initialized

     */
    hasGlobalState: (params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(GlobalStorageParamsFactory.hasGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `writeGlobalState(string,bool,account)void` ABI method.
     *
     * Updates multiple global state values
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    writeGlobalState: (params: CallParams<GlobalStorageArgs['obj']['writeGlobalState(string,bool,account)void'] | GlobalStorageArgs['tuple']['writeGlobalState(string,bool,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GlobalStorageParamsFactory.writeGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `writeDynamicGlobalState(string,string)string` ABI method.
     *
     * Writes a value to global state using a dynamic key and returns the stored value
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The stored string value, confirming successful storage
     */
    writeDynamicGlobalState: (params: CallParams<GlobalStorageArgs['obj']['writeDynamicGlobalState(string,string)string'] | GlobalStorageArgs['tuple']['writeDynamicGlobalState(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GlobalStorageParamsFactory.writeDynamicGlobalState(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the GlobalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `readGlobalState()(uint64,uint64,byte[],string,bool,address)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Reads and returns all global state values from the contract
     *
     * @param params The params for the smart contract call
    * @returns The call result: A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]
    where each value corresponds to the current state of the respective global variable

     */
    readGlobalState: async (params: CallParams<GlobalStorageArgs['obj']['readGlobalState()(uint64,uint64,byte[],string,bool,address)'] | GlobalStorageArgs['tuple']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(GlobalStorageParamsFactory.readGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | GlobalStorageReturns['readGlobalState()(uint64,uint64,byte[],string,bool,address)'])}
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `hasGlobalState()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if a global state value exists and returns it
     *
     * @param params The params for the smart contract call
    * @returns The call result: A tuple containing [value, hasValue] where value is the current globalIntNoDefault value
    and hasValue indicates if the value has been initialized

     */
    hasGlobalState: async (params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(GlobalStorageParamsFactory.hasGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | GlobalStorageReturns['hasGlobalState()(uint64,bool)'])}
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `writeGlobalState(string,bool,account)void` ABI method.
     *
     * Updates multiple global state values
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    writeGlobalState: async (params: CallParams<GlobalStorageArgs['obj']['writeGlobalState(string,bool,account)void'] | GlobalStorageArgs['tuple']['writeGlobalState(string,bool,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GlobalStorageParamsFactory.writeGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | GlobalStorageReturns['writeGlobalState(string,bool,account)void'])}
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `writeDynamicGlobalState(string,string)string` ABI method.
     *
     * Writes a value to global state using a dynamic key and returns the stored value
     *
     * @param params The params for the smart contract call
     * @returns The call result: The stored string value, confirming successful storage
     */
    writeDynamicGlobalState: async (params: CallParams<GlobalStorageArgs['obj']['writeDynamicGlobalState(string,string)string'] | GlobalStorageArgs['tuple']['writeDynamicGlobalState(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GlobalStorageParamsFactory.writeDynamicGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | GlobalStorageReturns['writeDynamicGlobalState(string,string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GlobalStorageClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the GlobalStorage smart contract using the `readGlobalState()(uint64,uint64,byte[],string,bool,address)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Reads and returns all global state values from the contract
   *
   * @param params The params for the smart contract call
  * @returns The call result: A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]
  where each value corresponds to the current state of the respective global variable

   */
  async readGlobalState(params: CallParams<GlobalStorageArgs['obj']['readGlobalState()(uint64,uint64,byte[],string,bool,address)'] | GlobalStorageArgs['tuple']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']> = {args: []}) {
    const result = await this.appClient.send.call(GlobalStorageParamsFactory.readGlobalState(params))
    return result.return as unknown as GlobalStorageReturns['readGlobalState()(uint64,uint64,byte[],string,bool,address)']
  }

  /**
   * Makes a readonly (simulated) call to the GlobalStorage smart contract using the `hasGlobalState()(uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Checks if a global state value exists and returns it
   *
   * @param params The params for the smart contract call
  * @returns The call result: A tuple containing [value, hasValue] where value is the current globalIntNoDefault value
  and hasValue indicates if the value has been initialized

   */
  async hasGlobalState(params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> = {args: []}) {
    const result = await this.appClient.send.call(GlobalStorageParamsFactory.hasGlobalState(params))
    return result.return as unknown as GlobalStorageReturns['hasGlobalState()(uint64,bool)']
  }

  /**
   * Methods to access state for the current GlobalStorage app
   */
  state = {
    /**
     * Methods to access global state for the current GlobalStorage app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          globalInt: result.globalInt,
          globalIntNoDefault: result.globalIntNoDefault,
          globalBytes: new BinaryStateValue(result.globalBytes),
          globalString: result.globalString,
          globalBool: result.globalBool,
          globalAccount: new BinaryStateValue(result.globalAccount),
        }
      },
      /**
       * Get the current value of the globalInt key in global state
       */
      globalInt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalInt")) as bigint | undefined },
      /**
       * Get the current value of the globalIntNoDefault key in global state
       */
      globalIntNoDefault: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalIntNoDefault")) as bigint | undefined },
      /**
       * Get the current value of the globalBytes key in global state
       */
      globalBytes: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("globalBytes")) as Uint8Array | undefined) },
      /**
       * Get the current value of the globalString key in global state
       */
      globalString: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("globalString")) as string | undefined },
      /**
       * Get the current value of the globalBool key in global state
       */
      globalBool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalBool")) as bigint | undefined },
      /**
       * Get the current value of the globalAccount key in global state
       */
      globalAccount: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("globalAccount")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): GlobalStorageComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a readGlobalState()(uint64,uint64,byte[],string,bool,address) method call against the GlobalStorage contract
       */
      readGlobalState(params: CallParams<GlobalStorageArgs['obj']['readGlobalState()(uint64,uint64,byte[],string,bool,address)'] | GlobalStorageArgs['tuple']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readGlobalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('readGlobalState()(uint64,uint64,byte[],string,bool,address)', v))
        return this
      },
      /**
       * Add a hasGlobalState()(uint64,bool) method call against the GlobalStorage contract
       */
      hasGlobalState(params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasGlobalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('hasGlobalState()(uint64,bool)', v))
        return this
      },
      /**
       * Add a writeGlobalState(string,bool,account)void method call against the GlobalStorage contract
       */
      writeGlobalState(params: CallParams<GlobalStorageArgs['obj']['writeGlobalState(string,bool,account)void'] | GlobalStorageArgs['tuple']['writeGlobalState(string,bool,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.writeGlobalState(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a writeDynamicGlobalState(string,string)string method call against the GlobalStorage contract
       */
      writeDynamicGlobalState(params: CallParams<GlobalStorageArgs['obj']['writeDynamicGlobalState(string,string)string'] | GlobalStorageArgs['tuple']['writeDynamicGlobalState(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.writeDynamicGlobalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('writeDynamicGlobalState(string,string)string', v))
        return this
      },
      /**
       * Add a clear state call to the GlobalStorage contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GlobalStorageComposer
  }
}
export type GlobalStorageComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the readGlobalState()(uint64,uint64,byte[],string,bool,address) ABI method.
   *
   * Reads and returns all global state values from the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readGlobalState(params?: CallParams<GlobalStorageArgs['obj']['readGlobalState()(uint64,uint64,byte[],string,bool,address)'] | GlobalStorageArgs['tuple']['readGlobalState()(uint64,uint64,byte[],string,bool,address)']>): GlobalStorageComposer<[...TReturns, GlobalStorageReturns['readGlobalState()(uint64,uint64,byte[],string,bool,address)'] | undefined]>

  /**
   * Calls the hasGlobalState()(uint64,bool) ABI method.
   *
   * Checks if a global state value exists and returns it
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasGlobalState(params?: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']>): GlobalStorageComposer<[...TReturns, GlobalStorageReturns['hasGlobalState()(uint64,bool)'] | undefined]>

  /**
   * Calls the writeGlobalState(string,bool,account)void ABI method.
   *
   * Updates multiple global state values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  writeGlobalState(params?: CallParams<GlobalStorageArgs['obj']['writeGlobalState(string,bool,account)void'] | GlobalStorageArgs['tuple']['writeGlobalState(string,bool,account)void']>): GlobalStorageComposer<[...TReturns, GlobalStorageReturns['writeGlobalState(string,bool,account)void'] | undefined]>

  /**
   * Calls the writeDynamicGlobalState(string,string)string ABI method.
   *
   * Writes a value to global state using a dynamic key and returns the stored value
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  writeDynamicGlobalState(params?: CallParams<GlobalStorageArgs['obj']['writeDynamicGlobalState(string,string)string'] | GlobalStorageArgs['tuple']['writeDynamicGlobalState(string,string)string']>): GlobalStorageComposer<[...TReturns, GlobalStorageReturns['writeDynamicGlobalState(string,string)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the GlobalStorage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GlobalStorageComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GlobalStorageComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<GlobalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<GlobalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<GlobalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GlobalStorageComposerResults<TReturns>>
}
export type GlobalStorageComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

