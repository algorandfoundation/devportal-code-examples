/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"GlobalStorage","structs":{},"methods":[{"name":"getGlobalState","args":[],"returns":{"type":"(uint64,byte[])"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"hasGlobalState","args":[],"returns":{"type":"(uint64,bool)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"setGlobalState","args":[{"type":"byte[]","name":"value"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setGlobalStateExample","args":[{"type":"byte[]","name":"valueBytes"},{"type":"asset","name":"valueAsset"},{"type":"bool","name":"valueBool"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"desc":"A contract demonstrating global storage functionality","networks":{},"state":{"schema":{"global":{"ints":6,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"globalInt":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsSW50"},"globalIntNoDefault":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsSW50Tm9EZWZhdWx0"},"globalBytes":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2xvYmFsQnl0ZXM="},"globalBytesNoDefault":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2xvYmFsQnl0ZXNOb0RlZmF1bHQ="},"globalBool":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsQm9vbA=="},"globalBoolNoDefault":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsQm9vbE5vRGVmYXVsdA=="},"globalAsset":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsQXNzZXQ="},"globalApplication":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2xvYmFsQXBwbGljYXRpb24="},"globalAccount":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2xvYmFsQWNjb3VudA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[164,193,211,237],"errorMessage":"OnCompletion is not NoOp"},{"pc":[278],"errorMessage":"can only call when creating"},{"pc":[167,196,214,240],"errorMessage":"can only call when not creating"},{"pc":[287,291,304,325,339,350],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBglnbG9iYWxJbnQLZ2xvYmFsQnl0ZXMEFR98dRRnbG9iYWxCeXRlc05vRGVmYXVsdBNnbG9iYWxCb29sTm9EZWZhdWx0C2dsb2JhbEFzc2V0MRhAABsogTJnKYAFSGVsbG9ngApnbG9iYWxCb29sI2cxG0EAkoIEBNQDXsMER7Rc0QTUxPvZBPWx9wU2GgCOBABLADEAHwACIkMxGRREMRhENhoBVwIANhoCF8AwNhoDIlOIAH8jQzEZFEQxGEQ2GgFXAgCIAGUjQzEZFEQxGESIAEtMFoABACJPA1RQKkxQsCNDMRkURDEYRIgAJUwWSwEVFlcGAk8CUEyAAgAKUExQKkxQsCNDMRlA/4wxGBREI0OKAAIiKGVEIillRImKAAIiKGVFASIoZURMiYoBACmL/2eJigMAK4v9ZyIrZUSL/RJEJwSL/2ciJwRlREQnBYv+ZyInBWVEi/4SRIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":3,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the GlobalStorage contract
 */
export type GlobalStorageArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'getGlobalState()(uint64,byte[])': Record<string, never>
    'hasGlobalState()(uint64,bool)': Record<string, never>
    'setGlobalState(byte[])void': {
      value: Uint8Array
    }
    'setGlobalStateExample(byte[],asset,bool)void': {
      valueBytes: Uint8Array
      valueAsset: bigint
      valueBool: boolean
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'getGlobalState()(uint64,byte[])': []
    'hasGlobalState()(uint64,bool)': []
    'setGlobalState(byte[])void': [value: Uint8Array]
    'setGlobalStateExample(byte[],asset,bool)void': [valueBytes: Uint8Array, valueAsset: bigint, valueBool: boolean]
  }
}

/**
 * The return type for each method
 */
export type GlobalStorageReturns = {
  'getGlobalState()(uint64,byte[])': [bigint, Uint8Array]
  'hasGlobalState()(uint64,bool)': [bigint, boolean]
  'setGlobalState(byte[])void': void
  'setGlobalStateExample(byte[],asset,bool)void': void
}

/**
 * Defines the types of available calls and state of the GlobalStorage smart contract.
 */
export type GlobalStorageTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'getGlobalState()(uint64,byte[])' | 'getGlobalState', {
      argsObj: GlobalStorageArgs['obj']['getGlobalState()(uint64,byte[])']
      argsTuple: GlobalStorageArgs['tuple']['getGlobalState()(uint64,byte[])']
      returns: GlobalStorageReturns['getGlobalState()(uint64,byte[])']
    }>
    & Record<'hasGlobalState()(uint64,bool)' | 'hasGlobalState', {
      argsObj: GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)']
      argsTuple: GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']
      returns: GlobalStorageReturns['hasGlobalState()(uint64,bool)']
    }>
    & Record<'setGlobalState(byte[])void' | 'setGlobalState', {
      argsObj: GlobalStorageArgs['obj']['setGlobalState(byte[])void']
      argsTuple: GlobalStorageArgs['tuple']['setGlobalState(byte[])void']
      returns: GlobalStorageReturns['setGlobalState(byte[])void']
    }>
    & Record<'setGlobalStateExample(byte[],asset,bool)void' | 'setGlobalStateExample', {
      argsObj: GlobalStorageArgs['obj']['setGlobalStateExample(byte[],asset,bool)void']
      argsTuple: GlobalStorageArgs['tuple']['setGlobalStateExample(byte[],asset,bool)void']
      returns: GlobalStorageReturns['setGlobalStateExample(byte[],asset,bool)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        globalInt: bigint
        globalIntNoDefault: bigint
        globalBytes: BinaryState
        globalBytesNoDefault: BinaryState
        globalBool: bigint
        globalBoolNoDefault: bigint
        globalAsset: bigint
        globalApplication: bigint
        globalAccount: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type GlobalStorageSignatures = keyof GlobalStorageTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GlobalStorageNonVoidMethodSignatures = keyof GlobalStorageTypes['methods'] extends infer T ? T extends keyof GlobalStorageTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the GlobalStorage smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GlobalStorageSignatures> = GlobalStorageTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GlobalStorage smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GlobalStorageSignatures> = GlobalStorageTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = GlobalStorageTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type GlobalStorageCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type GlobalStorageDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GlobalStorageCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the GlobalStorage smart contract
 */
export abstract class GlobalStorageParamsFactory {
  /**
   * Constructs a no op call for the getGlobalState()(uint64,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGlobalState(params: CallParams<GlobalStorageArgs['obj']['getGlobalState()(uint64,byte[])'] | GlobalStorageArgs['tuple']['getGlobalState()(uint64,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGlobalState()(uint64,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the hasGlobalState()(uint64,bool) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasGlobalState(params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hasGlobalState()(uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the setGlobalState(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGlobalState(params: CallParams<GlobalStorageArgs['obj']['setGlobalState(byte[])void'] | GlobalStorageArgs['tuple']['setGlobalState(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setGlobalState(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.value],
    }
  }
  /**
   * Constructs a no op call for the setGlobalStateExample(byte[],asset,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGlobalStateExample(params: CallParams<GlobalStorageArgs['obj']['setGlobalStateExample(byte[],asset,bool)void'] | GlobalStorageArgs['tuple']['setGlobalStateExample(byte[],asset,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setGlobalStateExample(byte[],asset,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.valueBytes, params.args.valueAsset, params.args.valueBool],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the GlobalStorage smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GlobalStorageFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GlobalStorageFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GlobalStorageClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GlobalStorageClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the GlobalStorage smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GlobalStorageDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new GlobalStorageClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GlobalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GlobalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GlobalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new GlobalStorageClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the GlobalStorage smart contract
 */
export class GlobalStorageClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GlobalStorageClient`
   *
   * @param appClient An `AppClient` instance which has been created with the GlobalStorage app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GlobalStorageClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GlobalStorageNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GlobalStorageClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GlobalStorageClient> {
    return new GlobalStorageClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GlobalStorageClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GlobalStorageClient> {
    return new GlobalStorageClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the GlobalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `getGlobalState()(uint64,byte[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGlobalState: (params: CallParams<GlobalStorageArgs['obj']['getGlobalState()(uint64,byte[])'] | GlobalStorageArgs['tuple']['getGlobalState()(uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(GlobalStorageParamsFactory.getGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `hasGlobalState()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasGlobalState: (params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(GlobalStorageParamsFactory.hasGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `setGlobalState(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGlobalState: (params: CallParams<GlobalStorageArgs['obj']['setGlobalState(byte[])void'] | GlobalStorageArgs['tuple']['setGlobalState(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GlobalStorageParamsFactory.setGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `setGlobalStateExample(byte[],asset,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGlobalStateExample: (params: CallParams<GlobalStorageArgs['obj']['setGlobalStateExample(byte[],asset,bool)void'] | GlobalStorageArgs['tuple']['setGlobalStateExample(byte[],asset,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GlobalStorageParamsFactory.setGlobalStateExample(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the GlobalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `getGlobalState()(uint64,byte[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGlobalState: (params: CallParams<GlobalStorageArgs['obj']['getGlobalState()(uint64,byte[])'] | GlobalStorageArgs['tuple']['getGlobalState()(uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(GlobalStorageParamsFactory.getGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `hasGlobalState()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasGlobalState: (params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(GlobalStorageParamsFactory.hasGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `setGlobalState(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGlobalState: (params: CallParams<GlobalStorageArgs['obj']['setGlobalState(byte[])void'] | GlobalStorageArgs['tuple']['setGlobalState(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GlobalStorageParamsFactory.setGlobalState(params))
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `setGlobalStateExample(byte[],asset,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGlobalStateExample: (params: CallParams<GlobalStorageArgs['obj']['setGlobalStateExample(byte[],asset,bool)void'] | GlobalStorageArgs['tuple']['setGlobalStateExample(byte[],asset,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GlobalStorageParamsFactory.setGlobalStateExample(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the GlobalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `getGlobalState()(uint64,byte[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGlobalState: async (params: CallParams<GlobalStorageArgs['obj']['getGlobalState()(uint64,byte[])'] | GlobalStorageArgs['tuple']['getGlobalState()(uint64,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(GlobalStorageParamsFactory.getGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | GlobalStorageReturns['getGlobalState()(uint64,byte[])'])}
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `hasGlobalState()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasGlobalState: async (params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(GlobalStorageParamsFactory.hasGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | GlobalStorageReturns['hasGlobalState()(uint64,bool)'])}
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `setGlobalState(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGlobalState: async (params: CallParams<GlobalStorageArgs['obj']['setGlobalState(byte[])void'] | GlobalStorageArgs['tuple']['setGlobalState(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GlobalStorageParamsFactory.setGlobalState(params))
      return {...result, return: result.return as unknown as (undefined | GlobalStorageReturns['setGlobalState(byte[])void'])}
    },

    /**
     * Makes a call to the GlobalStorage smart contract using the `setGlobalStateExample(byte[],asset,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGlobalStateExample: async (params: CallParams<GlobalStorageArgs['obj']['setGlobalStateExample(byte[],asset,bool)void'] | GlobalStorageArgs['tuple']['setGlobalStateExample(byte[],asset,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GlobalStorageParamsFactory.setGlobalStateExample(params))
      return {...result, return: result.return as unknown as (undefined | GlobalStorageReturns['setGlobalStateExample(byte[],asset,bool)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GlobalStorageClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the GlobalStorage smart contract using the `getGlobalState()(uint64,byte[])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGlobalState(params: CallParams<GlobalStorageArgs['obj']['getGlobalState()(uint64,byte[])'] | GlobalStorageArgs['tuple']['getGlobalState()(uint64,byte[])']> = {args: []}) {
    const result = await this.appClient.send.call(GlobalStorageParamsFactory.getGlobalState(params))
    return result.return as unknown as GlobalStorageReturns['getGlobalState()(uint64,byte[])']
  }

  /**
   * Makes a readonly (simulated) call to the GlobalStorage smart contract using the `hasGlobalState()(uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async hasGlobalState(params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> = {args: []}) {
    const result = await this.appClient.send.call(GlobalStorageParamsFactory.hasGlobalState(params))
    return result.return as unknown as GlobalStorageReturns['hasGlobalState()(uint64,bool)']
  }

  /**
   * Methods to access state for the current GlobalStorage app
   */
  state = {
    /**
     * Methods to access global state for the current GlobalStorage app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          globalInt: result.globalInt,
          globalIntNoDefault: result.globalIntNoDefault,
          globalBytes: new BinaryStateValue(result.globalBytes),
          globalBytesNoDefault: new BinaryStateValue(result.globalBytesNoDefault),
          globalBool: result.globalBool,
          globalBoolNoDefault: result.globalBoolNoDefault,
          globalAsset: result.globalAsset,
          globalApplication: result.globalApplication,
          globalAccount: new BinaryStateValue(result.globalAccount),
        }
      },
      /**
       * Get the current value of the globalInt key in global state
       */
      globalInt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalInt")) as bigint | undefined },
      /**
       * Get the current value of the globalIntNoDefault key in global state
       */
      globalIntNoDefault: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalIntNoDefault")) as bigint | undefined },
      /**
       * Get the current value of the globalBytes key in global state
       */
      globalBytes: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("globalBytes")) as Uint8Array | undefined) },
      /**
       * Get the current value of the globalBytesNoDefault key in global state
       */
      globalBytesNoDefault: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("globalBytesNoDefault")) as Uint8Array | undefined) },
      /**
       * Get the current value of the globalBool key in global state
       */
      globalBool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalBool")) as bigint | undefined },
      /**
       * Get the current value of the globalBoolNoDefault key in global state
       */
      globalBoolNoDefault: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalBoolNoDefault")) as bigint | undefined },
      /**
       * Get the current value of the globalAsset key in global state
       */
      globalAsset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalAsset")) as bigint | undefined },
      /**
       * Get the current value of the globalApplication key in global state
       */
      globalApplication: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalApplication")) as bigint | undefined },
      /**
       * Get the current value of the globalAccount key in global state
       */
      globalAccount: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("globalAccount")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): GlobalStorageComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a getGlobalState()(uint64,byte[]) method call against the GlobalStorage contract
       */
      getGlobalState(params: CallParams<GlobalStorageArgs['obj']['getGlobalState()(uint64,byte[])'] | GlobalStorageArgs['tuple']['getGlobalState()(uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGlobalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGlobalState()(uint64,byte[])', v))
        return this
      },
      /**
       * Add a hasGlobalState()(uint64,bool) method call against the GlobalStorage contract
       */
      hasGlobalState(params: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasGlobalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('hasGlobalState()(uint64,bool)', v))
        return this
      },
      /**
       * Add a setGlobalState(byte[])void method call against the GlobalStorage contract
       */
      setGlobalState(params: CallParams<GlobalStorageArgs['obj']['setGlobalState(byte[])void'] | GlobalStorageArgs['tuple']['setGlobalState(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setGlobalState(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setGlobalStateExample(byte[],asset,bool)void method call against the GlobalStorage contract
       */
      setGlobalStateExample(params: CallParams<GlobalStorageArgs['obj']['setGlobalStateExample(byte[],asset,bool)void'] | GlobalStorageArgs['tuple']['setGlobalStateExample(byte[],asset,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setGlobalStateExample(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the GlobalStorage contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GlobalStorageComposer
  }
}
export type GlobalStorageComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getGlobalState()(uint64,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGlobalState(params?: CallParams<GlobalStorageArgs['obj']['getGlobalState()(uint64,byte[])'] | GlobalStorageArgs['tuple']['getGlobalState()(uint64,byte[])']>): GlobalStorageComposer<[...TReturns, GlobalStorageReturns['getGlobalState()(uint64,byte[])'] | undefined]>

  /**
   * Calls the hasGlobalState()(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasGlobalState(params?: CallParams<GlobalStorageArgs['obj']['hasGlobalState()(uint64,bool)'] | GlobalStorageArgs['tuple']['hasGlobalState()(uint64,bool)']>): GlobalStorageComposer<[...TReturns, GlobalStorageReturns['hasGlobalState()(uint64,bool)'] | undefined]>

  /**
   * Calls the setGlobalState(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGlobalState(params?: CallParams<GlobalStorageArgs['obj']['setGlobalState(byte[])void'] | GlobalStorageArgs['tuple']['setGlobalState(byte[])void']>): GlobalStorageComposer<[...TReturns, GlobalStorageReturns['setGlobalState(byte[])void'] | undefined]>

  /**
   * Calls the setGlobalStateExample(byte[],asset,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGlobalStateExample(params?: CallParams<GlobalStorageArgs['obj']['setGlobalStateExample(byte[],asset,bool)void'] | GlobalStorageArgs['tuple']['setGlobalStateExample(byte[],asset,bool)void']>): GlobalStorageComposer<[...TReturns, GlobalStorageReturns['setGlobalStateExample(byte[],asset,bool)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the GlobalStorage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GlobalStorageComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GlobalStorageComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<GlobalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<GlobalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<GlobalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GlobalStorageComposerResults<TReturns>>
}
export type GlobalStorageComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

