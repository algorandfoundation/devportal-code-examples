/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"ScratchStorage","structs":{},"methods":[{"name":"demonstrateScratchStorage","args":[],"returns":{"type":"bool","desc":"true if all operations succeed"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Demonstrates basic scratch storage operations","events":[],"recommendations":{}},{"name":"readFromGroupTransaction","args":[{"type":"uint64","name":"groupIndex","desc":"The index of the transaction in the group to read from"},{"type":"uint64","name":"scratchSlot","desc":"The scratch slot to read from"}],"returns":{"type":"uint64","desc":"The uint64 value read from the specified transaction's scratch slot"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Demonstrates reading values from another transaction in the same group","events":[],"recommendations":{}},{"name":"readBytesFromGroupTransaction","args":[{"type":"uint64","name":"groupIndex","desc":"The index of the transaction in the group to read from"},{"type":"uint64","name":"scratchSlot","desc":"The scratch slot to read from"}],"returns":{"type":"byte[]","desc":"The bytes value read from the specified transaction's scratch slot"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Demonstrates reading bytes values from another transaction in the same group","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"ScratchStorage Contract\n\nThis contract demonstrates how to use scratch storage in Algorand smart contracts.\nScratch storage persists for the lifetime of a group transaction and can be used to pass\nvalues between multiple calls and/or applications in the same group.\n\nKey features demonstrated:\n- Reserving scratch slots using the contract decorator\n- Storing and loading values from scratch space\n- Using scratch space to pass values between transactions in a group\n- Different data types in scratch space (uint64 and bytes)","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[69,101,126],"errorMessage":"OnCompletion is not NoOp"},{"pc":[180],"errorMessage":"Value in slot 0 should be 42"},{"pc":[183],"errorMessage":"Value in slot 1 should be \"Hello, Algorand!\""},{"pc":[190],"errorMessage":"Value in slot 15 should be 999"},{"pc":[187],"errorMessage":"Value in slot 2 should be 100"},{"pc":[155],"errorMessage":"can only call when creating"},{"pc":[72,104,129],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEASpk5wcmAgQVH3x1EEhlbGxvLCBBbGdvcmFuZCExG0EAboIDBAEWjFwEDuwL2QQQ+0pmNhoAjgMAOgAhAAEAMRkURDEYRDYaARc2GgIXiAB2SRUWVwYCTFAoTFCwIkMxGRREMRhENhoBFzYaAheIAE0WKExQsCJDMRkURDEYRIgAGYABAIEATwJUKExQsCJDMRlA/6kxGBREIkMjNQApNQEkNQIlNQ80AjQPNAE0ACMSRCkSREwkEkQlEkQiiYoCAYv+i//EiYoCAYv+i//EiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ScratchStorage contract
 */
export type ScratchStorageArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'demonstrateScratchStorage()bool': Record<string, never>
    'readFromGroupTransaction(uint64,uint64)uint64': {
      /**
       * The index of the transaction in the group to read from
       */
      groupIndex: bigint | number
      /**
       * The scratch slot to read from
       */
      scratchSlot: bigint | number
    }
    'readBytesFromGroupTransaction(uint64,uint64)byte[]': {
      /**
       * The index of the transaction in the group to read from
       */
      groupIndex: bigint | number
      /**
       * The scratch slot to read from
       */
      scratchSlot: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'demonstrateScratchStorage()bool': []
    'readFromGroupTransaction(uint64,uint64)uint64': [groupIndex: bigint | number, scratchSlot: bigint | number]
    'readBytesFromGroupTransaction(uint64,uint64)byte[]': [groupIndex: bigint | number, scratchSlot: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type ScratchStorageReturns = {
  'demonstrateScratchStorage()bool': boolean
  'readFromGroupTransaction(uint64,uint64)uint64': bigint
  'readBytesFromGroupTransaction(uint64,uint64)byte[]': Uint8Array
}

/**
 * Defines the types of available calls and state of the ScratchStorage smart contract.
 */
export type ScratchStorageTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'demonstrateScratchStorage()bool' | 'demonstrateScratchStorage', {
      argsObj: ScratchStorageArgs['obj']['demonstrateScratchStorage()bool']
      argsTuple: ScratchStorageArgs['tuple']['demonstrateScratchStorage()bool']
      /**
       * true if all operations succeed
       */
      returns: ScratchStorageReturns['demonstrateScratchStorage()bool']
    }>
    & Record<'readFromGroupTransaction(uint64,uint64)uint64' | 'readFromGroupTransaction', {
      argsObj: ScratchStorageArgs['obj']['readFromGroupTransaction(uint64,uint64)uint64']
      argsTuple: ScratchStorageArgs['tuple']['readFromGroupTransaction(uint64,uint64)uint64']
      /**
       * The uint64 value read from the specified transaction's scratch slot
       */
      returns: ScratchStorageReturns['readFromGroupTransaction(uint64,uint64)uint64']
    }>
    & Record<'readBytesFromGroupTransaction(uint64,uint64)byte[]' | 'readBytesFromGroupTransaction', {
      argsObj: ScratchStorageArgs['obj']['readBytesFromGroupTransaction(uint64,uint64)byte[]']
      argsTuple: ScratchStorageArgs['tuple']['readBytesFromGroupTransaction(uint64,uint64)byte[]']
      /**
       * The bytes value read from the specified transaction's scratch slot
       */
      returns: ScratchStorageReturns['readBytesFromGroupTransaction(uint64,uint64)byte[]']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type ScratchStorageSignatures = keyof ScratchStorageTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ScratchStorageNonVoidMethodSignatures = keyof ScratchStorageTypes['methods'] extends infer T ? T extends keyof ScratchStorageTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ScratchStorage smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ScratchStorageSignatures> = ScratchStorageTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ScratchStorage smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ScratchStorageSignatures> = ScratchStorageTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type ScratchStorageCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ScratchStorageDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ScratchStorageCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ScratchStorage smart contract
 */
export abstract class ScratchStorageParamsFactory {
  /**
   * Constructs a no op call for the demonstrateScratchStorage()bool ABI method
   *
   * Demonstrates basic scratch storage operations
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static demonstrateScratchStorage(params: CallParams<ScratchStorageArgs['obj']['demonstrateScratchStorage()bool'] | ScratchStorageArgs['tuple']['demonstrateScratchStorage()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'demonstrateScratchStorage()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the readFromGroupTransaction(uint64,uint64)uint64 ABI method
   *
   * Demonstrates reading values from another transaction in the same group
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readFromGroupTransaction(params: CallParams<ScratchStorageArgs['obj']['readFromGroupTransaction(uint64,uint64)uint64'] | ScratchStorageArgs['tuple']['readFromGroupTransaction(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'readFromGroupTransaction(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.groupIndex, params.args.scratchSlot],
    }
  }
  /**
   * Constructs a no op call for the readBytesFromGroupTransaction(uint64,uint64)byte[] ABI method
   *
   * Demonstrates reading bytes values from another transaction in the same group
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readBytesFromGroupTransaction(params: CallParams<ScratchStorageArgs['obj']['readBytesFromGroupTransaction(uint64,uint64)byte[]'] | ScratchStorageArgs['tuple']['readBytesFromGroupTransaction(uint64,uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'readBytesFromGroupTransaction(uint64,uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.groupIndex, params.args.scratchSlot],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ScratchStorage smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ScratchStorageFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ScratchStorageFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ScratchStorageClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ScratchStorageClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ScratchStorage smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ScratchStorageDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ScratchStorageClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ScratchStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ScratchStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ScratchStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ScratchStorageClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ScratchStorage smart contract
 */
export class ScratchStorageClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ScratchStorageClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ScratchStorage app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ScratchStorageClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ScratchStorageNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `ScratchStorageClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ScratchStorageClient> {
    return new ScratchStorageClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ScratchStorageClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ScratchStorageClient> {
    return new ScratchStorageClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ScratchStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `demonstrateScratchStorage()bool` ABI method.
     *
     * Demonstrates basic scratch storage operations
     *
     * @param params The params for the smart contract call
     * @returns The call params: true if all operations succeed
     */
    demonstrateScratchStorage: (params: CallParams<ScratchStorageArgs['obj']['demonstrateScratchStorage()bool'] | ScratchStorageArgs['tuple']['demonstrateScratchStorage()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ScratchStorageParamsFactory.demonstrateScratchStorage(params))
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `readFromGroupTransaction(uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates reading values from another transaction in the same group
     *
     * @param params The params for the smart contract call
     * @returns The call params: The uint64 value read from the specified transaction's scratch slot
     */
    readFromGroupTransaction: (params: CallParams<ScratchStorageArgs['obj']['readFromGroupTransaction(uint64,uint64)uint64'] | ScratchStorageArgs['tuple']['readFromGroupTransaction(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ScratchStorageParamsFactory.readFromGroupTransaction(params))
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `readBytesFromGroupTransaction(uint64,uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates reading bytes values from another transaction in the same group
     *
     * @param params The params for the smart contract call
     * @returns The call params: The bytes value read from the specified transaction's scratch slot
     */
    readBytesFromGroupTransaction: (params: CallParams<ScratchStorageArgs['obj']['readBytesFromGroupTransaction(uint64,uint64)byte[]'] | ScratchStorageArgs['tuple']['readBytesFromGroupTransaction(uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ScratchStorageParamsFactory.readBytesFromGroupTransaction(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ScratchStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `demonstrateScratchStorage()bool` ABI method.
     *
     * Demonstrates basic scratch storage operations
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: true if all operations succeed
     */
    demonstrateScratchStorage: (params: CallParams<ScratchStorageArgs['obj']['demonstrateScratchStorage()bool'] | ScratchStorageArgs['tuple']['demonstrateScratchStorage()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ScratchStorageParamsFactory.demonstrateScratchStorage(params))
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `readFromGroupTransaction(uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates reading values from another transaction in the same group
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The uint64 value read from the specified transaction's scratch slot
     */
    readFromGroupTransaction: (params: CallParams<ScratchStorageArgs['obj']['readFromGroupTransaction(uint64,uint64)uint64'] | ScratchStorageArgs['tuple']['readFromGroupTransaction(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ScratchStorageParamsFactory.readFromGroupTransaction(params))
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `readBytesFromGroupTransaction(uint64,uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates reading bytes values from another transaction in the same group
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The bytes value read from the specified transaction's scratch slot
     */
    readBytesFromGroupTransaction: (params: CallParams<ScratchStorageArgs['obj']['readBytesFromGroupTransaction(uint64,uint64)byte[]'] | ScratchStorageArgs['tuple']['readBytesFromGroupTransaction(uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ScratchStorageParamsFactory.readBytesFromGroupTransaction(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ScratchStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `demonstrateScratchStorage()bool` ABI method.
     *
     * Demonstrates basic scratch storage operations
     *
     * @param params The params for the smart contract call
     * @returns The call result: true if all operations succeed
     */
    demonstrateScratchStorage: async (params: CallParams<ScratchStorageArgs['obj']['demonstrateScratchStorage()bool'] | ScratchStorageArgs['tuple']['demonstrateScratchStorage()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ScratchStorageParamsFactory.demonstrateScratchStorage(params))
      return {...result, return: result.return as unknown as (undefined | ScratchStorageReturns['demonstrateScratchStorage()bool'])}
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `readFromGroupTransaction(uint64,uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates reading values from another transaction in the same group
     *
     * @param params The params for the smart contract call
     * @returns The call result: The uint64 value read from the specified transaction's scratch slot
     */
    readFromGroupTransaction: async (params: CallParams<ScratchStorageArgs['obj']['readFromGroupTransaction(uint64,uint64)uint64'] | ScratchStorageArgs['tuple']['readFromGroupTransaction(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ScratchStorageParamsFactory.readFromGroupTransaction(params))
      return {...result, return: result.return as unknown as (undefined | ScratchStorageReturns['readFromGroupTransaction(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the ScratchStorage smart contract using the `readBytesFromGroupTransaction(uint64,uint64)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates reading bytes values from another transaction in the same group
     *
     * @param params The params for the smart contract call
     * @returns The call result: The bytes value read from the specified transaction's scratch slot
     */
    readBytesFromGroupTransaction: async (params: CallParams<ScratchStorageArgs['obj']['readBytesFromGroupTransaction(uint64,uint64)byte[]'] | ScratchStorageArgs['tuple']['readBytesFromGroupTransaction(uint64,uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ScratchStorageParamsFactory.readBytesFromGroupTransaction(params))
      return {...result, return: result.return as unknown as (undefined | ScratchStorageReturns['readBytesFromGroupTransaction(uint64,uint64)byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ScratchStorageClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the ScratchStorage smart contract using the `readFromGroupTransaction(uint64,uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Demonstrates reading values from another transaction in the same group
   *
   * @param params The params for the smart contract call
   * @returns The call result: The uint64 value read from the specified transaction's scratch slot
   */
  async readFromGroupTransaction(params: CallParams<ScratchStorageArgs['obj']['readFromGroupTransaction(uint64,uint64)uint64'] | ScratchStorageArgs['tuple']['readFromGroupTransaction(uint64,uint64)uint64']>) {
    const result = await this.appClient.send.call(ScratchStorageParamsFactory.readFromGroupTransaction(params))
    return result.return as unknown as ScratchStorageReturns['readFromGroupTransaction(uint64,uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ScratchStorage smart contract using the `readBytesFromGroupTransaction(uint64,uint64)byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Demonstrates reading bytes values from another transaction in the same group
   *
   * @param params The params for the smart contract call
   * @returns The call result: The bytes value read from the specified transaction's scratch slot
   */
  async readBytesFromGroupTransaction(params: CallParams<ScratchStorageArgs['obj']['readBytesFromGroupTransaction(uint64,uint64)byte[]'] | ScratchStorageArgs['tuple']['readBytesFromGroupTransaction(uint64,uint64)byte[]']>) {
    const result = await this.appClient.send.call(ScratchStorageParamsFactory.readBytesFromGroupTransaction(params))
    return result.return as unknown as ScratchStorageReturns['readBytesFromGroupTransaction(uint64,uint64)byte[]']
  }

  /**
   * Methods to access state for the current ScratchStorage app
   */
  state = {
  }

  public newGroup(): ScratchStorageComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a demonstrateScratchStorage()bool method call against the ScratchStorage contract
       */
      demonstrateScratchStorage(params: CallParams<ScratchStorageArgs['obj']['demonstrateScratchStorage()bool'] | ScratchStorageArgs['tuple']['demonstrateScratchStorage()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.demonstrateScratchStorage(params)))
        resultMappers.push((v) => client.decodeReturnValue('demonstrateScratchStorage()bool', v))
        return this
      },
      /**
       * Add a readFromGroupTransaction(uint64,uint64)uint64 method call against the ScratchStorage contract
       */
      readFromGroupTransaction(params: CallParams<ScratchStorageArgs['obj']['readFromGroupTransaction(uint64,uint64)uint64'] | ScratchStorageArgs['tuple']['readFromGroupTransaction(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readFromGroupTransaction(params)))
        resultMappers.push((v) => client.decodeReturnValue('readFromGroupTransaction(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a readBytesFromGroupTransaction(uint64,uint64)byte[] method call against the ScratchStorage contract
       */
      readBytesFromGroupTransaction(params: CallParams<ScratchStorageArgs['obj']['readBytesFromGroupTransaction(uint64,uint64)byte[]'] | ScratchStorageArgs['tuple']['readBytesFromGroupTransaction(uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readBytesFromGroupTransaction(params)))
        resultMappers.push((v) => client.decodeReturnValue('readBytesFromGroupTransaction(uint64,uint64)byte[]', v))
        return this
      },
      /**
       * Add a clear state call to the ScratchStorage contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ScratchStorageComposer
  }
}
export type ScratchStorageComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the demonstrateScratchStorage()bool ABI method.
   *
   * Demonstrates basic scratch storage operations
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  demonstrateScratchStorage(params?: CallParams<ScratchStorageArgs['obj']['demonstrateScratchStorage()bool'] | ScratchStorageArgs['tuple']['demonstrateScratchStorage()bool']>): ScratchStorageComposer<[...TReturns, ScratchStorageReturns['demonstrateScratchStorage()bool'] | undefined]>

  /**
   * Calls the readFromGroupTransaction(uint64,uint64)uint64 ABI method.
   *
   * Demonstrates reading values from another transaction in the same group
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readFromGroupTransaction(params?: CallParams<ScratchStorageArgs['obj']['readFromGroupTransaction(uint64,uint64)uint64'] | ScratchStorageArgs['tuple']['readFromGroupTransaction(uint64,uint64)uint64']>): ScratchStorageComposer<[...TReturns, ScratchStorageReturns['readFromGroupTransaction(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the readBytesFromGroupTransaction(uint64,uint64)byte[] ABI method.
   *
   * Demonstrates reading bytes values from another transaction in the same group
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readBytesFromGroupTransaction(params?: CallParams<ScratchStorageArgs['obj']['readBytesFromGroupTransaction(uint64,uint64)byte[]'] | ScratchStorageArgs['tuple']['readBytesFromGroupTransaction(uint64,uint64)byte[]']>): ScratchStorageComposer<[...TReturns, ScratchStorageReturns['readBytesFromGroupTransaction(uint64,uint64)byte[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ScratchStorage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ScratchStorageComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ScratchStorageComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ScratchStorageComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ScratchStorageComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ScratchStorageComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ScratchStorageComposerResults<TReturns>>
}
export type ScratchStorageComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

