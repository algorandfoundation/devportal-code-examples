/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BoxStorage","structs":{"UserStruct":[{"name":"name","type":"string"},{"name":"id","type":"uint64"},{"name":"asset","type":"uint64"}]},"methods":[{"name":"getBox","args":[],"returns":{"type":"uint64","desc":"The uint64 value stored in boxInt"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the value stored in the boxInt box","events":[],"recommendations":{}},{"name":"valueBox","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the value of the boxInt box","events":[],"recommendations":{}},{"name":"maybeBox","args":[],"returns":{"type":"(uint64,bool)","desc":"A tuple containing the value and a boolean indicating if the box exists"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the value stored in the boxInt box and checks if it exists","events":[],"recommendations":{}},{"name":"getBoxMap","args":[{"type":"uint64","name":"key","desc":"The key of the boxMap to retrieve the value from"}],"returns":{"type":"string","desc":"The value stored in the boxMap box"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the value stored in the boxMap box","events":[],"recommendations":{}},{"name":"getBoxMapWithDefault","args":[{"type":"uint64","name":"key","desc":"The key of the boxMap to retrieve the value from"}],"returns":{"type":"string","desc":"The value stored in the boxMap box"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the value stored in the boxMap box with a default value if the key does not exist","events":[],"recommendations":{}},{"name":"maybeBoxMap","args":[{"type":"uint64","name":"key","desc":"The key to check in the boxMap"}],"returns":{"type":"(string,bool)","desc":"A tuple containing the value and a boolean indicating if the box exists"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the value stored in the boxMap box and checks if it exists","events":[],"recommendations":{}},{"name":"keyPrefixBoxMap","args":[],"returns":{"type":"byte[]","desc":"The key prefix of the boxMap box"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the key prefix of the boxMap box","events":[],"recommendations":{}},{"name":"getBoxRef","args":[],"returns":{"type":"address","desc":"The value stored in the boxRef box"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Retrieves the value stored in the boxRef box","events":[],"recommendations":{}},{"name":"boxMapExists","args":[{"type":"uint64","name":"key","desc":"The key to check for"}],"returns":{"type":"bool","desc":"true if the box exists, false otherwise"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Checks if the boxMap box exists","events":[],"recommendations":{}},{"name":"maybeBoxRef","args":[{"type":"string","name":"key"}],"returns":{"type":"(byte[],bool)","desc":"A tuple containing the value and a boolean indicating if the box exists"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the value stored in the boxRef box and checks if it exists","events":[],"recommendations":{}},{"name":"setBox","args":[{"type":"uint64","name":"valueInt","desc":"The uint64 value to set in the boxInt box"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Sets the value of the boxInt box","events":[],"recommendations":{}},{"name":"setBoxString","args":[{"type":"string","name":"value","desc":"The string value to set in the boxString box"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Sets the value of the boxString box","events":[],"recommendations":{}},{"name":"setBoxDynamicBytes","args":[{"type":"byte[]","name":"value","desc":"The dynamic bytes value to set in the boxDynamicBytes box"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Sets the value of the boxDynamicBytes box","events":[],"recommendations":{}},{"name":"setBoxMap","args":[{"type":"uint64","name":"key","desc":"The key to set the value for"},{"type":"string","name":"value","desc":"The value to set in the boxMap box"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Sets the value of the boxMap box","events":[],"recommendations":{}},{"name":"setBoxRef","args":[{"type":"string","name":"key","desc":"The key to use for the box ref"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Creates a box ref with the given key and sets its value to the sender's address","events":[],"recommendations":{}},{"name":"boxMapLength","args":[{"type":"uint64","name":"key","desc":"The key to get the length for"}],"returns":{"type":"uint64","desc":"The length of the boxMap box"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the length of the boxMap box","events":[],"recommendations":{}},{"name":"lengthBoxRef","args":[{"type":"string","name":"key","desc":"The key to get the length for"}],"returns":{"type":"uint64","desc":"The length of the boxRef box"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Retrieves the length of the boxRef box","events":[],"recommendations":{}},{"name":"deleteBox","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deletes the value of the boxInt box","events":[],"recommendations":{}},{"name":"deleteBoxMap","args":[{"type":"uint64","name":"key","desc":"The key to delete the value from"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deletes the value of the boxMap box","events":[],"recommendations":{}},{"name":"deleteBoxRef","args":[{"type":"string","name":"key","desc":"The key to delete the value from"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deletes the value of the boxRef box","events":[],"recommendations":{}},{"name":"extractBoxRef","args":[{"type":"string","name":"key","desc":"The key to extract from"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Extracts a value from the boxRef box","events":[],"recommendations":{}},{"name":"getBoxMapStruct","args":[{"type":"uint64","name":"key","desc":"The key to retrieve the value from"}],"returns":{"type":"(string,uint64,uint64)","struct":"UserStruct","desc":"The value stored in the boxMapStruct box"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Retrieves the value stored in the boxMapStruct box","events":[],"recommendations":{}},{"name":"boxMapStructExists","args":[{"type":"uint64","name":"key","desc":"The key to check for"}],"returns":{"type":"bool","desc":"true if the box exists, false otherwise"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Checks if the boxMapStruct box exists","events":[],"recommendations":{}},{"name":"setBoxMapStruct","args":[{"type":"uint64","name":"key","desc":"The key to set the value for"},{"type":"(string,uint64,uint64)","struct":"UserStruct","name":"value","desc":"The value to set in the boxMapStruct box"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Sets the value of the boxMapStruct box","events":[],"recommendations":{}},{"name":"boxMapStructLength","args":[{"type":"uint64","name":"key","desc":"The key to get the length for"}],"returns":{"type":"bool","desc":"The length of the boxMapStruct box"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Retrieves the length of the boxMapStruct box","events":[],"recommendations":{}},{"name":"arc4Box","args":[{"type":"string","name":"key","desc":"The key for the static array box"}],"returns":{"type":"uint8[4]","desc":"The static array stored in the box"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Creates and manipulates a box containing a static array of 8-bit unsigned integers","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"BoxStorage Contract\n\nThis contract demonstrates various box storage operations in Algorand smart contracts.\nIt shows how to:\n- Create and manage different types of boxes (int, bytes, dynamic bytes, string)\n- Use BoxMap for key-value storage\n- Work with BoxRef for direct box manipulation\n- Perform operations like get, set, delete, and length calculations\n- Handle complex data structures in boxes\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/box_storage/contract.py","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{"boxString":{"keyType":"AVMString","valueType":"AVMString","key":"Ym94U3RyaW5n"},"boxInt":{"keyType":"AVMString","valueType":"AVMUint64","key":"Ym94SW50"},"boxBytes":{"keyType":"AVMString","valueType":"AVMBytes","key":"Ym94Qnl0ZXM="},"boxDynamicBytes":{"keyType":"AVMString","valueType":"byte[]","key":"Ym94RHluYW1pY0J5dGVz"},"boxRef":{"keyType":"AVMString","valueType":"AVMBytes","key":"Ym94UmVm"},"boxMap":{"keyType":"AVMString","valueType":"AVMString","key":"Ym94TWFw"},"boxMapStruct":{"keyType":"AVMString","valueType":"UserStruct","key":"dXNlcnM="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[867,874,892,1082,1096,1257,1292,1319,1335,1404,1411,1433,1441,1450,1461,1472],"errorMessage":"Box must have value"},{"pc":[1242],"errorMessage":"First part should match app address"},{"pc":[1320,1325,1336,1341],"errorMessage":"Index access is out of bounds"},{"pc":[274,296,321,349,374,394,412,430,446,458,481,502,520,542,557,575,591,634,659,675,699,740,768,796,820,837],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1244],"errorMessage":"Second part should match sender bytes"},{"pc":[1191],"errorMessage":"assert target is match for conditions"},{"pc":[1409],"errorMessage":"boxMapStruct bytes length mismatch"},{"pc":[1415],"errorMessage":"boxMapStruct length mismatch"},{"pc":[1349],"errorMessage":"boxMapStruct value mismatch"},{"pc":[1092,1214],"errorMessage":"boxRef creation failed"},{"pc":[972],"errorMessage":"boxRef value mismatch"},{"pc":[859],"errorMessage":"can only call when creating"},{"pc":[277,299,324,352,377,397,415,433,449,461,484,505,523,545,560,578,594,637,662,678,702,743,771,799,823,840],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAQAgKiYKBBUffHUBAAZib3hNYXAGYm94SW50CWJveFN0cmluZw9ib3hEeW5hbWljQnl0ZXMFdXNlcnMGYm94UmVmAjQyAgADMRtBAwOCGgS3SRNEBEnPQQUEarPpvAQmymSKBCjMcTkEZEo5lASx9am2BAPox34E2CnSowSMIr/VBPoVYvcExJe8bwT0+cutBJ4R/XoEXmzqwAT1NBjEBDnpsiYEkQGn3gSkVS61BDis9T4EhgDg6wRTwoggBPGDIHoE1d2SLARZW4e7BFR/CnQ2GgCOGgI1AiQCDAHwAdQBqwGTAYMBagE/AS8BHQEOAPgA5gDRALoArgCeAIwAegBmAE0AMQAYAAIjQzEZFEQxGEQ2GgFXAgCIBGsoTFCwIkMxGRREMRhENhoBF4gEGikjTwJUKExQsCJDMRkURDEYRDYaARc2GgKIA6opI08CVChMULAiQzEZFEQxGEQ2GgEXiAODKSNPAlQoTFCwIkMxGRREMRhENhoBF4gDXShMULAiQzEZFEQxGEQ2GgFXAgCIAxYiQzEZFEQxGEQ2GgFXAgCIAuQiQzEZFEQxGEQ2GgEXiALIIkMxGRREMRhEiAKFIkMxGRREMRhENhoBVwIAiAJmFihMULAiQzEZFEQxGEQ2GgEXiAI4FihMULAiQzEZFEQxGEQ2GgFXAgCIAhMiQzEZFEQxGEQ2GgEXNhoCVwIAiAHtIkMxGRREMRhENhoBiAHRIkMxGRREMRhENhoBVwIAiAGyIkMxGRREMRhENhoBF4gBmCJDMRkURDEYRDYaAVcCAIgBf0sBFRZXBgJPAlApI08DVCcJTFBMUChMULAiQzEZFEQxGEQ2GgEXiAFJKSNPAlQoTFCwIkMxGRREMRhEiAEaKExQsCJDMRkURDEYRIAMFR98dQAGYm94TWFwsCJDMRkURDEYRDYaAReIAM9LARUWVwYCTwJQKSNPA1QnCUxQTFAoTFCwIkMxGRREMRhENhoBF4gAj0kVFlcGAkxQKExQsCJDMRkURDEYRDYaAReIAGdJFRZXBgJMUChMULAiQzEZFEQxGESIAElMFikjTwNUUChMULAiQzEZFEQxGESIACoWKExQsCJDMRkURDEYRIgAEhYoTFCwIkMxGUD9tTEYFEQiQyu+TBdMRIkrvkwXTESJK75MF0yJigEBi/8WKkxQvkSJigEBi/8WKkxQvoAHZGVmYXVsdE4CTYmKAQKL/xYqTFC+SU8CTEEACYsBiwBPA08DiYAAQv/0JwckuUgxACcHSwG/Jwe+SwJOAk1JTwISRImKAQGL/xYqTFC9RQGJigECi/++iYoBAIv/FitMv4mKAQAnBLxIJwSL/7+JigEAJwW8SCcFi/+/iYoCAIv+FipMUEm8SIv/v4mKAQCL/yS5SIv/MQC/iYoBAYv/FipMUEm9RQFAAAMjTImLAL1ETImKAQGL/yS5RIv/vUSJK7xIJwW8SCcEvEgrvkwXJUxPAk0lEkQnBb6ABAACNDJOAk1XAgAnCBJEJwS+JwhOAk0nCBJEiYoBAIv/FipMULxIiYoBAIv/vEiL/75IgAASQQALi/++RQFAAAMiRIkjQv/6igEAMQAyCkkVSwIVCIv/TLlEi/8jSwO7i/8jSUsD0ov/IyS6i/8kSbpMTwISRBJEiYoBAYv/FicGTFC+RImKAQGL/xYnBkxQvUUBiYoCAYv+FicGTFBHArxISYv/v75ESSNZSwEVUov/I1mL/xWL/04CUhJBACWLAL5EVwIIi/9XAggSQQAViwC+RFcKCIv/VwoIEkEABSJEIkyJI0L/+IoBAYv/FicGTFBJvEhJgBwAEgAAAAAAAABGAAAAAAAABNIACHRlc3ROYW1lv0m+RBWBHBJEvUSBHBJEIomKAQGL/4AEAAECA7+L/75EI1UURIv/vkQiVSISRIv/vkSBAlWBAhJEi/++RIEDVYEDEkSL/75EiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":4,"patch":4}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type UserStruct = {
  name: string,
  id: bigint,
  asset: bigint
}


/**
 * Converts the ABI tuple representation of a UserStruct to the struct representation
 */
export function UserStructFromTuple(abiTuple: [string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserStruct, APP_SPEC.structs) as UserStruct
}

/**
 * The argument types for the BoxStorage contract
 */
export type BoxStorageArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'getBox()uint64': Record<string, never>
    'valueBox()uint64': Record<string, never>
    'maybeBox()(uint64,bool)': Record<string, never>
    'getBoxMap(uint64)string': {
      /**
       * The key of the boxMap to retrieve the value from
       */
      key: bigint | number
    }
    'getBoxMapWithDefault(uint64)string': {
      /**
       * The key of the boxMap to retrieve the value from
       */
      key: bigint | number
    }
    'maybeBoxMap(uint64)(string,bool)': {
      /**
       * The key to check in the boxMap
       */
      key: bigint | number
    }
    'keyPrefixBoxMap()byte[]': Record<string, never>
    'getBoxRef()address': Record<string, never>
    'boxMapExists(uint64)bool': {
      /**
       * The key to check for
       */
      key: bigint | number
    }
    'maybeBoxRef(string)(byte[],bool)': {
      key: string
    }
    'setBox(uint64)void': {
      /**
       * The uint64 value to set in the boxInt box
       */
      valueInt: bigint | number
    }
    'setBoxString(string)void': {
      /**
       * The string value to set in the boxString box
       */
      value: string
    }
    'setBoxDynamicBytes(byte[])void': {
      /**
       * The dynamic bytes value to set in the boxDynamicBytes box
       */
      value: Uint8Array
    }
    'setBoxMap(uint64,string)void': {
      /**
       * The key to set the value for
       */
      key: bigint | number
      /**
       * The value to set in the boxMap box
       */
      value: string
    }
    'setBoxRef(string)void': {
      /**
       * The key to use for the box ref
       */
      key: string
    }
    'boxMapLength(uint64)uint64': {
      /**
       * The key to get the length for
       */
      key: bigint | number
    }
    'lengthBoxRef(string)uint64': {
      /**
       * The key to get the length for
       */
      key: string
    }
    'deleteBox()void': Record<string, never>
    'deleteBoxMap(uint64)void': {
      /**
       * The key to delete the value from
       */
      key: bigint | number
    }
    'deleteBoxRef(string)void': {
      /**
       * The key to delete the value from
       */
      key: string
    }
    'extractBoxRef(string)void': {
      /**
       * The key to extract from
       */
      key: string
    }
    'getBoxMapStruct(uint64)(string,uint64,uint64)': {
      /**
       * The key to retrieve the value from
       */
      key: bigint | number
    }
    'boxMapStructExists(uint64)bool': {
      /**
       * The key to check for
       */
      key: bigint | number
    }
    'setBoxMapStruct(uint64,(string,uint64,uint64))bool': {
      /**
       * The key to set the value for
       */
      key: bigint | number
      /**
       * The value to set in the boxMapStruct box
       */
      value: UserStruct
    }
    'boxMapStructLength(uint64)bool': {
      /**
       * The key to get the length for
       */
      key: bigint | number
    }
    'arc4Box(string)uint8[4]': {
      /**
       * The key for the static array box
       */
      key: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'getBox()uint64': []
    'valueBox()uint64': []
    'maybeBox()(uint64,bool)': []
    'getBoxMap(uint64)string': [key: bigint | number]
    'getBoxMapWithDefault(uint64)string': [key: bigint | number]
    'maybeBoxMap(uint64)(string,bool)': [key: bigint | number]
    'keyPrefixBoxMap()byte[]': []
    'getBoxRef()address': []
    'boxMapExists(uint64)bool': [key: bigint | number]
    'maybeBoxRef(string)(byte[],bool)': [key: string]
    'setBox(uint64)void': [valueInt: bigint | number]
    'setBoxString(string)void': [value: string]
    'setBoxDynamicBytes(byte[])void': [value: Uint8Array]
    'setBoxMap(uint64,string)void': [key: bigint | number, value: string]
    'setBoxRef(string)void': [key: string]
    'boxMapLength(uint64)uint64': [key: bigint | number]
    'lengthBoxRef(string)uint64': [key: string]
    'deleteBox()void': []
    'deleteBoxMap(uint64)void': [key: bigint | number]
    'deleteBoxRef(string)void': [key: string]
    'extractBoxRef(string)void': [key: string]
    'getBoxMapStruct(uint64)(string,uint64,uint64)': [key: bigint | number]
    'boxMapStructExists(uint64)bool': [key: bigint | number]
    'setBoxMapStruct(uint64,(string,uint64,uint64))bool': [key: bigint | number, value: UserStruct]
    'boxMapStructLength(uint64)bool': [key: bigint | number]
    'arc4Box(string)uint8[4]': [key: string]
  }
}

/**
 * The return type for each method
 */
export type BoxStorageReturns = {
  'getBox()uint64': bigint
  'valueBox()uint64': bigint
  'maybeBox()(uint64,bool)': [bigint, boolean]
  'getBoxMap(uint64)string': string
  'getBoxMapWithDefault(uint64)string': string
  'maybeBoxMap(uint64)(string,bool)': [string, boolean]
  'keyPrefixBoxMap()byte[]': Uint8Array
  'getBoxRef()address': string
  'boxMapExists(uint64)bool': boolean
  'maybeBoxRef(string)(byte[],bool)': [Uint8Array, boolean]
  'setBox(uint64)void': void
  'setBoxString(string)void': void
  'setBoxDynamicBytes(byte[])void': void
  'setBoxMap(uint64,string)void': void
  'setBoxRef(string)void': void
  'boxMapLength(uint64)uint64': bigint
  'lengthBoxRef(string)uint64': bigint
  'deleteBox()void': void
  'deleteBoxMap(uint64)void': void
  'deleteBoxRef(string)void': void
  'extractBoxRef(string)void': void
  'getBoxMapStruct(uint64)(string,uint64,uint64)': UserStruct
  'boxMapStructExists(uint64)bool': boolean
  'setBoxMapStruct(uint64,(string,uint64,uint64))bool': boolean
  'boxMapStructLength(uint64)bool': boolean
  'arc4Box(string)uint8[4]': [number, number, number, number]
}

/**
 * Defines the types of available calls and state of the BoxStorage smart contract.
 */
export type BoxStorageTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'getBox()uint64' | 'getBox', {
      argsObj: BoxStorageArgs['obj']['getBox()uint64']
      argsTuple: BoxStorageArgs['tuple']['getBox()uint64']
      /**
       * The uint64 value stored in boxInt
       */
      returns: BoxStorageReturns['getBox()uint64']
    }>
    & Record<'valueBox()uint64' | 'valueBox', {
      argsObj: BoxStorageArgs['obj']['valueBox()uint64']
      argsTuple: BoxStorageArgs['tuple']['valueBox()uint64']
      returns: BoxStorageReturns['valueBox()uint64']
    }>
    & Record<'maybeBox()(uint64,bool)' | 'maybeBox', {
      argsObj: BoxStorageArgs['obj']['maybeBox()(uint64,bool)']
      argsTuple: BoxStorageArgs['tuple']['maybeBox()(uint64,bool)']
      /**
       * A tuple containing the value and a boolean indicating if the box exists
       */
      returns: BoxStorageReturns['maybeBox()(uint64,bool)']
    }>
    & Record<'getBoxMap(uint64)string' | 'getBoxMap', {
      argsObj: BoxStorageArgs['obj']['getBoxMap(uint64)string']
      argsTuple: BoxStorageArgs['tuple']['getBoxMap(uint64)string']
      /**
       * The value stored in the boxMap box
       */
      returns: BoxStorageReturns['getBoxMap(uint64)string']
    }>
    & Record<'getBoxMapWithDefault(uint64)string' | 'getBoxMapWithDefault', {
      argsObj: BoxStorageArgs['obj']['getBoxMapWithDefault(uint64)string']
      argsTuple: BoxStorageArgs['tuple']['getBoxMapWithDefault(uint64)string']
      /**
       * The value stored in the boxMap box
       */
      returns: BoxStorageReturns['getBoxMapWithDefault(uint64)string']
    }>
    & Record<'maybeBoxMap(uint64)(string,bool)' | 'maybeBoxMap', {
      argsObj: BoxStorageArgs['obj']['maybeBoxMap(uint64)(string,bool)']
      argsTuple: BoxStorageArgs['tuple']['maybeBoxMap(uint64)(string,bool)']
      /**
       * A tuple containing the value and a boolean indicating if the box exists
       */
      returns: BoxStorageReturns['maybeBoxMap(uint64)(string,bool)']
    }>
    & Record<'keyPrefixBoxMap()byte[]' | 'keyPrefixBoxMap', {
      argsObj: BoxStorageArgs['obj']['keyPrefixBoxMap()byte[]']
      argsTuple: BoxStorageArgs['tuple']['keyPrefixBoxMap()byte[]']
      /**
       * The key prefix of the boxMap box
       */
      returns: BoxStorageReturns['keyPrefixBoxMap()byte[]']
    }>
    & Record<'getBoxRef()address' | 'getBoxRef', {
      argsObj: BoxStorageArgs['obj']['getBoxRef()address']
      argsTuple: BoxStorageArgs['tuple']['getBoxRef()address']
      /**
       * The value stored in the boxRef box
       */
      returns: BoxStorageReturns['getBoxRef()address']
    }>
    & Record<'boxMapExists(uint64)bool' | 'boxMapExists', {
      argsObj: BoxStorageArgs['obj']['boxMapExists(uint64)bool']
      argsTuple: BoxStorageArgs['tuple']['boxMapExists(uint64)bool']
      /**
       * true if the box exists, false otherwise
       */
      returns: BoxStorageReturns['boxMapExists(uint64)bool']
    }>
    & Record<'maybeBoxRef(string)(byte[],bool)' | 'maybeBoxRef', {
      argsObj: BoxStorageArgs['obj']['maybeBoxRef(string)(byte[],bool)']
      argsTuple: BoxStorageArgs['tuple']['maybeBoxRef(string)(byte[],bool)']
      /**
       * A tuple containing the value and a boolean indicating if the box exists
       */
      returns: BoxStorageReturns['maybeBoxRef(string)(byte[],bool)']
    }>
    & Record<'setBox(uint64)void' | 'setBox', {
      argsObj: BoxStorageArgs['obj']['setBox(uint64)void']
      argsTuple: BoxStorageArgs['tuple']['setBox(uint64)void']
      returns: BoxStorageReturns['setBox(uint64)void']
    }>
    & Record<'setBoxString(string)void' | 'setBoxString', {
      argsObj: BoxStorageArgs['obj']['setBoxString(string)void']
      argsTuple: BoxStorageArgs['tuple']['setBoxString(string)void']
      returns: BoxStorageReturns['setBoxString(string)void']
    }>
    & Record<'setBoxDynamicBytes(byte[])void' | 'setBoxDynamicBytes', {
      argsObj: BoxStorageArgs['obj']['setBoxDynamicBytes(byte[])void']
      argsTuple: BoxStorageArgs['tuple']['setBoxDynamicBytes(byte[])void']
      returns: BoxStorageReturns['setBoxDynamicBytes(byte[])void']
    }>
    & Record<'setBoxMap(uint64,string)void' | 'setBoxMap', {
      argsObj: BoxStorageArgs['obj']['setBoxMap(uint64,string)void']
      argsTuple: BoxStorageArgs['tuple']['setBoxMap(uint64,string)void']
      returns: BoxStorageReturns['setBoxMap(uint64,string)void']
    }>
    & Record<'setBoxRef(string)void' | 'setBoxRef', {
      argsObj: BoxStorageArgs['obj']['setBoxRef(string)void']
      argsTuple: BoxStorageArgs['tuple']['setBoxRef(string)void']
      returns: BoxStorageReturns['setBoxRef(string)void']
    }>
    & Record<'boxMapLength(uint64)uint64' | 'boxMapLength', {
      argsObj: BoxStorageArgs['obj']['boxMapLength(uint64)uint64']
      argsTuple: BoxStorageArgs['tuple']['boxMapLength(uint64)uint64']
      /**
       * The length of the boxMap box
       */
      returns: BoxStorageReturns['boxMapLength(uint64)uint64']
    }>
    & Record<'lengthBoxRef(string)uint64' | 'lengthBoxRef', {
      argsObj: BoxStorageArgs['obj']['lengthBoxRef(string)uint64']
      argsTuple: BoxStorageArgs['tuple']['lengthBoxRef(string)uint64']
      /**
       * The length of the boxRef box
       */
      returns: BoxStorageReturns['lengthBoxRef(string)uint64']
    }>
    & Record<'deleteBox()void' | 'deleteBox', {
      argsObj: BoxStorageArgs['obj']['deleteBox()void']
      argsTuple: BoxStorageArgs['tuple']['deleteBox()void']
      returns: BoxStorageReturns['deleteBox()void']
    }>
    & Record<'deleteBoxMap(uint64)void' | 'deleteBoxMap', {
      argsObj: BoxStorageArgs['obj']['deleteBoxMap(uint64)void']
      argsTuple: BoxStorageArgs['tuple']['deleteBoxMap(uint64)void']
      returns: BoxStorageReturns['deleteBoxMap(uint64)void']
    }>
    & Record<'deleteBoxRef(string)void' | 'deleteBoxRef', {
      argsObj: BoxStorageArgs['obj']['deleteBoxRef(string)void']
      argsTuple: BoxStorageArgs['tuple']['deleteBoxRef(string)void']
      returns: BoxStorageReturns['deleteBoxRef(string)void']
    }>
    & Record<'extractBoxRef(string)void' | 'extractBoxRef', {
      argsObj: BoxStorageArgs['obj']['extractBoxRef(string)void']
      argsTuple: BoxStorageArgs['tuple']['extractBoxRef(string)void']
      returns: BoxStorageReturns['extractBoxRef(string)void']
    }>
    & Record<'getBoxMapStruct(uint64)(string,uint64,uint64)' | 'getBoxMapStruct', {
      argsObj: BoxStorageArgs['obj']['getBoxMapStruct(uint64)(string,uint64,uint64)']
      argsTuple: BoxStorageArgs['tuple']['getBoxMapStruct(uint64)(string,uint64,uint64)']
      /**
       * The value stored in the boxMapStruct box
       */
      returns: BoxStorageReturns['getBoxMapStruct(uint64)(string,uint64,uint64)']
    }>
    & Record<'boxMapStructExists(uint64)bool' | 'boxMapStructExists', {
      argsObj: BoxStorageArgs['obj']['boxMapStructExists(uint64)bool']
      argsTuple: BoxStorageArgs['tuple']['boxMapStructExists(uint64)bool']
      /**
       * true if the box exists, false otherwise
       */
      returns: BoxStorageReturns['boxMapStructExists(uint64)bool']
    }>
    & Record<'setBoxMapStruct(uint64,(string,uint64,uint64))bool' | 'setBoxMapStruct', {
      argsObj: BoxStorageArgs['obj']['setBoxMapStruct(uint64,(string,uint64,uint64))bool']
      argsTuple: BoxStorageArgs['tuple']['setBoxMapStruct(uint64,(string,uint64,uint64))bool']
      returns: BoxStorageReturns['setBoxMapStruct(uint64,(string,uint64,uint64))bool']
    }>
    & Record<'boxMapStructLength(uint64)bool' | 'boxMapStructLength', {
      argsObj: BoxStorageArgs['obj']['boxMapStructLength(uint64)bool']
      argsTuple: BoxStorageArgs['tuple']['boxMapStructLength(uint64)bool']
      /**
       * The length of the boxMapStruct box
       */
      returns: BoxStorageReturns['boxMapStructLength(uint64)bool']
    }>
    & Record<'arc4Box(string)uint8[4]' | 'arc4Box', {
      argsObj: BoxStorageArgs['obj']['arc4Box(string)uint8[4]']
      argsTuple: BoxStorageArgs['tuple']['arc4Box(string)uint8[4]']
      /**
       * The static array stored in the box
       */
      returns: BoxStorageReturns['arc4Box(string)uint8[4]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {
        boxString: string
        boxInt: bigint
        boxBytes: BinaryState
        boxDynamicBytes: Uint8Array
        boxRef: BinaryState
        boxMap: string
        boxMapStruct: UserStruct
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BoxStorageSignatures = keyof BoxStorageTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BoxStorageNonVoidMethodSignatures = keyof BoxStorageTypes['methods'] extends infer T ? T extends keyof BoxStorageTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BoxStorage smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BoxStorageSignatures> = BoxStorageTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BoxStorage smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BoxStorageSignatures> = BoxStorageTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BoxStorageTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BoxStorageCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BoxStorageDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BoxStorageCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BoxStorage smart contract
 */
export abstract class BoxStorageParamsFactory {
  /**
   * Constructs a no op call for the getBox()uint64 ABI method
   *
   * Retrieves the value stored in the boxInt box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBox(params: CallParams<BoxStorageArgs['obj']['getBox()uint64'] | BoxStorageArgs['tuple']['getBox()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBox()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the valueBox()uint64 ABI method
   *
   * Retrieves the value of the boxInt box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static valueBox(params: CallParams<BoxStorageArgs['obj']['valueBox()uint64'] | BoxStorageArgs['tuple']['valueBox()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'valueBox()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the maybeBox()(uint64,bool) ABI method
   *
   * Retrieves the value stored in the boxInt box and checks if it exists
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static maybeBox(params: CallParams<BoxStorageArgs['obj']['maybeBox()(uint64,bool)'] | BoxStorageArgs['tuple']['maybeBox()(uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'maybeBox()(uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getBoxMap(uint64)string ABI method
   *
   * Retrieves the value stored in the boxMap box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxMap(params: CallParams<BoxStorageArgs['obj']['getBoxMap(uint64)string'] | BoxStorageArgs['tuple']['getBoxMap(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxMap(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the getBoxMapWithDefault(uint64)string ABI method
   *
   * Retrieves the value stored in the boxMap box with a default value if the key does not exist
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxMapWithDefault(params: CallParams<BoxStorageArgs['obj']['getBoxMapWithDefault(uint64)string'] | BoxStorageArgs['tuple']['getBoxMapWithDefault(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxMapWithDefault(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the maybeBoxMap(uint64)(string,bool) ABI method
   *
   * Retrieves the value stored in the boxMap box and checks if it exists
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static maybeBoxMap(params: CallParams<BoxStorageArgs['obj']['maybeBoxMap(uint64)(string,bool)'] | BoxStorageArgs['tuple']['maybeBoxMap(uint64)(string,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'maybeBoxMap(uint64)(string,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the keyPrefixBoxMap()byte[] ABI method
   *
   * Retrieves the key prefix of the boxMap box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static keyPrefixBoxMap(params: CallParams<BoxStorageArgs['obj']['keyPrefixBoxMap()byte[]'] | BoxStorageArgs['tuple']['keyPrefixBoxMap()byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'keyPrefixBoxMap()byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getBoxRef()address ABI method
   *
   * Retrieves the value stored in the boxRef box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxRef(params: CallParams<BoxStorageArgs['obj']['getBoxRef()address'] | BoxStorageArgs['tuple']['getBoxRef()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxRef()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the boxMapExists(uint64)bool ABI method
   *
   * Checks if the boxMap box exists
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxMapExists(params: CallParams<BoxStorageArgs['obj']['boxMapExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapExists(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxMapExists(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the maybeBoxRef(string)(byte[],bool) ABI method
   *
   * Retrieves the value stored in the boxRef box and checks if it exists
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static maybeBoxRef(params: CallParams<BoxStorageArgs['obj']['maybeBoxRef(string)(byte[],bool)'] | BoxStorageArgs['tuple']['maybeBoxRef(string)(byte[],bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'maybeBoxRef(string)(byte[],bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the setBox(uint64)void ABI method
   *
   * Sets the value of the boxInt box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBox(params: CallParams<BoxStorageArgs['obj']['setBox(uint64)void'] | BoxStorageArgs['tuple']['setBox(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBox(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.valueInt],
    }
  }
  /**
   * Constructs a no op call for the setBoxString(string)void ABI method
   *
   * Sets the value of the boxString box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxString(params: CallParams<BoxStorageArgs['obj']['setBoxString(string)void'] | BoxStorageArgs['tuple']['setBoxString(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBoxString(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.value],
    }
  }
  /**
   * Constructs a no op call for the setBoxDynamicBytes(byte[])void ABI method
   *
   * Sets the value of the boxDynamicBytes box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxDynamicBytes(params: CallParams<BoxStorageArgs['obj']['setBoxDynamicBytes(byte[])void'] | BoxStorageArgs['tuple']['setBoxDynamicBytes(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBoxDynamicBytes(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.value],
    }
  }
  /**
   * Constructs a no op call for the setBoxMap(uint64,string)void ABI method
   *
   * Sets the value of the boxMap box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxMap(params: CallParams<BoxStorageArgs['obj']['setBoxMap(uint64,string)void'] | BoxStorageArgs['tuple']['setBoxMap(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBoxMap(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the setBoxRef(string)void ABI method
   *
   * Creates a box ref with the given key and sets its value to the sender's address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxRef(params: CallParams<BoxStorageArgs['obj']['setBoxRef(string)void'] | BoxStorageArgs['tuple']['setBoxRef(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBoxRef(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the boxMapLength(uint64)uint64 ABI method
   *
   * Retrieves the length of the boxMap box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxMapLength(params: CallParams<BoxStorageArgs['obj']['boxMapLength(uint64)uint64'] | BoxStorageArgs['tuple']['boxMapLength(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxMapLength(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the lengthBoxRef(string)uint64 ABI method
   *
   * Retrieves the length of the boxRef box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static lengthBoxRef(params: CallParams<BoxStorageArgs['obj']['lengthBoxRef(string)uint64'] | BoxStorageArgs['tuple']['lengthBoxRef(string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'lengthBoxRef(string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the deleteBox()void ABI method
   *
   * Deletes the value of the boxInt box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteBox(params: CallParams<BoxStorageArgs['obj']['deleteBox()void'] | BoxStorageArgs['tuple']['deleteBox()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteBox()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the deleteBoxMap(uint64)void ABI method
   *
   * Deletes the value of the boxMap box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteBoxMap(params: CallParams<BoxStorageArgs['obj']['deleteBoxMap(uint64)void'] | BoxStorageArgs['tuple']['deleteBoxMap(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteBoxMap(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the deleteBoxRef(string)void ABI method
   *
   * Deletes the value of the boxRef box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteBoxRef(params: CallParams<BoxStorageArgs['obj']['deleteBoxRef(string)void'] | BoxStorageArgs['tuple']['deleteBoxRef(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteBoxRef(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the extractBoxRef(string)void ABI method
   *
   * Extracts a value from the boxRef box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static extractBoxRef(params: CallParams<BoxStorageArgs['obj']['extractBoxRef(string)void'] | BoxStorageArgs['tuple']['extractBoxRef(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'extractBoxRef(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the getBoxMapStruct(uint64)(string,uint64,uint64) ABI method
   *
   * Retrieves the value stored in the boxMapStruct box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxMapStruct(params: CallParams<BoxStorageArgs['obj']['getBoxMapStruct(uint64)(string,uint64,uint64)'] | BoxStorageArgs['tuple']['getBoxMapStruct(uint64)(string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxMapStruct(uint64)(string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the boxMapStructExists(uint64)bool ABI method
   *
   * Checks if the boxMapStruct box exists
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxMapStructExists(params: CallParams<BoxStorageArgs['obj']['boxMapStructExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructExists(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxMapStructExists(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the setBoxMapStruct(uint64,(string,uint64,uint64))bool ABI method
   *
   * Sets the value of the boxMapStruct box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBoxMapStruct(params: CallParams<BoxStorageArgs['obj']['setBoxMapStruct(uint64,(string,uint64,uint64))bool'] | BoxStorageArgs['tuple']['setBoxMapStruct(uint64,(string,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBoxMapStruct(uint64,(string,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the boxMapStructLength(uint64)bool ABI method
   *
   * Retrieves the length of the boxMapStruct box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxMapStructLength(params: CallParams<BoxStorageArgs['obj']['boxMapStructLength(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructLength(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxMapStructLength(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the arc4Box(string)uint8[4] ABI method
   *
   * Creates and manipulates a box containing a static array of 8-bit unsigned integers
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4Box(params: CallParams<BoxStorageArgs['obj']['arc4Box(string)uint8[4]'] | BoxStorageArgs['tuple']['arc4Box(string)uint8[4]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4Box(string)uint8[4]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BoxStorage smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BoxStorageFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BoxStorageFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BoxStorageClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BoxStorageClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BoxStorage smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BoxStorageDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new BoxStorageClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BoxStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BoxStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BoxStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new BoxStorageClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BoxStorage smart contract
 */
export class BoxStorageClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BoxStorageClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BoxStorage app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BoxStorageClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BoxStorageNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BoxStorageClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BoxStorageClient> {
    return new BoxStorageClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BoxStorageClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BoxStorageClient> {
    return new BoxStorageClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BoxStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBox()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The uint64 value stored in boxInt
     */
    getBox: (params: CallParams<BoxStorageArgs['obj']['getBox()uint64'] | BoxStorageArgs['tuple']['getBox()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.getBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `valueBox()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    valueBox: (params: CallParams<BoxStorageArgs['obj']['valueBox()uint64'] | BoxStorageArgs['tuple']['valueBox()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.valueBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBox()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxInt box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call params: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBox: (params: CallParams<BoxStorageArgs['obj']['maybeBox()(uint64,bool)'] | BoxStorageArgs['tuple']['maybeBox()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.maybeBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMap(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The value stored in the boxMap box
     */
    getBoxMap: (params: CallParams<BoxStorageArgs['obj']['getBoxMap(uint64)string'] | BoxStorageArgs['tuple']['getBoxMap(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.getBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMapWithDefault(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box with a default value if the key does not exist
     *
     * @param params The params for the smart contract call
     * @returns The call params: The value stored in the boxMap box
     */
    getBoxMapWithDefault: (params: CallParams<BoxStorageArgs['obj']['getBoxMapWithDefault(uint64)string'] | BoxStorageArgs['tuple']['getBoxMapWithDefault(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.getBoxMapWithDefault(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBoxMap(uint64)(string,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call params: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBoxMap: (params: CallParams<BoxStorageArgs['obj']['maybeBoxMap(uint64)(string,bool)'] | BoxStorageArgs['tuple']['maybeBoxMap(uint64)(string,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.maybeBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `keyPrefixBoxMap()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the key prefix of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The key prefix of the boxMap box
     */
    keyPrefixBoxMap: (params: CallParams<BoxStorageArgs['obj']['keyPrefixBoxMap()byte[]'] | BoxStorageArgs['tuple']['keyPrefixBoxMap()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.keyPrefixBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxRef()address` ABI method.
     *
     * Retrieves the value stored in the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The value stored in the boxRef box
     */
    getBoxRef: (params: CallParams<BoxStorageArgs['obj']['getBoxRef()address'] | BoxStorageArgs['tuple']['getBoxRef()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.getBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the boxMap box exists
     *
     * @param params The params for the smart contract call
     * @returns The call params: true if the box exists, false otherwise
     */
    boxMapExists: (params: CallParams<BoxStorageArgs['obj']['boxMapExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.boxMapExists(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBoxRef(string)(byte[],bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxRef box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call params: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBoxRef: (params: CallParams<BoxStorageArgs['obj']['maybeBoxRef(string)(byte[],bool)'] | BoxStorageArgs['tuple']['maybeBoxRef(string)(byte[],bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.maybeBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBox(uint64)void` ABI method.
     *
     * Sets the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBox: (params: CallParams<BoxStorageArgs['obj']['setBox(uint64)void'] | BoxStorageArgs['tuple']['setBox(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.setBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxString(string)void` ABI method.
     *
     * Sets the value of the boxString box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxString: (params: CallParams<BoxStorageArgs['obj']['setBoxString(string)void'] | BoxStorageArgs['tuple']['setBoxString(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.setBoxString(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxDynamicBytes(byte[])void` ABI method.
     *
     * Sets the value of the boxDynamicBytes box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxDynamicBytes: (params: CallParams<BoxStorageArgs['obj']['setBoxDynamicBytes(byte[])void'] | BoxStorageArgs['tuple']['setBoxDynamicBytes(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.setBoxDynamicBytes(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxMap(uint64,string)void` ABI method.
     *
     * Sets the value of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxMap: (params: CallParams<BoxStorageArgs['obj']['setBoxMap(uint64,string)void'] | BoxStorageArgs['tuple']['setBoxMap(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.setBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxRef(string)void` ABI method.
     *
     * Creates a box ref with the given key and sets its value to the sender's address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxRef: (params: CallParams<BoxStorageArgs['obj']['setBoxRef(string)void'] | BoxStorageArgs['tuple']['setBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.setBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapLength(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the length of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The length of the boxMap box
     */
    boxMapLength: (params: CallParams<BoxStorageArgs['obj']['boxMapLength(uint64)uint64'] | BoxStorageArgs['tuple']['boxMapLength(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.boxMapLength(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `lengthBoxRef(string)uint64` ABI method.
     *
     * Retrieves the length of the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The length of the boxRef box
     */
    lengthBoxRef: (params: CallParams<BoxStorageArgs['obj']['lengthBoxRef(string)uint64'] | BoxStorageArgs['tuple']['lengthBoxRef(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.lengthBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBox()void` ABI method.
     *
     * Deletes the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteBox: (params: CallParams<BoxStorageArgs['obj']['deleteBox()void'] | BoxStorageArgs['tuple']['deleteBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.deleteBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBoxMap(uint64)void` ABI method.
     *
     * Deletes the value of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteBoxMap: (params: CallParams<BoxStorageArgs['obj']['deleteBoxMap(uint64)void'] | BoxStorageArgs['tuple']['deleteBoxMap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.deleteBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBoxRef(string)void` ABI method.
     *
     * Deletes the value of the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteBoxRef: (params: CallParams<BoxStorageArgs['obj']['deleteBoxRef(string)void'] | BoxStorageArgs['tuple']['deleteBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.deleteBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `extractBoxRef(string)void` ABI method.
     *
     * Extracts a value from the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    extractBoxRef: (params: CallParams<BoxStorageArgs['obj']['extractBoxRef(string)void'] | BoxStorageArgs['tuple']['extractBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.extractBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMapStruct(uint64)(string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The value stored in the boxMapStruct box
     */
    getBoxMapStruct: (params: CallParams<BoxStorageArgs['obj']['getBoxMapStruct(uint64)(string,uint64,uint64)'] | BoxStorageArgs['tuple']['getBoxMapStruct(uint64)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.getBoxMapStruct(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapStructExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the boxMapStruct box exists
     *
     * @param params The params for the smart contract call
     * @returns The call params: true if the box exists, false otherwise
     */
    boxMapStructExists: (params: CallParams<BoxStorageArgs['obj']['boxMapStructExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.boxMapStructExists(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxMapStruct(uint64,(string,uint64,uint64))bool` ABI method.
     *
     * Sets the value of the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBoxMapStruct: (params: CallParams<BoxStorageArgs['obj']['setBoxMapStruct(uint64,(string,uint64,uint64))bool'] | BoxStorageArgs['tuple']['setBoxMapStruct(uint64,(string,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.setBoxMapStruct(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapStructLength(uint64)bool` ABI method.
     *
     * Retrieves the length of the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call params: The length of the boxMapStruct box
     */
    boxMapStructLength: (params: CallParams<BoxStorageArgs['obj']['boxMapStructLength(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructLength(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.boxMapStructLength(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `arc4Box(string)uint8[4]` ABI method.
     *
     * Creates and manipulates a box containing a static array of 8-bit unsigned integers
     *
     * @param params The params for the smart contract call
     * @returns The call params: The static array stored in the box
     */
    arc4Box: (params: CallParams<BoxStorageArgs['obj']['arc4Box(string)uint8[4]'] | BoxStorageArgs['tuple']['arc4Box(string)uint8[4]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BoxStorageParamsFactory.arc4Box(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BoxStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBox()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The uint64 value stored in boxInt
     */
    getBox: (params: CallParams<BoxStorageArgs['obj']['getBox()uint64'] | BoxStorageArgs['tuple']['getBox()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.getBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `valueBox()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    valueBox: (params: CallParams<BoxStorageArgs['obj']['valueBox()uint64'] | BoxStorageArgs['tuple']['valueBox()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.valueBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBox()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxInt box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBox: (params: CallParams<BoxStorageArgs['obj']['maybeBox()(uint64,bool)'] | BoxStorageArgs['tuple']['maybeBox()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.maybeBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMap(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The value stored in the boxMap box
     */
    getBoxMap: (params: CallParams<BoxStorageArgs['obj']['getBoxMap(uint64)string'] | BoxStorageArgs['tuple']['getBoxMap(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.getBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMapWithDefault(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box with a default value if the key does not exist
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The value stored in the boxMap box
     */
    getBoxMapWithDefault: (params: CallParams<BoxStorageArgs['obj']['getBoxMapWithDefault(uint64)string'] | BoxStorageArgs['tuple']['getBoxMapWithDefault(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.getBoxMapWithDefault(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBoxMap(uint64)(string,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBoxMap: (params: CallParams<BoxStorageArgs['obj']['maybeBoxMap(uint64)(string,bool)'] | BoxStorageArgs['tuple']['maybeBoxMap(uint64)(string,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.maybeBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `keyPrefixBoxMap()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the key prefix of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The key prefix of the boxMap box
     */
    keyPrefixBoxMap: (params: CallParams<BoxStorageArgs['obj']['keyPrefixBoxMap()byte[]'] | BoxStorageArgs['tuple']['keyPrefixBoxMap()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.keyPrefixBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxRef()address` ABI method.
     *
     * Retrieves the value stored in the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The value stored in the boxRef box
     */
    getBoxRef: (params: CallParams<BoxStorageArgs['obj']['getBoxRef()address'] | BoxStorageArgs['tuple']['getBoxRef()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.getBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the boxMap box exists
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: true if the box exists, false otherwise
     */
    boxMapExists: (params: CallParams<BoxStorageArgs['obj']['boxMapExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.boxMapExists(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBoxRef(string)(byte[],bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxRef box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBoxRef: (params: CallParams<BoxStorageArgs['obj']['maybeBoxRef(string)(byte[],bool)'] | BoxStorageArgs['tuple']['maybeBoxRef(string)(byte[],bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.maybeBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBox(uint64)void` ABI method.
     *
     * Sets the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBox: (params: CallParams<BoxStorageArgs['obj']['setBox(uint64)void'] | BoxStorageArgs['tuple']['setBox(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.setBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxString(string)void` ABI method.
     *
     * Sets the value of the boxString box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxString: (params: CallParams<BoxStorageArgs['obj']['setBoxString(string)void'] | BoxStorageArgs['tuple']['setBoxString(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.setBoxString(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxDynamicBytes(byte[])void` ABI method.
     *
     * Sets the value of the boxDynamicBytes box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxDynamicBytes: (params: CallParams<BoxStorageArgs['obj']['setBoxDynamicBytes(byte[])void'] | BoxStorageArgs['tuple']['setBoxDynamicBytes(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.setBoxDynamicBytes(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxMap(uint64,string)void` ABI method.
     *
     * Sets the value of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxMap: (params: CallParams<BoxStorageArgs['obj']['setBoxMap(uint64,string)void'] | BoxStorageArgs['tuple']['setBoxMap(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.setBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxRef(string)void` ABI method.
     *
     * Creates a box ref with the given key and sets its value to the sender's address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxRef: (params: CallParams<BoxStorageArgs['obj']['setBoxRef(string)void'] | BoxStorageArgs['tuple']['setBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.setBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapLength(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the length of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The length of the boxMap box
     */
    boxMapLength: (params: CallParams<BoxStorageArgs['obj']['boxMapLength(uint64)uint64'] | BoxStorageArgs['tuple']['boxMapLength(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.boxMapLength(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `lengthBoxRef(string)uint64` ABI method.
     *
     * Retrieves the length of the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The length of the boxRef box
     */
    lengthBoxRef: (params: CallParams<BoxStorageArgs['obj']['lengthBoxRef(string)uint64'] | BoxStorageArgs['tuple']['lengthBoxRef(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.lengthBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBox()void` ABI method.
     *
     * Deletes the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteBox: (params: CallParams<BoxStorageArgs['obj']['deleteBox()void'] | BoxStorageArgs['tuple']['deleteBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.deleteBox(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBoxMap(uint64)void` ABI method.
     *
     * Deletes the value of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteBoxMap: (params: CallParams<BoxStorageArgs['obj']['deleteBoxMap(uint64)void'] | BoxStorageArgs['tuple']['deleteBoxMap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.deleteBoxMap(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBoxRef(string)void` ABI method.
     *
     * Deletes the value of the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteBoxRef: (params: CallParams<BoxStorageArgs['obj']['deleteBoxRef(string)void'] | BoxStorageArgs['tuple']['deleteBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.deleteBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `extractBoxRef(string)void` ABI method.
     *
     * Extracts a value from the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    extractBoxRef: (params: CallParams<BoxStorageArgs['obj']['extractBoxRef(string)void'] | BoxStorageArgs['tuple']['extractBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.extractBoxRef(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMapStruct(uint64)(string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The value stored in the boxMapStruct box
     */
    getBoxMapStruct: (params: CallParams<BoxStorageArgs['obj']['getBoxMapStruct(uint64)(string,uint64,uint64)'] | BoxStorageArgs['tuple']['getBoxMapStruct(uint64)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.getBoxMapStruct(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapStructExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the boxMapStruct box exists
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: true if the box exists, false otherwise
     */
    boxMapStructExists: (params: CallParams<BoxStorageArgs['obj']['boxMapStructExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.boxMapStructExists(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxMapStruct(uint64,(string,uint64,uint64))bool` ABI method.
     *
     * Sets the value of the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBoxMapStruct: (params: CallParams<BoxStorageArgs['obj']['setBoxMapStruct(uint64,(string,uint64,uint64))bool'] | BoxStorageArgs['tuple']['setBoxMapStruct(uint64,(string,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.setBoxMapStruct(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapStructLength(uint64)bool` ABI method.
     *
     * Retrieves the length of the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The length of the boxMapStruct box
     */
    boxMapStructLength: (params: CallParams<BoxStorageArgs['obj']['boxMapStructLength(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructLength(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.boxMapStructLength(params))
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `arc4Box(string)uint8[4]` ABI method.
     *
     * Creates and manipulates a box containing a static array of 8-bit unsigned integers
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The static array stored in the box
     */
    arc4Box: (params: CallParams<BoxStorageArgs['obj']['arc4Box(string)uint8[4]'] | BoxStorageArgs['tuple']['arc4Box(string)uint8[4]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BoxStorageParamsFactory.arc4Box(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BoxStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBox()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The uint64 value stored in boxInt
     */
    getBox: async (params: CallParams<BoxStorageArgs['obj']['getBox()uint64'] | BoxStorageArgs['tuple']['getBox()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.getBox(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['getBox()uint64'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `valueBox()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    valueBox: async (params: CallParams<BoxStorageArgs['obj']['valueBox()uint64'] | BoxStorageArgs['tuple']['valueBox()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.valueBox(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['valueBox()uint64'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBox()(uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxInt box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call result: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBox: async (params: CallParams<BoxStorageArgs['obj']['maybeBox()(uint64,bool)'] | BoxStorageArgs['tuple']['maybeBox()(uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.maybeBox(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['maybeBox()(uint64,bool)'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMap(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The value stored in the boxMap box
     */
    getBoxMap: async (params: CallParams<BoxStorageArgs['obj']['getBoxMap(uint64)string'] | BoxStorageArgs['tuple']['getBoxMap(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.getBoxMap(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['getBoxMap(uint64)string'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMapWithDefault(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box with a default value if the key does not exist
     *
     * @param params The params for the smart contract call
     * @returns The call result: The value stored in the boxMap box
     */
    getBoxMapWithDefault: async (params: CallParams<BoxStorageArgs['obj']['getBoxMapWithDefault(uint64)string'] | BoxStorageArgs['tuple']['getBoxMapWithDefault(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.getBoxMapWithDefault(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['getBoxMapWithDefault(uint64)string'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBoxMap(uint64)(string,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMap box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call result: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBoxMap: async (params: CallParams<BoxStorageArgs['obj']['maybeBoxMap(uint64)(string,bool)'] | BoxStorageArgs['tuple']['maybeBoxMap(uint64)(string,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.maybeBoxMap(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['maybeBoxMap(uint64)(string,bool)'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `keyPrefixBoxMap()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the key prefix of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The key prefix of the boxMap box
     */
    keyPrefixBoxMap: async (params: CallParams<BoxStorageArgs['obj']['keyPrefixBoxMap()byte[]'] | BoxStorageArgs['tuple']['keyPrefixBoxMap()byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.keyPrefixBoxMap(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['keyPrefixBoxMap()byte[]'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxRef()address` ABI method.
     *
     * Retrieves the value stored in the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The value stored in the boxRef box
     */
    getBoxRef: async (params: CallParams<BoxStorageArgs['obj']['getBoxRef()address'] | BoxStorageArgs['tuple']['getBoxRef()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.getBoxRef(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['getBoxRef()address'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the boxMap box exists
     *
     * @param params The params for the smart contract call
     * @returns The call result: true if the box exists, false otherwise
     */
    boxMapExists: async (params: CallParams<BoxStorageArgs['obj']['boxMapExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapExists(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.boxMapExists(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['boxMapExists(uint64)bool'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `maybeBoxRef(string)(byte[],bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxRef box and checks if it exists
     *
     * @param params The params for the smart contract call
     * @returns The call result: A tuple containing the value and a boolean indicating if the box exists
     */
    maybeBoxRef: async (params: CallParams<BoxStorageArgs['obj']['maybeBoxRef(string)(byte[],bool)'] | BoxStorageArgs['tuple']['maybeBoxRef(string)(byte[],bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.maybeBoxRef(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['maybeBoxRef(string)(byte[],bool)'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBox(uint64)void` ABI method.
     *
     * Sets the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBox: async (params: CallParams<BoxStorageArgs['obj']['setBox(uint64)void'] | BoxStorageArgs['tuple']['setBox(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.setBox(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['setBox(uint64)void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxString(string)void` ABI method.
     *
     * Sets the value of the boxString box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxString: async (params: CallParams<BoxStorageArgs['obj']['setBoxString(string)void'] | BoxStorageArgs['tuple']['setBoxString(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.setBoxString(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['setBoxString(string)void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxDynamicBytes(byte[])void` ABI method.
     *
     * Sets the value of the boxDynamicBytes box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxDynamicBytes: async (params: CallParams<BoxStorageArgs['obj']['setBoxDynamicBytes(byte[])void'] | BoxStorageArgs['tuple']['setBoxDynamicBytes(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.setBoxDynamicBytes(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['setBoxDynamicBytes(byte[])void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxMap(uint64,string)void` ABI method.
     *
     * Sets the value of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxMap: async (params: CallParams<BoxStorageArgs['obj']['setBoxMap(uint64,string)void'] | BoxStorageArgs['tuple']['setBoxMap(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.setBoxMap(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['setBoxMap(uint64,string)void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxRef(string)void` ABI method.
     *
     * Creates a box ref with the given key and sets its value to the sender's address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxRef: async (params: CallParams<BoxStorageArgs['obj']['setBoxRef(string)void'] | BoxStorageArgs['tuple']['setBoxRef(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.setBoxRef(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['setBoxRef(string)void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapLength(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the length of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The length of the boxMap box
     */
    boxMapLength: async (params: CallParams<BoxStorageArgs['obj']['boxMapLength(uint64)uint64'] | BoxStorageArgs['tuple']['boxMapLength(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.boxMapLength(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['boxMapLength(uint64)uint64'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `lengthBoxRef(string)uint64` ABI method.
     *
     * Retrieves the length of the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The length of the boxRef box
     */
    lengthBoxRef: async (params: CallParams<BoxStorageArgs['obj']['lengthBoxRef(string)uint64'] | BoxStorageArgs['tuple']['lengthBoxRef(string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.lengthBoxRef(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['lengthBoxRef(string)uint64'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBox()void` ABI method.
     *
     * Deletes the value of the boxInt box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteBox: async (params: CallParams<BoxStorageArgs['obj']['deleteBox()void'] | BoxStorageArgs['tuple']['deleteBox()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.deleteBox(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['deleteBox()void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBoxMap(uint64)void` ABI method.
     *
     * Deletes the value of the boxMap box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteBoxMap: async (params: CallParams<BoxStorageArgs['obj']['deleteBoxMap(uint64)void'] | BoxStorageArgs['tuple']['deleteBoxMap(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.deleteBoxMap(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['deleteBoxMap(uint64)void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `deleteBoxRef(string)void` ABI method.
     *
     * Deletes the value of the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteBoxRef: async (params: CallParams<BoxStorageArgs['obj']['deleteBoxRef(string)void'] | BoxStorageArgs['tuple']['deleteBoxRef(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.deleteBoxRef(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['deleteBoxRef(string)void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `extractBoxRef(string)void` ABI method.
     *
     * Extracts a value from the boxRef box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    extractBoxRef: async (params: CallParams<BoxStorageArgs['obj']['extractBoxRef(string)void'] | BoxStorageArgs['tuple']['extractBoxRef(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.extractBoxRef(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['extractBoxRef(string)void'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `getBoxMapStruct(uint64)(string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the value stored in the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The value stored in the boxMapStruct box
     */
    getBoxMapStruct: async (params: CallParams<BoxStorageArgs['obj']['getBoxMapStruct(uint64)(string,uint64,uint64)'] | BoxStorageArgs['tuple']['getBoxMapStruct(uint64)(string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.getBoxMapStruct(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['getBoxMapStruct(uint64)(string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapStructExists(uint64)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the boxMapStruct box exists
     *
     * @param params The params for the smart contract call
     * @returns The call result: true if the box exists, false otherwise
     */
    boxMapStructExists: async (params: CallParams<BoxStorageArgs['obj']['boxMapStructExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructExists(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.boxMapStructExists(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['boxMapStructExists(uint64)bool'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `setBoxMapStruct(uint64,(string,uint64,uint64))bool` ABI method.
     *
     * Sets the value of the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBoxMapStruct: async (params: CallParams<BoxStorageArgs['obj']['setBoxMapStruct(uint64,(string,uint64,uint64))bool'] | BoxStorageArgs['tuple']['setBoxMapStruct(uint64,(string,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.setBoxMapStruct(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['setBoxMapStruct(uint64,(string,uint64,uint64))bool'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `boxMapStructLength(uint64)bool` ABI method.
     *
     * Retrieves the length of the boxMapStruct box
     *
     * @param params The params for the smart contract call
     * @returns The call result: The length of the boxMapStruct box
     */
    boxMapStructLength: async (params: CallParams<BoxStorageArgs['obj']['boxMapStructLength(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructLength(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.boxMapStructLength(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['boxMapStructLength(uint64)bool'])}
    },

    /**
     * Makes a call to the BoxStorage smart contract using the `arc4Box(string)uint8[4]` ABI method.
     *
     * Creates and manipulates a box containing a static array of 8-bit unsigned integers
     *
     * @param params The params for the smart contract call
     * @returns The call result: The static array stored in the box
     */
    arc4Box: async (params: CallParams<BoxStorageArgs['obj']['arc4Box(string)uint8[4]'] | BoxStorageArgs['tuple']['arc4Box(string)uint8[4]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BoxStorageParamsFactory.arc4Box(params))
      return {...result, return: result.return as unknown as (undefined | BoxStorageReturns['arc4Box(string)uint8[4]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BoxStorageClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `getBox()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the value stored in the boxInt box
   *
   * @param params The params for the smart contract call
   * @returns The call result: The uint64 value stored in boxInt
   */
  async getBox(params: CallParams<BoxStorageArgs['obj']['getBox()uint64'] | BoxStorageArgs['tuple']['getBox()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.getBox(params))
    return result.return as unknown as BoxStorageReturns['getBox()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `valueBox()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the value of the boxInt box
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async valueBox(params: CallParams<BoxStorageArgs['obj']['valueBox()uint64'] | BoxStorageArgs['tuple']['valueBox()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.valueBox(params))
    return result.return as unknown as BoxStorageReturns['valueBox()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `maybeBox()(uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the value stored in the boxInt box and checks if it exists
   *
   * @param params The params for the smart contract call
   * @returns The call result: A tuple containing the value and a boolean indicating if the box exists
   */
  async maybeBox(params: CallParams<BoxStorageArgs['obj']['maybeBox()(uint64,bool)'] | BoxStorageArgs['tuple']['maybeBox()(uint64,bool)']> = {args: []}) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.maybeBox(params))
    return result.return as unknown as BoxStorageReturns['maybeBox()(uint64,bool)']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `getBoxMap(uint64)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the value stored in the boxMap box
   *
   * @param params The params for the smart contract call
   * @returns The call result: The value stored in the boxMap box
   */
  async getBoxMap(params: CallParams<BoxStorageArgs['obj']['getBoxMap(uint64)string'] | BoxStorageArgs['tuple']['getBoxMap(uint64)string']>) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.getBoxMap(params))
    return result.return as unknown as BoxStorageReturns['getBoxMap(uint64)string']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `getBoxMapWithDefault(uint64)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the value stored in the boxMap box with a default value if the key does not exist
   *
   * @param params The params for the smart contract call
   * @returns The call result: The value stored in the boxMap box
   */
  async getBoxMapWithDefault(params: CallParams<BoxStorageArgs['obj']['getBoxMapWithDefault(uint64)string'] | BoxStorageArgs['tuple']['getBoxMapWithDefault(uint64)string']>) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.getBoxMapWithDefault(params))
    return result.return as unknown as BoxStorageReturns['getBoxMapWithDefault(uint64)string']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `maybeBoxMap(uint64)(string,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the value stored in the boxMap box and checks if it exists
   *
   * @param params The params for the smart contract call
   * @returns The call result: A tuple containing the value and a boolean indicating if the box exists
   */
  async maybeBoxMap(params: CallParams<BoxStorageArgs['obj']['maybeBoxMap(uint64)(string,bool)'] | BoxStorageArgs['tuple']['maybeBoxMap(uint64)(string,bool)']>) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.maybeBoxMap(params))
    return result.return as unknown as BoxStorageReturns['maybeBoxMap(uint64)(string,bool)']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `keyPrefixBoxMap()byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the key prefix of the boxMap box
   *
   * @param params The params for the smart contract call
   * @returns The call result: The key prefix of the boxMap box
   */
  async keyPrefixBoxMap(params: CallParams<BoxStorageArgs['obj']['keyPrefixBoxMap()byte[]'] | BoxStorageArgs['tuple']['keyPrefixBoxMap()byte[]']> = {args: []}) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.keyPrefixBoxMap(params))
    return result.return as unknown as BoxStorageReturns['keyPrefixBoxMap()byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `boxMapExists(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Checks if the boxMap box exists
   *
   * @param params The params for the smart contract call
   * @returns The call result: true if the box exists, false otherwise
   */
  async boxMapExists(params: CallParams<BoxStorageArgs['obj']['boxMapExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapExists(uint64)bool']>) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.boxMapExists(params))
    return result.return as unknown as BoxStorageReturns['boxMapExists(uint64)bool']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `maybeBoxRef(string)(byte[],bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the value stored in the boxRef box and checks if it exists
   *
   * @param params The params for the smart contract call
   * @returns The call result: A tuple containing the value and a boolean indicating if the box exists
   */
  async maybeBoxRef(params: CallParams<BoxStorageArgs['obj']['maybeBoxRef(string)(byte[],bool)'] | BoxStorageArgs['tuple']['maybeBoxRef(string)(byte[],bool)']>) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.maybeBoxRef(params))
    return result.return as unknown as BoxStorageReturns['maybeBoxRef(string)(byte[],bool)']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `boxMapLength(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the length of the boxMap box
   *
   * @param params The params for the smart contract call
   * @returns The call result: The length of the boxMap box
   */
  async boxMapLength(params: CallParams<BoxStorageArgs['obj']['boxMapLength(uint64)uint64'] | BoxStorageArgs['tuple']['boxMapLength(uint64)uint64']>) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.boxMapLength(params))
    return result.return as unknown as BoxStorageReturns['boxMapLength(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `getBoxMapStruct(uint64)(string,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the value stored in the boxMapStruct box
   *
   * @param params The params for the smart contract call
   * @returns The call result: The value stored in the boxMapStruct box
   */
  async getBoxMapStruct(params: CallParams<BoxStorageArgs['obj']['getBoxMapStruct(uint64)(string,uint64,uint64)'] | BoxStorageArgs['tuple']['getBoxMapStruct(uint64)(string,uint64,uint64)']>) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.getBoxMapStruct(params))
    return result.return as unknown as BoxStorageReturns['getBoxMapStruct(uint64)(string,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the BoxStorage smart contract using the `boxMapStructExists(uint64)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Checks if the boxMapStruct box exists
   *
   * @param params The params for the smart contract call
   * @returns The call result: true if the box exists, false otherwise
   */
  async boxMapStructExists(params: CallParams<BoxStorageArgs['obj']['boxMapStructExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructExists(uint64)bool']>) {
    const result = await this.appClient.send.call(BoxStorageParamsFactory.boxMapStructExists(params))
    return result.return as unknown as BoxStorageReturns['boxMapStructExists(uint64)bool']
  }

  /**
   * Methods to access state for the current BoxStorage app
   */
  state = {
    /**
     * Methods to access box state for the current BoxStorage app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          boxString: result.boxString,
          boxInt: result.boxInt,
          boxBytes: new BinaryStateValue(result.boxBytes),
          boxDynamicBytes: result.boxDynamicBytes,
          boxRef: new BinaryStateValue(result.boxRef),
          boxMap: result.boxMap,
          boxMapStruct: result.boxMapStruct,
        }
      },
      /**
       * Get the current value of the boxString key in box state
       */
      boxString: async (): Promise<string | undefined> => { return (await this.appClient.state.box.getValue("boxString")) as string | undefined },
      /**
       * Get the current value of the boxInt key in box state
       */
      boxInt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.box.getValue("boxInt")) as bigint | undefined },
      /**
       * Get the current value of the boxBytes key in box state
       */
      boxBytes: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("boxBytes")) as Uint8Array | undefined) },
      /**
       * Get the current value of the boxDynamicBytes key in box state
       */
      boxDynamicBytes: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.box.getValue("boxDynamicBytes")) as Uint8Array | undefined },
      /**
       * Get the current value of the boxRef key in box state
       */
      boxRef: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("boxRef")) as Uint8Array | undefined) },
      /**
       * Get the current value of the boxMap key in box state
       */
      boxMap: async (): Promise<string | undefined> => { return (await this.appClient.state.box.getValue("boxMap")) as string | undefined },
      /**
       * Get the current value of the boxMapStruct key in box state
       */
      boxMapStruct: async (): Promise<UserStruct | undefined> => { return (await this.appClient.state.box.getValue("boxMapStruct")) as UserStruct | undefined },
    },
  }

  public newGroup(): BoxStorageComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a getBox()uint64 method call against the BoxStorage contract
       */
      getBox(params: CallParams<BoxStorageArgs['obj']['getBox()uint64'] | BoxStorageArgs['tuple']['getBox()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBox(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBox()uint64', v))
        return this
      },
      /**
       * Add a valueBox()uint64 method call against the BoxStorage contract
       */
      valueBox(params: CallParams<BoxStorageArgs['obj']['valueBox()uint64'] | BoxStorageArgs['tuple']['valueBox()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.valueBox(params)))
        resultMappers.push((v) => client.decodeReturnValue('valueBox()uint64', v))
        return this
      },
      /**
       * Add a maybeBox()(uint64,bool) method call against the BoxStorage contract
       */
      maybeBox(params: CallParams<BoxStorageArgs['obj']['maybeBox()(uint64,bool)'] | BoxStorageArgs['tuple']['maybeBox()(uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.maybeBox(params)))
        resultMappers.push((v) => client.decodeReturnValue('maybeBox()(uint64,bool)', v))
        return this
      },
      /**
       * Add a getBoxMap(uint64)string method call against the BoxStorage contract
       */
      getBoxMap(params: CallParams<BoxStorageArgs['obj']['getBoxMap(uint64)string'] | BoxStorageArgs['tuple']['getBoxMap(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxMap(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxMap(uint64)string', v))
        return this
      },
      /**
       * Add a getBoxMapWithDefault(uint64)string method call against the BoxStorage contract
       */
      getBoxMapWithDefault(params: CallParams<BoxStorageArgs['obj']['getBoxMapWithDefault(uint64)string'] | BoxStorageArgs['tuple']['getBoxMapWithDefault(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxMapWithDefault(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxMapWithDefault(uint64)string', v))
        return this
      },
      /**
       * Add a maybeBoxMap(uint64)(string,bool) method call against the BoxStorage contract
       */
      maybeBoxMap(params: CallParams<BoxStorageArgs['obj']['maybeBoxMap(uint64)(string,bool)'] | BoxStorageArgs['tuple']['maybeBoxMap(uint64)(string,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.maybeBoxMap(params)))
        resultMappers.push((v) => client.decodeReturnValue('maybeBoxMap(uint64)(string,bool)', v))
        return this
      },
      /**
       * Add a keyPrefixBoxMap()byte[] method call against the BoxStorage contract
       */
      keyPrefixBoxMap(params: CallParams<BoxStorageArgs['obj']['keyPrefixBoxMap()byte[]'] | BoxStorageArgs['tuple']['keyPrefixBoxMap()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.keyPrefixBoxMap(params)))
        resultMappers.push((v) => client.decodeReturnValue('keyPrefixBoxMap()byte[]', v))
        return this
      },
      /**
       * Add a getBoxRef()address method call against the BoxStorage contract
       */
      getBoxRef(params: CallParams<BoxStorageArgs['obj']['getBoxRef()address'] | BoxStorageArgs['tuple']['getBoxRef()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxRef(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxRef()address', v))
        return this
      },
      /**
       * Add a boxMapExists(uint64)bool method call against the BoxStorage contract
       */
      boxMapExists(params: CallParams<BoxStorageArgs['obj']['boxMapExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxMapExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('boxMapExists(uint64)bool', v))
        return this
      },
      /**
       * Add a maybeBoxRef(string)(byte[],bool) method call against the BoxStorage contract
       */
      maybeBoxRef(params: CallParams<BoxStorageArgs['obj']['maybeBoxRef(string)(byte[],bool)'] | BoxStorageArgs['tuple']['maybeBoxRef(string)(byte[],bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.maybeBoxRef(params)))
        resultMappers.push((v) => client.decodeReturnValue('maybeBoxRef(string)(byte[],bool)', v))
        return this
      },
      /**
       * Add a setBox(uint64)void method call against the BoxStorage contract
       */
      setBox(params: CallParams<BoxStorageArgs['obj']['setBox(uint64)void'] | BoxStorageArgs['tuple']['setBox(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBoxString(string)void method call against the BoxStorage contract
       */
      setBoxString(params: CallParams<BoxStorageArgs['obj']['setBoxString(string)void'] | BoxStorageArgs['tuple']['setBoxString(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxString(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBoxDynamicBytes(byte[])void method call against the BoxStorage contract
       */
      setBoxDynamicBytes(params: CallParams<BoxStorageArgs['obj']['setBoxDynamicBytes(byte[])void'] | BoxStorageArgs['tuple']['setBoxDynamicBytes(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxDynamicBytes(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBoxMap(uint64,string)void method call against the BoxStorage contract
       */
      setBoxMap(params: CallParams<BoxStorageArgs['obj']['setBoxMap(uint64,string)void'] | BoxStorageArgs['tuple']['setBoxMap(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxMap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBoxRef(string)void method call against the BoxStorage contract
       */
      setBoxRef(params: CallParams<BoxStorageArgs['obj']['setBoxRef(string)void'] | BoxStorageArgs['tuple']['setBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxRef(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a boxMapLength(uint64)uint64 method call against the BoxStorage contract
       */
      boxMapLength(params: CallParams<BoxStorageArgs['obj']['boxMapLength(uint64)uint64'] | BoxStorageArgs['tuple']['boxMapLength(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxMapLength(params)))
        resultMappers.push((v) => client.decodeReturnValue('boxMapLength(uint64)uint64', v))
        return this
      },
      /**
       * Add a lengthBoxRef(string)uint64 method call against the BoxStorage contract
       */
      lengthBoxRef(params: CallParams<BoxStorageArgs['obj']['lengthBoxRef(string)uint64'] | BoxStorageArgs['tuple']['lengthBoxRef(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.lengthBoxRef(params)))
        resultMappers.push((v) => client.decodeReturnValue('lengthBoxRef(string)uint64', v))
        return this
      },
      /**
       * Add a deleteBox()void method call against the BoxStorage contract
       */
      deleteBox(params: CallParams<BoxStorageArgs['obj']['deleteBox()void'] | BoxStorageArgs['tuple']['deleteBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteBoxMap(uint64)void method call against the BoxStorage contract
       */
      deleteBoxMap(params: CallParams<BoxStorageArgs['obj']['deleteBoxMap(uint64)void'] | BoxStorageArgs['tuple']['deleteBoxMap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteBoxMap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteBoxRef(string)void method call against the BoxStorage contract
       */
      deleteBoxRef(params: CallParams<BoxStorageArgs['obj']['deleteBoxRef(string)void'] | BoxStorageArgs['tuple']['deleteBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteBoxRef(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a extractBoxRef(string)void method call against the BoxStorage contract
       */
      extractBoxRef(params: CallParams<BoxStorageArgs['obj']['extractBoxRef(string)void'] | BoxStorageArgs['tuple']['extractBoxRef(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.extractBoxRef(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getBoxMapStruct(uint64)(string,uint64,uint64) method call against the BoxStorage contract
       */
      getBoxMapStruct(params: CallParams<BoxStorageArgs['obj']['getBoxMapStruct(uint64)(string,uint64,uint64)'] | BoxStorageArgs['tuple']['getBoxMapStruct(uint64)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxMapStruct(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxMapStruct(uint64)(string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a boxMapStructExists(uint64)bool method call against the BoxStorage contract
       */
      boxMapStructExists(params: CallParams<BoxStorageArgs['obj']['boxMapStructExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxMapStructExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('boxMapStructExists(uint64)bool', v))
        return this
      },
      /**
       * Add a setBoxMapStruct(uint64,(string,uint64,uint64))bool method call against the BoxStorage contract
       */
      setBoxMapStruct(params: CallParams<BoxStorageArgs['obj']['setBoxMapStruct(uint64,(string,uint64,uint64))bool'] | BoxStorageArgs['tuple']['setBoxMapStruct(uint64,(string,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBoxMapStruct(params)))
        resultMappers.push((v) => client.decodeReturnValue('setBoxMapStruct(uint64,(string,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a boxMapStructLength(uint64)bool method call against the BoxStorage contract
       */
      boxMapStructLength(params: CallParams<BoxStorageArgs['obj']['boxMapStructLength(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructLength(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxMapStructLength(params)))
        resultMappers.push((v) => client.decodeReturnValue('boxMapStructLength(uint64)bool', v))
        return this
      },
      /**
       * Add a arc4Box(string)uint8[4] method call against the BoxStorage contract
       */
      arc4Box(params: CallParams<BoxStorageArgs['obj']['arc4Box(string)uint8[4]'] | BoxStorageArgs['tuple']['arc4Box(string)uint8[4]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4Box(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4Box(string)uint8[4]', v))
        return this
      },
      /**
       * Add a clear state call to the BoxStorage contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BoxStorageComposer
  }
}
export type BoxStorageComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getBox()uint64 ABI method.
   *
   * Retrieves the value stored in the boxInt box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBox(params?: CallParams<BoxStorageArgs['obj']['getBox()uint64'] | BoxStorageArgs['tuple']['getBox()uint64']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['getBox()uint64'] | undefined]>

  /**
   * Calls the valueBox()uint64 ABI method.
   *
   * Retrieves the value of the boxInt box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  valueBox(params?: CallParams<BoxStorageArgs['obj']['valueBox()uint64'] | BoxStorageArgs['tuple']['valueBox()uint64']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['valueBox()uint64'] | undefined]>

  /**
   * Calls the maybeBox()(uint64,bool) ABI method.
   *
   * Retrieves the value stored in the boxInt box and checks if it exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  maybeBox(params?: CallParams<BoxStorageArgs['obj']['maybeBox()(uint64,bool)'] | BoxStorageArgs['tuple']['maybeBox()(uint64,bool)']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['maybeBox()(uint64,bool)'] | undefined]>

  /**
   * Calls the getBoxMap(uint64)string ABI method.
   *
   * Retrieves the value stored in the boxMap box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxMap(params?: CallParams<BoxStorageArgs['obj']['getBoxMap(uint64)string'] | BoxStorageArgs['tuple']['getBoxMap(uint64)string']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['getBoxMap(uint64)string'] | undefined]>

  /**
   * Calls the getBoxMapWithDefault(uint64)string ABI method.
   *
   * Retrieves the value stored in the boxMap box with a default value if the key does not exist
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxMapWithDefault(params?: CallParams<BoxStorageArgs['obj']['getBoxMapWithDefault(uint64)string'] | BoxStorageArgs['tuple']['getBoxMapWithDefault(uint64)string']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['getBoxMapWithDefault(uint64)string'] | undefined]>

  /**
   * Calls the maybeBoxMap(uint64)(string,bool) ABI method.
   *
   * Retrieves the value stored in the boxMap box and checks if it exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  maybeBoxMap(params?: CallParams<BoxStorageArgs['obj']['maybeBoxMap(uint64)(string,bool)'] | BoxStorageArgs['tuple']['maybeBoxMap(uint64)(string,bool)']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['maybeBoxMap(uint64)(string,bool)'] | undefined]>

  /**
   * Calls the keyPrefixBoxMap()byte[] ABI method.
   *
   * Retrieves the key prefix of the boxMap box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keyPrefixBoxMap(params?: CallParams<BoxStorageArgs['obj']['keyPrefixBoxMap()byte[]'] | BoxStorageArgs['tuple']['keyPrefixBoxMap()byte[]']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['keyPrefixBoxMap()byte[]'] | undefined]>

  /**
   * Calls the getBoxRef()address ABI method.
   *
   * Retrieves the value stored in the boxRef box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxRef(params?: CallParams<BoxStorageArgs['obj']['getBoxRef()address'] | BoxStorageArgs['tuple']['getBoxRef()address']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['getBoxRef()address'] | undefined]>

  /**
   * Calls the boxMapExists(uint64)bool ABI method.
   *
   * Checks if the boxMap box exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxMapExists(params?: CallParams<BoxStorageArgs['obj']['boxMapExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapExists(uint64)bool']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['boxMapExists(uint64)bool'] | undefined]>

  /**
   * Calls the maybeBoxRef(string)(byte[],bool) ABI method.
   *
   * Retrieves the value stored in the boxRef box and checks if it exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  maybeBoxRef(params?: CallParams<BoxStorageArgs['obj']['maybeBoxRef(string)(byte[],bool)'] | BoxStorageArgs['tuple']['maybeBoxRef(string)(byte[],bool)']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['maybeBoxRef(string)(byte[],bool)'] | undefined]>

  /**
   * Calls the setBox(uint64)void ABI method.
   *
   * Sets the value of the boxInt box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBox(params?: CallParams<BoxStorageArgs['obj']['setBox(uint64)void'] | BoxStorageArgs['tuple']['setBox(uint64)void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['setBox(uint64)void'] | undefined]>

  /**
   * Calls the setBoxString(string)void ABI method.
   *
   * Sets the value of the boxString box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxString(params?: CallParams<BoxStorageArgs['obj']['setBoxString(string)void'] | BoxStorageArgs['tuple']['setBoxString(string)void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['setBoxString(string)void'] | undefined]>

  /**
   * Calls the setBoxDynamicBytes(byte[])void ABI method.
   *
   * Sets the value of the boxDynamicBytes box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxDynamicBytes(params?: CallParams<BoxStorageArgs['obj']['setBoxDynamicBytes(byte[])void'] | BoxStorageArgs['tuple']['setBoxDynamicBytes(byte[])void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['setBoxDynamicBytes(byte[])void'] | undefined]>

  /**
   * Calls the setBoxMap(uint64,string)void ABI method.
   *
   * Sets the value of the boxMap box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxMap(params?: CallParams<BoxStorageArgs['obj']['setBoxMap(uint64,string)void'] | BoxStorageArgs['tuple']['setBoxMap(uint64,string)void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['setBoxMap(uint64,string)void'] | undefined]>

  /**
   * Calls the setBoxRef(string)void ABI method.
   *
   * Creates a box ref with the given key and sets its value to the sender's address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxRef(params?: CallParams<BoxStorageArgs['obj']['setBoxRef(string)void'] | BoxStorageArgs['tuple']['setBoxRef(string)void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['setBoxRef(string)void'] | undefined]>

  /**
   * Calls the boxMapLength(uint64)uint64 ABI method.
   *
   * Retrieves the length of the boxMap box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxMapLength(params?: CallParams<BoxStorageArgs['obj']['boxMapLength(uint64)uint64'] | BoxStorageArgs['tuple']['boxMapLength(uint64)uint64']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['boxMapLength(uint64)uint64'] | undefined]>

  /**
   * Calls the lengthBoxRef(string)uint64 ABI method.
   *
   * Retrieves the length of the boxRef box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  lengthBoxRef(params?: CallParams<BoxStorageArgs['obj']['lengthBoxRef(string)uint64'] | BoxStorageArgs['tuple']['lengthBoxRef(string)uint64']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['lengthBoxRef(string)uint64'] | undefined]>

  /**
   * Calls the deleteBox()void ABI method.
   *
   * Deletes the value of the boxInt box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBox(params?: CallParams<BoxStorageArgs['obj']['deleteBox()void'] | BoxStorageArgs['tuple']['deleteBox()void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['deleteBox()void'] | undefined]>

  /**
   * Calls the deleteBoxMap(uint64)void ABI method.
   *
   * Deletes the value of the boxMap box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBoxMap(params?: CallParams<BoxStorageArgs['obj']['deleteBoxMap(uint64)void'] | BoxStorageArgs['tuple']['deleteBoxMap(uint64)void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['deleteBoxMap(uint64)void'] | undefined]>

  /**
   * Calls the deleteBoxRef(string)void ABI method.
   *
   * Deletes the value of the boxRef box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBoxRef(params?: CallParams<BoxStorageArgs['obj']['deleteBoxRef(string)void'] | BoxStorageArgs['tuple']['deleteBoxRef(string)void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['deleteBoxRef(string)void'] | undefined]>

  /**
   * Calls the extractBoxRef(string)void ABI method.
   *
   * Extracts a value from the boxRef box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  extractBoxRef(params?: CallParams<BoxStorageArgs['obj']['extractBoxRef(string)void'] | BoxStorageArgs['tuple']['extractBoxRef(string)void']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['extractBoxRef(string)void'] | undefined]>

  /**
   * Calls the getBoxMapStruct(uint64)(string,uint64,uint64) ABI method.
   *
   * Retrieves the value stored in the boxMapStruct box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxMapStruct(params?: CallParams<BoxStorageArgs['obj']['getBoxMapStruct(uint64)(string,uint64,uint64)'] | BoxStorageArgs['tuple']['getBoxMapStruct(uint64)(string,uint64,uint64)']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['getBoxMapStruct(uint64)(string,uint64,uint64)'] | undefined]>

  /**
   * Calls the boxMapStructExists(uint64)bool ABI method.
   *
   * Checks if the boxMapStruct box exists
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxMapStructExists(params?: CallParams<BoxStorageArgs['obj']['boxMapStructExists(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructExists(uint64)bool']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['boxMapStructExists(uint64)bool'] | undefined]>

  /**
   * Calls the setBoxMapStruct(uint64,(string,uint64,uint64))bool ABI method.
   *
   * Sets the value of the boxMapStruct box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBoxMapStruct(params?: CallParams<BoxStorageArgs['obj']['setBoxMapStruct(uint64,(string,uint64,uint64))bool'] | BoxStorageArgs['tuple']['setBoxMapStruct(uint64,(string,uint64,uint64))bool']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['setBoxMapStruct(uint64,(string,uint64,uint64))bool'] | undefined]>

  /**
   * Calls the boxMapStructLength(uint64)bool ABI method.
   *
   * Retrieves the length of the boxMapStruct box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxMapStructLength(params?: CallParams<BoxStorageArgs['obj']['boxMapStructLength(uint64)bool'] | BoxStorageArgs['tuple']['boxMapStructLength(uint64)bool']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['boxMapStructLength(uint64)bool'] | undefined]>

  /**
   * Calls the arc4Box(string)uint8[4] ABI method.
   *
   * Creates and manipulates a box containing a static array of 8-bit unsigned integers
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4Box(params?: CallParams<BoxStorageArgs['obj']['arc4Box(string)uint8[4]'] | BoxStorageArgs['tuple']['arc4Box(string)uint8[4]']>): BoxStorageComposer<[...TReturns, BoxStorageReturns['arc4Box(string)uint8[4]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BoxStorage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BoxStorageComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BoxStorageComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BoxStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BoxStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BoxStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BoxStorageComposerResults<TReturns>>
}
export type BoxStorageComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

