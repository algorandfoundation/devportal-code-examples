/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"LocalStorage","structs":{},"methods":[{"name":"optInToApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"desc":"Initializes local state values when an account opts into the application.\nThis method can only be called during an OptIn transaction.\nSets initial values for all local state variables:\n- localInt: 100\n- localIntNoDefault: 200\n- localBytes: 'Silvio'\n- localString: 'Micali'\n- localBool: true\n- localAccount: sender's address","events":[],"recommendations":{}},{"name":"readLocalState","args":[],"returns":{"type":"(uint64,uint64,byte[],string,bool,address)","desc":"A tuple containing:\n- [0] uint64: The value of localInt\n- [1] uint64: The value of localIntNoDefault\n- [2] bytes: The value of localBytes\n- [3] string: The value of localString\n- [4] boolean: The value of localBool\n- [5] Address: The value of localAccount converted to Address type"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Reads and returns all local state values for the transaction sender.","events":[],"recommendations":{}},{"name":"writeLocalState","args":[{"type":"string","name":"valueString","desc":"- New string value to store"},{"type":"bool","name":"valueBool","desc":"- New boolean value to store"},{"type":"account","name":"valueAccount","desc":"- New account address to store"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Updates multiple local state values for the transaction sender.\nRequires the account to be opted into the application.","events":[],"recommendations":{}},{"name":"writeDynamicLocalState","args":[{"type":"string","name":"key","desc":"- The dynamic key to store the value under"},{"type":"string","name":"value","desc":"- The string value to store"}],"returns":{"type":"string","desc":"The stored string value"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Writes a value to local state using a dynamic key.\nDemonstrates dynamic key-value storage in local state.","events":[],"recommendations":{}},{"name":"readDynamicLocalState","args":[{"type":"string","name":"key","desc":"- The dynamic key to read the value from"}],"returns":{"type":"string","desc":"The stored string value for the given key"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Reads a value from local state using a dynamic key.","events":[],"recommendations":{}},{"name":"clearLocalState","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Clears all local state values for the transaction sender.\nAfter calling this method, all local state values will be deleted.","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"A contract demonstrating local storage functionality.\nThis contract shows how to use local state storage in an Algorand smart contract,\nincluding initialization, reading, writing, and clearing of local state values.\nLocal state is per-account storage that requires accounts to opt-in before use.","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":3,"bytes":4}},"keys":{"global":{},"local":{"localInt":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW50"},"localIntNoDefault":{"keyType":"AVMString","valueType":"AVMUint64","key":"bG9jYWxJbnROb0RlZmF1bHQ="},"localBytes":{"keyType":"AVMString","valueType":"AVMBytes","key":"bG9jYWxCeXRlcw=="},"localString":{"keyType":"AVMString","valueType":"AVMString","key":"bG9jYWxTdHJpbmc="},"localBool":{"keyType":"AVMString","valueType":"AVMUint64","key":"bG9jYWxCb29s"},"localAccount":{"keyType":"AVMString","valueType":"AVMBytes","key":"bG9jYWxBY2NvdW50"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[451,503,535,556],"errorMessage":"Account must opt in to contract first"},{"pc":[543],"errorMessage":"Key not found"},{"pc":[139,151,181,217,246],"errorMessage":"OnCompletion is not NoOp"},{"pc":[327],"errorMessage":"OnCompletion is not OptIn"},{"pc":[344],"errorMessage":"can only call when creating"},{"pc":[142,154,184,220,249,330],"errorMessage":"can only call when not creating"},{"pc":[405,412,419,426,432,438,471,480,488,515,524,548],"errorMessage":"check LocalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICBieXRlY2Jsb2NrICJsb2NhbFN0cmluZyIgImxvY2FsQm9vbCIgImxvY2FsQWNjb3VudCIgMHgxNTFmN2M3NSAiaW50IiAibG9jYWxJbnROb0RlZmF1bHQiICJsb2NhbEJ5dGVzIgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjIzLTI0CiAgICAvLyBAY29udHJhY3QoeyBzdGF0ZVRvdGFsczogeyBsb2NhbEJ5dGVzOiA0LCBsb2NhbFVpbnRzOiAzIH0gfSkKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIExvY2FsU3RvcmFnZSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMQogICAgcHVzaGJ5dGVzcyAweDAxYTNhM2ZmIDB4ZDAwMTNmYzUgMHgwMjgxOGI0YyAweDI3OTNjMjQ5IDB4MjEzNjMxZjUgMHg1ZTU4MDUxYSAvLyBtZXRob2QgIm9wdEluVG9BcHBsaWNhdGlvbigpdm9pZCIsIG1ldGhvZCAicmVhZExvY2FsU3RhdGUoKSh1aW50NjQsdWludDY0LGJ5dGVbXSxzdHJpbmcsYm9vbCxhZGRyZXNzKSIsIG1ldGhvZCAid3JpdGVMb2NhbFN0YXRlKHN0cmluZyxib29sLGFjY291bnQpdm9pZCIsIG1ldGhvZCAid3JpdGVEeW5hbWljTG9jYWxTdGF0ZShzdHJpbmcsc3RyaW5nKXN0cmluZyIsIG1ldGhvZCAicmVhZER5bmFtaWNMb2NhbFN0YXRlKHN0cmluZylzdHJpbmciLCBtZXRob2QgImNsZWFyTG9jYWxTdGF0ZSgpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fb3B0SW5Ub0FwcGxpY2F0aW9uX3JvdXRlQDMgbWFpbl9yZWFkTG9jYWxTdGF0ZV9yb3V0ZUA0IG1haW5fd3JpdGVMb2NhbFN0YXRlX3JvdXRlQDUgbWFpbl93cml0ZUR5bmFtaWNMb2NhbFN0YXRlX3JvdXRlQDYgbWFpbl9yZWFkRHluYW1pY0xvY2FsU3RhdGVfcm91dGVANyBtYWluX2NsZWFyTG9jYWxTdGF0ZV9yb3V0ZUA4CgptYWluX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MjMtMjQKICAgIC8vIEBjb250cmFjdCh7IHN0YXRlVG90YWxzOiB7IGxvY2FsQnl0ZXM6IDQsIGxvY2FsVWludHM6IDMgfSB9KQogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxTdG9yYWdlIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9jbGVhckxvY2FsU3RhdGVfcm91dGVAODoKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxNTUKICAgIC8vIHB1YmxpYyBjbGVhckxvY2FsU3RhdGUoKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgY2xlYXJMb2NhbFN0YXRlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3JlYWREeW5hbWljTG9jYWxTdGF0ZV9yb3V0ZUA3OgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEzNwogICAgLy8gcHVibGljIHJlYWREeW5hbWljTG9jYWxTdGF0ZShrZXk6IHN0cmluZyk6IHN0cmluZyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyMy0yNAogICAgLy8gQGNvbnRyYWN0KHsgc3RhdGVUb3RhbHM6IHsgbG9jYWxCeXRlczogNCwgbG9jYWxVaW50czogMyB9IH0pCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbFN0b3JhZ2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEzNwogICAgLy8gcHVibGljIHJlYWREeW5hbWljTG9jYWxTdGF0ZShrZXk6IHN0cmluZyk6IHN0cmluZyB7CiAgICBjYWxsc3ViIHJlYWREeW5hbWljTG9jYWxTdGF0ZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzMgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fd3JpdGVEeW5hbWljTG9jYWxTdGF0ZV9yb3V0ZUA2OgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjExNgogICAgLy8gcHVibGljIHdyaXRlRHluYW1pY0xvY2FsU3RhdGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MjMtMjQKICAgIC8vIEBjb250cmFjdCh7IHN0YXRlVG90YWxzOiB7IGxvY2FsQnl0ZXM6IDQsIGxvY2FsVWludHM6IDMgfSB9KQogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxTdG9yYWdlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTE2CiAgICAvLyBwdWJsaWMgd3JpdGVEeW5hbWljTG9jYWxTdGF0ZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHN0cmluZyB7CiAgICBjYWxsc3ViIHdyaXRlRHluYW1pY0xvY2FsU3RhdGUKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3dyaXRlTG9jYWxTdGF0ZV9yb3V0ZUA1OgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjkyCiAgICAvLyBwdWJsaWMgd3JpdGVMb2NhbFN0YXRlKHZhbHVlU3RyaW5nOiBzdHJpbmcsIHZhbHVlQm9vbDogYm9vbGVhbiwgdmFsdWVBY2NvdW50OiBBY2NvdW50KTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyMy0yNAogICAgLy8gQGNvbnRyYWN0KHsgc3RhdGVUb3RhbHM6IHsgbG9jYWxCeXRlczogNCwgbG9jYWxVaW50czogMyB9IH0pCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbFN0b3JhZ2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gcHVibGljIHdyaXRlTG9jYWxTdGF0ZSh2YWx1ZVN0cmluZzogc3RyaW5nLCB2YWx1ZUJvb2w6IGJvb2xlYW4sIHZhbHVlQWNjb3VudDogQWNjb3VudCk6IHZvaWQgewogICAgY2FsbHN1YiB3cml0ZUxvY2FsU3RhdGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVhZExvY2FsU3RhdGVfcm91dGVANDoKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo2OAogICAgLy8gcHVibGljIHJlYWRMb2NhbFN0YXRlKCk6IFt1aW50NjQsIHVpbnQ2NCwgYnl0ZXMsIHN0cmluZywgYm9vbGVhbiwgYXJjNC5BZGRyZXNzXSB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcmVhZExvY2FsU3RhdGUKICAgIHVuY292ZXIgNQogICAgaXRvYgogICAgdW5jb3ZlciA1CiAgICBpdG9iCiAgICBkaWcgNQogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciA2CiAgICBjb25jYXQKICAgIGRpZyA1CiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDYKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDcKICAgIHNldGJpdAogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAzNQogICAgY29uY2F0CiAgICBkaWcgMwogICAgbGVuCiAgICBwdXNoaW50IDUzIC8vIDUzCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX29wdEluVG9BcHBsaWNhdGlvbl9yb3V0ZUAzOgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjQ2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyBhbGxvd0FjdGlvbnM6ICdPcHRJbicgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMSAvLyBPcHRJbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE9wdEluCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgb3B0SW5Ub0FwcGxpY2F0aW9uCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMToKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyMy0yNAogICAgLy8gQGNvbnRyYWN0KHsgc3RhdGVUb3RhbHM6IHsgbG9jYWxCeXRlczogNCwgbG9jYWxVaW50czogMyB9IH0pCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbFN0b3JhZ2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE1CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo6TG9jYWxTdG9yYWdlLm9wdEluVG9BcHBsaWNhdGlvbigpIC0+IHZvaWQ6Cm9wdEluVG9BcHBsaWNhdGlvbjoKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo0OAogICAgLy8gdGhpcy5sb2NhbEludChUeG4uc2VuZGVyKS52YWx1ZSA9IDEwMAogICAgdHhuIFNlbmRlcgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbG9jYWxJbnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdpbnQnIH0pCiAgICBieXRlYyA0IC8vICJpbnQiCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NDgKICAgIC8vIHRoaXMubG9jYWxJbnQoVHhuLnNlbmRlcikudmFsdWUgPSAxMDAKICAgIHB1c2hpbnQgMTAwIC8vIDEwMAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjQ5CiAgICAvLyB0aGlzLmxvY2FsSW50Tm9EZWZhdWx0KFR4bi5zZW5kZXIpLnZhbHVlID0gMjAwCiAgICB0eG4gU2VuZGVyCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIHB1YmxpYyBsb2NhbEludE5vRGVmYXVsdCA9IExvY2FsU3RhdGU8dWludDY0PigpCiAgICBieXRlYyA1IC8vICJsb2NhbEludE5vRGVmYXVsdCIKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo0OQogICAgLy8gdGhpcy5sb2NhbEludE5vRGVmYXVsdChUeG4uc2VuZGVyKS52YWx1ZSA9IDIwMAogICAgcHVzaGludCAyMDAgLy8gMjAwCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NTAKICAgIC8vIHRoaXMubG9jYWxCeXRlcyhUeG4uc2VuZGVyKS52YWx1ZSA9IEJ5dGVzKCdTaWx2aW8nKQogICAgdHhuIFNlbmRlcgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjI4CiAgICAvLyBwdWJsaWMgbG9jYWxCeXRlcyA9IExvY2FsU3RhdGU8Ynl0ZXM+KCkKICAgIGJ5dGVjIDYgLy8gImxvY2FsQnl0ZXMiCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NTAKICAgIC8vIHRoaXMubG9jYWxCeXRlcyhUeG4uc2VuZGVyKS52YWx1ZSA9IEJ5dGVzKCdTaWx2aW8nKQogICAgcHVzaGJ5dGVzICJTaWx2aW8iCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NTEKICAgIC8vIHRoaXMubG9jYWxTdHJpbmcoVHhuLnNlbmRlcikudmFsdWUgPSAnTWljYWxpJwogICAgdHhuIFNlbmRlcgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwdWJsaWMgbG9jYWxTdHJpbmcgPSBMb2NhbFN0YXRlPHN0cmluZz4oKQogICAgYnl0ZWNfMCAvLyAibG9jYWxTdHJpbmciCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NTEKICAgIC8vIHRoaXMubG9jYWxTdHJpbmcoVHhuLnNlbmRlcikudmFsdWUgPSAnTWljYWxpJwogICAgcHVzaGJ5dGVzICJNaWNhbGkiCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NTIKICAgIC8vIHRoaXMubG9jYWxCb29sKFR4bi5zZW5kZXIpLnZhbHVlID0gdHJ1ZQogICAgdHhuIFNlbmRlcgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjMwCiAgICAvLyBwdWJsaWMgbG9jYWxCb29sID0gTG9jYWxTdGF0ZTxib29sZWFuPigpCiAgICBieXRlY18xIC8vICJsb2NhbEJvb2wiCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NTIKICAgIC8vIHRoaXMubG9jYWxCb29sKFR4bi5zZW5kZXIpLnZhbHVlID0gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gdGhpcy5sb2NhbEFjY291bnQoVHhuLnNlbmRlcikudmFsdWUgPSBUeG4uc2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MzEKICAgIC8vIHB1YmxpYyBsb2NhbEFjY291bnQgPSBMb2NhbFN0YXRlPEFjY291bnQ+KCkKICAgIGJ5dGVjXzIgLy8gImxvY2FsQWNjb3VudCIKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gdGhpcy5sb2NhbEFjY291bnQoVHhuLnNlbmRlcikudmFsdWUgPSBUeG4uc2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICBhcHBfbG9jYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6OkxvY2FsU3RvcmFnZS5yZWFkTG9jYWxTdGF0ZSgpIC0+IHVpbnQ2NCwgdWludDY0LCBieXRlcywgYnl0ZXMsIHVpbnQ2NCwgYnl0ZXM6CnJlYWRMb2NhbFN0YXRlOgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjY5CiAgICAvLyBjb25zdCBzZW5kZXIgPSBUeG4uc2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NzEKICAgIC8vIGNvbnN0IGFjY291bnRBZGRyZXNzID0gbmV3IGFyYzQuQWRkcmVzcyh0aGlzLmxvY2FsQWNjb3VudChzZW5kZXIpLnZhbHVlKQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjMxCiAgICAvLyBwdWJsaWMgbG9jYWxBY2NvdW50ID0gTG9jYWxTdGF0ZTxBY2NvdW50PigpCiAgICBieXRlY18yIC8vICJsb2NhbEFjY291bnQiCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NzEKICAgIC8vIGNvbnN0IGFjY291bnRBZGRyZXNzID0gbmV3IGFyYzQuQWRkcmVzcyh0aGlzLmxvY2FsQWNjb3VudChzZW5kZXIpLnZhbHVlKQogICAgYXBwX2xvY2FsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIHRoaXMubG9jYWxJbnQoc2VuZGVyKS52YWx1ZSwKICAgIGRpZyAxCiAgICBpbnRjXzAgLy8gMAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbG9jYWxJbnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdpbnQnIH0pCiAgICBieXRlYyA0IC8vICJpbnQiCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIHRoaXMubG9jYWxJbnQoc2VuZGVyKS52YWx1ZSwKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBMb2NhbFN0YXRlIGV4aXN0cwogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjc1CiAgICAvLyB0aGlzLmxvY2FsSW50Tm9EZWZhdWx0KHNlbmRlcikudmFsdWUsCiAgICBkaWcgMgogICAgaW50Y18wIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gcHVibGljIGxvY2FsSW50Tm9EZWZhdWx0ID0gTG9jYWxTdGF0ZTx1aW50NjQ+KCkKICAgIGJ5dGVjIDUgLy8gImxvY2FsSW50Tm9EZWZhdWx0IgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjc1CiAgICAvLyB0aGlzLmxvY2FsSW50Tm9EZWZhdWx0KHNlbmRlcikudmFsdWUsCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo3NgogICAgLy8gdGhpcy5sb2NhbEJ5dGVzKHNlbmRlcikudmFsdWUsCiAgICBkaWcgMwogICAgaW50Y18wIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyOAogICAgLy8gcHVibGljIGxvY2FsQnl0ZXMgPSBMb2NhbFN0YXRlPGJ5dGVzPigpCiAgICBieXRlYyA2IC8vICJsb2NhbEJ5dGVzIgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjc2CiAgICAvLyB0aGlzLmxvY2FsQnl0ZXMoc2VuZGVyKS52YWx1ZSwKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBMb2NhbFN0YXRlIGV4aXN0cwogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyB0aGlzLmxvY2FsU3RyaW5nKHNlbmRlcikudmFsdWUsCiAgICBkaWcgNAogICAgaW50Y18wIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gcHVibGljIGxvY2FsU3RyaW5nID0gTG9jYWxTdGF0ZTxzdHJpbmc+KCkKICAgIGJ5dGVjXzAgLy8gImxvY2FsU3RyaW5nIgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyB0aGlzLmxvY2FsU3RyaW5nKHNlbmRlcikudmFsdWUsCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo3OAogICAgLy8gdGhpcy5sb2NhbEJvb2woc2VuZGVyKS52YWx1ZSwKICAgIHVuY292ZXIgNQogICAgaW50Y18wIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czozMAogICAgLy8gcHVibGljIGxvY2FsQm9vbCA9IExvY2FsU3RhdGU8Ym9vbGVhbj4oKQogICAgYnl0ZWNfMSAvLyAibG9jYWxCb29sIgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjc4CiAgICAvLyB0aGlzLmxvY2FsQm9vbChzZW5kZXIpLnZhbHVlLAogICAgYXBwX2xvY2FsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIExvY2FsU3RhdGUgZXhpc3RzCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NzMtODAKICAgIC8vIHJldHVybiBbCiAgICAvLyAgIHRoaXMubG9jYWxJbnQoc2VuZGVyKS52YWx1ZSwKICAgIC8vICAgdGhpcy5sb2NhbEludE5vRGVmYXVsdChzZW5kZXIpLnZhbHVlLAogICAgLy8gICB0aGlzLmxvY2FsQnl0ZXMoc2VuZGVyKS52YWx1ZSwKICAgIC8vICAgdGhpcy5sb2NhbFN0cmluZyhzZW5kZXIpLnZhbHVlLAogICAgLy8gICB0aGlzLmxvY2FsQm9vbChzZW5kZXIpLnZhbHVlLAogICAgLy8gICBhY2NvdW50QWRkcmVzcywKICAgIC8vIF0KICAgIHVuY292ZXIgNQogICAgcmV0c3ViCgoKLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjpMb2NhbFN0b3JhZ2Uud3JpdGVMb2NhbFN0YXRlKHZhbHVlU3RyaW5nOiBieXRlcywgdmFsdWVCb29sOiB1aW50NjQsIHZhbHVlQWNjb3VudDogYnl0ZXMpIC0+IHZvaWQ6CndyaXRlTG9jYWxTdGF0ZToKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gcHVibGljIHdyaXRlTG9jYWxTdGF0ZSh2YWx1ZVN0cmluZzogc3RyaW5nLCB2YWx1ZUJvb2w6IGJvb2xlYW4sIHZhbHVlQWNjb3VudDogQWNjb3VudCk6IHZvaWQgewogICAgcHJvdG8gMyAwCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6OTQKICAgIC8vIGNvbnN0IHNlbmRlciA9IFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo5NgogICAgLy8gYXNzZXJ0KHNlbmRlci5pc09wdGVkSW4oR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkKSwgJ0FjY291bnQgbXVzdCBvcHQgaW4gdG8gY29udHJhY3QgZmlyc3QnKQogICAgZHVwCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIGFwcF9vcHRlZF9pbgogICAgYXNzZXJ0IC8vIEFjY291bnQgbXVzdCBvcHQgaW4gdG8gY29udHJhY3QgZmlyc3QKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo5OAogICAgLy8gdGhpcy5sb2NhbFN0cmluZyhzZW5kZXIpLnZhbHVlID0gdmFsdWVTdHJpbmcKICAgIGR1cAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwdWJsaWMgbG9jYWxTdHJpbmcgPSBMb2NhbFN0YXRlPHN0cmluZz4oKQogICAgYnl0ZWNfMCAvLyAibG9jYWxTdHJpbmciCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6OTgKICAgIC8vIHRoaXMubG9jYWxTdHJpbmcoc2VuZGVyKS52YWx1ZSA9IHZhbHVlU3RyaW5nCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo5OQogICAgLy8gdGhpcy5sb2NhbEJvb2woc2VuZGVyKS52YWx1ZSA9IHZhbHVlQm9vbAogICAgZHVwCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MzAKICAgIC8vIHB1YmxpYyBsb2NhbEJvb2wgPSBMb2NhbFN0YXRlPGJvb2xlYW4+KCkKICAgIGJ5dGVjXzEgLy8gImxvY2FsQm9vbCIKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo5OQogICAgLy8gdGhpcy5sb2NhbEJvb2woc2VuZGVyKS52YWx1ZSA9IHZhbHVlQm9vbAogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTAwCiAgICAvLyB0aGlzLmxvY2FsQWNjb3VudChzZW5kZXIpLnZhbHVlID0gdmFsdWVBY2NvdW50CiAgICBkdXAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czozMQogICAgLy8gcHVibGljIGxvY2FsQWNjb3VudCA9IExvY2FsU3RhdGU8QWNjb3VudD4oKQogICAgYnl0ZWNfMiAvLyAibG9jYWxBY2NvdW50IgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEwMAogICAgLy8gdGhpcy5sb2NhbEFjY291bnQoc2VuZGVyKS52YWx1ZSA9IHZhbHVlQWNjb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTAyCiAgICAvLyBhc3NlcnQodGhpcy5sb2NhbFN0cmluZyhzZW5kZXIpLnZhbHVlID09PSB2YWx1ZVN0cmluZykKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gcHVibGljIGxvY2FsU3RyaW5nID0gTG9jYWxTdGF0ZTxzdHJpbmc+KCkKICAgIGJ5dGVjXzAgLy8gImxvY2FsU3RyaW5nIgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEwMgogICAgLy8gYXNzZXJ0KHRoaXMubG9jYWxTdHJpbmcoc2VuZGVyKS52YWx1ZSA9PT0gdmFsdWVTdHJpbmcpCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMwogICAgPT0KICAgIGFzc2VydAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEwMwogICAgLy8gYXNzZXJ0KHRoaXMubG9jYWxCb29sKHNlbmRlcikudmFsdWUgPT09IHZhbHVlQm9vbCkKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czozMAogICAgLy8gcHVibGljIGxvY2FsQm9vbCA9IExvY2FsU3RhdGU8Ym9vbGVhbj4oKQogICAgYnl0ZWNfMSAvLyAibG9jYWxCb29sIgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEwMwogICAgLy8gYXNzZXJ0KHRoaXMubG9jYWxCb29sKHNlbmRlcikudmFsdWUgPT09IHZhbHVlQm9vbCkKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBMb2NhbFN0YXRlIGV4aXN0cwogICAgZnJhbWVfZGlnIC0yCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTA0CiAgICAvLyBhc3NlcnQodGhpcy5sb2NhbEFjY291bnQoc2VuZGVyKS52YWx1ZSA9PT0gdmFsdWVBY2NvdW50KQogICAgaW50Y18wIC8vIDAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czozMQogICAgLy8gcHVibGljIGxvY2FsQWNjb3VudCA9IExvY2FsU3RhdGU8QWNjb3VudD4oKQogICAgYnl0ZWNfMiAvLyAibG9jYWxBY2NvdW50IgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEwNAogICAgLy8gYXNzZXJ0KHRoaXMubG9jYWxBY2NvdW50KHNlbmRlcikudmFsdWUgPT09IHZhbHVlQWNjb3VudCkKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBMb2NhbFN0YXRlIGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6OkxvY2FsU3RvcmFnZS53cml0ZUR5bmFtaWNMb2NhbFN0YXRlKGtleTogYnl0ZXMsIHZhbHVlOiBieXRlcykgLT4gYnl0ZXM6CndyaXRlRHluYW1pY0xvY2FsU3RhdGU6CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTE2CiAgICAvLyBwdWJsaWMgd3JpdGVEeW5hbWljTG9jYWxTdGF0ZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHN0cmluZyB7CiAgICBwcm90byAyIDEKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxMTcKICAgIC8vIGNvbnN0IHNlbmRlciA9IFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxMTkKICAgIC8vIGFzc2VydChzZW5kZXIuaXNPcHRlZEluKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCksICdBY2NvdW50IG11c3Qgb3B0IGluIHRvIGNvbnRyYWN0IGZpcnN0JykKICAgIGR1cAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICBhcHBfb3B0ZWRfaW4KICAgIGFzc2VydCAvLyBBY2NvdW50IG11c3Qgb3B0IGluIHRvIGNvbnRyYWN0IGZpcnN0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTIzCiAgICAvLyBsb2NhbER5bmFtaWNBY2Nlc3Moc2VuZGVyKS52YWx1ZSA9IHZhbHVlCiAgICBkdXAKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTI1CiAgICAvLyBhc3NlcnQobG9jYWxEeW5hbWljQWNjZXNzKHNlbmRlcikudmFsdWUgPT09IHZhbHVlKQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIGFzc2VydAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEyNwogICAgLy8gcmV0dXJuIGxvY2FsRHluYW1pY0FjY2VzcyhzZW5kZXIpLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo6TG9jYWxTdG9yYWdlLnJlYWREeW5hbWljTG9jYWxTdGF0ZShrZXk6IGJ5dGVzKSAtPiBieXRlczoKcmVhZER5bmFtaWNMb2NhbFN0YXRlOgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjEzNwogICAgLy8gcHVibGljIHJlYWREeW5hbWljTG9jYWxTdGF0ZShrZXk6IHN0cmluZyk6IHN0cmluZyB7CiAgICBwcm90byAxIDEKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxMzgKICAgIC8vIGNvbnN0IHNlbmRlciA9IFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxNDAKICAgIC8vIGFzc2VydChzZW5kZXIuaXNPcHRlZEluKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCksICdBY2NvdW50IG11c3Qgb3B0IGluIHRvIGNvbnRyYWN0IGZpcnN0JykKICAgIGR1cAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICBhcHBfb3B0ZWRfaW4KICAgIGFzc2VydCAvLyBBY2NvdW50IG11c3Qgb3B0IGluIHRvIGNvbnRyYWN0IGZpcnN0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTQ0CiAgICAvLyBhc3NlcnQobG9jYWxEeW5hbWljQWNjZXNzKHNlbmRlcikuaGFzVmFsdWUsICdLZXkgbm90IGZvdW5kJykKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2xvY2FsX2dldF9leAogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gS2V5IG5vdCBmb3VuZAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjE0NgogICAgLy8gcmV0dXJuIGxvY2FsRHluYW1pY0FjY2VzcyhzZW5kZXIpLnZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgTG9jYWxTdGF0ZSBleGlzdHMKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo6TG9jYWxTdG9yYWdlLmNsZWFyTG9jYWxTdGF0ZSgpIC0+IHZvaWQ6CmNsZWFyTG9jYWxTdGF0ZToKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxNTYKICAgIC8vIGNvbnN0IHNlbmRlciA9IFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxNTgKICAgIC8vIGFzc2VydChzZW5kZXIuaXNPcHRlZEluKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCksICdBY2NvdW50IG11c3Qgb3B0IGluIHRvIGNvbnRyYWN0IGZpcnN0JykKICAgIGR1cAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICBhcHBfb3B0ZWRfaW4KICAgIGFzc2VydCAvLyBBY2NvdW50IG11c3Qgb3B0IGluIHRvIGNvbnRyYWN0IGZpcnN0CiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTYwCiAgICAvLyB0aGlzLmxvY2FsSW50KHNlbmRlcikuZGVsZXRlKCkKICAgIGR1cAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbG9jYWxJbnQgPSBMb2NhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdpbnQnIH0pCiAgICBieXRlYyA0IC8vICJpbnQiCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTYwCiAgICAvLyB0aGlzLmxvY2FsSW50KHNlbmRlcikuZGVsZXRlKCkKICAgIGFwcF9sb2NhbF9kZWwKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxNjEKICAgIC8vIHRoaXMubG9jYWxJbnROb0RlZmF1bHQoc2VuZGVyKS5kZWxldGUoKQogICAgZHVwCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIHB1YmxpYyBsb2NhbEludE5vRGVmYXVsdCA9IExvY2FsU3RhdGU8dWludDY0PigpCiAgICBieXRlYyA1IC8vICJsb2NhbEludE5vRGVmYXVsdCIKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoxNjEKICAgIC8vIHRoaXMubG9jYWxJbnROb0RlZmF1bHQoc2VuZGVyKS5kZWxldGUoKQogICAgYXBwX2xvY2FsX2RlbAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjE2MgogICAgLy8gdGhpcy5sb2NhbEJ5dGVzKHNlbmRlcikuZGVsZXRlKCkKICAgIGR1cAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjI4CiAgICAvLyBwdWJsaWMgbG9jYWxCeXRlcyA9IExvY2FsU3RhdGU8Ynl0ZXM+KCkKICAgIGJ5dGVjIDYgLy8gImxvY2FsQnl0ZXMiCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTYyCiAgICAvLyB0aGlzLmxvY2FsQnl0ZXMoc2VuZGVyKS5kZWxldGUoKQogICAgYXBwX2xvY2FsX2RlbAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjE2MwogICAgLy8gdGhpcy5sb2NhbFN0cmluZyhzZW5kZXIpLmRlbGV0ZSgpCiAgICBkdXAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gcHVibGljIGxvY2FsU3RyaW5nID0gTG9jYWxTdGF0ZTxzdHJpbmc+KCkKICAgIGJ5dGVjXzAgLy8gImxvY2FsU3RyaW5nIgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjE2MwogICAgLy8gdGhpcy5sb2NhbFN0cmluZyhzZW5kZXIpLmRlbGV0ZSgpCiAgICBhcHBfbG9jYWxfZGVsCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTY0CiAgICAvLyB0aGlzLmxvY2FsQm9vbChzZW5kZXIpLmRlbGV0ZSgpCiAgICBkdXAKICAgIC8vIGNvbnRyYWN0cy9Mb2NhbFN0b3JhZ2UvY29udHJhY3QuYWxnby50czozMAogICAgLy8gcHVibGljIGxvY2FsQm9vbCA9IExvY2FsU3RhdGU8Ym9vbGVhbj4oKQogICAgYnl0ZWNfMSAvLyAibG9jYWxCb29sIgogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjE2NAogICAgLy8gdGhpcy5sb2NhbEJvb2woc2VuZGVyKS5kZWxldGUoKQogICAgYXBwX2xvY2FsX2RlbAogICAgLy8gY29udHJhY3RzL0xvY2FsU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjMxCiAgICAvLyBwdWJsaWMgbG9jYWxBY2NvdW50ID0gTG9jYWxTdGF0ZTxBY2NvdW50PigpCiAgICBieXRlY18yIC8vICJsb2NhbEFjY291bnQiCiAgICAvLyBjb250cmFjdHMvTG9jYWxTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MTY1CiAgICAvLyB0aGlzLmxvY2FsQWNjb3VudChzZW5kZXIpLmRlbGV0ZSgpCiAgICBhcHBfbG9jYWxfZGVsCiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBwtsb2NhbFN0cmluZwlsb2NhbEJvb2wMbG9jYWxBY2NvdW50BBUffHUDaW50EWxvY2FsSW50Tm9EZWZhdWx0CmxvY2FsQnl0ZXMxG0EA+4IGBAGjo/8E0AE/xQQCgYtMBCeTwkkEITYx9QReWAUaNhoAjgYAvQBtAFAALAAOAAIiQzEZFEQxGESIAZQjQzEZFEQxGEQ2GgFXAgCIAWpJFRZXBgJMUCtMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIASZJFRZXBgJMUCtMULAjQzEZFEQxGEQ2GgFXAgA2GgIiUzYaAxfAHIgAySNDMRkURDEYRIgAkk8FFk8FFksFFRZXBgJPBlBLBRUWVwYCTwZQgAEAIk8HVE8ETwRQgAIANVBLAxWBNQgWVwYCUExQTwNQTwJQTFArTFCwI0MxGSMSRDEYRIgADSNDMRlA/zExGBREI0MxACcEgWRmMQAnBYHIAWYxACcGgAZTaWx2aW9mMQAogAZNaWNhbGlmMQApI2YxACoxAGaJMQBJIipjREsBIicEY0RLAiInBWNESwMiJwZjREsEIihjRE8FIiljRE8FiYoDADEASTIIYURJKIv9Zkkpi/5mSSqL/2ZJIihjRIv9EkRJIiljRIv+EkQiKmNEi/8SRImKAgExAEkyCGFESYv+i/9mSSKL/mNEi/8SRCKL/mNEiYoBATEASTIIYURJIov/Y0UBRCKL/2NEiTEASTIIYURJJwRoSScFaEknBmhJKGhJKWgqaIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":4,"patch":4}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the LocalStorage contract
 */
export type LocalStorageArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'optInToApplication()void': Record<string, never>
    'readLocalState()(uint64,uint64,byte[],string,bool,address)': Record<string, never>
    'writeLocalState(string,bool,account)void': {
      /**
       * - New string value to store
       */
      valueString: string
      /**
       * - New boolean value to store
       */
      valueBool: boolean
      /**
       * - New account address to store
       */
      valueAccount: Uint8Array | string
    }
    'writeDynamicLocalState(string,string)string': {
      /**
       * - The dynamic key to store the value under
       */
      key: string
      /**
       * - The string value to store
       */
      value: string
    }
    'readDynamicLocalState(string)string': {
      /**
       * - The dynamic key to read the value from
       */
      key: string
    }
    'clearLocalState()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'optInToApplication()void': []
    'readLocalState()(uint64,uint64,byte[],string,bool,address)': []
    'writeLocalState(string,bool,account)void': [valueString: string, valueBool: boolean, valueAccount: Uint8Array | string]
    'writeDynamicLocalState(string,string)string': [key: string, value: string]
    'readDynamicLocalState(string)string': [key: string]
    'clearLocalState()void': []
  }
}

/**
 * The return type for each method
 */
export type LocalStorageReturns = {
  'optInToApplication()void': void
  'readLocalState()(uint64,uint64,byte[],string,bool,address)': [bigint, bigint, Uint8Array, string, boolean, string]
  'writeLocalState(string,bool,account)void': void
  'writeDynamicLocalState(string,string)string': string
  'readDynamicLocalState(string)string': string
  'clearLocalState()void': void
}

/**
 * Defines the types of available calls and state of the LocalStorage smart contract.
 */
export type LocalStorageTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: LocalStorageArgs['obj']['optInToApplication()void']
      argsTuple: LocalStorageArgs['tuple']['optInToApplication()void']
      returns: LocalStorageReturns['optInToApplication()void']
    }>
    & Record<'readLocalState()(uint64,uint64,byte[],string,bool,address)' | 'readLocalState', {
      argsObj: LocalStorageArgs['obj']['readLocalState()(uint64,uint64,byte[],string,bool,address)']
      argsTuple: LocalStorageArgs['tuple']['readLocalState()(uint64,uint64,byte[],string,bool,address)']
      /**
      * A tuple containing:
      - [0] uint64: The value of localInt
      - [1] uint64: The value of localIntNoDefault
      - [2] bytes: The value of localBytes
      - [3] string: The value of localString
      - [4] boolean: The value of localBool
      - [5] Address: The value of localAccount converted to Address type

       */
      returns: LocalStorageReturns['readLocalState()(uint64,uint64,byte[],string,bool,address)']
    }>
    & Record<'writeLocalState(string,bool,account)void' | 'writeLocalState', {
      argsObj: LocalStorageArgs['obj']['writeLocalState(string,bool,account)void']
      argsTuple: LocalStorageArgs['tuple']['writeLocalState(string,bool,account)void']
      returns: LocalStorageReturns['writeLocalState(string,bool,account)void']
    }>
    & Record<'writeDynamicLocalState(string,string)string' | 'writeDynamicLocalState', {
      argsObj: LocalStorageArgs['obj']['writeDynamicLocalState(string,string)string']
      argsTuple: LocalStorageArgs['tuple']['writeDynamicLocalState(string,string)string']
      /**
       * The stored string value
       */
      returns: LocalStorageReturns['writeDynamicLocalState(string,string)string']
    }>
    & Record<'readDynamicLocalState(string)string' | 'readDynamicLocalState', {
      argsObj: LocalStorageArgs['obj']['readDynamicLocalState(string)string']
      argsTuple: LocalStorageArgs['tuple']['readDynamicLocalState(string)string']
      /**
       * The stored string value for the given key
       */
      returns: LocalStorageReturns['readDynamicLocalState(string)string']
    }>
    & Record<'clearLocalState()void' | 'clearLocalState', {
      argsObj: LocalStorageArgs['obj']['clearLocalState()void']
      argsTuple: LocalStorageArgs['tuple']['clearLocalState()void']
      returns: LocalStorageReturns['clearLocalState()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    local: {
      keys: {
        localInt: bigint
        localIntNoDefault: bigint
        localBytes: BinaryState
        localString: string
        localBool: bigint
        localAccount: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LocalStorageSignatures = keyof LocalStorageTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LocalStorageNonVoidMethodSignatures = keyof LocalStorageTypes['methods'] extends infer T ? T extends keyof LocalStorageTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LocalStorage smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LocalStorageSignatures> = LocalStorageTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LocalStorage smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LocalStorageSignatures> = LocalStorageTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = LocalStorageTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LocalStorageCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LocalStorageDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LocalStorageCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LocalStorage smart contract
 */
export abstract class LocalStorageParamsFactory {
  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the LocalStorage smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(params: CallParams<LocalStorageArgs['obj']['optInToApplication()void'] | LocalStorageArgs['tuple']['optInToApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optInToApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the readLocalState()(uint64,uint64,byte[],string,bool,address) ABI method
   *
   * Reads and returns all local state values for the transaction sender.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readLocalState(params: CallParams<LocalStorageArgs['obj']['readLocalState()(uint64,uint64,byte[],string,bool,address)'] | LocalStorageArgs['tuple']['readLocalState()(uint64,uint64,byte[],string,bool,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'readLocalState()(uint64,uint64,byte[],string,bool,address)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the writeLocalState(string,bool,account)void ABI method
   *
  * Updates multiple local state values for the transaction sender.
  Requires the account to be opted into the application.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static writeLocalState(params: CallParams<LocalStorageArgs['obj']['writeLocalState(string,bool,account)void'] | LocalStorageArgs['tuple']['writeLocalState(string,bool,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'writeLocalState(string,bool,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.valueString, params.args.valueBool, params.args.valueAccount],
    }
  }
  /**
   * Constructs a no op call for the writeDynamicLocalState(string,string)string ABI method
   *
  * Writes a value to local state using a dynamic key.
  Demonstrates dynamic key-value storage in local state.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static writeDynamicLocalState(params: CallParams<LocalStorageArgs['obj']['writeDynamicLocalState(string,string)string'] | LocalStorageArgs['tuple']['writeDynamicLocalState(string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'writeDynamicLocalState(string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the readDynamicLocalState(string)string ABI method
   *
   * Reads a value from local state using a dynamic key.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static readDynamicLocalState(params: CallParams<LocalStorageArgs['obj']['readDynamicLocalState(string)string'] | LocalStorageArgs['tuple']['readDynamicLocalState(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'readDynamicLocalState(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the clearLocalState()void ABI method
   *
  * Clears all local state values for the transaction sender.
  After calling this method, all local state values will be deleted.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static clearLocalState(params: CallParams<LocalStorageArgs['obj']['clearLocalState()void'] | LocalStorageArgs['tuple']['clearLocalState()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'clearLocalState()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LocalStorage smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LocalStorageFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LocalStorageFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LocalStorageClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LocalStorageClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LocalStorage smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LocalStorageDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new LocalStorageClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LocalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LocalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LocalStorage smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LocalStorageClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LocalStorage smart contract
 */
export class LocalStorageClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LocalStorageClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LocalStorage app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LocalStorageClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LocalStorageNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LocalStorageClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LocalStorageClient> {
    return new LocalStorageClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LocalStorageClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LocalStorageClient> {
    return new LocalStorageClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the LocalStorage smart contract using the `optInToApplication()void` ABI method.
       *
      * Initializes local state values when an account opts into the application.
      This method can only be called during an OptIn transaction.
      Sets initial values for all local state variables:
      - localInt: 100
      - localIntNoDefault: 200
      - localBytes: 'Silvio'
      - localString: 'Micali'
      - localBool: true
      - localAccount: sender's address

       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (params: CallParams<LocalStorageArgs['obj']['optInToApplication()void'] | LocalStorageArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.params.optIn(LocalStorageParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the LocalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `readLocalState()(uint64,uint64,byte[],string,bool,address)` ABI method.
     *
     * Reads and returns all local state values for the transaction sender.
     *
     * @param params The params for the smart contract call
    * @returns The call params: A tuple containing:
    - [0] uint64: The value of localInt
    - [1] uint64: The value of localIntNoDefault
    - [2] bytes: The value of localBytes
    - [3] string: The value of localString
    - [4] boolean: The value of localBool
    - [5] Address: The value of localAccount converted to Address type

     */
    readLocalState: (params: CallParams<LocalStorageArgs['obj']['readLocalState()(uint64,uint64,byte[],string,bool,address)'] | LocalStorageArgs['tuple']['readLocalState()(uint64,uint64,byte[],string,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LocalStorageParamsFactory.readLocalState(params))
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `writeLocalState(string,bool,account)void` ABI method.
     *
    * Updates multiple local state values for the transaction sender.
    Requires the account to be opted into the application.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    writeLocalState: (params: CallParams<LocalStorageArgs['obj']['writeLocalState(string,bool,account)void'] | LocalStorageArgs['tuple']['writeLocalState(string,bool,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LocalStorageParamsFactory.writeLocalState(params))
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `writeDynamicLocalState(string,string)string` ABI method.
     *
    * Writes a value to local state using a dynamic key.
    Demonstrates dynamic key-value storage in local state.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The stored string value
     */
    writeDynamicLocalState: (params: CallParams<LocalStorageArgs['obj']['writeDynamicLocalState(string,string)string'] | LocalStorageArgs['tuple']['writeDynamicLocalState(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LocalStorageParamsFactory.writeDynamicLocalState(params))
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `readDynamicLocalState(string)string` ABI method.
     *
     * Reads a value from local state using a dynamic key.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The stored string value for the given key
     */
    readDynamicLocalState: (params: CallParams<LocalStorageArgs['obj']['readDynamicLocalState(string)string'] | LocalStorageArgs['tuple']['readDynamicLocalState(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LocalStorageParamsFactory.readDynamicLocalState(params))
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `clearLocalState()void` ABI method.
     *
    * Clears all local state values for the transaction sender.
    After calling this method, all local state values will be deleted.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    clearLocalState: (params: CallParams<LocalStorageArgs['obj']['clearLocalState()void'] | LocalStorageArgs['tuple']['clearLocalState()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LocalStorageParamsFactory.clearLocalState(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the LocalStorage smart contract using the `optInToApplication()void` ABI method.
       *
      * Initializes local state values when an account opts into the application.
      This method can only be called during an OptIn transaction.
      Sets initial values for all local state variables:
      - localInt: 100
      - localIntNoDefault: 200
      - localBytes: 'Silvio'
      - localString: 'Micali'
      - localBool: true
      - localAccount: sender's address

       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (params: CallParams<LocalStorageArgs['obj']['optInToApplication()void'] | LocalStorageArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(LocalStorageParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the LocalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `readLocalState()(uint64,uint64,byte[],string,bool,address)` ABI method.
     *
     * Reads and returns all local state values for the transaction sender.
     *
     * @param params The params for the smart contract call
    * @returns The call transaction: A tuple containing:
    - [0] uint64: The value of localInt
    - [1] uint64: The value of localIntNoDefault
    - [2] bytes: The value of localBytes
    - [3] string: The value of localString
    - [4] boolean: The value of localBool
    - [5] Address: The value of localAccount converted to Address type

     */
    readLocalState: (params: CallParams<LocalStorageArgs['obj']['readLocalState()(uint64,uint64,byte[],string,bool,address)'] | LocalStorageArgs['tuple']['readLocalState()(uint64,uint64,byte[],string,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LocalStorageParamsFactory.readLocalState(params))
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `writeLocalState(string,bool,account)void` ABI method.
     *
    * Updates multiple local state values for the transaction sender.
    Requires the account to be opted into the application.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    writeLocalState: (params: CallParams<LocalStorageArgs['obj']['writeLocalState(string,bool,account)void'] | LocalStorageArgs['tuple']['writeLocalState(string,bool,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LocalStorageParamsFactory.writeLocalState(params))
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `writeDynamicLocalState(string,string)string` ABI method.
     *
    * Writes a value to local state using a dynamic key.
    Demonstrates dynamic key-value storage in local state.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The stored string value
     */
    writeDynamicLocalState: (params: CallParams<LocalStorageArgs['obj']['writeDynamicLocalState(string,string)string'] | LocalStorageArgs['tuple']['writeDynamicLocalState(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LocalStorageParamsFactory.writeDynamicLocalState(params))
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `readDynamicLocalState(string)string` ABI method.
     *
     * Reads a value from local state using a dynamic key.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The stored string value for the given key
     */
    readDynamicLocalState: (params: CallParams<LocalStorageArgs['obj']['readDynamicLocalState(string)string'] | LocalStorageArgs['tuple']['readDynamicLocalState(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LocalStorageParamsFactory.readDynamicLocalState(params))
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `clearLocalState()void` ABI method.
     *
    * Clears all local state values for the transaction sender.
    After calling this method, all local state values will be deleted.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    clearLocalState: (params: CallParams<LocalStorageArgs['obj']['clearLocalState()void'] | LocalStorageArgs['tuple']['clearLocalState()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LocalStorageParamsFactory.clearLocalState(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the LocalStorage smart contract using the `optInToApplication()void` ABI method.
       *
      * Initializes local state values when an account opts into the application.
      This method can only be called during an OptIn transaction.
      Sets initial values for all local state variables:
      - localInt: 100
      - localIntNoDefault: 200
      - localBytes: 'Silvio'
      - localString: 'Micali'
      - localBool: true
      - localAccount: sender's address

       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (params: CallParams<LocalStorageArgs['obj']['optInToApplication()void'] | LocalStorageArgs['tuple']['optInToApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(LocalStorageParamsFactory.optIn.optInToApplication(params))
        return {...result, return: result.return as unknown as (undefined | LocalStorageReturns['optInToApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the LocalStorage smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `readLocalState()(uint64,uint64,byte[],string,bool,address)` ABI method.
     *
     * Reads and returns all local state values for the transaction sender.
     *
     * @param params The params for the smart contract call
    * @returns The call result: A tuple containing:
    - [0] uint64: The value of localInt
    - [1] uint64: The value of localIntNoDefault
    - [2] bytes: The value of localBytes
    - [3] string: The value of localString
    - [4] boolean: The value of localBool
    - [5] Address: The value of localAccount converted to Address type

     */
    readLocalState: async (params: CallParams<LocalStorageArgs['obj']['readLocalState()(uint64,uint64,byte[],string,bool,address)'] | LocalStorageArgs['tuple']['readLocalState()(uint64,uint64,byte[],string,bool,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LocalStorageParamsFactory.readLocalState(params))
      return {...result, return: result.return as unknown as (undefined | LocalStorageReturns['readLocalState()(uint64,uint64,byte[],string,bool,address)'])}
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `writeLocalState(string,bool,account)void` ABI method.
     *
    * Updates multiple local state values for the transaction sender.
    Requires the account to be opted into the application.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    writeLocalState: async (params: CallParams<LocalStorageArgs['obj']['writeLocalState(string,bool,account)void'] | LocalStorageArgs['tuple']['writeLocalState(string,bool,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LocalStorageParamsFactory.writeLocalState(params))
      return {...result, return: result.return as unknown as (undefined | LocalStorageReturns['writeLocalState(string,bool,account)void'])}
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `writeDynamicLocalState(string,string)string` ABI method.
     *
    * Writes a value to local state using a dynamic key.
    Demonstrates dynamic key-value storage in local state.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The stored string value
     */
    writeDynamicLocalState: async (params: CallParams<LocalStorageArgs['obj']['writeDynamicLocalState(string,string)string'] | LocalStorageArgs['tuple']['writeDynamicLocalState(string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LocalStorageParamsFactory.writeDynamicLocalState(params))
      return {...result, return: result.return as unknown as (undefined | LocalStorageReturns['writeDynamicLocalState(string,string)string'])}
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `readDynamicLocalState(string)string` ABI method.
     *
     * Reads a value from local state using a dynamic key.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The stored string value for the given key
     */
    readDynamicLocalState: async (params: CallParams<LocalStorageArgs['obj']['readDynamicLocalState(string)string'] | LocalStorageArgs['tuple']['readDynamicLocalState(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LocalStorageParamsFactory.readDynamicLocalState(params))
      return {...result, return: result.return as unknown as (undefined | LocalStorageReturns['readDynamicLocalState(string)string'])}
    },

    /**
     * Makes a call to the LocalStorage smart contract using the `clearLocalState()void` ABI method.
     *
    * Clears all local state values for the transaction sender.
    After calling this method, all local state values will be deleted.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    clearLocalState: async (params: CallParams<LocalStorageArgs['obj']['clearLocalState()void'] | LocalStorageArgs['tuple']['clearLocalState()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LocalStorageParamsFactory.clearLocalState(params))
      return {...result, return: result.return as unknown as (undefined | LocalStorageReturns['clearLocalState()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LocalStorageClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LocalStorage app
   */
  state = {
    /**
     * Methods to access local state for the current LocalStorage app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            localInt: result.localInt,
            localIntNoDefault: result.localIntNoDefault,
            localBytes: new BinaryStateValue(result.localBytes),
            localString: result.localString,
            localBool: result.localBool,
            localAccount: new BinaryStateValue(result.localAccount),
          }
        },
        /**
         * Get the current value of the localInt key in local state
         */
        localInt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("localInt")) as bigint | undefined },
        /**
         * Get the current value of the localIntNoDefault key in local state
         */
        localIntNoDefault: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("localIntNoDefault")) as bigint | undefined },
        /**
         * Get the current value of the localBytes key in local state
         */
        localBytes: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("localBytes")) as Uint8Array | undefined) },
        /**
         * Get the current value of the localString key in local state
         */
        localString: async (): Promise<string | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("localString")) as string | undefined },
        /**
         * Get the current value of the localBool key in local state
         */
        localBool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("localBool")) as bigint | undefined },
        /**
         * Get the current value of the localAccount key in local state
         */
        localAccount: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("localAccount")) as Uint8Array | undefined) },
      }
    },
  }

  public newGroup(): LocalStorageComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a readLocalState()(uint64,uint64,byte[],string,bool,address) method call against the LocalStorage contract
       */
      readLocalState(params: CallParams<LocalStorageArgs['obj']['readLocalState()(uint64,uint64,byte[],string,bool,address)'] | LocalStorageArgs['tuple']['readLocalState()(uint64,uint64,byte[],string,bool,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readLocalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('readLocalState()(uint64,uint64,byte[],string,bool,address)', v))
        return this
      },
      /**
       * Add a writeLocalState(string,bool,account)void method call against the LocalStorage contract
       */
      writeLocalState(params: CallParams<LocalStorageArgs['obj']['writeLocalState(string,bool,account)void'] | LocalStorageArgs['tuple']['writeLocalState(string,bool,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.writeLocalState(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a writeDynamicLocalState(string,string)string method call against the LocalStorage contract
       */
      writeDynamicLocalState(params: CallParams<LocalStorageArgs['obj']['writeDynamicLocalState(string,string)string'] | LocalStorageArgs['tuple']['writeDynamicLocalState(string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.writeDynamicLocalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('writeDynamicLocalState(string,string)string', v))
        return this
      },
      /**
       * Add a readDynamicLocalState(string)string method call against the LocalStorage contract
       */
      readDynamicLocalState(params: CallParams<LocalStorageArgs['obj']['readDynamicLocalState(string)string'] | LocalStorageArgs['tuple']['readDynamicLocalState(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.readDynamicLocalState(params)))
        resultMappers.push((v) => client.decodeReturnValue('readDynamicLocalState(string)string', v))
        return this
      },
      /**
       * Add a clearLocalState()void method call against the LocalStorage contract
       */
      clearLocalState(params: CallParams<LocalStorageArgs['obj']['clearLocalState()void'] | LocalStorageArgs['tuple']['clearLocalState()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.clearLocalState(params)))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        return {
          optInToApplication: (params: CallParams<LocalStorageArgs['obj']['optInToApplication()void'] | LocalStorageArgs['tuple']['optInToApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the LocalStorage contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LocalStorageComposer
  }
}
export type LocalStorageComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the readLocalState()(uint64,uint64,byte[],string,bool,address) ABI method.
   *
   * Reads and returns all local state values for the transaction sender.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readLocalState(params?: CallParams<LocalStorageArgs['obj']['readLocalState()(uint64,uint64,byte[],string,bool,address)'] | LocalStorageArgs['tuple']['readLocalState()(uint64,uint64,byte[],string,bool,address)']>): LocalStorageComposer<[...TReturns, LocalStorageReturns['readLocalState()(uint64,uint64,byte[],string,bool,address)'] | undefined]>

  /**
   * Calls the writeLocalState(string,bool,account)void ABI method.
   *
  * Updates multiple local state values for the transaction sender.
  Requires the account to be opted into the application.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  writeLocalState(params?: CallParams<LocalStorageArgs['obj']['writeLocalState(string,bool,account)void'] | LocalStorageArgs['tuple']['writeLocalState(string,bool,account)void']>): LocalStorageComposer<[...TReturns, LocalStorageReturns['writeLocalState(string,bool,account)void'] | undefined]>

  /**
   * Calls the writeDynamicLocalState(string,string)string ABI method.
   *
  * Writes a value to local state using a dynamic key.
  Demonstrates dynamic key-value storage in local state.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  writeDynamicLocalState(params?: CallParams<LocalStorageArgs['obj']['writeDynamicLocalState(string,string)string'] | LocalStorageArgs['tuple']['writeDynamicLocalState(string,string)string']>): LocalStorageComposer<[...TReturns, LocalStorageReturns['writeDynamicLocalState(string,string)string'] | undefined]>

  /**
   * Calls the readDynamicLocalState(string)string ABI method.
   *
   * Reads a value from local state using a dynamic key.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  readDynamicLocalState(params?: CallParams<LocalStorageArgs['obj']['readDynamicLocalState(string)string'] | LocalStorageArgs['tuple']['readDynamicLocalState(string)string']>): LocalStorageComposer<[...TReturns, LocalStorageReturns['readDynamicLocalState(string)string'] | undefined]>

  /**
   * Calls the clearLocalState()void ABI method.
   *
  * Clears all local state values for the transaction sender.
  After calling this method, all local state values will be deleted.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearLocalState(params?: CallParams<LocalStorageArgs['obj']['clearLocalState()void'] | LocalStorageArgs['tuple']['clearLocalState()void']>): LocalStorageComposer<[...TReturns, LocalStorageReturns['clearLocalState()void'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the LocalStorage smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(params?: CallParams<LocalStorageArgs['obj']['optInToApplication()void'] | LocalStorageArgs['tuple']['optInToApplication()void']>): LocalStorageComposer<[...TReturns, LocalStorageReturns['optInToApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the LocalStorage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LocalStorageComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LocalStorageComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LocalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LocalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LocalStorageComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LocalStorageComposerResults<TReturns>>
}
export type LocalStorageComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

