/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"StructInBoxMap","structs":{"User":[{"name":"id","type":"uint64"},{"name":"name","type":"string"},{"name":"age","type":"uint64"}]},"methods":[{"name":"createNewUser","args":[{"type":"uint64","name":"id"},{"type":"(uint64,string,uint64)","struct":"User","name":"user"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getUser","args":[{"type":"uint64","name":"id"}],"returns":{"type":"(uint64,string,uint64)","struct":"User"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"checkUserExists","args":[{"type":"uint64","name":"id"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateUserNameAndAge","args":[{"type":"uint64","name":"id"},{"type":"string","name":"name"},{"type":"uint64","name":"age"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"users":{"keyType":"uint64","valueType":"User","prefix":"dXNlcnM="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[125,180],"errorMessage":"Box must have value"},{"pc":[34],"errorMessage":"OnCompletion must be NoOp"},{"pc":[81],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[111,228],"errorMessage":"assert target is match for conditions"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAEAQoIACYDBXVzZXJzBRUffHWABBUffHUxG0EAKzEZFEQxGESCBAR4PcxwBJMUO9EEK8TBHwQ6NVHONhoAjgQACQArADsAUwAxGRQxGBQQQzYaARc2GgJMFihMUEm8SElLAr8jJLoXTCNbEiIQRCmwIkM2GgEXFihMUL5EKkxQsCJDNhoBFxYoTFC9RQGAAQAlTwJUKkxQsCJDNhoBFzYaAklXAgA2GgNJF08EFihMUEm+REkkWSVMWE8FUEsBvEhLAUy/SSNPBLtJvkhJJFlLARVSVwIATwMSTCMkuhdPAhIQRCmwIkM=","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type User = {
  id: bigint,
  name: string,
  age: bigint
}


/**
 * Converts the ABI tuple representation of a User to the struct representation
 */
export function UserFromTuple(abiTuple: [bigint, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.User, APP_SPEC.structs) as User
}

/**
 * The argument types for the StructInBoxMap contract
 */
export type StructInBoxMapArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createNewUser(uint64,(uint64,string,uint64))bool': {
      id: bigint | number
      user: User
    }
    'getUser(uint64)(uint64,string,uint64)': {
      id: bigint | number
    }
    'checkUserExists(uint64)bool': {
      id: bigint | number
    }
    'updateUserNameAndAge(uint64,string,uint64)bool': {
      id: bigint | number
      name: string
      age: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createNewUser(uint64,(uint64,string,uint64))bool': [id: bigint | number, user: User]
    'getUser(uint64)(uint64,string,uint64)': [id: bigint | number]
    'checkUserExists(uint64)bool': [id: bigint | number]
    'updateUserNameAndAge(uint64,string,uint64)bool': [id: bigint | number, name: string, age: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type StructInBoxMapReturns = {
  'createNewUser(uint64,(uint64,string,uint64))bool': boolean
  'getUser(uint64)(uint64,string,uint64)': User
  'checkUserExists(uint64)bool': boolean
  'updateUserNameAndAge(uint64,string,uint64)bool': boolean
}

/**
 * Defines the types of available calls and state of the StructInBoxMap smart contract.
 */
export type StructInBoxMapTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createNewUser(uint64,(uint64,string,uint64))bool' | 'createNewUser', {
      argsObj: StructInBoxMapArgs['obj']['createNewUser(uint64,(uint64,string,uint64))bool']
      argsTuple: StructInBoxMapArgs['tuple']['createNewUser(uint64,(uint64,string,uint64))bool']
      returns: StructInBoxMapReturns['createNewUser(uint64,(uint64,string,uint64))bool']
    }>
    & Record<'getUser(uint64)(uint64,string,uint64)' | 'getUser', {
      argsObj: StructInBoxMapArgs['obj']['getUser(uint64)(uint64,string,uint64)']
      argsTuple: StructInBoxMapArgs['tuple']['getUser(uint64)(uint64,string,uint64)']
      returns: StructInBoxMapReturns['getUser(uint64)(uint64,string,uint64)']
    }>
    & Record<'checkUserExists(uint64)bool' | 'checkUserExists', {
      argsObj: StructInBoxMapArgs['obj']['checkUserExists(uint64)bool']
      argsTuple: StructInBoxMapArgs['tuple']['checkUserExists(uint64)bool']
      returns: StructInBoxMapReturns['checkUserExists(uint64)bool']
    }>
    & Record<'updateUserNameAndAge(uint64,string,uint64)bool' | 'updateUserNameAndAge', {
      argsObj: StructInBoxMapArgs['obj']['updateUserNameAndAge(uint64,string,uint64)bool']
      argsTuple: StructInBoxMapArgs['tuple']['updateUserNameAndAge(uint64,string,uint64)bool']
      returns: StructInBoxMapReturns['updateUserNameAndAge(uint64,string,uint64)bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        users: Map<bigint | number, User>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StructInBoxMapSignatures = keyof StructInBoxMapTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StructInBoxMapNonVoidMethodSignatures = keyof StructInBoxMapTypes['methods'] extends infer T ? T extends keyof StructInBoxMapTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the StructInBoxMap smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StructInBoxMapSignatures> = StructInBoxMapTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StructInBoxMap smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StructInBoxMapSignatures> = StructInBoxMapTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = StructInBoxMapTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StructInBoxMapCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type StructInBoxMapDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StructInBoxMapCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the StructInBoxMap smart contract
 */
export abstract class StructInBoxMapParamsFactory {
  /**
   * Constructs a no op call for the createNewUser(uint64,(uint64,string,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewUser(params: CallParams<StructInBoxMapArgs['obj']['createNewUser(uint64,(uint64,string,uint64))bool'] | StructInBoxMapArgs['tuple']['createNewUser(uint64,(uint64,string,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createNewUser(uint64,(uint64,string,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.user],
    }
  }
  /**
   * Constructs a no op call for the getUser(uint64)(uint64,string,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUser(params: CallParams<StructInBoxMapArgs['obj']['getUser(uint64)(uint64,string,uint64)'] | StructInBoxMapArgs['tuple']['getUser(uint64)(uint64,string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUser(uint64)(uint64,string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the checkUserExists(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkUserExists(params: CallParams<StructInBoxMapArgs['obj']['checkUserExists(uint64)bool'] | StructInBoxMapArgs['tuple']['checkUserExists(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkUserExists(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the updateUserNameAndAge(uint64,string,uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateUserNameAndAge(params: CallParams<StructInBoxMapArgs['obj']['updateUserNameAndAge(uint64,string,uint64)bool'] | StructInBoxMapArgs['tuple']['updateUserNameAndAge(uint64,string,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateUserNameAndAge(uint64,string,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.name, params.args.age],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the StructInBoxMap smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StructInBoxMapFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StructInBoxMapFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StructInBoxMapClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StructInBoxMapClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the StructInBoxMap smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StructInBoxMapDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new StructInBoxMapClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StructInBoxMap smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StructInBoxMap smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StructInBoxMap smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StructInBoxMapClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the StructInBoxMap smart contract
 */
export class StructInBoxMapClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StructInBoxMapClient`
   *
   * @param appClient An `AppClient` instance which has been created with the StructInBoxMap app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StructInBoxMapClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StructInBoxMapNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `StructInBoxMapClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StructInBoxMapClient> {
    return new StructInBoxMapClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StructInBoxMapClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StructInBoxMapClient> {
    return new StructInBoxMapClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the StructInBoxMap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `createNewUser(uint64,(uint64,string,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewUser: (params: CallParams<StructInBoxMapArgs['obj']['createNewUser(uint64,(uint64,string,uint64))bool'] | StructInBoxMapArgs['tuple']['createNewUser(uint64,(uint64,string,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StructInBoxMapParamsFactory.createNewUser(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `getUser(uint64)(uint64,string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUser: (params: CallParams<StructInBoxMapArgs['obj']['getUser(uint64)(uint64,string,uint64)'] | StructInBoxMapArgs['tuple']['getUser(uint64)(uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StructInBoxMapParamsFactory.getUser(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `checkUserExists(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkUserExists: (params: CallParams<StructInBoxMapArgs['obj']['checkUserExists(uint64)bool'] | StructInBoxMapArgs['tuple']['checkUserExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StructInBoxMapParamsFactory.checkUserExists(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `updateUserNameAndAge(uint64,string,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateUserNameAndAge: (params: CallParams<StructInBoxMapArgs['obj']['updateUserNameAndAge(uint64,string,uint64)bool'] | StructInBoxMapArgs['tuple']['updateUserNameAndAge(uint64,string,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StructInBoxMapParamsFactory.updateUserNameAndAge(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the StructInBoxMap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `createNewUser(uint64,(uint64,string,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewUser: (params: CallParams<StructInBoxMapArgs['obj']['createNewUser(uint64,(uint64,string,uint64))bool'] | StructInBoxMapArgs['tuple']['createNewUser(uint64,(uint64,string,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StructInBoxMapParamsFactory.createNewUser(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `getUser(uint64)(uint64,string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUser: (params: CallParams<StructInBoxMapArgs['obj']['getUser(uint64)(uint64,string,uint64)'] | StructInBoxMapArgs['tuple']['getUser(uint64)(uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StructInBoxMapParamsFactory.getUser(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `checkUserExists(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkUserExists: (params: CallParams<StructInBoxMapArgs['obj']['checkUserExists(uint64)bool'] | StructInBoxMapArgs['tuple']['checkUserExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StructInBoxMapParamsFactory.checkUserExists(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `updateUserNameAndAge(uint64,string,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateUserNameAndAge: (params: CallParams<StructInBoxMapArgs['obj']['updateUserNameAndAge(uint64,string,uint64)bool'] | StructInBoxMapArgs['tuple']['updateUserNameAndAge(uint64,string,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StructInBoxMapParamsFactory.updateUserNameAndAge(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the StructInBoxMap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `createNewUser(uint64,(uint64,string,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewUser: async (params: CallParams<StructInBoxMapArgs['obj']['createNewUser(uint64,(uint64,string,uint64))bool'] | StructInBoxMapArgs['tuple']['createNewUser(uint64,(uint64,string,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StructInBoxMapParamsFactory.createNewUser(params))
      return {...result, return: result.return as unknown as (undefined | StructInBoxMapReturns['createNewUser(uint64,(uint64,string,uint64))bool'])}
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `getUser(uint64)(uint64,string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUser: async (params: CallParams<StructInBoxMapArgs['obj']['getUser(uint64)(uint64,string,uint64)'] | StructInBoxMapArgs['tuple']['getUser(uint64)(uint64,string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StructInBoxMapParamsFactory.getUser(params))
      return {...result, return: result.return as unknown as (undefined | StructInBoxMapReturns['getUser(uint64)(uint64,string,uint64)'])}
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `checkUserExists(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkUserExists: async (params: CallParams<StructInBoxMapArgs['obj']['checkUserExists(uint64)bool'] | StructInBoxMapArgs['tuple']['checkUserExists(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StructInBoxMapParamsFactory.checkUserExists(params))
      return {...result, return: result.return as unknown as (undefined | StructInBoxMapReturns['checkUserExists(uint64)bool'])}
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `updateUserNameAndAge(uint64,string,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateUserNameAndAge: async (params: CallParams<StructInBoxMapArgs['obj']['updateUserNameAndAge(uint64,string,uint64)bool'] | StructInBoxMapArgs['tuple']['updateUserNameAndAge(uint64,string,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StructInBoxMapParamsFactory.updateUserNameAndAge(params))
      return {...result, return: result.return as unknown as (undefined | StructInBoxMapReturns['updateUserNameAndAge(uint64,string,uint64)bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StructInBoxMapClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current StructInBoxMap app
   */
  state = {
    /**
     * Methods to access box state for the current StructInBoxMap app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the users map in box state
       */
      users: {
        /**
         * Get all current values of the users map in box state
         */
        getMap: async (): Promise<Map<bigint, User>> => { return (await this.appClient.state.box.getMap("users")) as Map<bigint, User> },
        /**
         * Get a current value of the users map by key from box state
         */
        value: async (key: bigint | number): Promise<User | undefined> => { return await this.appClient.state.box.getMapValue("users", key) as User | undefined },
      },
    },
  }

  public newGroup(): StructInBoxMapComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createNewUser(uint64,(uint64,string,uint64))bool method call against the StructInBoxMap contract
       */
      createNewUser(params: CallParams<StructInBoxMapArgs['obj']['createNewUser(uint64,(uint64,string,uint64))bool'] | StructInBoxMapArgs['tuple']['createNewUser(uint64,(uint64,string,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNewUser(params)))
        resultMappers.push((v) => client.decodeReturnValue('createNewUser(uint64,(uint64,string,uint64))bool', v))
        return this
      },
      /**
       * Add a getUser(uint64)(uint64,string,uint64) method call against the StructInBoxMap contract
       */
      getUser(params: CallParams<StructInBoxMapArgs['obj']['getUser(uint64)(uint64,string,uint64)'] | StructInBoxMapArgs['tuple']['getUser(uint64)(uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUser(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUser(uint64)(uint64,string,uint64)', v))
        return this
      },
      /**
       * Add a checkUserExists(uint64)bool method call against the StructInBoxMap contract
       */
      checkUserExists(params: CallParams<StructInBoxMapArgs['obj']['checkUserExists(uint64)bool'] | StructInBoxMapArgs['tuple']['checkUserExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkUserExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkUserExists(uint64)bool', v))
        return this
      },
      /**
       * Add a updateUserNameAndAge(uint64,string,uint64)bool method call against the StructInBoxMap contract
       */
      updateUserNameAndAge(params: CallParams<StructInBoxMapArgs['obj']['updateUserNameAndAge(uint64,string,uint64)bool'] | StructInBoxMapArgs['tuple']['updateUserNameAndAge(uint64,string,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateUserNameAndAge(params)))
        resultMappers.push((v) => client.decodeReturnValue('updateUserNameAndAge(uint64,string,uint64)bool', v))
        return this
      },
      /**
       * Add a clear state call to the StructInBoxMap contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StructInBoxMapComposer
  }
}
export type StructInBoxMapComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createNewUser(uint64,(uint64,string,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewUser(params?: CallParams<StructInBoxMapArgs['obj']['createNewUser(uint64,(uint64,string,uint64))bool'] | StructInBoxMapArgs['tuple']['createNewUser(uint64,(uint64,string,uint64))bool']>): StructInBoxMapComposer<[...TReturns, StructInBoxMapReturns['createNewUser(uint64,(uint64,string,uint64))bool'] | undefined]>

  /**
   * Calls the getUser(uint64)(uint64,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUser(params?: CallParams<StructInBoxMapArgs['obj']['getUser(uint64)(uint64,string,uint64)'] | StructInBoxMapArgs['tuple']['getUser(uint64)(uint64,string,uint64)']>): StructInBoxMapComposer<[...TReturns, StructInBoxMapReturns['getUser(uint64)(uint64,string,uint64)'] | undefined]>

  /**
   * Calls the checkUserExists(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkUserExists(params?: CallParams<StructInBoxMapArgs['obj']['checkUserExists(uint64)bool'] | StructInBoxMapArgs['tuple']['checkUserExists(uint64)bool']>): StructInBoxMapComposer<[...TReturns, StructInBoxMapReturns['checkUserExists(uint64)bool'] | undefined]>

  /**
   * Calls the updateUserNameAndAge(uint64,string,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateUserNameAndAge(params?: CallParams<StructInBoxMapArgs['obj']['updateUserNameAndAge(uint64,string,uint64)bool'] | StructInBoxMapArgs['tuple']['updateUserNameAndAge(uint64,string,uint64)bool']>): StructInBoxMapComposer<[...TReturns, StructInBoxMapReturns['updateUserNameAndAge(uint64,string,uint64)bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the StructInBoxMap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StructInBoxMapComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StructInBoxMapComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StructInBoxMapComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StructInBoxMapComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StructInBoxMapComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StructInBoxMapComposerResults<TReturns>>
}
export type StructInBoxMapComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

