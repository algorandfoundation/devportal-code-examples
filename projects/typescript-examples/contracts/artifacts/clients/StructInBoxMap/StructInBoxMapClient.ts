/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"StructInBoxMap","structs":{"User":[{"name":"name","type":"string"},{"name":"id","type":"uint64"},{"name":"asset","type":"uint64"}]},"methods":[{"name":"boxMapTest","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"boxMapSet","args":[{"type":"uint64","name":"key"},{"type":"(string,uint64,uint64)","struct":"User","name":"value"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"boxMapGet","args":[{"type":"uint64","name":"key"}],"returns":{"type":"(string,uint64,uint64)","struct":"User"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"boxMapExists","args":[{"type":"uint64","name":"key"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"userMap":{"keyType":"uint64","valueType":"User","prefix":"dXNlcnM="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[191],"errorMessage":"Box must have value"},{"pc":[48],"errorMessage":"OnCompletion must be NoOp"},{"pc":[95],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[177],"errorMessage":"assert target is match for conditions"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAyIDggMTAKICAgIGJ5dGVjYmxvY2sgInVzZXJzIiAweDc1NzM2NTcyNzMwMDAwMDAwMDAwMDAwMDAwIDB4MTUxZjdjNzU4MCAweDE1MWY3Yzc1CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czoxOAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RydWN0SW5Cb3hNYXAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAMTEKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0CiAgICBwdXNoYnl0ZXNzIDB4ZjE2NWNkZDkgMHgwZjA1ZjMzMiAweDY5OWViMGZlIDB4ZDgyOWQyYTMgLy8gbWV0aG9kICJib3hNYXBUZXN0KClib29sIiwgbWV0aG9kICJib3hNYXBTZXQodWludDY0LChzdHJpbmcsdWludDY0LHVpbnQ2NCkpYm9vbCIsIG1ldGhvZCAiYm94TWFwR2V0KHVpbnQ2NCkoc3RyaW5nLHVpbnQ2NCx1aW50NjQpIiwgbWV0aG9kICJib3hNYXBFeGlzdHModWludDY0KWJvb2wiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBib3hNYXBUZXN0IGJveE1hcFNldCBib3hNYXBHZXQgYm94TWFwRXhpc3RzCiAgICBlcnIKCm1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDExOgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MTgKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0cnVjdEluQm94TWFwIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgICYmCiAgICByZXR1cm4gLy8gb24gZXJyb3I6IE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AgJiYgY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCgoKLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6OlN0cnVjdEluQm94TWFwLmJveE1hcFRlc3Rbcm91dGluZ10oKSAtPiB2b2lkOgpib3hNYXBUZXN0OgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyB1c2VyTWFwID0gQm94TWFwPHVpbnQ2NCwgVXNlcj4oeyBrZXlQcmVmaXg6ICd1c2VycycgfSkKICAgIGJ5dGVjXzEgLy8gMHg3NTczNjU3MjczMDAwMDAwMDAwMDAwMDAwMAogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MzAKICAgIC8vIHRoaXMudXNlck1hcChrZXkwKS52YWx1ZSA9IGNsb25lKHZhbHVlKQogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czoxOQogICAgLy8gcHVibGljIHVzZXJNYXAgPSBCb3hNYXA8dWludDY0LCBVc2VyPih7IGtleVByZWZpeDogJ3VzZXJzJyB9KQogICAgYnl0ZWNfMSAvLyAweDc1NzM2NTcyNzMwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czozMAogICAgLy8gdGhpcy51c2VyTWFwKGtleTApLnZhbHVlID0gY2xvbmUodmFsdWUpCiAgICBwdXNoYnl0ZXMgMHgwMDEyMDAwMDAwMDAwMDAwMDA0NjAwMDAwMDAwMDAwMDAwMDIwMDA4NzQ2NTczNzQ0ZTYxNmQ2NQogICAgYm94X3B1dAogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIEBhYmltZXRob2QoKQogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1ODAKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjpTdHJ1Y3RJbkJveE1hcC5ib3hNYXBTZXRbcm91dGluZ10oKSAtPiB2b2lkOgpib3hNYXBTZXQ6CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czozNQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czozNwogICAgLy8gdGhpcy51c2VyTWFwKGtleSkudmFsdWUgPSBjbG9uZSh2YWx1ZSkKICAgIHN3YXAKICAgIGl0b2IKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgdXNlck1hcCA9IEJveE1hcDx1aW50NjQsIFVzZXI+KHsga2V5UHJlZml4OiAndXNlcnMnIH0pCiAgICBieXRlY18wIC8vICJ1c2VycyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHRoaXMudXNlck1hcChrZXkpLnZhbHVlID0gY2xvbmUodmFsdWUpCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZHVwCiAgICBkaWcgMgogICAgYm94X3B1dAogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MzktNDMKICAgIC8vIGFzc2VydE1hdGNoKHRoaXMudXNlck1hcChrZXkpLnZhbHVlLCB7CiAgICAvLyAgIGlkOiB2YWx1ZS5pZCwKICAgIC8vICAgYXNzZXQ6IHZhbHVlLmFzc2V0LAogICAgLy8gICBuYW1lOiB2YWx1ZS5uYW1lLAogICAgLy8gfSkKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIGludGNfMiAvLyA4CiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6NDAKICAgIC8vIGlkOiB2YWx1ZS5pZCwKICAgIGRpZyAyCiAgICBpbnRjXzEgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjM5LTQzCiAgICAvLyBhc3NlcnRNYXRjaCh0aGlzLnVzZXJNYXAoa2V5KS52YWx1ZSwgewogICAgLy8gICBpZDogdmFsdWUuaWQsCiAgICAvLyAgIGFzc2V0OiB2YWx1ZS5hc3NldCwKICAgIC8vICAgbmFtZTogdmFsdWUubmFtZSwKICAgIC8vIH0pCiAgICA9PQogICAgc3dhcAogICAgaW50Y18zIC8vIDEwCiAgICBpbnRjXzIgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjQxCiAgICAvLyBhc3NldDogdmFsdWUuYXNzZXQsCiAgICB1bmNvdmVyIDIKICAgIGludGNfMyAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjM5LTQzCiAgICAvLyBhc3NlcnRNYXRjaCh0aGlzLnVzZXJNYXAoa2V5KS52YWx1ZSwgewogICAgLy8gICBpZDogdmFsdWUuaWQsCiAgICAvLyAgIGFzc2V0OiB2YWx1ZS5hc3NldCwKICAgIC8vICAgbmFtZTogdmFsdWUubmFtZSwKICAgIC8vIH0pCiAgICA9PQogICAgJiYKICAgIGludGNfMCAvLyAxCiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NTgwCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo6U3RydWN0SW5Cb3hNYXAuYm94TWFwR2V0W3JvdXRpbmddKCkgLT4gdm9pZDoKYm94TWFwR2V0OgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6NDgKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6NTAKICAgIC8vIHJldHVybiB0aGlzLnVzZXJNYXAoa2V5KS52YWx1ZQogICAgaXRvYgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyB1c2VyTWFwID0gQm94TWFwPHVpbnQ2NCwgVXNlcj4oeyBrZXlQcmVmaXg6ICd1c2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInVzZXJzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1MAogICAgLy8gcmV0dXJuIHRoaXMudXNlck1hcChrZXkpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6NDgKICAgIC8vIEBhYmltZXRob2QoKQogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjpTdHJ1Y3RJbkJveE1hcC5ib3hNYXBFeGlzdHNbcm91dGluZ10oKSAtPiB2b2lkOgpib3hNYXBFeGlzdHM6CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1NQogICAgLy8gcmV0dXJuIHRoaXMudXNlck1hcChrZXkpLmV4aXN0cwogICAgaXRvYgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyB1c2VyTWFwID0gQm94TWFwPHVpbnQ2NCwgVXNlcj4oeyBrZXlQcmVmaXg6ICd1c2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInVzZXJzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1NQogICAgLy8gcmV0dXJuIHRoaXMudXNlck1hcChrZXkpLmV4aXN0cwogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgcHVzaGludCAwIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAEAQIICiYEBXVzZXJzDXVzZXJzAAAAAAAAAAAFFR98dYAEFR98dTEbQQArMRkURDEYRIIEBPFlzdkEDwXzMgRpnrD+BNgp0qM2GgCOBAAJADAAXwBvADEZFDEYFBBDKbxIKYAcABIAAAAAAAAARgAAAAAAAAACAAh0ZXN0TmFtZb8qsCJDNhoBFzYaAkwWKExQSbxISUsCv0kjJLoXSwIjWxJMJSS6F08CJVsSECIQRCqwIkM2GgEXFihMUL5EK0xQsCJDNhoBFxYoTFC9RQGAAQCBAE8CVCtMULAiQw==","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type User = {
  name: string,
  id: bigint,
  asset: bigint
}


/**
 * Converts the ABI tuple representation of a User to the struct representation
 */
export function UserFromTuple(abiTuple: [string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.User, APP_SPEC.structs) as User
}

/**
 * The argument types for the StructInBoxMap contract
 */
export type StructInBoxMapArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'boxMapTest()bool': Record<string, never>
    'boxMapSet(uint64,(string,uint64,uint64))bool': {
      key: bigint | number
      value: User
    }
    'boxMapGet(uint64)(string,uint64,uint64)': {
      key: bigint | number
    }
    'boxMapExists(uint64)bool': {
      key: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'boxMapTest()bool': []
    'boxMapSet(uint64,(string,uint64,uint64))bool': [key: bigint | number, value: User]
    'boxMapGet(uint64)(string,uint64,uint64)': [key: bigint | number]
    'boxMapExists(uint64)bool': [key: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type StructInBoxMapReturns = {
  'boxMapTest()bool': boolean
  'boxMapSet(uint64,(string,uint64,uint64))bool': boolean
  'boxMapGet(uint64)(string,uint64,uint64)': User
  'boxMapExists(uint64)bool': boolean
}

/**
 * Defines the types of available calls and state of the StructInBoxMap smart contract.
 */
export type StructInBoxMapTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'boxMapTest()bool' | 'boxMapTest', {
      argsObj: StructInBoxMapArgs['obj']['boxMapTest()bool']
      argsTuple: StructInBoxMapArgs['tuple']['boxMapTest()bool']
      returns: StructInBoxMapReturns['boxMapTest()bool']
    }>
    & Record<'boxMapSet(uint64,(string,uint64,uint64))bool' | 'boxMapSet', {
      argsObj: StructInBoxMapArgs['obj']['boxMapSet(uint64,(string,uint64,uint64))bool']
      argsTuple: StructInBoxMapArgs['tuple']['boxMapSet(uint64,(string,uint64,uint64))bool']
      returns: StructInBoxMapReturns['boxMapSet(uint64,(string,uint64,uint64))bool']
    }>
    & Record<'boxMapGet(uint64)(string,uint64,uint64)' | 'boxMapGet', {
      argsObj: StructInBoxMapArgs['obj']['boxMapGet(uint64)(string,uint64,uint64)']
      argsTuple: StructInBoxMapArgs['tuple']['boxMapGet(uint64)(string,uint64,uint64)']
      returns: StructInBoxMapReturns['boxMapGet(uint64)(string,uint64,uint64)']
    }>
    & Record<'boxMapExists(uint64)bool' | 'boxMapExists', {
      argsObj: StructInBoxMapArgs['obj']['boxMapExists(uint64)bool']
      argsTuple: StructInBoxMapArgs['tuple']['boxMapExists(uint64)bool']
      returns: StructInBoxMapReturns['boxMapExists(uint64)bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        userMap: Map<bigint | number, User>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StructInBoxMapSignatures = keyof StructInBoxMapTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StructInBoxMapNonVoidMethodSignatures = keyof StructInBoxMapTypes['methods'] extends infer T ? T extends keyof StructInBoxMapTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the StructInBoxMap smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StructInBoxMapSignatures> = StructInBoxMapTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StructInBoxMap smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StructInBoxMapSignatures> = StructInBoxMapTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = StructInBoxMapTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StructInBoxMapCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type StructInBoxMapDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StructInBoxMapCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the StructInBoxMap smart contract
 */
export abstract class StructInBoxMapParamsFactory {
  /**
   * Constructs a no op call for the boxMapTest()bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxMapTest(params: CallParams<StructInBoxMapArgs['obj']['boxMapTest()bool'] | StructInBoxMapArgs['tuple']['boxMapTest()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxMapTest()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the boxMapSet(uint64,(string,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxMapSet(params: CallParams<StructInBoxMapArgs['obj']['boxMapSet(uint64,(string,uint64,uint64))bool'] | StructInBoxMapArgs['tuple']['boxMapSet(uint64,(string,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxMapSet(uint64,(string,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the boxMapGet(uint64)(string,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxMapGet(params: CallParams<StructInBoxMapArgs['obj']['boxMapGet(uint64)(string,uint64,uint64)'] | StructInBoxMapArgs['tuple']['boxMapGet(uint64)(string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxMapGet(uint64)(string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the boxMapExists(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boxMapExists(params: CallParams<StructInBoxMapArgs['obj']['boxMapExists(uint64)bool'] | StructInBoxMapArgs['tuple']['boxMapExists(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boxMapExists(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the StructInBoxMap smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StructInBoxMapFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StructInBoxMapFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StructInBoxMapClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StructInBoxMapClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the StructInBoxMap smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StructInBoxMapDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new StructInBoxMapClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StructInBoxMap smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StructInBoxMap smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StructInBoxMap smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StructInBoxMapClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the StructInBoxMap smart contract
 */
export class StructInBoxMapClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StructInBoxMapClient`
   *
   * @param appClient An `AppClient` instance which has been created with the StructInBoxMap app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StructInBoxMapClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StructInBoxMapNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `StructInBoxMapClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StructInBoxMapClient> {
    return new StructInBoxMapClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StructInBoxMapClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StructInBoxMapClient> {
    return new StructInBoxMapClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the StructInBoxMap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapTest()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boxMapTest: (params: CallParams<StructInBoxMapArgs['obj']['boxMapTest()bool'] | StructInBoxMapArgs['tuple']['boxMapTest()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StructInBoxMapParamsFactory.boxMapTest(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapSet(uint64,(string,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boxMapSet: (params: CallParams<StructInBoxMapArgs['obj']['boxMapSet(uint64,(string,uint64,uint64))bool'] | StructInBoxMapArgs['tuple']['boxMapSet(uint64,(string,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StructInBoxMapParamsFactory.boxMapSet(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapGet(uint64)(string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boxMapGet: (params: CallParams<StructInBoxMapArgs['obj']['boxMapGet(uint64)(string,uint64,uint64)'] | StructInBoxMapArgs['tuple']['boxMapGet(uint64)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StructInBoxMapParamsFactory.boxMapGet(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapExists(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boxMapExists: (params: CallParams<StructInBoxMapArgs['obj']['boxMapExists(uint64)bool'] | StructInBoxMapArgs['tuple']['boxMapExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StructInBoxMapParamsFactory.boxMapExists(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the StructInBoxMap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapTest()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boxMapTest: (params: CallParams<StructInBoxMapArgs['obj']['boxMapTest()bool'] | StructInBoxMapArgs['tuple']['boxMapTest()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StructInBoxMapParamsFactory.boxMapTest(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapSet(uint64,(string,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boxMapSet: (params: CallParams<StructInBoxMapArgs['obj']['boxMapSet(uint64,(string,uint64,uint64))bool'] | StructInBoxMapArgs['tuple']['boxMapSet(uint64,(string,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StructInBoxMapParamsFactory.boxMapSet(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapGet(uint64)(string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boxMapGet: (params: CallParams<StructInBoxMapArgs['obj']['boxMapGet(uint64)(string,uint64,uint64)'] | StructInBoxMapArgs['tuple']['boxMapGet(uint64)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StructInBoxMapParamsFactory.boxMapGet(params))
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapExists(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boxMapExists: (params: CallParams<StructInBoxMapArgs['obj']['boxMapExists(uint64)bool'] | StructInBoxMapArgs['tuple']['boxMapExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StructInBoxMapParamsFactory.boxMapExists(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the StructInBoxMap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapTest()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boxMapTest: async (params: CallParams<StructInBoxMapArgs['obj']['boxMapTest()bool'] | StructInBoxMapArgs['tuple']['boxMapTest()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StructInBoxMapParamsFactory.boxMapTest(params))
      return {...result, return: result.return as unknown as (undefined | StructInBoxMapReturns['boxMapTest()bool'])}
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapSet(uint64,(string,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boxMapSet: async (params: CallParams<StructInBoxMapArgs['obj']['boxMapSet(uint64,(string,uint64,uint64))bool'] | StructInBoxMapArgs['tuple']['boxMapSet(uint64,(string,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StructInBoxMapParamsFactory.boxMapSet(params))
      return {...result, return: result.return as unknown as (undefined | StructInBoxMapReturns['boxMapSet(uint64,(string,uint64,uint64))bool'])}
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapGet(uint64)(string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boxMapGet: async (params: CallParams<StructInBoxMapArgs['obj']['boxMapGet(uint64)(string,uint64,uint64)'] | StructInBoxMapArgs['tuple']['boxMapGet(uint64)(string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StructInBoxMapParamsFactory.boxMapGet(params))
      return {...result, return: result.return as unknown as (undefined | StructInBoxMapReturns['boxMapGet(uint64)(string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the StructInBoxMap smart contract using the `boxMapExists(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boxMapExists: async (params: CallParams<StructInBoxMapArgs['obj']['boxMapExists(uint64)bool'] | StructInBoxMapArgs['tuple']['boxMapExists(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StructInBoxMapParamsFactory.boxMapExists(params))
      return {...result, return: result.return as unknown as (undefined | StructInBoxMapReturns['boxMapExists(uint64)bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StructInBoxMapClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current StructInBoxMap app
   */
  state = {
    /**
     * Methods to access box state for the current StructInBoxMap app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the userMap map in box state
       */
      userMap: {
        /**
         * Get all current values of the userMap map in box state
         */
        getMap: async (): Promise<Map<bigint, User>> => { return (await this.appClient.state.box.getMap("userMap")) as Map<bigint, User> },
        /**
         * Get a current value of the userMap map by key from box state
         */
        value: async (key: bigint | number): Promise<User | undefined> => { return await this.appClient.state.box.getMapValue("userMap", key) as User | undefined },
      },
    },
  }

  public newGroup(): StructInBoxMapComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a boxMapTest()bool method call against the StructInBoxMap contract
       */
      boxMapTest(params: CallParams<StructInBoxMapArgs['obj']['boxMapTest()bool'] | StructInBoxMapArgs['tuple']['boxMapTest()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxMapTest(params)))
        resultMappers.push((v) => client.decodeReturnValue('boxMapTest()bool', v))
        return this
      },
      /**
       * Add a boxMapSet(uint64,(string,uint64,uint64))bool method call against the StructInBoxMap contract
       */
      boxMapSet(params: CallParams<StructInBoxMapArgs['obj']['boxMapSet(uint64,(string,uint64,uint64))bool'] | StructInBoxMapArgs['tuple']['boxMapSet(uint64,(string,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxMapSet(params)))
        resultMappers.push((v) => client.decodeReturnValue('boxMapSet(uint64,(string,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a boxMapGet(uint64)(string,uint64,uint64) method call against the StructInBoxMap contract
       */
      boxMapGet(params: CallParams<StructInBoxMapArgs['obj']['boxMapGet(uint64)(string,uint64,uint64)'] | StructInBoxMapArgs['tuple']['boxMapGet(uint64)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxMapGet(params)))
        resultMappers.push((v) => client.decodeReturnValue('boxMapGet(uint64)(string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a boxMapExists(uint64)bool method call against the StructInBoxMap contract
       */
      boxMapExists(params: CallParams<StructInBoxMapArgs['obj']['boxMapExists(uint64)bool'] | StructInBoxMapArgs['tuple']['boxMapExists(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boxMapExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('boxMapExists(uint64)bool', v))
        return this
      },
      /**
       * Add a clear state call to the StructInBoxMap contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StructInBoxMapComposer
  }
}
export type StructInBoxMapComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the boxMapTest()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxMapTest(params?: CallParams<StructInBoxMapArgs['obj']['boxMapTest()bool'] | StructInBoxMapArgs['tuple']['boxMapTest()bool']>): StructInBoxMapComposer<[...TReturns, StructInBoxMapReturns['boxMapTest()bool'] | undefined]>

  /**
   * Calls the boxMapSet(uint64,(string,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxMapSet(params?: CallParams<StructInBoxMapArgs['obj']['boxMapSet(uint64,(string,uint64,uint64))bool'] | StructInBoxMapArgs['tuple']['boxMapSet(uint64,(string,uint64,uint64))bool']>): StructInBoxMapComposer<[...TReturns, StructInBoxMapReturns['boxMapSet(uint64,(string,uint64,uint64))bool'] | undefined]>

  /**
   * Calls the boxMapGet(uint64)(string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxMapGet(params?: CallParams<StructInBoxMapArgs['obj']['boxMapGet(uint64)(string,uint64,uint64)'] | StructInBoxMapArgs['tuple']['boxMapGet(uint64)(string,uint64,uint64)']>): StructInBoxMapComposer<[...TReturns, StructInBoxMapReturns['boxMapGet(uint64)(string,uint64,uint64)'] | undefined]>

  /**
   * Calls the boxMapExists(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boxMapExists(params?: CallParams<StructInBoxMapArgs['obj']['boxMapExists(uint64)bool'] | StructInBoxMapArgs['tuple']['boxMapExists(uint64)bool']>): StructInBoxMapComposer<[...TReturns, StructInBoxMapReturns['boxMapExists(uint64)bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the StructInBoxMap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StructInBoxMapComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StructInBoxMapComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StructInBoxMapComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StructInBoxMapComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StructInBoxMapComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StructInBoxMapComposerResults<TReturns>>
}
export type StructInBoxMapComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

