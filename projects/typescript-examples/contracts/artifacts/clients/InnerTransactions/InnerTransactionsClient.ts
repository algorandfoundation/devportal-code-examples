/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"InnerTransactions","structs":{},"methods":[{"name":"payment","args":[],"returns":{"type":"uint64","desc":"The amount of the payment"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Demonstrates a simple payment inner transaction","events":[],"recommendations":{}},{"name":"fungibleAssetCreate","args":[],"returns":{"type":"uint64","desc":"The ID of the created asset"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Creates a fungible asset (token)","events":[],"recommendations":{}},{"name":"nonFungibleAssetCreate","args":[],"returns":{"type":"uint64","desc":"The ID of the created asset"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Creates a non-fungible asset (NFT)\nFollowing the ARC3 standard, the total supply must be 1 for a non-fungible asset.\nIf you want to create fractional NFTs, `total` * `decimals` point must be 1.\nex) total=100, decimals=2, 100 * 0.01 = 1","events":[],"recommendations":{}},{"name":"assetOptIn","args":[{"type":"asset","name":"asset","desc":"The asset to opt into"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Opts the application into an asset","events":[],"recommendations":{}},{"name":"assetTransfer","args":[{"type":"asset","name":"asset","desc":"The asset to transfer"},{"type":"account","name":"receiver","desc":"The account to receive the asset"},{"type":"uint64","name":"amount","desc":"The amount to transfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfers an asset from the application to another account","events":[],"recommendations":{}},{"name":"assetFreeze","args":[{"type":"account","name":"acctToBeFrozen","desc":"The account to freeze the asset for"},{"type":"asset","name":"asset","desc":"The asset to freeze"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Freezes an asset for a specific account","events":[],"recommendations":{}},{"name":"assetRevoke","args":[{"type":"asset","name":"asset","desc":"The asset to revoke"},{"type":"account","name":"accountToBeRevoked","desc":"The account to revoke the asset from"},{"type":"uint64","name":"amount","desc":"The amount to revoke"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Revokes (clawbacks) an asset from an account","events":[],"recommendations":{}},{"name":"assetConfig","args":[{"type":"asset","name":"asset","desc":"The asset to reconfigure"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Reconfigures an existing asset","events":[],"recommendations":{}},{"name":"assetDelete","args":[{"type":"asset","name":"asset","desc":"The asset to delete"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deletes an asset","events":[],"recommendations":{}},{"name":"multiInnerTxns","args":[{"type":"application","name":"appId","desc":"The application to call"}],"returns":{"type":"(uint64,string)","desc":"A tuple containing the payment amount and the result of the hello world call"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Demonstrates grouped inner transactions","events":[],"recommendations":{}},{"name":"deployApp","args":[],"returns":{"type":"uint64","desc":"The ID of the deployed application"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deploys a HelloWorld contract using direct application call\n\nThis method uses the itxn.applicationCall to deploy the HelloWorld contract.","events":[],"recommendations":{}},{"name":"arc4DeployApp","args":[],"returns":{"type":"uint64","desc":"The ID of the deployed application"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deploys a HelloWorld contract using arc4\n\nThis method uses arc4 to deploy the HelloWorld contract.","events":[],"recommendations":{}},{"name":"noopAppCall","args":[{"type":"application","name":"appId","desc":"The application to call"}],"returns":{"type":"string","desc":"A tuple containing the result of two hello world calls"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Demonstrates calling methods on another application","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"InnerTransactions contract demonstrates various inner transaction patterns\nin Algorand smart contracts.","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[791,889],"errorMessage":"Bytes has valid prefix"},{"pc":[131,161,185,202,244,262,280,308,332,360,378,395,412],"errorMessage":"OnCompletion is not NoOp"},{"pc":[434],"errorMessage":"can only call when creating"},{"pc":[134,164,188,205,247,265,283,311,335,363,381,398,415],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAQADBCYDBBUffHUEOq1thgNEb2UxG0EBjoINBCOVACcEAgf3fQTSJJKEBGagY78EElY3ZwTPsS2xBHtY4jYE0IZP9ARTUde+BFcn7K4E2iCofgQ47MAUBJruwVk2GgCODQEbAQoA+QDnAMsAswCXAIUAcwBJADgAIAACI0MxGRREMRhENhoBF8AyiALDSRUWVwYCTFAoTFCwIkMxGRREMRhEgAwVH3x1AAAAAAAABNKwIkMxGRREMRhEiAJcFihMULAiQzEZFEQxGEQ2GgEXwDKIAgdMFksBFRZXBgJPAlBMgAIAClBMUChMULAiQzEZFEQxGEQ2GgEXwDCIAc0iQzEZFEQxGEQ2GgEXwDCIAZ0iQzEZFEQxGEQ2GgEXwDA2GgIXwBw2GgMXiAFlIkMxGRREMRhENhoBF8AcNhoCF8AwiAE1IkMxGRREMRhENhoBF8AwNhoCF8AcNhoDF4gBASJDMRkURDEYRDYaARfAMIgA2CJDMRkURDEYRIgAeBYoTFCwIkMxGRREMRhEiAA3FihMULAiQzEZFEQxGESIABIWKExQsCJDMRlA/s8xGBREIkOxMQCyB4GIJ7IIIrIQI7IBs7QIibGADlJveWFsdHkgUG9pbnRzsiaAAlJQsiWBArIjgYDQ28P0ArIiJLIQI7IBs7Q8ibEyCkcDsiyyK7IqsimAHmh0dHBzOi8vbGlua190b19pcGZzL01vbmFfTGlzYbIngAlNb25hIExpc2GyJoACTUyyJYECsiOBZLIiJLIQI7IBs7Q8iYoBALEyCiOyEov/shGyFCWyECOyAbOJigMAsYv/shKL/bIRi/6yFCWyECOyAbOJigIAsSKyL4v/si2L/rIugQWyECOyAbOJigMAsTIKi/+yEov+shOL/bIRshQlshAjsgGziYoBALEyCkkxAEmyLLIrsiqyKYv/siEkshAjsgGziYoBALGL/7IhJLIQI7IBs4mKAQKxMQCyB4GIJ7IIIrIQI7IBs7QIsSmyGoAESmFuZbIaKrIai/+yGIEGshAjsgGztD5JVwAEKBJEVwYAibGAE2NsZWFyX3N0YXRlX3Byb2dyYW2yQoAQYXBwcm92YWxfcHJvZ3JhbbJAgQayECOyAbO0PYmKAQGxKbIagARKb2hushoqshqL/7IYgQayECOyAbO0PklXAAQoEkRXBgCJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":4,"patch":4}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the InnerTransactions contract
 */
export type InnerTransactionsArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'payment()uint64': Record<string, never>
    'fungibleAssetCreate()uint64': Record<string, never>
    'nonFungibleAssetCreate()uint64': Record<string, never>
    'assetOptIn(asset)void': {
      /**
       * The asset to opt into
       */
      asset: bigint
    }
    'assetTransfer(asset,account,uint64)void': {
      /**
       * The asset to transfer
       */
      asset: bigint
      /**
       * The account to receive the asset
       */
      receiver: Uint8Array | string
      /**
       * The amount to transfer
       */
      amount: bigint | number
    }
    'assetFreeze(account,asset)void': {
      /**
       * The account to freeze the asset for
       */
      acctToBeFrozen: Uint8Array | string
      /**
       * The asset to freeze
       */
      asset: bigint
    }
    'assetRevoke(asset,account,uint64)void': {
      /**
       * The asset to revoke
       */
      asset: bigint
      /**
       * The account to revoke the asset from
       */
      accountToBeRevoked: Uint8Array | string
      /**
       * The amount to revoke
       */
      amount: bigint | number
    }
    'assetConfig(asset)void': {
      /**
       * The asset to reconfigure
       */
      asset: bigint
    }
    'assetDelete(asset)void': {
      /**
       * The asset to delete
       */
      asset: bigint
    }
    'multiInnerTxns(application)(uint64,string)': {
      /**
       * The application to call
       */
      appId: bigint
    }
    'deployApp()uint64': Record<string, never>
    'arc4DeployApp()uint64': Record<string, never>
    'noopAppCall(application)string': {
      /**
       * The application to call
       */
      appId: bigint
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'payment()uint64': []
    'fungibleAssetCreate()uint64': []
    'nonFungibleAssetCreate()uint64': []
    'assetOptIn(asset)void': [asset: bigint]
    'assetTransfer(asset,account,uint64)void': [asset: bigint, receiver: Uint8Array | string, amount: bigint | number]
    'assetFreeze(account,asset)void': [acctToBeFrozen: Uint8Array | string, asset: bigint]
    'assetRevoke(asset,account,uint64)void': [asset: bigint, accountToBeRevoked: Uint8Array | string, amount: bigint | number]
    'assetConfig(asset)void': [asset: bigint]
    'assetDelete(asset)void': [asset: bigint]
    'multiInnerTxns(application)(uint64,string)': [appId: bigint]
    'deployApp()uint64': []
    'arc4DeployApp()uint64': []
    'noopAppCall(application)string': [appId: bigint]
  }
}

/**
 * The return type for each method
 */
export type InnerTransactionsReturns = {
  'payment()uint64': bigint
  'fungibleAssetCreate()uint64': bigint
  'nonFungibleAssetCreate()uint64': bigint
  'assetOptIn(asset)void': void
  'assetTransfer(asset,account,uint64)void': void
  'assetFreeze(account,asset)void': void
  'assetRevoke(asset,account,uint64)void': void
  'assetConfig(asset)void': void
  'assetDelete(asset)void': void
  'multiInnerTxns(application)(uint64,string)': [bigint, string]
  'deployApp()uint64': bigint
  'arc4DeployApp()uint64': bigint
  'noopAppCall(application)string': string
}

/**
 * Defines the types of available calls and state of the InnerTransactions smart contract.
 */
export type InnerTransactionsTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'payment()uint64' | 'payment', {
      argsObj: InnerTransactionsArgs['obj']['payment()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['payment()uint64']
      /**
       * The amount of the payment
       */
      returns: InnerTransactionsReturns['payment()uint64']
    }>
    & Record<'fungibleAssetCreate()uint64' | 'fungibleAssetCreate', {
      argsObj: InnerTransactionsArgs['obj']['fungibleAssetCreate()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['fungibleAssetCreate()uint64']
      /**
       * The ID of the created asset
       */
      returns: InnerTransactionsReturns['fungibleAssetCreate()uint64']
    }>
    & Record<'nonFungibleAssetCreate()uint64' | 'nonFungibleAssetCreate', {
      argsObj: InnerTransactionsArgs['obj']['nonFungibleAssetCreate()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['nonFungibleAssetCreate()uint64']
      /**
       * The ID of the created asset
       */
      returns: InnerTransactionsReturns['nonFungibleAssetCreate()uint64']
    }>
    & Record<'assetOptIn(asset)void' | 'assetOptIn', {
      argsObj: InnerTransactionsArgs['obj']['assetOptIn(asset)void']
      argsTuple: InnerTransactionsArgs['tuple']['assetOptIn(asset)void']
      returns: InnerTransactionsReturns['assetOptIn(asset)void']
    }>
    & Record<'assetTransfer(asset,account,uint64)void' | 'assetTransfer', {
      argsObj: InnerTransactionsArgs['obj']['assetTransfer(asset,account,uint64)void']
      argsTuple: InnerTransactionsArgs['tuple']['assetTransfer(asset,account,uint64)void']
      returns: InnerTransactionsReturns['assetTransfer(asset,account,uint64)void']
    }>
    & Record<'assetFreeze(account,asset)void' | 'assetFreeze', {
      argsObj: InnerTransactionsArgs['obj']['assetFreeze(account,asset)void']
      argsTuple: InnerTransactionsArgs['tuple']['assetFreeze(account,asset)void']
      returns: InnerTransactionsReturns['assetFreeze(account,asset)void']
    }>
    & Record<'assetRevoke(asset,account,uint64)void' | 'assetRevoke', {
      argsObj: InnerTransactionsArgs['obj']['assetRevoke(asset,account,uint64)void']
      argsTuple: InnerTransactionsArgs['tuple']['assetRevoke(asset,account,uint64)void']
      returns: InnerTransactionsReturns['assetRevoke(asset,account,uint64)void']
    }>
    & Record<'assetConfig(asset)void' | 'assetConfig', {
      argsObj: InnerTransactionsArgs['obj']['assetConfig(asset)void']
      argsTuple: InnerTransactionsArgs['tuple']['assetConfig(asset)void']
      returns: InnerTransactionsReturns['assetConfig(asset)void']
    }>
    & Record<'assetDelete(asset)void' | 'assetDelete', {
      argsObj: InnerTransactionsArgs['obj']['assetDelete(asset)void']
      argsTuple: InnerTransactionsArgs['tuple']['assetDelete(asset)void']
      returns: InnerTransactionsReturns['assetDelete(asset)void']
    }>
    & Record<'multiInnerTxns(application)(uint64,string)' | 'multiInnerTxns', {
      argsObj: InnerTransactionsArgs['obj']['multiInnerTxns(application)(uint64,string)']
      argsTuple: InnerTransactionsArgs['tuple']['multiInnerTxns(application)(uint64,string)']
      /**
       * A tuple containing the payment amount and the result of the hello world call
       */
      returns: InnerTransactionsReturns['multiInnerTxns(application)(uint64,string)']
    }>
    & Record<'deployApp()uint64' | 'deployApp', {
      argsObj: InnerTransactionsArgs['obj']['deployApp()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['deployApp()uint64']
      /**
       * The ID of the deployed application
       */
      returns: InnerTransactionsReturns['deployApp()uint64']
    }>
    & Record<'arc4DeployApp()uint64' | 'arc4DeployApp', {
      argsObj: InnerTransactionsArgs['obj']['arc4DeployApp()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['arc4DeployApp()uint64']
      /**
       * The ID of the deployed application
       */
      returns: InnerTransactionsReturns['arc4DeployApp()uint64']
    }>
    & Record<'noopAppCall(application)string' | 'noopAppCall', {
      argsObj: InnerTransactionsArgs['obj']['noopAppCall(application)string']
      argsTuple: InnerTransactionsArgs['tuple']['noopAppCall(application)string']
      /**
       * A tuple containing the result of two hello world calls
       */
      returns: InnerTransactionsReturns['noopAppCall(application)string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type InnerTransactionsSignatures = keyof InnerTransactionsTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type InnerTransactionsNonVoidMethodSignatures = keyof InnerTransactionsTypes['methods'] extends infer T ? T extends keyof InnerTransactionsTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the InnerTransactions smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends InnerTransactionsSignatures> = InnerTransactionsTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the InnerTransactions smart contract to the method's return type
 */
export type MethodReturn<TSignature extends InnerTransactionsSignatures> = InnerTransactionsTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type InnerTransactionsCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type InnerTransactionsDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: InnerTransactionsCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the InnerTransactions smart contract
 */
export abstract class InnerTransactionsParamsFactory {
  /**
   * Constructs a no op call for the payment()uint64 ABI method
   *
   * Demonstrates a simple payment inner transaction
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payment(params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payment()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the fungibleAssetCreate()uint64 ABI method
   *
   * Creates a fungible asset (token)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fungibleAssetCreate(params: CallParams<InnerTransactionsArgs['obj']['fungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['fungibleAssetCreate()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fungibleAssetCreate()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the nonFungibleAssetCreate()uint64 ABI method
   *
  * Creates a non-fungible asset (NFT)
  Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
  If you want to create fractional NFTs, `total` * `decimals` point must be 1.
  ex) total=100, decimals=2, 100 * 0.01 = 1

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nonFungibleAssetCreate(params: CallParams<InnerTransactionsArgs['obj']['nonFungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['nonFungibleAssetCreate()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'nonFungibleAssetCreate()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the assetOptIn(asset)void ABI method
   *
   * Opts the application into an asset
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetOptIn(params: CallParams<InnerTransactionsArgs['obj']['assetOptIn(asset)void'] | InnerTransactionsArgs['tuple']['assetOptIn(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assetOptIn(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the assetTransfer(asset,account,uint64)void ABI method
   *
   * Transfers an asset from the application to another account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetTransfer(params: CallParams<InnerTransactionsArgs['obj']['assetTransfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetTransfer(asset,account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assetTransfer(asset,account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.receiver, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the assetFreeze(account,asset)void ABI method
   *
   * Freezes an asset for a specific account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetFreeze(params: CallParams<InnerTransactionsArgs['obj']['assetFreeze(account,asset)void'] | InnerTransactionsArgs['tuple']['assetFreeze(account,asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assetFreeze(account,asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.acctToBeFrozen, params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the assetRevoke(asset,account,uint64)void ABI method
   *
   * Revokes (clawbacks) an asset from an account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetRevoke(params: CallParams<InnerTransactionsArgs['obj']['assetRevoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetRevoke(asset,account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assetRevoke(asset,account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.accountToBeRevoked, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the assetConfig(asset)void ABI method
   *
   * Reconfigures an existing asset
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetConfig(params: CallParams<InnerTransactionsArgs['obj']['assetConfig(asset)void'] | InnerTransactionsArgs['tuple']['assetConfig(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assetConfig(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the assetDelete(asset)void ABI method
   *
   * Deletes an asset
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetDelete(params: CallParams<InnerTransactionsArgs['obj']['assetDelete(asset)void'] | InnerTransactionsArgs['tuple']['assetDelete(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assetDelete(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the multiInnerTxns(application)(uint64,string) ABI method
   *
   * Demonstrates grouped inner transactions
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static multiInnerTxns(params: CallParams<InnerTransactionsArgs['obj']['multiInnerTxns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multiInnerTxns(application)(uint64,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'multiInnerTxns(application)(uint64,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
  /**
   * Constructs a no op call for the deployApp()uint64 ABI method
   *
  * Deploys a HelloWorld contract using direct application call
  
  This method uses the itxn.applicationCall to deploy the HelloWorld contract.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deployApp(params: CallParams<InnerTransactionsArgs['obj']['deployApp()uint64'] | InnerTransactionsArgs['tuple']['deployApp()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deployApp()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc4DeployApp()uint64 ABI method
   *
  * Deploys a HelloWorld contract using arc4
  
  This method uses arc4 to deploy the HelloWorld contract.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4DeployApp(params: CallParams<InnerTransactionsArgs['obj']['arc4DeployApp()uint64'] | InnerTransactionsArgs['tuple']['arc4DeployApp()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4DeployApp()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the noopAppCall(application)string ABI method
   *
   * Demonstrates calling methods on another application
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noopAppCall(params: CallParams<InnerTransactionsArgs['obj']['noopAppCall(application)string'] | InnerTransactionsArgs['tuple']['noopAppCall(application)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'noopAppCall(application)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the InnerTransactions smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class InnerTransactionsFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `InnerTransactionsFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new InnerTransactionsClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new InnerTransactionsClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the InnerTransactions smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: InnerTransactionsDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new InnerTransactionsClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerTransactions smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerTransactions smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerTransactions smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new InnerTransactionsClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the InnerTransactions smart contract
 */
export class InnerTransactionsClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `InnerTransactionsClient`
   *
   * @param appClient An `AppClient` instance which has been created with the InnerTransactions app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `InnerTransactionsClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends InnerTransactionsNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `InnerTransactionsClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<InnerTransactionsClient> {
    return new InnerTransactionsClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `InnerTransactionsClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<InnerTransactionsClient> {
    return new InnerTransactionsClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the InnerTransactions smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `payment()uint64` ABI method.
     *
     * Demonstrates a simple payment inner transaction
     *
     * @param params The params for the smart contract call
     * @returns The call params: The amount of the payment
     */
    payment: (params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.payment(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `fungibleAssetCreate()uint64` ABI method.
     *
     * Creates a fungible asset (token)
     *
     * @param params The params for the smart contract call
     * @returns The call params: The ID of the created asset
     */
    fungibleAssetCreate: (params: CallParams<InnerTransactionsArgs['obj']['fungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['fungibleAssetCreate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.fungibleAssetCreate(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `nonFungibleAssetCreate()uint64` ABI method.
     *
    * Creates a non-fungible asset (NFT)
    Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
    If you want to create fractional NFTs, `total` * `decimals` point must be 1.
    ex) total=100, decimals=2, 100 * 0.01 = 1

     *
     * @param params The params for the smart contract call
     * @returns The call params: The ID of the created asset
     */
    nonFungibleAssetCreate: (params: CallParams<InnerTransactionsArgs['obj']['nonFungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['nonFungibleAssetCreate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.nonFungibleAssetCreate(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetOptIn(asset)void` ABI method.
     *
     * Opts the application into an asset
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetOptIn: (params: CallParams<InnerTransactionsArgs['obj']['assetOptIn(asset)void'] | InnerTransactionsArgs['tuple']['assetOptIn(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetOptIn(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetTransfer(asset,account,uint64)void` ABI method.
     *
     * Transfers an asset from the application to another account
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetTransfer: (params: CallParams<InnerTransactionsArgs['obj']['assetTransfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetTransfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetTransfer(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetFreeze(account,asset)void` ABI method.
     *
     * Freezes an asset for a specific account
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetFreeze: (params: CallParams<InnerTransactionsArgs['obj']['assetFreeze(account,asset)void'] | InnerTransactionsArgs['tuple']['assetFreeze(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetFreeze(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetRevoke(asset,account,uint64)void` ABI method.
     *
     * Revokes (clawbacks) an asset from an account
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetRevoke: (params: CallParams<InnerTransactionsArgs['obj']['assetRevoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetRevoke(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetRevoke(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetConfig(asset)void` ABI method.
     *
     * Reconfigures an existing asset
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetConfig: (params: CallParams<InnerTransactionsArgs['obj']['assetConfig(asset)void'] | InnerTransactionsArgs['tuple']['assetConfig(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetConfig(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetDelete(asset)void` ABI method.
     *
     * Deletes an asset
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetDelete: (params: CallParams<InnerTransactionsArgs['obj']['assetDelete(asset)void'] | InnerTransactionsArgs['tuple']['assetDelete(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetDelete(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `multiInnerTxns(application)(uint64,string)` ABI method.
     *
     * Demonstrates grouped inner transactions
     *
     * @param params The params for the smart contract call
     * @returns The call params: A tuple containing the payment amount and the result of the hello world call
     */
    multiInnerTxns: (params: CallParams<InnerTransactionsArgs['obj']['multiInnerTxns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multiInnerTxns(application)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.multiInnerTxns(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `deployApp()uint64` ABI method.
     *
    * Deploys a HelloWorld contract using direct application call
    
    This method uses the itxn.applicationCall to deploy the HelloWorld contract.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The ID of the deployed application
     */
    deployApp: (params: CallParams<InnerTransactionsArgs['obj']['deployApp()uint64'] | InnerTransactionsArgs['tuple']['deployApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.deployApp(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `arc4DeployApp()uint64` ABI method.
     *
    * Deploys a HelloWorld contract using arc4
    
    This method uses arc4 to deploy the HelloWorld contract.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The ID of the deployed application
     */
    arc4DeployApp: (params: CallParams<InnerTransactionsArgs['obj']['arc4DeployApp()uint64'] | InnerTransactionsArgs['tuple']['arc4DeployApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.arc4DeployApp(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `noopAppCall(application)string` ABI method.
     *
     * Demonstrates calling methods on another application
     *
     * @param params The params for the smart contract call
     * @returns The call params: A tuple containing the result of two hello world calls
     */
    noopAppCall: (params: CallParams<InnerTransactionsArgs['obj']['noopAppCall(application)string'] | InnerTransactionsArgs['tuple']['noopAppCall(application)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.noopAppCall(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the InnerTransactions smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `payment()uint64` ABI method.
     *
     * Demonstrates a simple payment inner transaction
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The amount of the payment
     */
    payment: (params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.payment(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `fungibleAssetCreate()uint64` ABI method.
     *
     * Creates a fungible asset (token)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The ID of the created asset
     */
    fungibleAssetCreate: (params: CallParams<InnerTransactionsArgs['obj']['fungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['fungibleAssetCreate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.fungibleAssetCreate(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `nonFungibleAssetCreate()uint64` ABI method.
     *
    * Creates a non-fungible asset (NFT)
    Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
    If you want to create fractional NFTs, `total` * `decimals` point must be 1.
    ex) total=100, decimals=2, 100 * 0.01 = 1

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The ID of the created asset
     */
    nonFungibleAssetCreate: (params: CallParams<InnerTransactionsArgs['obj']['nonFungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['nonFungibleAssetCreate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.nonFungibleAssetCreate(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetOptIn(asset)void` ABI method.
     *
     * Opts the application into an asset
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetOptIn: (params: CallParams<InnerTransactionsArgs['obj']['assetOptIn(asset)void'] | InnerTransactionsArgs['tuple']['assetOptIn(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetOptIn(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetTransfer(asset,account,uint64)void` ABI method.
     *
     * Transfers an asset from the application to another account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetTransfer: (params: CallParams<InnerTransactionsArgs['obj']['assetTransfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetTransfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetTransfer(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetFreeze(account,asset)void` ABI method.
     *
     * Freezes an asset for a specific account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetFreeze: (params: CallParams<InnerTransactionsArgs['obj']['assetFreeze(account,asset)void'] | InnerTransactionsArgs['tuple']['assetFreeze(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetFreeze(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetRevoke(asset,account,uint64)void` ABI method.
     *
     * Revokes (clawbacks) an asset from an account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetRevoke: (params: CallParams<InnerTransactionsArgs['obj']['assetRevoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetRevoke(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetRevoke(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetConfig(asset)void` ABI method.
     *
     * Reconfigures an existing asset
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetConfig: (params: CallParams<InnerTransactionsArgs['obj']['assetConfig(asset)void'] | InnerTransactionsArgs['tuple']['assetConfig(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetConfig(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetDelete(asset)void` ABI method.
     *
     * Deletes an asset
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetDelete: (params: CallParams<InnerTransactionsArgs['obj']['assetDelete(asset)void'] | InnerTransactionsArgs['tuple']['assetDelete(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetDelete(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `multiInnerTxns(application)(uint64,string)` ABI method.
     *
     * Demonstrates grouped inner transactions
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: A tuple containing the payment amount and the result of the hello world call
     */
    multiInnerTxns: (params: CallParams<InnerTransactionsArgs['obj']['multiInnerTxns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multiInnerTxns(application)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.multiInnerTxns(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `deployApp()uint64` ABI method.
     *
    * Deploys a HelloWorld contract using direct application call
    
    This method uses the itxn.applicationCall to deploy the HelloWorld contract.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The ID of the deployed application
     */
    deployApp: (params: CallParams<InnerTransactionsArgs['obj']['deployApp()uint64'] | InnerTransactionsArgs['tuple']['deployApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.deployApp(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `arc4DeployApp()uint64` ABI method.
     *
    * Deploys a HelloWorld contract using arc4
    
    This method uses arc4 to deploy the HelloWorld contract.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The ID of the deployed application
     */
    arc4DeployApp: (params: CallParams<InnerTransactionsArgs['obj']['arc4DeployApp()uint64'] | InnerTransactionsArgs['tuple']['arc4DeployApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.arc4DeployApp(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `noopAppCall(application)string` ABI method.
     *
     * Demonstrates calling methods on another application
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: A tuple containing the result of two hello world calls
     */
    noopAppCall: (params: CallParams<InnerTransactionsArgs['obj']['noopAppCall(application)string'] | InnerTransactionsArgs['tuple']['noopAppCall(application)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.noopAppCall(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the InnerTransactions smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `payment()uint64` ABI method.
     *
     * Demonstrates a simple payment inner transaction
     *
     * @param params The params for the smart contract call
     * @returns The call result: The amount of the payment
     */
    payment: async (params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.payment(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['payment()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `fungibleAssetCreate()uint64` ABI method.
     *
     * Creates a fungible asset (token)
     *
     * @param params The params for the smart contract call
     * @returns The call result: The ID of the created asset
     */
    fungibleAssetCreate: async (params: CallParams<InnerTransactionsArgs['obj']['fungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['fungibleAssetCreate()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.fungibleAssetCreate(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['fungibleAssetCreate()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `nonFungibleAssetCreate()uint64` ABI method.
     *
    * Creates a non-fungible asset (NFT)
    Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
    If you want to create fractional NFTs, `total` * `decimals` point must be 1.
    ex) total=100, decimals=2, 100 * 0.01 = 1

     *
     * @param params The params for the smart contract call
     * @returns The call result: The ID of the created asset
     */
    nonFungibleAssetCreate: async (params: CallParams<InnerTransactionsArgs['obj']['nonFungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['nonFungibleAssetCreate()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.nonFungibleAssetCreate(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['nonFungibleAssetCreate()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetOptIn(asset)void` ABI method.
     *
     * Opts the application into an asset
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetOptIn: async (params: CallParams<InnerTransactionsArgs['obj']['assetOptIn(asset)void'] | InnerTransactionsArgs['tuple']['assetOptIn(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetOptIn(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['assetOptIn(asset)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetTransfer(asset,account,uint64)void` ABI method.
     *
     * Transfers an asset from the application to another account
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetTransfer: async (params: CallParams<InnerTransactionsArgs['obj']['assetTransfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetTransfer(asset,account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetTransfer(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['assetTransfer(asset,account,uint64)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetFreeze(account,asset)void` ABI method.
     *
     * Freezes an asset for a specific account
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetFreeze: async (params: CallParams<InnerTransactionsArgs['obj']['assetFreeze(account,asset)void'] | InnerTransactionsArgs['tuple']['assetFreeze(account,asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetFreeze(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['assetFreeze(account,asset)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetRevoke(asset,account,uint64)void` ABI method.
     *
     * Revokes (clawbacks) an asset from an account
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetRevoke: async (params: CallParams<InnerTransactionsArgs['obj']['assetRevoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetRevoke(asset,account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetRevoke(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['assetRevoke(asset,account,uint64)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetConfig(asset)void` ABI method.
     *
     * Reconfigures an existing asset
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetConfig: async (params: CallParams<InnerTransactionsArgs['obj']['assetConfig(asset)void'] | InnerTransactionsArgs['tuple']['assetConfig(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetConfig(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['assetConfig(asset)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `assetDelete(asset)void` ABI method.
     *
     * Deletes an asset
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetDelete: async (params: CallParams<InnerTransactionsArgs['obj']['assetDelete(asset)void'] | InnerTransactionsArgs['tuple']['assetDelete(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetDelete(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['assetDelete(asset)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `multiInnerTxns(application)(uint64,string)` ABI method.
     *
     * Demonstrates grouped inner transactions
     *
     * @param params The params for the smart contract call
     * @returns The call result: A tuple containing the payment amount and the result of the hello world call
     */
    multiInnerTxns: async (params: CallParams<InnerTransactionsArgs['obj']['multiInnerTxns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multiInnerTxns(application)(uint64,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.multiInnerTxns(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['multiInnerTxns(application)(uint64,string)'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `deployApp()uint64` ABI method.
     *
    * Deploys a HelloWorld contract using direct application call
    
    This method uses the itxn.applicationCall to deploy the HelloWorld contract.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The ID of the deployed application
     */
    deployApp: async (params: CallParams<InnerTransactionsArgs['obj']['deployApp()uint64'] | InnerTransactionsArgs['tuple']['deployApp()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.deployApp(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['deployApp()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `arc4DeployApp()uint64` ABI method.
     *
    * Deploys a HelloWorld contract using arc4
    
    This method uses arc4 to deploy the HelloWorld contract.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The ID of the deployed application
     */
    arc4DeployApp: async (params: CallParams<InnerTransactionsArgs['obj']['arc4DeployApp()uint64'] | InnerTransactionsArgs['tuple']['arc4DeployApp()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.arc4DeployApp(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['arc4DeployApp()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `noopAppCall(application)string` ABI method.
     *
     * Demonstrates calling methods on another application
     *
     * @param params The params for the smart contract call
     * @returns The call result: A tuple containing the result of two hello world calls
     */
    noopAppCall: async (params: CallParams<InnerTransactionsArgs['obj']['noopAppCall(application)string'] | InnerTransactionsArgs['tuple']['noopAppCall(application)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.noopAppCall(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['noopAppCall(application)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new InnerTransactionsClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current InnerTransactions app
   */
  state = {
  }

  public newGroup(): InnerTransactionsComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a payment()uint64 method call against the InnerTransactions contract
       */
      payment(params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payment(params)))
        resultMappers.push((v) => client.decodeReturnValue('payment()uint64', v))
        return this
      },
      /**
       * Add a fungibleAssetCreate()uint64 method call against the InnerTransactions contract
       */
      fungibleAssetCreate(params: CallParams<InnerTransactionsArgs['obj']['fungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['fungibleAssetCreate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fungibleAssetCreate(params)))
        resultMappers.push((v) => client.decodeReturnValue('fungibleAssetCreate()uint64', v))
        return this
      },
      /**
       * Add a nonFungibleAssetCreate()uint64 method call against the InnerTransactions contract
       */
      nonFungibleAssetCreate(params: CallParams<InnerTransactionsArgs['obj']['nonFungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['nonFungibleAssetCreate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nonFungibleAssetCreate(params)))
        resultMappers.push((v) => client.decodeReturnValue('nonFungibleAssetCreate()uint64', v))
        return this
      },
      /**
       * Add a assetOptIn(asset)void method call against the InnerTransactions contract
       */
      assetOptIn(params: CallParams<InnerTransactionsArgs['obj']['assetOptIn(asset)void'] | InnerTransactionsArgs['tuple']['assetOptIn(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetOptIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assetTransfer(asset,account,uint64)void method call against the InnerTransactions contract
       */
      assetTransfer(params: CallParams<InnerTransactionsArgs['obj']['assetTransfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetTransfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetTransfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assetFreeze(account,asset)void method call against the InnerTransactions contract
       */
      assetFreeze(params: CallParams<InnerTransactionsArgs['obj']['assetFreeze(account,asset)void'] | InnerTransactionsArgs['tuple']['assetFreeze(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetFreeze(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assetRevoke(asset,account,uint64)void method call against the InnerTransactions contract
       */
      assetRevoke(params: CallParams<InnerTransactionsArgs['obj']['assetRevoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetRevoke(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetRevoke(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assetConfig(asset)void method call against the InnerTransactions contract
       */
      assetConfig(params: CallParams<InnerTransactionsArgs['obj']['assetConfig(asset)void'] | InnerTransactionsArgs['tuple']['assetConfig(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetConfig(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assetDelete(asset)void method call against the InnerTransactions contract
       */
      assetDelete(params: CallParams<InnerTransactionsArgs['obj']['assetDelete(asset)void'] | InnerTransactionsArgs['tuple']['assetDelete(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetDelete(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a multiInnerTxns(application)(uint64,string) method call against the InnerTransactions contract
       */
      multiInnerTxns(params: CallParams<InnerTransactionsArgs['obj']['multiInnerTxns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multiInnerTxns(application)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.multiInnerTxns(params)))
        resultMappers.push((v) => client.decodeReturnValue('multiInnerTxns(application)(uint64,string)', v))
        return this
      },
      /**
       * Add a deployApp()uint64 method call against the InnerTransactions contract
       */
      deployApp(params: CallParams<InnerTransactionsArgs['obj']['deployApp()uint64'] | InnerTransactionsArgs['tuple']['deployApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deployApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('deployApp()uint64', v))
        return this
      },
      /**
       * Add a arc4DeployApp()uint64 method call against the InnerTransactions contract
       */
      arc4DeployApp(params: CallParams<InnerTransactionsArgs['obj']['arc4DeployApp()uint64'] | InnerTransactionsArgs['tuple']['arc4DeployApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4DeployApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4DeployApp()uint64', v))
        return this
      },
      /**
       * Add a noopAppCall(application)string method call against the InnerTransactions contract
       */
      noopAppCall(params: CallParams<InnerTransactionsArgs['obj']['noopAppCall(application)string'] | InnerTransactionsArgs['tuple']['noopAppCall(application)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noopAppCall(params)))
        resultMappers.push((v) => client.decodeReturnValue('noopAppCall(application)string', v))
        return this
      },
      /**
       * Add a clear state call to the InnerTransactions contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as InnerTransactionsComposer
  }
}
export type InnerTransactionsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the payment()uint64 ABI method.
   *
   * Demonstrates a simple payment inner transaction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payment(params?: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['payment()uint64'] | undefined]>

  /**
   * Calls the fungibleAssetCreate()uint64 ABI method.
   *
   * Creates a fungible asset (token)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fungibleAssetCreate(params?: CallParams<InnerTransactionsArgs['obj']['fungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['fungibleAssetCreate()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['fungibleAssetCreate()uint64'] | undefined]>

  /**
   * Calls the nonFungibleAssetCreate()uint64 ABI method.
   *
  * Creates a non-fungible asset (NFT)
  Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
  If you want to create fractional NFTs, `total` * `decimals` point must be 1.
  ex) total=100, decimals=2, 100 * 0.01 = 1

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nonFungibleAssetCreate(params?: CallParams<InnerTransactionsArgs['obj']['nonFungibleAssetCreate()uint64'] | InnerTransactionsArgs['tuple']['nonFungibleAssetCreate()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['nonFungibleAssetCreate()uint64'] | undefined]>

  /**
   * Calls the assetOptIn(asset)void ABI method.
   *
   * Opts the application into an asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetOptIn(params?: CallParams<InnerTransactionsArgs['obj']['assetOptIn(asset)void'] | InnerTransactionsArgs['tuple']['assetOptIn(asset)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['assetOptIn(asset)void'] | undefined]>

  /**
   * Calls the assetTransfer(asset,account,uint64)void ABI method.
   *
   * Transfers an asset from the application to another account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTransfer(params?: CallParams<InnerTransactionsArgs['obj']['assetTransfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetTransfer(asset,account,uint64)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['assetTransfer(asset,account,uint64)void'] | undefined]>

  /**
   * Calls the assetFreeze(account,asset)void ABI method.
   *
   * Freezes an asset for a specific account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetFreeze(params?: CallParams<InnerTransactionsArgs['obj']['assetFreeze(account,asset)void'] | InnerTransactionsArgs['tuple']['assetFreeze(account,asset)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['assetFreeze(account,asset)void'] | undefined]>

  /**
   * Calls the assetRevoke(asset,account,uint64)void ABI method.
   *
   * Revokes (clawbacks) an asset from an account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetRevoke(params?: CallParams<InnerTransactionsArgs['obj']['assetRevoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['assetRevoke(asset,account,uint64)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['assetRevoke(asset,account,uint64)void'] | undefined]>

  /**
   * Calls the assetConfig(asset)void ABI method.
   *
   * Reconfigures an existing asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetConfig(params?: CallParams<InnerTransactionsArgs['obj']['assetConfig(asset)void'] | InnerTransactionsArgs['tuple']['assetConfig(asset)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['assetConfig(asset)void'] | undefined]>

  /**
   * Calls the assetDelete(asset)void ABI method.
   *
   * Deletes an asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetDelete(params?: CallParams<InnerTransactionsArgs['obj']['assetDelete(asset)void'] | InnerTransactionsArgs['tuple']['assetDelete(asset)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['assetDelete(asset)void'] | undefined]>

  /**
   * Calls the multiInnerTxns(application)(uint64,string) ABI method.
   *
   * Demonstrates grouped inner transactions
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  multiInnerTxns(params?: CallParams<InnerTransactionsArgs['obj']['multiInnerTxns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multiInnerTxns(application)(uint64,string)']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['multiInnerTxns(application)(uint64,string)'] | undefined]>

  /**
   * Calls the deployApp()uint64 ABI method.
   *
  * Deploys a HelloWorld contract using direct application call
  
  This method uses the itxn.applicationCall to deploy the HelloWorld contract.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deployApp(params?: CallParams<InnerTransactionsArgs['obj']['deployApp()uint64'] | InnerTransactionsArgs['tuple']['deployApp()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['deployApp()uint64'] | undefined]>

  /**
   * Calls the arc4DeployApp()uint64 ABI method.
   *
  * Deploys a HelloWorld contract using arc4
  
  This method uses arc4 to deploy the HelloWorld contract.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4DeployApp(params?: CallParams<InnerTransactionsArgs['obj']['arc4DeployApp()uint64'] | InnerTransactionsArgs['tuple']['arc4DeployApp()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['arc4DeployApp()uint64'] | undefined]>

  /**
   * Calls the noopAppCall(application)string ABI method.
   *
   * Demonstrates calling methods on another application
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noopAppCall(params?: CallParams<InnerTransactionsArgs['obj']['noopAppCall(application)string'] | InnerTransactionsArgs['tuple']['noopAppCall(application)string']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['noopAppCall(application)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the InnerTransactions smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): InnerTransactionsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): InnerTransactionsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<InnerTransactionsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<InnerTransactionsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<InnerTransactionsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<InnerTransactionsComposerResults<TReturns>>
}
export type InnerTransactionsComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

