/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"InnerTransactions","structs":{},"methods":[{"name":"payment","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"fungible_asset_create","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"non_fungible_asset_create","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.\nIf you want to create fractional NFTs, `total` * `decimals` point must be 1. ex) total=100, decimals=2, 100 * 0.01 = 1","events":[],"recommendations":{}},{"name":"asset_opt_in","args":[{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_transfer","args":[{"type":"asset","name":"asset"},{"type":"account","name":"receiver"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_freeze","args":[{"type":"account","name":"acct_to_be_frozen"},{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_revoke","args":[{"type":"asset","name":"asset"},{"type":"account","name":"account_to_be_revoked"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_config","args":[{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"asset_delete","args":[{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"multi_inner_txns","args":[{"type":"application","name":"app_id"}],"returns":{"type":"(uint64,string)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"deploy_app","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"This method uses the itxn.ApplicationCall to deploy the HelloWorld contract.","events":[],"recommendations":{}},{"name":"arc4_deploy_app","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"This method uses the arc4.arc4_create to deploy the HelloWorld contract.","events":[],"recommendations":{}},{"name":"noop_app_call","args":[{"type":"application","name":"app_id"}],"returns":{"type":"(string,string)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[897,974,1013],"errorMessage":"ARC4 prefix is valid"},{"pc":[227,277,294,311,342,360,378,406,430,458,476,493,510],"errorMessage":"OnCompletion is not NoOp"},{"pc":[532],"errorMessage":"can only call when creating"},{"pc":[230,280,297,314,345,363,381,409,433,461,479,496,513],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAAEGBCYFBBUffHUEAr7OEQcABVdvcmxkBAqBAUNWCjEbQQA0gAQCvs4RNhoAjgEAA4EAQzEZFEQxGEQ2GgFXAgCIACBJFRZXBgJMUIAEFR98dUxQsIEBQzEZQP/UMRgURIEBQ4oBAYAHSGVsbG8sIIv/UIkxG0EBkIINBCOVACcE6naJ8wT+JkcwBLbCsUgESxnf3QSpDmpPBMUEYoIEWEQA/wSp6BKlBA5zmBQENjF0XQQQqbECBJ0MXeE2GgCODQEdAQwA+wDpAM0AtQCZAIcAdQBWAEUANAACIkMxGRREMRhENhoBF8AyiAK9SRUWVwYCTFBLARUlCBZXBgKAAgAETFBPAlBMUChMULAjQzEZFEQxGESIAnwWKExQsCNDMRkURDEYRIgCVhYoTFCwI0MxGRREMRhENhoBF8AyiAIJTBaAAgAKUExQKExQsCNDMRkURDEYRDYaARfAMIgB2SNDMRkURDEYRDYaARfAMIgBqCNDMRkURDEYRDYaARfAMDYaAhfAHDYaAxeIAXAjQzEZFEQxGEQ2GgEXwBw2GgIXwDCIAUAjQzEZFEQxGEQ2GgEXwDA2GgIXwBw2GgMXiAEMI0MxGRREMRhENhoBF8AwiADjI0MxGRREMRhEiAB/FihMULAjQzEZFEQxGESIADoWKExQsCNDMRkURDEYRIgAEhYoTFCwI0MxGUD+zTEYFEQjQ4oAAbExALIHgYgnsggjshAisgGztAiJigABsYAOUm95YWx0eSBQb2ludHOyJoACUlCyJYECsiOBgNDbw/QCsiKBA7IQIrIBs7Q8iYoAAbEyCkcDsiyyK7IqsimAHmh0dHBzOi8vbGlua190b19pcGZzL01vbmFfTGlzYbIngAlNb25hIExpc2GyJoACTUyyJYECsiOBZLIigQOyECKyAbO0PImKAQCxMgoishKL/7IRshQlshAisgGziYoDALGL/7ISi/2yEYv+shQlshAisgGziYoCALEjsi+L/7Iti/6yLoEFshAisgGziYoDALEyCov/shKL/rITi/2yEbIUJbIQIrIBs4mKAQCxMgpJMQBJsiyyK7IqsimL/7IhgQOyECKyAbOJigEAsYv/siGBA7IQIrIBs4mKAQIxALGyB4GIJ7III7IQIrIBtimyGiqyGov/shgkshAisgGztwAItD5JVwQATFcABCgSRImKAAGxK7JCJwSyQCSyECKyAbO0PYmKAAGxK7JCJwSyQCSyECKyAbO0PYmKAQKxKbIaKrIai/+yGCSyECKyAbO0PklXBABMVwAEKBJEsYv/shgpshqABwAFYWdhaW6yGiSyECKyAbO0PklXBABMVwAEKBJEVwIAiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":3,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the InnerTransactions contract
 */
export type InnerTransactionsArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'payment()uint64': Record<string, never>
    'fungible_asset_create()uint64': Record<string, never>
    'non_fungible_asset_create()uint64': Record<string, never>
    'asset_opt_in(asset)void': {
      asset: bigint
    }
    'asset_transfer(asset,account,uint64)void': {
      asset: bigint
      receiver: Uint8Array | string
      amount: bigint | number
    }
    'asset_freeze(account,asset)void': {
      acctToBeFrozen: Uint8Array | string
      asset: bigint
    }
    'asset_revoke(asset,account,uint64)void': {
      asset: bigint
      accountToBeRevoked: Uint8Array | string
      amount: bigint | number
    }
    'asset_config(asset)void': {
      asset: bigint
    }
    'asset_delete(asset)void': {
      asset: bigint
    }
    'multi_inner_txns(application)(uint64,string)': {
      appId: bigint
    }
    'deploy_app()uint64': Record<string, never>
    'arc4_deploy_app()uint64': Record<string, never>
    'noop_app_call(application)(string,string)': {
      appId: bigint
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'payment()uint64': []
    'fungible_asset_create()uint64': []
    'non_fungible_asset_create()uint64': []
    'asset_opt_in(asset)void': [asset: bigint]
    'asset_transfer(asset,account,uint64)void': [asset: bigint, receiver: Uint8Array | string, amount: bigint | number]
    'asset_freeze(account,asset)void': [acctToBeFrozen: Uint8Array | string, asset: bigint]
    'asset_revoke(asset,account,uint64)void': [asset: bigint, accountToBeRevoked: Uint8Array | string, amount: bigint | number]
    'asset_config(asset)void': [asset: bigint]
    'asset_delete(asset)void': [asset: bigint]
    'multi_inner_txns(application)(uint64,string)': [appId: bigint]
    'deploy_app()uint64': []
    'arc4_deploy_app()uint64': []
    'noop_app_call(application)(string,string)': [appId: bigint]
  }
}

/**
 * The return type for each method
 */
export type InnerTransactionsReturns = {
  'payment()uint64': bigint
  'fungible_asset_create()uint64': bigint
  'non_fungible_asset_create()uint64': bigint
  'asset_opt_in(asset)void': void
  'asset_transfer(asset,account,uint64)void': void
  'asset_freeze(account,asset)void': void
  'asset_revoke(asset,account,uint64)void': void
  'asset_config(asset)void': void
  'asset_delete(asset)void': void
  'multi_inner_txns(application)(uint64,string)': [bigint, string]
  'deploy_app()uint64': bigint
  'arc4_deploy_app()uint64': bigint
  'noop_app_call(application)(string,string)': [string, string]
}

/**
 * Defines the types of available calls and state of the InnerTransactions smart contract.
 */
export type InnerTransactionsTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'payment()uint64' | 'payment', {
      argsObj: InnerTransactionsArgs['obj']['payment()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['payment()uint64']
      returns: InnerTransactionsReturns['payment()uint64']
    }>
    & Record<'fungible_asset_create()uint64' | 'fungible_asset_create', {
      argsObj: InnerTransactionsArgs['obj']['fungible_asset_create()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['fungible_asset_create()uint64']
      returns: InnerTransactionsReturns['fungible_asset_create()uint64']
    }>
    & Record<'non_fungible_asset_create()uint64' | 'non_fungible_asset_create', {
      argsObj: InnerTransactionsArgs['obj']['non_fungible_asset_create()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['non_fungible_asset_create()uint64']
      returns: InnerTransactionsReturns['non_fungible_asset_create()uint64']
    }>
    & Record<'asset_opt_in(asset)void' | 'asset_opt_in', {
      argsObj: InnerTransactionsArgs['obj']['asset_opt_in(asset)void']
      argsTuple: InnerTransactionsArgs['tuple']['asset_opt_in(asset)void']
      returns: InnerTransactionsReturns['asset_opt_in(asset)void']
    }>
    & Record<'asset_transfer(asset,account,uint64)void' | 'asset_transfer', {
      argsObj: InnerTransactionsArgs['obj']['asset_transfer(asset,account,uint64)void']
      argsTuple: InnerTransactionsArgs['tuple']['asset_transfer(asset,account,uint64)void']
      returns: InnerTransactionsReturns['asset_transfer(asset,account,uint64)void']
    }>
    & Record<'asset_freeze(account,asset)void' | 'asset_freeze', {
      argsObj: InnerTransactionsArgs['obj']['asset_freeze(account,asset)void']
      argsTuple: InnerTransactionsArgs['tuple']['asset_freeze(account,asset)void']
      returns: InnerTransactionsReturns['asset_freeze(account,asset)void']
    }>
    & Record<'asset_revoke(asset,account,uint64)void' | 'asset_revoke', {
      argsObj: InnerTransactionsArgs['obj']['asset_revoke(asset,account,uint64)void']
      argsTuple: InnerTransactionsArgs['tuple']['asset_revoke(asset,account,uint64)void']
      returns: InnerTransactionsReturns['asset_revoke(asset,account,uint64)void']
    }>
    & Record<'asset_config(asset)void' | 'asset_config', {
      argsObj: InnerTransactionsArgs['obj']['asset_config(asset)void']
      argsTuple: InnerTransactionsArgs['tuple']['asset_config(asset)void']
      returns: InnerTransactionsReturns['asset_config(asset)void']
    }>
    & Record<'asset_delete(asset)void' | 'asset_delete', {
      argsObj: InnerTransactionsArgs['obj']['asset_delete(asset)void']
      argsTuple: InnerTransactionsArgs['tuple']['asset_delete(asset)void']
      returns: InnerTransactionsReturns['asset_delete(asset)void']
    }>
    & Record<'multi_inner_txns(application)(uint64,string)' | 'multi_inner_txns', {
      argsObj: InnerTransactionsArgs['obj']['multi_inner_txns(application)(uint64,string)']
      argsTuple: InnerTransactionsArgs['tuple']['multi_inner_txns(application)(uint64,string)']
      returns: InnerTransactionsReturns['multi_inner_txns(application)(uint64,string)']
    }>
    & Record<'deploy_app()uint64' | 'deploy_app', {
      argsObj: InnerTransactionsArgs['obj']['deploy_app()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['deploy_app()uint64']
      returns: InnerTransactionsReturns['deploy_app()uint64']
    }>
    & Record<'arc4_deploy_app()uint64' | 'arc4_deploy_app', {
      argsObj: InnerTransactionsArgs['obj']['arc4_deploy_app()uint64']
      argsTuple: InnerTransactionsArgs['tuple']['arc4_deploy_app()uint64']
      returns: InnerTransactionsReturns['arc4_deploy_app()uint64']
    }>
    & Record<'noop_app_call(application)(string,string)' | 'noop_app_call', {
      argsObj: InnerTransactionsArgs['obj']['noop_app_call(application)(string,string)']
      argsTuple: InnerTransactionsArgs['tuple']['noop_app_call(application)(string,string)']
      returns: InnerTransactionsReturns['noop_app_call(application)(string,string)']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type InnerTransactionsSignatures = keyof InnerTransactionsTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type InnerTransactionsNonVoidMethodSignatures = keyof InnerTransactionsTypes['methods'] extends infer T ? T extends keyof InnerTransactionsTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the InnerTransactions smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends InnerTransactionsSignatures> = InnerTransactionsTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the InnerTransactions smart contract to the method's return type
 */
export type MethodReturn<TSignature extends InnerTransactionsSignatures> = InnerTransactionsTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type InnerTransactionsCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type InnerTransactionsDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: InnerTransactionsCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the InnerTransactions smart contract
 */
export abstract class InnerTransactionsParamsFactory {
  /**
   * Constructs a no op call for the payment()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payment(params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payment()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the fungible_asset_create()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fungibleAssetCreate(params: CallParams<InnerTransactionsArgs['obj']['fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['fungible_asset_create()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fungible_asset_create()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the non_fungible_asset_create()uint64 ABI method
   *
  * Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
  If you want to create fractional NFTs, `total` * `decimals` point must be 1. ex) total=100, decimals=2, 100 * 0.01 = 1

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nonFungibleAssetCreate(params: CallParams<InnerTransactionsArgs['obj']['non_fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['non_fungible_asset_create()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'non_fungible_asset_create()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the asset_opt_in(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetOptIn(params: CallParams<InnerTransactionsArgs['obj']['asset_opt_in(asset)void'] | InnerTransactionsArgs['tuple']['asset_opt_in(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_opt_in(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the asset_transfer(asset,account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetTransfer(params: CallParams<InnerTransactionsArgs['obj']['asset_transfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_transfer(asset,account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_transfer(asset,account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.receiver, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the asset_freeze(account,asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetFreeze(params: CallParams<InnerTransactionsArgs['obj']['asset_freeze(account,asset)void'] | InnerTransactionsArgs['tuple']['asset_freeze(account,asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_freeze(account,asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.acctToBeFrozen, params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the asset_revoke(asset,account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetRevoke(params: CallParams<InnerTransactionsArgs['obj']['asset_revoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_revoke(asset,account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_revoke(asset,account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.accountToBeRevoked, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the asset_config(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetConfig(params: CallParams<InnerTransactionsArgs['obj']['asset_config(asset)void'] | InnerTransactionsArgs['tuple']['asset_config(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_config(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the asset_delete(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetDelete(params: CallParams<InnerTransactionsArgs['obj']['asset_delete(asset)void'] | InnerTransactionsArgs['tuple']['asset_delete(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asset_delete(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the multi_inner_txns(application)(uint64,string) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static multiInnerTxns(params: CallParams<InnerTransactionsArgs['obj']['multi_inner_txns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multi_inner_txns(application)(uint64,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'multi_inner_txns(application)(uint64,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
  /**
   * Constructs a no op call for the deploy_app()uint64 ABI method
   *
   * This method uses the itxn.ApplicationCall to deploy the HelloWorld contract.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deployApp(params: CallParams<InnerTransactionsArgs['obj']['deploy_app()uint64'] | InnerTransactionsArgs['tuple']['deploy_app()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deploy_app()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc4_deploy_app()uint64 ABI method
   *
   * This method uses the arc4.arc4_create to deploy the HelloWorld contract.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4DeployApp(params: CallParams<InnerTransactionsArgs['obj']['arc4_deploy_app()uint64'] | InnerTransactionsArgs['tuple']['arc4_deploy_app()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4_deploy_app()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the noop_app_call(application)(string,string) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noopAppCall(params: CallParams<InnerTransactionsArgs['obj']['noop_app_call(application)(string,string)'] | InnerTransactionsArgs['tuple']['noop_app_call(application)(string,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'noop_app_call(application)(string,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the InnerTransactions smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class InnerTransactionsFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `InnerTransactionsFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new InnerTransactionsClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new InnerTransactionsClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the InnerTransactions smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: InnerTransactionsDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new InnerTransactionsClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerTransactions smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerTransactions smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InnerTransactions smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new InnerTransactionsClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the InnerTransactions smart contract
 */
export class InnerTransactionsClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `InnerTransactionsClient`
   *
   * @param appClient An `AppClient` instance which has been created with the InnerTransactions app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `InnerTransactionsClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends InnerTransactionsNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `InnerTransactionsClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<InnerTransactionsClient> {
    return new InnerTransactionsClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `InnerTransactionsClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<InnerTransactionsClient> {
    return new InnerTransactionsClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the InnerTransactions smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `payment()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payment: (params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.payment(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `fungible_asset_create()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fungibleAssetCreate: (params: CallParams<InnerTransactionsArgs['obj']['fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['fungible_asset_create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.fungibleAssetCreate(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `non_fungible_asset_create()uint64` ABI method.
     *
    * Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
    If you want to create fractional NFTs, `total` * `decimals` point must be 1. ex) total=100, decimals=2, 100 * 0.01 = 1

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    nonFungibleAssetCreate: (params: CallParams<InnerTransactionsArgs['obj']['non_fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['non_fungible_asset_create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.nonFungibleAssetCreate(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_opt_in(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetOptIn: (params: CallParams<InnerTransactionsArgs['obj']['asset_opt_in(asset)void'] | InnerTransactionsArgs['tuple']['asset_opt_in(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetOptIn(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_transfer(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetTransfer: (params: CallParams<InnerTransactionsArgs['obj']['asset_transfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_transfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetTransfer(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_freeze(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetFreeze: (params: CallParams<InnerTransactionsArgs['obj']['asset_freeze(account,asset)void'] | InnerTransactionsArgs['tuple']['asset_freeze(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetFreeze(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_revoke(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetRevoke: (params: CallParams<InnerTransactionsArgs['obj']['asset_revoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_revoke(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetRevoke(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_config(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetConfig: (params: CallParams<InnerTransactionsArgs['obj']['asset_config(asset)void'] | InnerTransactionsArgs['tuple']['asset_config(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetConfig(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_delete(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetDelete: (params: CallParams<InnerTransactionsArgs['obj']['asset_delete(asset)void'] | InnerTransactionsArgs['tuple']['asset_delete(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.assetDelete(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `multi_inner_txns(application)(uint64,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    multiInnerTxns: (params: CallParams<InnerTransactionsArgs['obj']['multi_inner_txns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multi_inner_txns(application)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.multiInnerTxns(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `deploy_app()uint64` ABI method.
     *
     * This method uses the itxn.ApplicationCall to deploy the HelloWorld contract.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deployApp: (params: CallParams<InnerTransactionsArgs['obj']['deploy_app()uint64'] | InnerTransactionsArgs['tuple']['deploy_app()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.deployApp(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `arc4_deploy_app()uint64` ABI method.
     *
     * This method uses the arc4.arc4_create to deploy the HelloWorld contract.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4DeployApp: (params: CallParams<InnerTransactionsArgs['obj']['arc4_deploy_app()uint64'] | InnerTransactionsArgs['tuple']['arc4_deploy_app()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.arc4DeployApp(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `noop_app_call(application)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    noopAppCall: (params: CallParams<InnerTransactionsArgs['obj']['noop_app_call(application)(string,string)'] | InnerTransactionsArgs['tuple']['noop_app_call(application)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InnerTransactionsParamsFactory.noopAppCall(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the InnerTransactions smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `payment()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payment: (params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.payment(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `fungible_asset_create()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fungibleAssetCreate: (params: CallParams<InnerTransactionsArgs['obj']['fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['fungible_asset_create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.fungibleAssetCreate(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `non_fungible_asset_create()uint64` ABI method.
     *
    * Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
    If you want to create fractional NFTs, `total` * `decimals` point must be 1. ex) total=100, decimals=2, 100 * 0.01 = 1

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    nonFungibleAssetCreate: (params: CallParams<InnerTransactionsArgs['obj']['non_fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['non_fungible_asset_create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.nonFungibleAssetCreate(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_opt_in(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetOptIn: (params: CallParams<InnerTransactionsArgs['obj']['asset_opt_in(asset)void'] | InnerTransactionsArgs['tuple']['asset_opt_in(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetOptIn(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_transfer(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetTransfer: (params: CallParams<InnerTransactionsArgs['obj']['asset_transfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_transfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetTransfer(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_freeze(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetFreeze: (params: CallParams<InnerTransactionsArgs['obj']['asset_freeze(account,asset)void'] | InnerTransactionsArgs['tuple']['asset_freeze(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetFreeze(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_revoke(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetRevoke: (params: CallParams<InnerTransactionsArgs['obj']['asset_revoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_revoke(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetRevoke(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_config(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetConfig: (params: CallParams<InnerTransactionsArgs['obj']['asset_config(asset)void'] | InnerTransactionsArgs['tuple']['asset_config(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetConfig(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_delete(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetDelete: (params: CallParams<InnerTransactionsArgs['obj']['asset_delete(asset)void'] | InnerTransactionsArgs['tuple']['asset_delete(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.assetDelete(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `multi_inner_txns(application)(uint64,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    multiInnerTxns: (params: CallParams<InnerTransactionsArgs['obj']['multi_inner_txns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multi_inner_txns(application)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.multiInnerTxns(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `deploy_app()uint64` ABI method.
     *
     * This method uses the itxn.ApplicationCall to deploy the HelloWorld contract.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deployApp: (params: CallParams<InnerTransactionsArgs['obj']['deploy_app()uint64'] | InnerTransactionsArgs['tuple']['deploy_app()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.deployApp(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `arc4_deploy_app()uint64` ABI method.
     *
     * This method uses the arc4.arc4_create to deploy the HelloWorld contract.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4DeployApp: (params: CallParams<InnerTransactionsArgs['obj']['arc4_deploy_app()uint64'] | InnerTransactionsArgs['tuple']['arc4_deploy_app()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.arc4DeployApp(params))
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `noop_app_call(application)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    noopAppCall: (params: CallParams<InnerTransactionsArgs['obj']['noop_app_call(application)(string,string)'] | InnerTransactionsArgs['tuple']['noop_app_call(application)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InnerTransactionsParamsFactory.noopAppCall(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the InnerTransactions smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `payment()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payment: async (params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.payment(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['payment()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `fungible_asset_create()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fungibleAssetCreate: async (params: CallParams<InnerTransactionsArgs['obj']['fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['fungible_asset_create()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.fungibleAssetCreate(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['fungible_asset_create()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `non_fungible_asset_create()uint64` ABI method.
     *
    * Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
    If you want to create fractional NFTs, `total` * `decimals` point must be 1. ex) total=100, decimals=2, 100 * 0.01 = 1

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    nonFungibleAssetCreate: async (params: CallParams<InnerTransactionsArgs['obj']['non_fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['non_fungible_asset_create()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.nonFungibleAssetCreate(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['non_fungible_asset_create()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_opt_in(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetOptIn: async (params: CallParams<InnerTransactionsArgs['obj']['asset_opt_in(asset)void'] | InnerTransactionsArgs['tuple']['asset_opt_in(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetOptIn(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['asset_opt_in(asset)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_transfer(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetTransfer: async (params: CallParams<InnerTransactionsArgs['obj']['asset_transfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_transfer(asset,account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetTransfer(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['asset_transfer(asset,account,uint64)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_freeze(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetFreeze: async (params: CallParams<InnerTransactionsArgs['obj']['asset_freeze(account,asset)void'] | InnerTransactionsArgs['tuple']['asset_freeze(account,asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetFreeze(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['asset_freeze(account,asset)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_revoke(asset,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetRevoke: async (params: CallParams<InnerTransactionsArgs['obj']['asset_revoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_revoke(asset,account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetRevoke(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['asset_revoke(asset,account,uint64)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_config(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetConfig: async (params: CallParams<InnerTransactionsArgs['obj']['asset_config(asset)void'] | InnerTransactionsArgs['tuple']['asset_config(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetConfig(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['asset_config(asset)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `asset_delete(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetDelete: async (params: CallParams<InnerTransactionsArgs['obj']['asset_delete(asset)void'] | InnerTransactionsArgs['tuple']['asset_delete(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.assetDelete(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['asset_delete(asset)void'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `multi_inner_txns(application)(uint64,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    multiInnerTxns: async (params: CallParams<InnerTransactionsArgs['obj']['multi_inner_txns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multi_inner_txns(application)(uint64,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.multiInnerTxns(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['multi_inner_txns(application)(uint64,string)'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `deploy_app()uint64` ABI method.
     *
     * This method uses the itxn.ApplicationCall to deploy the HelloWorld contract.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deployApp: async (params: CallParams<InnerTransactionsArgs['obj']['deploy_app()uint64'] | InnerTransactionsArgs['tuple']['deploy_app()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.deployApp(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['deploy_app()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `arc4_deploy_app()uint64` ABI method.
     *
     * This method uses the arc4.arc4_create to deploy the HelloWorld contract.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4DeployApp: async (params: CallParams<InnerTransactionsArgs['obj']['arc4_deploy_app()uint64'] | InnerTransactionsArgs['tuple']['arc4_deploy_app()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.arc4DeployApp(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['arc4_deploy_app()uint64'])}
    },

    /**
     * Makes a call to the InnerTransactions smart contract using the `noop_app_call(application)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    noopAppCall: async (params: CallParams<InnerTransactionsArgs['obj']['noop_app_call(application)(string,string)'] | InnerTransactionsArgs['tuple']['noop_app_call(application)(string,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InnerTransactionsParamsFactory.noopAppCall(params))
      return {...result, return: result.return as unknown as (undefined | InnerTransactionsReturns['noop_app_call(application)(string,string)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new InnerTransactionsClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current InnerTransactions app
   */
  state = {
  }

  public newGroup(): InnerTransactionsComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a payment()uint64 method call against the InnerTransactions contract
       */
      payment(params: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payment(params)))
        resultMappers.push((v) => client.decodeReturnValue('payment()uint64', v))
        return this
      },
      /**
       * Add a fungible_asset_create()uint64 method call against the InnerTransactions contract
       */
      fungibleAssetCreate(params: CallParams<InnerTransactionsArgs['obj']['fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['fungible_asset_create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fungibleAssetCreate(params)))
        resultMappers.push((v) => client.decodeReturnValue('fungible_asset_create()uint64', v))
        return this
      },
      /**
       * Add a non_fungible_asset_create()uint64 method call against the InnerTransactions contract
       */
      nonFungibleAssetCreate(params: CallParams<InnerTransactionsArgs['obj']['non_fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['non_fungible_asset_create()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nonFungibleAssetCreate(params)))
        resultMappers.push((v) => client.decodeReturnValue('non_fungible_asset_create()uint64', v))
        return this
      },
      /**
       * Add a asset_opt_in(asset)void method call against the InnerTransactions contract
       */
      assetOptIn(params: CallParams<InnerTransactionsArgs['obj']['asset_opt_in(asset)void'] | InnerTransactionsArgs['tuple']['asset_opt_in(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetOptIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asset_transfer(asset,account,uint64)void method call against the InnerTransactions contract
       */
      assetTransfer(params: CallParams<InnerTransactionsArgs['obj']['asset_transfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_transfer(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetTransfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asset_freeze(account,asset)void method call against the InnerTransactions contract
       */
      assetFreeze(params: CallParams<InnerTransactionsArgs['obj']['asset_freeze(account,asset)void'] | InnerTransactionsArgs['tuple']['asset_freeze(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetFreeze(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asset_revoke(asset,account,uint64)void method call against the InnerTransactions contract
       */
      assetRevoke(params: CallParams<InnerTransactionsArgs['obj']['asset_revoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_revoke(asset,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetRevoke(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asset_config(asset)void method call against the InnerTransactions contract
       */
      assetConfig(params: CallParams<InnerTransactionsArgs['obj']['asset_config(asset)void'] | InnerTransactionsArgs['tuple']['asset_config(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetConfig(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asset_delete(asset)void method call against the InnerTransactions contract
       */
      assetDelete(params: CallParams<InnerTransactionsArgs['obj']['asset_delete(asset)void'] | InnerTransactionsArgs['tuple']['asset_delete(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetDelete(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a multi_inner_txns(application)(uint64,string) method call against the InnerTransactions contract
       */
      multiInnerTxns(params: CallParams<InnerTransactionsArgs['obj']['multi_inner_txns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multi_inner_txns(application)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.multiInnerTxns(params)))
        resultMappers.push((v) => client.decodeReturnValue('multi_inner_txns(application)(uint64,string)', v))
        return this
      },
      /**
       * Add a deploy_app()uint64 method call against the InnerTransactions contract
       */
      deployApp(params: CallParams<InnerTransactionsArgs['obj']['deploy_app()uint64'] | InnerTransactionsArgs['tuple']['deploy_app()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deployApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('deploy_app()uint64', v))
        return this
      },
      /**
       * Add a arc4_deploy_app()uint64 method call against the InnerTransactions contract
       */
      arc4DeployApp(params: CallParams<InnerTransactionsArgs['obj']['arc4_deploy_app()uint64'] | InnerTransactionsArgs['tuple']['arc4_deploy_app()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4DeployApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4_deploy_app()uint64', v))
        return this
      },
      /**
       * Add a noop_app_call(application)(string,string) method call against the InnerTransactions contract
       */
      noopAppCall(params: CallParams<InnerTransactionsArgs['obj']['noop_app_call(application)(string,string)'] | InnerTransactionsArgs['tuple']['noop_app_call(application)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noopAppCall(params)))
        resultMappers.push((v) => client.decodeReturnValue('noop_app_call(application)(string,string)', v))
        return this
      },
      /**
       * Add a clear state call to the InnerTransactions contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as InnerTransactionsComposer
  }
}
export type InnerTransactionsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the payment()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payment(params?: CallParams<InnerTransactionsArgs['obj']['payment()uint64'] | InnerTransactionsArgs['tuple']['payment()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['payment()uint64'] | undefined]>

  /**
   * Calls the fungible_asset_create()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fungibleAssetCreate(params?: CallParams<InnerTransactionsArgs['obj']['fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['fungible_asset_create()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['fungible_asset_create()uint64'] | undefined]>

  /**
   * Calls the non_fungible_asset_create()uint64 ABI method.
   *
  * Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.
  If you want to create fractional NFTs, `total` * `decimals` point must be 1. ex) total=100, decimals=2, 100 * 0.01 = 1

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nonFungibleAssetCreate(params?: CallParams<InnerTransactionsArgs['obj']['non_fungible_asset_create()uint64'] | InnerTransactionsArgs['tuple']['non_fungible_asset_create()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['non_fungible_asset_create()uint64'] | undefined]>

  /**
   * Calls the asset_opt_in(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetOptIn(params?: CallParams<InnerTransactionsArgs['obj']['asset_opt_in(asset)void'] | InnerTransactionsArgs['tuple']['asset_opt_in(asset)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['asset_opt_in(asset)void'] | undefined]>

  /**
   * Calls the asset_transfer(asset,account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTransfer(params?: CallParams<InnerTransactionsArgs['obj']['asset_transfer(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_transfer(asset,account,uint64)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['asset_transfer(asset,account,uint64)void'] | undefined]>

  /**
   * Calls the asset_freeze(account,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetFreeze(params?: CallParams<InnerTransactionsArgs['obj']['asset_freeze(account,asset)void'] | InnerTransactionsArgs['tuple']['asset_freeze(account,asset)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['asset_freeze(account,asset)void'] | undefined]>

  /**
   * Calls the asset_revoke(asset,account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetRevoke(params?: CallParams<InnerTransactionsArgs['obj']['asset_revoke(asset,account,uint64)void'] | InnerTransactionsArgs['tuple']['asset_revoke(asset,account,uint64)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['asset_revoke(asset,account,uint64)void'] | undefined]>

  /**
   * Calls the asset_config(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetConfig(params?: CallParams<InnerTransactionsArgs['obj']['asset_config(asset)void'] | InnerTransactionsArgs['tuple']['asset_config(asset)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['asset_config(asset)void'] | undefined]>

  /**
   * Calls the asset_delete(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetDelete(params?: CallParams<InnerTransactionsArgs['obj']['asset_delete(asset)void'] | InnerTransactionsArgs['tuple']['asset_delete(asset)void']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['asset_delete(asset)void'] | undefined]>

  /**
   * Calls the multi_inner_txns(application)(uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  multiInnerTxns(params?: CallParams<InnerTransactionsArgs['obj']['multi_inner_txns(application)(uint64,string)'] | InnerTransactionsArgs['tuple']['multi_inner_txns(application)(uint64,string)']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['multi_inner_txns(application)(uint64,string)'] | undefined]>

  /**
   * Calls the deploy_app()uint64 ABI method.
   *
   * This method uses the itxn.ApplicationCall to deploy the HelloWorld contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deployApp(params?: CallParams<InnerTransactionsArgs['obj']['deploy_app()uint64'] | InnerTransactionsArgs['tuple']['deploy_app()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['deploy_app()uint64'] | undefined]>

  /**
   * Calls the arc4_deploy_app()uint64 ABI method.
   *
   * This method uses the arc4.arc4_create to deploy the HelloWorld contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4DeployApp(params?: CallParams<InnerTransactionsArgs['obj']['arc4_deploy_app()uint64'] | InnerTransactionsArgs['tuple']['arc4_deploy_app()uint64']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['arc4_deploy_app()uint64'] | undefined]>

  /**
   * Calls the noop_app_call(application)(string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noopAppCall(params?: CallParams<InnerTransactionsArgs['obj']['noop_app_call(application)(string,string)'] | InnerTransactionsArgs['tuple']['noop_app_call(application)(string,string)']>): InnerTransactionsComposer<[...TReturns, InnerTransactionsReturns['noop_app_call(application)(string,string)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the InnerTransactions smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): InnerTransactionsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): InnerTransactionsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<InnerTransactionsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<InnerTransactionsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<InnerTransactionsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<InnerTransactionsComposerResults<TReturns>>
}
export type InnerTransactionsComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

