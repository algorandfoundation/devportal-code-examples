/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ReferenceAccountApp","structs":{},"methods":[{"name":"getMyCounter","args":[],"returns":{"type":"uint64","desc":"The counter value or 0 if it doesn't exist"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get the counter value from another account's local state with hardcoded values","events":[],"recommendations":{}},{"name":"getMyCounterWithArg","args":[{"type":"account","name":"account","desc":"The account to check"},{"type":"application","name":"app","desc":"The application to query"}],"returns":{"type":"uint64","desc":"The counter value or 0 if it doesn't exist"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get the counter value from another account's local state with provided parameters","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"A contract that demonstrates how to reference accounts and applications\nto access local state from external contracts","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[54,83],"errorMessage":"OnCompletion is not NoOp"},{"pc":[105],"errorMessage":"can only call when creating"},{"pc":[57,86],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUgIm15X2NvdW50ZXIiCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFwcC9jb250cmFjdC5hbGdvLnRzOjUxCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZlcmVuY2VBY2NvdW50QXBwIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDcKICAgIHB1c2hieXRlc3MgMHg4N2FkNzBiZiAweDMxMzk4ZjU3IC8vIG1ldGhvZCAiZ2V0TXlDb3VudGVyKCl1aW50NjQiLCBtZXRob2QgImdldE15Q291bnRlcldpdGhBcmcoYWNjb3VudCxhcHBsaWNhdGlvbil1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2dldE15Q291bnRlcl9yb3V0ZUAzIG1haW5fZ2V0TXlDb3VudGVyV2l0aEFyZ19yb3V0ZUA0CgptYWluX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFwcC9jb250cmFjdC5hbGdvLnRzOjUxCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZlcmVuY2VBY2NvdW50QXBwIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRNeUNvdW50ZXJXaXRoQXJnX3JvdXRlQDQ6CiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFwcC9jb250cmFjdC5hbGdvLnRzOjc5CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo1MQogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlQWNjb3VudEFwcCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBcHBsaWNhdGlvbnMKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXBwL2NvbnRyYWN0LmFsZ28udHM6NzkKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBnZXRNeUNvdW50ZXJXaXRoQXJnCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldE15Q291bnRlcl9yb3V0ZUAzOgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo1NgogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0TXlDb3VudGVyCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0A3OgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo1MQogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlQWNjb3VudEFwcCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo6UmVmZXJlbmNlQWNjb3VudEFwcC5nZXRNeUNvdW50ZXIoKSAtPiB1aW50NjQ6CmdldE15Q291bnRlcjoKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXBwL2NvbnRyYWN0LmFsZ28udHM6NTYtNTcKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIGdldE15Q291bnRlcigpOiB1aW50NjQgewogICAgcHJvdG8gMCAxCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFwcC9jb250cmFjdC5hbGdvLnRzOjU4CiAgICAvLyBjb25zdCBhZGRyZXNzID0gbmV3IEFkZHJlc3MoJ1dNSEY0RkxKTktZMkJQRks3WVBWNUlENk9aN0xWREIyQjY2WlRYRUFNTEwyTlg0V0paUkpGVlg2Nk0nKQogICAgcHVzaGJ5dGVzIGJhc2UzMihXTUhGNEZMSk5LWTJCUEZLN1lQVjVJRDZPWjdMVkRCMkI2NlpUWEVBTUxMMk5YNFdKWlJBKSAvLyBhZGRyIFdNSEY0RkxKTktZMkJQRks3WVBWNUlENk9aN0xWREIyQjY2WlRYRUFNTEwyTlg0V0paUkpGVlg2Nk0KICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXBwL2NvbnRyYWN0LmFsZ28udHM6NjEKICAgIC8vIGNvbnN0IGFwcCA9IEFwcGxpY2F0aW9uKDE3MTcpIC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGFwcGxpY2F0aW9uIGlkCiAgICBwdXNoaW50IDE3MTcgLy8gMTcxNwogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo2NAogICAgLy8gY29uc3QgW3ZhbHVlLCBoYXNWYWx1ZV0gPSBvcC5BcHBMb2NhbC5nZXRFeFVpbnQ2NChhY2NvdW50LCBhcHAsIEJ5dGVzKCdteV9jb3VudGVyJykpCiAgICBieXRlY18xIC8vICJteV9jb3VudGVyIgogICAgYXBwX2xvY2FsX2dldF9leAogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo2NgogICAgLy8gaWYgKCFoYXNWYWx1ZSkgewogICAgYm56IGdldE15Q291bnRlcl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXBwL2NvbnRyYWN0LmFsZ28udHM6NjcKICAgIC8vIHJldHVybiAwCiAgICBpbnRjXzAgLy8gMAogICAgc3dhcAogICAgcmV0c3ViCgpnZXRNeUNvdW50ZXJfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo3MAogICAgLy8gcmV0dXJuIHZhbHVlCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgcmV0c3ViCgoKLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo6UmVmZXJlbmNlQWNjb3VudEFwcC5nZXRNeUNvdW50ZXJXaXRoQXJnKGFjY291bnQ6IGJ5dGVzLCBhcHA6IHVpbnQ2NCkgLT4gdWludDY0OgpnZXRNeUNvdW50ZXJXaXRoQXJnOgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo3OS04MAogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgZ2V0TXlDb3VudGVyV2l0aEFyZyhhY2NvdW50OiBBY2NvdW50LCBhcHA6IEFwcGxpY2F0aW9uKTogdWludDY0IHsKICAgIHByb3RvIDIgMQogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo4MgogICAgLy8gY29uc3QgW3ZhbHVlLCBoYXNWYWx1ZV0gPSBvcC5BcHBMb2NhbC5nZXRFeFVpbnQ2NChhY2NvdW50LCBhcHAsIEJ5dGVzKCdteV9jb3VudGVyJykpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZWNfMSAvLyAibXlfY291bnRlciIKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXBwL2NvbnRyYWN0LmFsZ28udHM6ODQKICAgIC8vIGlmICghaGFzVmFsdWUpIHsKICAgIGJueiBnZXRNeUNvdW50ZXJXaXRoQXJnX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo4NQogICAgLy8gcmV0dXJuIDAKICAgIGludGNfMCAvLyAwCiAgICBzd2FwCiAgICByZXRzdWIKCmdldE15Q291bnRlcldpdGhBcmdfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBcHAvY29udHJhY3QuYWxnby50czo4OAogICAgLy8gcmV0dXJuIHZhbHVlCiAgICBmcmFtZV9kaWcgMAogICAgc3dhcAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmAgQVH3x1Cm15X2NvdW50ZXIxG0EARYICBIetcL8EMTmPVzYaAI4CAB8AAiJDMRkURDEYRDYaARfAHDYaAhfAMogAVxYoTFCwI0MxGRREMRhEiAASFihMULAjQzEZQP/LMRgURCNDigABgCCzDl4VaWqxoLyq/h9eoH52frqMOg+9mdyAYtem35ZOYoG1DSljQAADIkyJiwBMiYoCAYv+i/8pY0AAAyJMiYsATIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":4,"patch":4}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ReferenceAccountApp contract
 */
export type ReferenceAccountAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'getMyCounter()uint64': Record<string, never>
    'getMyCounterWithArg(account,application)uint64': {
      /**
       * The account to check
       */
      account: Uint8Array | string
      /**
       * The application to query
       */
      app: bigint
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'getMyCounter()uint64': []
    'getMyCounterWithArg(account,application)uint64': [account: Uint8Array | string, app: bigint]
  }
}

/**
 * The return type for each method
 */
export type ReferenceAccountAppReturns = {
  'getMyCounter()uint64': bigint
  'getMyCounterWithArg(account,application)uint64': bigint
}

/**
 * Defines the types of available calls and state of the ReferenceAccountApp smart contract.
 */
export type ReferenceAccountAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'getMyCounter()uint64' | 'getMyCounter', {
      argsObj: ReferenceAccountAppArgs['obj']['getMyCounter()uint64']
      argsTuple: ReferenceAccountAppArgs['tuple']['getMyCounter()uint64']
      /**
       * The counter value or 0 if it doesn't exist
       */
      returns: ReferenceAccountAppReturns['getMyCounter()uint64']
    }>
    & Record<'getMyCounterWithArg(account,application)uint64' | 'getMyCounterWithArg', {
      argsObj: ReferenceAccountAppArgs['obj']['getMyCounterWithArg(account,application)uint64']
      argsTuple: ReferenceAccountAppArgs['tuple']['getMyCounterWithArg(account,application)uint64']
      /**
       * The counter value or 0 if it doesn't exist
       */
      returns: ReferenceAccountAppReturns['getMyCounterWithArg(account,application)uint64']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type ReferenceAccountAppSignatures = keyof ReferenceAccountAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ReferenceAccountAppNonVoidMethodSignatures = keyof ReferenceAccountAppTypes['methods'] extends infer T ? T extends keyof ReferenceAccountAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ReferenceAccountApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ReferenceAccountAppSignatures> = ReferenceAccountAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ReferenceAccountApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ReferenceAccountAppSignatures> = ReferenceAccountAppTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type ReferenceAccountAppCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ReferenceAccountAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ReferenceAccountAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ReferenceAccountApp smart contract
 */
export abstract class ReferenceAccountAppParamsFactory {
  /**
   * Constructs a no op call for the getMyCounter()uint64 ABI method
   *
   * Get the counter value from another account's local state with hardcoded values
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMyCounter(params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounter()uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounter()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMyCounter()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getMyCounterWithArg(account,application)uint64 ABI method
   *
   * Get the counter value from another account's local state with provided parameters
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMyCounterWithArg(params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounterWithArg(account,application)uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounterWithArg(account,application)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMyCounterWithArg(account,application)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account, params.args.app],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ReferenceAccountApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ReferenceAccountAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ReferenceAccountAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ReferenceAccountAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ReferenceAccountAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ReferenceAccountApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ReferenceAccountAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ReferenceAccountAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ReferenceAccountApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ReferenceAccountApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ReferenceAccountApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ReferenceAccountAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ReferenceAccountApp smart contract
 */
export class ReferenceAccountAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ReferenceAccountAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ReferenceAccountApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ReferenceAccountAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ReferenceAccountAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ReferenceAccountAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ReferenceAccountAppClient> {
    return new ReferenceAccountAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ReferenceAccountAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ReferenceAccountAppClient> {
    return new ReferenceAccountAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ReferenceAccountApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ReferenceAccountApp smart contract using the `getMyCounter()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the counter value from another account's local state with hardcoded values
     *
     * @param params The params for the smart contract call
     * @returns The call params: The counter value or 0 if it doesn't exist
     */
    getMyCounter: (params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounter()uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ReferenceAccountAppParamsFactory.getMyCounter(params))
    },

    /**
     * Makes a call to the ReferenceAccountApp smart contract using the `getMyCounterWithArg(account,application)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the counter value from another account's local state with provided parameters
     *
     * @param params The params for the smart contract call
     * @returns The call params: The counter value or 0 if it doesn't exist
     */
    getMyCounterWithArg: (params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounterWithArg(account,application)uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounterWithArg(account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ReferenceAccountAppParamsFactory.getMyCounterWithArg(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ReferenceAccountApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ReferenceAccountApp smart contract using the `getMyCounter()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the counter value from another account's local state with hardcoded values
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The counter value or 0 if it doesn't exist
     */
    getMyCounter: (params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounter()uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ReferenceAccountAppParamsFactory.getMyCounter(params))
    },

    /**
     * Makes a call to the ReferenceAccountApp smart contract using the `getMyCounterWithArg(account,application)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the counter value from another account's local state with provided parameters
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The counter value or 0 if it doesn't exist
     */
    getMyCounterWithArg: (params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounterWithArg(account,application)uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounterWithArg(account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ReferenceAccountAppParamsFactory.getMyCounterWithArg(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ReferenceAccountApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ReferenceAccountApp smart contract using the `getMyCounter()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the counter value from another account's local state with hardcoded values
     *
     * @param params The params for the smart contract call
     * @returns The call result: The counter value or 0 if it doesn't exist
     */
    getMyCounter: async (params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounter()uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounter()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ReferenceAccountAppParamsFactory.getMyCounter(params))
      return {...result, return: result.return as unknown as (undefined | ReferenceAccountAppReturns['getMyCounter()uint64'])}
    },

    /**
     * Makes a call to the ReferenceAccountApp smart contract using the `getMyCounterWithArg(account,application)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the counter value from another account's local state with provided parameters
     *
     * @param params The params for the smart contract call
     * @returns The call result: The counter value or 0 if it doesn't exist
     */
    getMyCounterWithArg: async (params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounterWithArg(account,application)uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounterWithArg(account,application)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ReferenceAccountAppParamsFactory.getMyCounterWithArg(params))
      return {...result, return: result.return as unknown as (undefined | ReferenceAccountAppReturns['getMyCounterWithArg(account,application)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ReferenceAccountAppClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the ReferenceAccountApp smart contract using the `getMyCounter()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get the counter value from another account's local state with hardcoded values
   *
   * @param params The params for the smart contract call
   * @returns The call result: The counter value or 0 if it doesn't exist
   */
  async getMyCounter(params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounter()uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounter()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(ReferenceAccountAppParamsFactory.getMyCounter(params))
    return result.return as unknown as ReferenceAccountAppReturns['getMyCounter()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ReferenceAccountApp smart contract using the `getMyCounterWithArg(account,application)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get the counter value from another account's local state with provided parameters
   *
   * @param params The params for the smart contract call
   * @returns The call result: The counter value or 0 if it doesn't exist
   */
  async getMyCounterWithArg(params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounterWithArg(account,application)uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounterWithArg(account,application)uint64']>) {
    const result = await this.appClient.send.call(ReferenceAccountAppParamsFactory.getMyCounterWithArg(params))
    return result.return as unknown as ReferenceAccountAppReturns['getMyCounterWithArg(account,application)uint64']
  }

  /**
   * Methods to access state for the current ReferenceAccountApp app
   */
  state = {
  }

  public newGroup(): ReferenceAccountAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a getMyCounter()uint64 method call against the ReferenceAccountApp contract
       */
      getMyCounter(params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounter()uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounter()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMyCounter(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMyCounter()uint64', v))
        return this
      },
      /**
       * Add a getMyCounterWithArg(account,application)uint64 method call against the ReferenceAccountApp contract
       */
      getMyCounterWithArg(params: CallParams<ReferenceAccountAppArgs['obj']['getMyCounterWithArg(account,application)uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounterWithArg(account,application)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMyCounterWithArg(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMyCounterWithArg(account,application)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ReferenceAccountApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ReferenceAccountAppComposer
  }
}
export type ReferenceAccountAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getMyCounter()uint64 ABI method.
   *
   * Get the counter value from another account's local state with hardcoded values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMyCounter(params?: CallParams<ReferenceAccountAppArgs['obj']['getMyCounter()uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounter()uint64']>): ReferenceAccountAppComposer<[...TReturns, ReferenceAccountAppReturns['getMyCounter()uint64'] | undefined]>

  /**
   * Calls the getMyCounterWithArg(account,application)uint64 ABI method.
   *
   * Get the counter value from another account's local state with provided parameters
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMyCounterWithArg(params?: CallParams<ReferenceAccountAppArgs['obj']['getMyCounterWithArg(account,application)uint64'] | ReferenceAccountAppArgs['tuple']['getMyCounterWithArg(account,application)uint64']>): ReferenceAccountAppComposer<[...TReturns, ReferenceAccountAppReturns['getMyCounterWithArg(account,application)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ReferenceAccountApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ReferenceAccountAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ReferenceAccountAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ReferenceAccountAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ReferenceAccountAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ReferenceAccountAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ReferenceAccountAppComposerResults<TReturns>>
}
export type ReferenceAccountAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

