/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"ControlFlow","structs":{},"methods":[{"name":"isRich","args":[{"type":"uint64","name":"accountBalance","desc":"The account balance to check"}],"returns":{"type":"string","desc":"A string describing the account's wealth status"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Determines if an account is rich based on its balance","events":[],"recommendations":{}},{"name":"isEven","args":[{"type":"uint64","name":"number","desc":"The number to check"}],"returns":{"type":"string","desc":"\"Even\" if the number is even, \"Odd\" otherwise"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Determines if a number is even or odd","events":[],"recommendations":{}},{"name":"forLoop","args":[],"returns":{"type":"uint64[]","desc":"An array of uint64 values in reversed order"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Demonstrates different types of for loops","events":[],"recommendations":{}},{"name":"getDay","args":[{"type":"uint64","name":"date","desc":"A number from 0-6 representing a day of the week"}],"returns":{"type":"string","desc":"The name of the day, or \"Invalid day\" if out of range"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the day of the week based on a numeric input","events":[],"recommendations":{}},{"name":"calculateBoxStorageCost","args":[{"type":"string","name":"boxSizeLabel","desc":"The category of box size as a string label. Valid values:\n'xs' (8B), 'sm' (64B), 'md' (256B), 'lg' (1KB), 'max' (32KB)"},{"type":"string","name":"boxName","desc":"The name of the box (used to calculate name length)"}],"returns":{"type":"uint64","desc":"The MBR increase in microAlgos, or 0 if invalid size label"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculates the minimum balance requirement (MBR) increase for box storage\nbased on different box size categories.","events":[],"recommendations":{}},{"name":"loop","args":[],"returns":{"type":"uint64","desc":"The number of iterations performed"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Demonstrates while loop with continue and break statements","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"ControlFlow Contract\n\nThis contract demonstrates various control flow operations in Algorand smart contracts.\nIt shows how to use:\n- If/else statements\n- For loops\n- Switch statements (equivalent to Python's match)\n- While loops\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/control_flow/contract.py","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[25],"errorMessage":"OnCompletion must be NoOp"},{"pc":[86],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[409],"errorMessage":"Sum of reversed array should be 6"},{"pc":[327],"errorMessage":"index access is out of bounds"},{"pc":[270,336],"errorMessage":"max array length exceeded"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAEAQAIAiYCBBUffHUCAAExG0EAOTEZFEQxGESCBgTvCC97BJT7fvEEciumaAR/rGpeBMnCvFcE+ComVDYaAI4GAAkAfQCiAVMB9gJlADEZFDEYFBBDNhoBF0mB6AcNQQAlgBVUaGlzIGFjY291bnQgaXMgcmljaCFJFRZXBgJMUChMULAiQ0mBZA1BACCAG1RoaXMgYWNjb3VudCBpcyBkb2luZyB3ZWxsLkL/y4AXVGhpcyBhY2NvdW50IGlzIHBvb3IgOihC/682GgEXJRhAABSABEV2ZW5JFRZXBgJMUChMULAiQ4ADT2RkQv/qI4AARwSAAgAASSNJgQQMQQAjRwIWKUxQVwIASwNMUElXAgAVJAoWVwYCXABFAyIIRQFC/9ZLASNZRQgjRQZLAkUJSwVLCAxBAC1LAVcCAEsGSU4CJAskWClMUEsKVwIAUElXAgAVJAoWVwYCXABFCiIIRQZC/8sjRQRLCCNZRQcjRQVLBEsHDEEAGUsIVwIASwVJTgIkC1tLBQhFBSIIRQVC/99LA4EGEkQoSwlQsCJDNhoBF0kiEkEAFoAGTW9uZGF5SRUWVwYCTFAoTFCwIkNJJRJBAAyAB1R1ZXNkYXlC/+BJgQMSQQAOgAlXZWRuZXNkYXlC/8tJgQQSQQANgAhUaHVyc2RheUL/t0mBBRJBAAuABkZyaWRheUL/pUmBBhJBAA2ACFNhdHVyZGF5Qv+RSYEHEkEAC4AGU3VuZGF5Qv9/gAtJbnZhbGlkIGRheUL/bzYaAVcCAEk2GgJXAgAVTIACeHMSQQATJEsBCIGQAwuBxBMIFihMULAiQ0sBgAJzbRJBAAWBQEL/30sBgAJtZBJBAAaBgAJC/89LAYACbGcSQQAGgYAIQv+/SwGAA21heBJBAAeBgPoBQv+tI0L/tIEKI0sBQQAoSwGBBQ1BAA5LASIJRQJJIghFAUL/5UsBJQlJRQNLASIIRQIiEkH/00kWKExQsCJD","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ControlFlow contract
 */
export type ControlFlowArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'isRich(uint64)string': {
      /**
       * The account balance to check
       */
      accountBalance: bigint | number
    }
    'isEven(uint64)string': {
      /**
       * The number to check
       */
      number: bigint | number
    }
    'forLoop()uint64[]': Record<string, never>
    'getDay(uint64)string': {
      /**
       * A number from 0-6 representing a day of the week
       */
      date: bigint | number
    }
    'calculateBoxStorageCost(string,string)uint64': {
      /**
      * The category of box size as a string label. Valid values:
      'xs' (8B), 'sm' (64B), 'md' (256B), 'lg' (1KB), 'max' (32KB)

       */
      boxSizeLabel: string
      /**
       * The name of the box (used to calculate name length)
       */
      boxName: string
    }
    'loop()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'isRich(uint64)string': [accountBalance: bigint | number]
    'isEven(uint64)string': [number: bigint | number]
    'forLoop()uint64[]': []
    'getDay(uint64)string': [date: bigint | number]
    'calculateBoxStorageCost(string,string)uint64': [boxSizeLabel: string, boxName: string]
    'loop()uint64': []
  }
}

/**
 * The return type for each method
 */
export type ControlFlowReturns = {
  'isRich(uint64)string': string
  'isEven(uint64)string': string
  'forLoop()uint64[]': bigint[]
  'getDay(uint64)string': string
  'calculateBoxStorageCost(string,string)uint64': bigint
  'loop()uint64': bigint
}

/**
 * Defines the types of available calls and state of the ControlFlow smart contract.
 */
export type ControlFlowTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'isRich(uint64)string' | 'isRich', {
      argsObj: ControlFlowArgs['obj']['isRich(uint64)string']
      argsTuple: ControlFlowArgs['tuple']['isRich(uint64)string']
      /**
       * A string describing the account's wealth status
       */
      returns: ControlFlowReturns['isRich(uint64)string']
    }>
    & Record<'isEven(uint64)string' | 'isEven', {
      argsObj: ControlFlowArgs['obj']['isEven(uint64)string']
      argsTuple: ControlFlowArgs['tuple']['isEven(uint64)string']
      /**
       * "Even" if the number is even, "Odd" otherwise
       */
      returns: ControlFlowReturns['isEven(uint64)string']
    }>
    & Record<'forLoop()uint64[]' | 'forLoop', {
      argsObj: ControlFlowArgs['obj']['forLoop()uint64[]']
      argsTuple: ControlFlowArgs['tuple']['forLoop()uint64[]']
      /**
       * An array of uint64 values in reversed order
       */
      returns: ControlFlowReturns['forLoop()uint64[]']
    }>
    & Record<'getDay(uint64)string' | 'getDay', {
      argsObj: ControlFlowArgs['obj']['getDay(uint64)string']
      argsTuple: ControlFlowArgs['tuple']['getDay(uint64)string']
      /**
       * The name of the day, or "Invalid day" if out of range
       */
      returns: ControlFlowReturns['getDay(uint64)string']
    }>
    & Record<'calculateBoxStorageCost(string,string)uint64' | 'calculateBoxStorageCost', {
      argsObj: ControlFlowArgs['obj']['calculateBoxStorageCost(string,string)uint64']
      argsTuple: ControlFlowArgs['tuple']['calculateBoxStorageCost(string,string)uint64']
      /**
       * The MBR increase in microAlgos, or 0 if invalid size label
       */
      returns: ControlFlowReturns['calculateBoxStorageCost(string,string)uint64']
    }>
    & Record<'loop()uint64' | 'loop', {
      argsObj: ControlFlowArgs['obj']['loop()uint64']
      argsTuple: ControlFlowArgs['tuple']['loop()uint64']
      /**
       * The number of iterations performed
       */
      returns: ControlFlowReturns['loop()uint64']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type ControlFlowSignatures = keyof ControlFlowTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ControlFlowNonVoidMethodSignatures = keyof ControlFlowTypes['methods'] extends infer T ? T extends keyof ControlFlowTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ControlFlow smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ControlFlowSignatures> = ControlFlowTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ControlFlow smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ControlFlowSignatures> = ControlFlowTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type ControlFlowCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ControlFlowDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ControlFlowCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ControlFlow smart contract
 */
export abstract class ControlFlowParamsFactory {
  /**
   * Constructs a no op call for the isRich(uint64)string ABI method
   *
   * Determines if an account is rich based on its balance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isRich(params: CallParams<ControlFlowArgs['obj']['isRich(uint64)string'] | ControlFlowArgs['tuple']['isRich(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isRich(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.accountBalance],
    }
  }
  /**
   * Constructs a no op call for the isEven(uint64)string ABI method
   *
   * Determines if a number is even or odd
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isEven(params: CallParams<ControlFlowArgs['obj']['isEven(uint64)string'] | ControlFlowArgs['tuple']['isEven(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isEven(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.number],
    }
  }
  /**
   * Constructs a no op call for the forLoop()uint64[] ABI method
   *
   * Demonstrates different types of for loops
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static forLoop(params: CallParams<ControlFlowArgs['obj']['forLoop()uint64[]'] | ControlFlowArgs['tuple']['forLoop()uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'forLoop()uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getDay(uint64)string ABI method
   *
   * Returns the day of the week based on a numeric input
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDay(params: CallParams<ControlFlowArgs['obj']['getDay(uint64)string'] | ControlFlowArgs['tuple']['getDay(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getDay(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.date],
    }
  }
  /**
   * Constructs a no op call for the calculateBoxStorageCost(string,string)uint64 ABI method
   *
  * Calculates the minimum balance requirement (MBR) increase for box storage
  based on different box size categories.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateBoxStorageCost(params: CallParams<ControlFlowArgs['obj']['calculateBoxStorageCost(string,string)uint64'] | ControlFlowArgs['tuple']['calculateBoxStorageCost(string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateBoxStorageCost(string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxSizeLabel, params.args.boxName],
    }
  }
  /**
   * Constructs a no op call for the loop()uint64 ABI method
   *
   * Demonstrates while loop with continue and break statements
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static loop(params: CallParams<ControlFlowArgs['obj']['loop()uint64'] | ControlFlowArgs['tuple']['loop()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'loop()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ControlFlow smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ControlFlowFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ControlFlowFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ControlFlowClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ControlFlowClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ControlFlow smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ControlFlowDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ControlFlowClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ControlFlow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ControlFlow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ControlFlow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ControlFlowClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ControlFlow smart contract
 */
export class ControlFlowClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ControlFlowClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ControlFlow app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ControlFlowClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ControlFlowNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `ControlFlowClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ControlFlowClient> {
    return new ControlFlowClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ControlFlowClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ControlFlowClient> {
    return new ControlFlowClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ControlFlow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `isRich(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Determines if an account is rich based on its balance
     *
     * @param params The params for the smart contract call
     * @returns The call params: A string describing the account's wealth status
     */
    isRich: (params: CallParams<ControlFlowArgs['obj']['isRich(uint64)string'] | ControlFlowArgs['tuple']['isRich(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ControlFlowParamsFactory.isRich(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `isEven(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Determines if a number is even or odd
     *
     * @param params The params for the smart contract call
     * @returns The call params: "Even" if the number is even, "Odd" otherwise
     */
    isEven: (params: CallParams<ControlFlowArgs['obj']['isEven(uint64)string'] | ControlFlowArgs['tuple']['isEven(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ControlFlowParamsFactory.isEven(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `forLoop()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates different types of for loops
     *
     * @param params The params for the smart contract call
     * @returns The call params: An array of uint64 values in reversed order
     */
    forLoop: (params: CallParams<ControlFlowArgs['obj']['forLoop()uint64[]'] | ControlFlowArgs['tuple']['forLoop()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ControlFlowParamsFactory.forLoop(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `getDay(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the day of the week based on a numeric input
     *
     * @param params The params for the smart contract call
     * @returns The call params: The name of the day, or "Invalid day" if out of range
     */
    getDay: (params: CallParams<ControlFlowArgs['obj']['getDay(uint64)string'] | ControlFlowArgs['tuple']['getDay(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ControlFlowParamsFactory.getDay(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `calculateBoxStorageCost(string,string)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the minimum balance requirement (MBR) increase for box storage
    based on different box size categories.

     *
     * @param params The params for the smart contract call
     * @returns The call params: The MBR increase in microAlgos, or 0 if invalid size label
     */
    calculateBoxStorageCost: (params: CallParams<ControlFlowArgs['obj']['calculateBoxStorageCost(string,string)uint64'] | ControlFlowArgs['tuple']['calculateBoxStorageCost(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ControlFlowParamsFactory.calculateBoxStorageCost(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `loop()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates while loop with continue and break statements
     *
     * @param params The params for the smart contract call
     * @returns The call params: The number of iterations performed
     */
    loop: (params: CallParams<ControlFlowArgs['obj']['loop()uint64'] | ControlFlowArgs['tuple']['loop()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ControlFlowParamsFactory.loop(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ControlFlow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `isRich(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Determines if an account is rich based on its balance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: A string describing the account's wealth status
     */
    isRich: (params: CallParams<ControlFlowArgs['obj']['isRich(uint64)string'] | ControlFlowArgs['tuple']['isRich(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ControlFlowParamsFactory.isRich(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `isEven(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Determines if a number is even or odd
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: "Even" if the number is even, "Odd" otherwise
     */
    isEven: (params: CallParams<ControlFlowArgs['obj']['isEven(uint64)string'] | ControlFlowArgs['tuple']['isEven(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ControlFlowParamsFactory.isEven(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `forLoop()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates different types of for loops
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An array of uint64 values in reversed order
     */
    forLoop: (params: CallParams<ControlFlowArgs['obj']['forLoop()uint64[]'] | ControlFlowArgs['tuple']['forLoop()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ControlFlowParamsFactory.forLoop(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `getDay(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the day of the week based on a numeric input
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The name of the day, or "Invalid day" if out of range
     */
    getDay: (params: CallParams<ControlFlowArgs['obj']['getDay(uint64)string'] | ControlFlowArgs['tuple']['getDay(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ControlFlowParamsFactory.getDay(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `calculateBoxStorageCost(string,string)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the minimum balance requirement (MBR) increase for box storage
    based on different box size categories.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The MBR increase in microAlgos, or 0 if invalid size label
     */
    calculateBoxStorageCost: (params: CallParams<ControlFlowArgs['obj']['calculateBoxStorageCost(string,string)uint64'] | ControlFlowArgs['tuple']['calculateBoxStorageCost(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ControlFlowParamsFactory.calculateBoxStorageCost(params))
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `loop()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates while loop with continue and break statements
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The number of iterations performed
     */
    loop: (params: CallParams<ControlFlowArgs['obj']['loop()uint64'] | ControlFlowArgs['tuple']['loop()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ControlFlowParamsFactory.loop(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ControlFlow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `isRich(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Determines if an account is rich based on its balance
     *
     * @param params The params for the smart contract call
     * @returns The call result: A string describing the account's wealth status
     */
    isRich: async (params: CallParams<ControlFlowArgs['obj']['isRich(uint64)string'] | ControlFlowArgs['tuple']['isRich(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ControlFlowParamsFactory.isRich(params))
      return {...result, return: result.return as unknown as (undefined | ControlFlowReturns['isRich(uint64)string'])}
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `isEven(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Determines if a number is even or odd
     *
     * @param params The params for the smart contract call
     * @returns The call result: "Even" if the number is even, "Odd" otherwise
     */
    isEven: async (params: CallParams<ControlFlowArgs['obj']['isEven(uint64)string'] | ControlFlowArgs['tuple']['isEven(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ControlFlowParamsFactory.isEven(params))
      return {...result, return: result.return as unknown as (undefined | ControlFlowReturns['isEven(uint64)string'])}
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `forLoop()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates different types of for loops
     *
     * @param params The params for the smart contract call
     * @returns The call result: An array of uint64 values in reversed order
     */
    forLoop: async (params: CallParams<ControlFlowArgs['obj']['forLoop()uint64[]'] | ControlFlowArgs['tuple']['forLoop()uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ControlFlowParamsFactory.forLoop(params))
      return {...result, return: result.return as unknown as (undefined | ControlFlowReturns['forLoop()uint64[]'])}
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `getDay(uint64)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the day of the week based on a numeric input
     *
     * @param params The params for the smart contract call
     * @returns The call result: The name of the day, or "Invalid day" if out of range
     */
    getDay: async (params: CallParams<ControlFlowArgs['obj']['getDay(uint64)string'] | ControlFlowArgs['tuple']['getDay(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ControlFlowParamsFactory.getDay(params))
      return {...result, return: result.return as unknown as (undefined | ControlFlowReturns['getDay(uint64)string'])}
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `calculateBoxStorageCost(string,string)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the minimum balance requirement (MBR) increase for box storage
    based on different box size categories.

     *
     * @param params The params for the smart contract call
     * @returns The call result: The MBR increase in microAlgos, or 0 if invalid size label
     */
    calculateBoxStorageCost: async (params: CallParams<ControlFlowArgs['obj']['calculateBoxStorageCost(string,string)uint64'] | ControlFlowArgs['tuple']['calculateBoxStorageCost(string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ControlFlowParamsFactory.calculateBoxStorageCost(params))
      return {...result, return: result.return as unknown as (undefined | ControlFlowReturns['calculateBoxStorageCost(string,string)uint64'])}
    },

    /**
     * Makes a call to the ControlFlow smart contract using the `loop()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Demonstrates while loop with continue and break statements
     *
     * @param params The params for the smart contract call
     * @returns The call result: The number of iterations performed
     */
    loop: async (params: CallParams<ControlFlowArgs['obj']['loop()uint64'] | ControlFlowArgs['tuple']['loop()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ControlFlowParamsFactory.loop(params))
      return {...result, return: result.return as unknown as (undefined | ControlFlowReturns['loop()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ControlFlowClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the ControlFlow smart contract using the `isRich(uint64)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Determines if an account is rich based on its balance
   *
   * @param params The params for the smart contract call
   * @returns The call result: A string describing the account's wealth status
   */
  async isRich(params: CallParams<ControlFlowArgs['obj']['isRich(uint64)string'] | ControlFlowArgs['tuple']['isRich(uint64)string']>) {
    const result = await this.appClient.send.call(ControlFlowParamsFactory.isRich(params))
    return result.return as unknown as ControlFlowReturns['isRich(uint64)string']
  }

  /**
   * Makes a readonly (simulated) call to the ControlFlow smart contract using the `isEven(uint64)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Determines if a number is even or odd
   *
   * @param params The params for the smart contract call
   * @returns The call result: "Even" if the number is even, "Odd" otherwise
   */
  async isEven(params: CallParams<ControlFlowArgs['obj']['isEven(uint64)string'] | ControlFlowArgs['tuple']['isEven(uint64)string']>) {
    const result = await this.appClient.send.call(ControlFlowParamsFactory.isEven(params))
    return result.return as unknown as ControlFlowReturns['isEven(uint64)string']
  }

  /**
   * Makes a readonly (simulated) call to the ControlFlow smart contract using the `forLoop()uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Demonstrates different types of for loops
   *
   * @param params The params for the smart contract call
   * @returns The call result: An array of uint64 values in reversed order
   */
  async forLoop(params: CallParams<ControlFlowArgs['obj']['forLoop()uint64[]'] | ControlFlowArgs['tuple']['forLoop()uint64[]']> = {args: []}) {
    const result = await this.appClient.send.call(ControlFlowParamsFactory.forLoop(params))
    return result.return as unknown as ControlFlowReturns['forLoop()uint64[]']
  }

  /**
   * Makes a readonly (simulated) call to the ControlFlow smart contract using the `getDay(uint64)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the day of the week based on a numeric input
   *
   * @param params The params for the smart contract call
   * @returns The call result: The name of the day, or "Invalid day" if out of range
   */
  async getDay(params: CallParams<ControlFlowArgs['obj']['getDay(uint64)string'] | ControlFlowArgs['tuple']['getDay(uint64)string']>) {
    const result = await this.appClient.send.call(ControlFlowParamsFactory.getDay(params))
    return result.return as unknown as ControlFlowReturns['getDay(uint64)string']
  }

  /**
   * Makes a readonly (simulated) call to the ControlFlow smart contract using the `calculateBoxStorageCost(string,string)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculates the minimum balance requirement (MBR) increase for box storage
  based on different box size categories.

   *
   * @param params The params for the smart contract call
   * @returns The call result: The MBR increase in microAlgos, or 0 if invalid size label
   */
  async calculateBoxStorageCost(params: CallParams<ControlFlowArgs['obj']['calculateBoxStorageCost(string,string)uint64'] | ControlFlowArgs['tuple']['calculateBoxStorageCost(string,string)uint64']>) {
    const result = await this.appClient.send.call(ControlFlowParamsFactory.calculateBoxStorageCost(params))
    return result.return as unknown as ControlFlowReturns['calculateBoxStorageCost(string,string)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ControlFlow smart contract using the `loop()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Demonstrates while loop with continue and break statements
   *
   * @param params The params for the smart contract call
   * @returns The call result: The number of iterations performed
   */
  async loop(params: CallParams<ControlFlowArgs['obj']['loop()uint64'] | ControlFlowArgs['tuple']['loop()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(ControlFlowParamsFactory.loop(params))
    return result.return as unknown as ControlFlowReturns['loop()uint64']
  }

  /**
   * Methods to access state for the current ControlFlow app
   */
  state = {
  }

  public newGroup(): ControlFlowComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a isRich(uint64)string method call against the ControlFlow contract
       */
      isRich(params: CallParams<ControlFlowArgs['obj']['isRich(uint64)string'] | ControlFlowArgs['tuple']['isRich(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isRich(params)))
        resultMappers.push((v) => client.decodeReturnValue('isRich(uint64)string', v))
        return this
      },
      /**
       * Add a isEven(uint64)string method call against the ControlFlow contract
       */
      isEven(params: CallParams<ControlFlowArgs['obj']['isEven(uint64)string'] | ControlFlowArgs['tuple']['isEven(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isEven(params)))
        resultMappers.push((v) => client.decodeReturnValue('isEven(uint64)string', v))
        return this
      },
      /**
       * Add a forLoop()uint64[] method call against the ControlFlow contract
       */
      forLoop(params: CallParams<ControlFlowArgs['obj']['forLoop()uint64[]'] | ControlFlowArgs['tuple']['forLoop()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.forLoop(params)))
        resultMappers.push((v) => client.decodeReturnValue('forLoop()uint64[]', v))
        return this
      },
      /**
       * Add a getDay(uint64)string method call against the ControlFlow contract
       */
      getDay(params: CallParams<ControlFlowArgs['obj']['getDay(uint64)string'] | ControlFlowArgs['tuple']['getDay(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDay(params)))
        resultMappers.push((v) => client.decodeReturnValue('getDay(uint64)string', v))
        return this
      },
      /**
       * Add a calculateBoxStorageCost(string,string)uint64 method call against the ControlFlow contract
       */
      calculateBoxStorageCost(params: CallParams<ControlFlowArgs['obj']['calculateBoxStorageCost(string,string)uint64'] | ControlFlowArgs['tuple']['calculateBoxStorageCost(string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateBoxStorageCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateBoxStorageCost(string,string)uint64', v))
        return this
      },
      /**
       * Add a loop()uint64 method call against the ControlFlow contract
       */
      loop(params: CallParams<ControlFlowArgs['obj']['loop()uint64'] | ControlFlowArgs['tuple']['loop()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.loop(params)))
        resultMappers.push((v) => client.decodeReturnValue('loop()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ControlFlow contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ControlFlowComposer
  }
}
export type ControlFlowComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the isRich(uint64)string ABI method.
   *
   * Determines if an account is rich based on its balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isRich(params?: CallParams<ControlFlowArgs['obj']['isRich(uint64)string'] | ControlFlowArgs['tuple']['isRich(uint64)string']>): ControlFlowComposer<[...TReturns, ControlFlowReturns['isRich(uint64)string'] | undefined]>

  /**
   * Calls the isEven(uint64)string ABI method.
   *
   * Determines if a number is even or odd
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isEven(params?: CallParams<ControlFlowArgs['obj']['isEven(uint64)string'] | ControlFlowArgs['tuple']['isEven(uint64)string']>): ControlFlowComposer<[...TReturns, ControlFlowReturns['isEven(uint64)string'] | undefined]>

  /**
   * Calls the forLoop()uint64[] ABI method.
   *
   * Demonstrates different types of for loops
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  forLoop(params?: CallParams<ControlFlowArgs['obj']['forLoop()uint64[]'] | ControlFlowArgs['tuple']['forLoop()uint64[]']>): ControlFlowComposer<[...TReturns, ControlFlowReturns['forLoop()uint64[]'] | undefined]>

  /**
   * Calls the getDay(uint64)string ABI method.
   *
   * Returns the day of the week based on a numeric input
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDay(params?: CallParams<ControlFlowArgs['obj']['getDay(uint64)string'] | ControlFlowArgs['tuple']['getDay(uint64)string']>): ControlFlowComposer<[...TReturns, ControlFlowReturns['getDay(uint64)string'] | undefined]>

  /**
   * Calls the calculateBoxStorageCost(string,string)uint64 ABI method.
   *
  * Calculates the minimum balance requirement (MBR) increase for box storage
  based on different box size categories.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateBoxStorageCost(params?: CallParams<ControlFlowArgs['obj']['calculateBoxStorageCost(string,string)uint64'] | ControlFlowArgs['tuple']['calculateBoxStorageCost(string,string)uint64']>): ControlFlowComposer<[...TReturns, ControlFlowReturns['calculateBoxStorageCost(string,string)uint64'] | undefined]>

  /**
   * Calls the loop()uint64 ABI method.
   *
   * Demonstrates while loop with continue and break statements
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  loop(params?: CallParams<ControlFlowArgs['obj']['loop()uint64'] | ControlFlowArgs['tuple']['loop()uint64']>): ControlFlowComposer<[...TReturns, ControlFlowReturns['loop()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ControlFlow smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ControlFlowComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ControlFlowComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ControlFlowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ControlFlowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ControlFlowComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ControlFlowComposerResults<TReturns>>
}
export type ControlFlowComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

