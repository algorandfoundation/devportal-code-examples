{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ReferenceAsset/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;AAMA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAeG;;AAAA;AAAA;AAAA;;AAAA;AAfH;;;AAAA;AAAA;;AAeG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AALH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAOiB;;;AAAM;;AAAA;AAAnB;AAQF;;;AAEe;;AAAA;;AAAA;AAAb",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x151f7c75"
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "10": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0x1d90e1ba 0x95fe420a // method \"getAssetTotalSupply()uint64\", method \"getAssetTotalSupplyWithArgument(asset)uint64\"",
      "defined_out": [
        "Method(getAssetTotalSupply()uint64)",
        "Method(getAssetTotalSupplyWithArgument(asset)uint64)"
      ],
      "stack_out": [
        "Method(getAssetTotalSupply()uint64)",
        "Method(getAssetTotalSupplyWithArgument(asset)uint64)"
      ]
    },
    "25": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getAssetTotalSupply()uint64)",
        "Method(getAssetTotalSupplyWithArgument(asset)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getAssetTotalSupply()uint64)",
        "Method(getAssetTotalSupplyWithArgument(asset)uint64)",
        "tmp%2#0"
      ]
    },
    "28": {
      "op": "match main_getAssetTotalSupply_route@3 main_getAssetTotalSupplyWithArgument_route@4",
      "stack_out": []
    },
    "34": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "36": {
      "op": "return",
      "stack_out": []
    },
    "37": {
      "block": "main_getAssetTotalSupplyWithArgument_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "39": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "40": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "41": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "43": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "44": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "47": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "48": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "50": {
      "callsub": "contracts/ReferenceAsset/contract.algo.ts::ReferenceAsset.getAssetTotalSupplyWithArgument",
      "op": "callsub getAssetTotalSupplyWithArgument",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "53": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "54": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "55": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "56": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "57": {
      "op": "log",
      "stack_out": []
    },
    "58": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "return",
      "stack_out": []
    },
    "61": {
      "block": "main_getAssetTotalSupply_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "63": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "64": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "65": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "67": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "68": {
      "callsub": "contracts/ReferenceAsset/contract.algo.ts::ReferenceAsset.getAssetTotalSupply",
      "op": "callsub getAssetTotalSupply",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "71": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "72": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "75": {
      "op": "log",
      "stack_out": []
    },
    "76": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "78": {
      "op": "return",
      "stack_out": []
    },
    "79": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "81": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "84": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "86": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "87": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "88": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "subroutine": "contracts/ReferenceAsset/contract.algo.ts::ReferenceAsset.getAssetTotalSupply",
      "params": {},
      "block": "getAssetTotalSupply",
      "stack_in": [],
      "op": "pushint 1005 // 1005",
      "defined_out": [
        "1005"
      ],
      "stack_out": [
        "1005"
      ]
    },
    "94": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "96": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "97": {
      "retsub": true,
      "op": "retsub"
    },
    "98": {
      "subroutine": "contracts/ReferenceAsset/contract.algo.ts::ReferenceAsset.getAssetTotalSupplyWithArgument",
      "params": {
        "asset#0": "uint64"
      },
      "block": "getAssetTotalSupplyWithArgument",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "101": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "103": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "105": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "106": {
      "retsub": true,
      "op": "retsub"
    }
  }
}