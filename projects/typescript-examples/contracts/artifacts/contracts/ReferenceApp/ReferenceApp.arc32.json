{
    "hints": {
        "incrementViaInner()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "incrementViaInnerWithArg(application)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDYKICAgIGJ5dGVjYmxvY2sgMHgxNTFmN2M3NSAweDRhMzI1OTAxCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQXBwL2NvbnRyYWN0LmFsZ28udHM6MzIKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZmVyZW5jZUFwcCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A3CiAgICBwdXNoYnl0ZXNzIDB4OTQwN2FlOTYgMHgxMTE4MzM0YiAvLyBtZXRob2QgImluY3JlbWVudFZpYUlubmVyKCl1aW50NjQiLCBtZXRob2QgImluY3JlbWVudFZpYUlubmVyV2l0aEFyZyhhcHBsaWNhdGlvbil1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2luY3JlbWVudFZpYUlubmVyX3JvdXRlQDMgbWFpbl9pbmNyZW1lbnRWaWFJbm5lcldpdGhBcmdfcm91dGVANAoKbWFpbl9hZnRlcl9pZl9lbHNlQDExOgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZlcmVuY2VBcHAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2luY3JlbWVudFZpYUlubmVyV2l0aEFyZ19yb3V0ZUA0OgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjYxCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZlcmVuY2VBcHAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBcHBsaWNhdGlvbnMKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBcHAvY29udHJhY3QuYWxnby50czo2MQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGluY3JlbWVudFZpYUlubmVyV2l0aEFyZwogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9pbmNyZW1lbnRWaWFJbm5lcl9yb3V0ZUAzOgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjM3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBpbmNyZW1lbnRWaWFJbm5lcgogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANzoKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBcHAvY29udHJhY3QuYWxnby50czozMgogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlQXBwIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBjb250cmFjdHMvUmVmZXJlbmNlQXBwL2NvbnRyYWN0LmFsZ28udHM6OlJlZmVyZW5jZUFwcC5pbmNyZW1lbnRWaWFJbm5lcigpIC0+IHVpbnQ2NDoKaW5jcmVtZW50VmlhSW5uZXI6CiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQXBwL2NvbnRyYWN0LmFsZ28udHM6NDItNDkKICAgIC8vIGNvbnN0IGFwcENhbGxUeG4gPSBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBhcHAuaWQsCiAgICAvLyAgICAgLy8gVXNlIG1ldGhvZFNlbGVjdG9yIHRvIGdldCB0aGUgQUJJIHNlbGVjdG9yIGZvciB0aGUgaW5jcmVtZW50IG1ldGhvZAogICAgLy8gICAgIGFwcEFyZ3M6IFthcmM0Lm1ldGhvZFNlbGVjdG9yKCdpbmNyZW1lbnQoKXVpbnQ2NCcpXSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjQ2CiAgICAvLyBhcHBBcmdzOiBbYXJjNC5tZXRob2RTZWxlY3RvcignaW5jcmVtZW50KCl1aW50NjQnKV0sCiAgICBieXRlY18xIC8vIG1ldGhvZCAiaW5jcmVtZW50KCl1aW50NjQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjM5CiAgICAvLyBjb25zdCBhcHAgPSBBcHBsaWNhdGlvbigxNzE3KSAvLyBSZXBsYWNlIHdpdGggeW91ciBhcHBsaWNhdGlvbiBpZAogICAgcHVzaGludCAxNzE3IC8vIDE3MTcKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjQyLTQ4CiAgICAvLyBjb25zdCBhcHBDYWxsVHhuID0gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogYXBwLmlkLAogICAgLy8gICAgIC8vIFVzZSBtZXRob2RTZWxlY3RvciB0byBnZXQgdGhlIEFCSSBzZWxlY3RvciBmb3IgdGhlIGluY3JlbWVudCBtZXRob2QKICAgIC8vICAgICBhcHBBcmdzOiBbYXJjNC5tZXRob2RTZWxlY3RvcignaW5jcmVtZW50KCl1aW50NjQnKV0sCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgaW50Y18yIC8vIDYKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBcHAvY29udHJhY3QuYWxnby50czo0NwogICAgLy8gZmVlOiAwLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQXBwL2NvbnRyYWN0LmFsZ28udHM6NDItNDkKICAgIC8vIGNvbnN0IGFwcENhbGxUeG4gPSBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBhcHAuaWQsCiAgICAvLyAgICAgLy8gVXNlIG1ldGhvZFNlbGVjdG9yIHRvIGdldCB0aGUgQUJJIHNlbGVjdG9yIGZvciB0aGUgaW5jcmVtZW50IG1ldGhvZAogICAgLy8gICAgIGFwcEFyZ3M6IFthcmM0Lm1ldGhvZFNlbGVjdG9yKCdpbmNyZW1lbnQoKXVpbnQ2NCcpXSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjUzCiAgICAvLyByZXR1cm4gYXJjNC5kZWNvZGVBcmM0PHVpbnQ2ND4oYXBwQ2FsbFR4bi5sYXN0TG9nLCAnbG9nJykKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgYnRvaQogICAgcmV0c3ViCgoKLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjpSZWZlcmVuY2VBcHAuaW5jcmVtZW50VmlhSW5uZXJXaXRoQXJnKGFwcDogdWludDY0KSAtPiB1aW50NjQ6CmluY3JlbWVudFZpYUlubmVyV2l0aEFyZzoKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBcHAvY29udHJhY3QuYWxnby50czo2MS02MgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgaW5jcmVtZW50VmlhSW5uZXJXaXRoQXJnKGFwcDogQXBwbGljYXRpb24pOiB1aW50NjQgewogICAgcHJvdG8gMSAxCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQXBwL2NvbnRyYWN0LmFsZ28udHM6NjQtNzEKICAgIC8vIGNvbnN0IGFwcENhbGxUeG4gPSBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBhcHAuaWQsCiAgICAvLyAgICAgLy8gVXNlIG1ldGhvZFNlbGVjdG9yIHRvIGdldCB0aGUgQUJJIHNlbGVjdG9yIGZvciB0aGUgaW5jcmVtZW50IG1ldGhvZAogICAgLy8gICAgIGFwcEFyZ3M6IFthcmM0Lm1ldGhvZFNlbGVjdG9yKCdpbmNyZW1lbnQoKXVpbnQ2NCcpXSwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjY4CiAgICAvLyBhcHBBcmdzOiBbYXJjNC5tZXRob2RTZWxlY3RvcignaW5jcmVtZW50KCl1aW50NjQnKV0sCiAgICBieXRlY18xIC8vIG1ldGhvZCAiaW5jcmVtZW50KCl1aW50NjQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBcHAvY29udHJhY3QuYWxnby50czo2NC03MAogICAgLy8gY29uc3QgYXBwQ2FsbFR4biA9IGl0eG4KICAgIC8vICAgLmFwcGxpY2F0aW9uQ2FsbCh7CiAgICAvLyAgICAgYXBwSWQ6IGFwcC5pZCwKICAgIC8vICAgICAvLyBVc2UgbWV0aG9kU2VsZWN0b3IgdG8gZ2V0IHRoZSBBQkkgc2VsZWN0b3IgZm9yIHRoZSBpbmNyZW1lbnQgbWV0aG9kCiAgICAvLyAgICAgYXBwQXJnczogW2FyYzQubWV0aG9kU2VsZWN0b3IoJ2luY3JlbWVudCgpdWludDY0JyldLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIGludGNfMiAvLyA2CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQXBwL2NvbnRyYWN0LmFsZ28udHM6NjkKICAgIC8vIGZlZTogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFwcC9jb250cmFjdC5hbGdvLnRzOjY0LTcxCiAgICAvLyBjb25zdCBhcHBDYWxsVHhuID0gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogYXBwLmlkLAogICAgLy8gICAgIC8vIFVzZSBtZXRob2RTZWxlY3RvciB0byBnZXQgdGhlIEFCSSBzZWxlY3RvciBmb3IgdGhlIGluY3JlbWVudCBtZXRob2QKICAgIC8vICAgICBhcHBBcmdzOiBbYXJjNC5tZXRob2RTZWxlY3RvcignaW5jcmVtZW50KCl1aW50NjQnKV0sCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBcHAvY29udHJhY3QuYWxnby50czo3NQogICAgLy8gcmV0dXJuIGFyYzQuZGVjb2RlQXJjNDx1aW50NjQ+KGFwcENhbGxUeG4ubGFzdExvZywgJ2xvZycpCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBzd2FwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIGJ0b2kKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ReferenceApp",
        "desc": "A contract that demonstrates how to use resource usage in a contract using an asset reference",
        "methods": [
            {
                "name": "incrementViaInner",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The incremented counter value from the inner call"
                },
                "desc": "Calls the increment method on another Counter app with a hardcoded app ID"
            },
            {
                "name": "incrementViaInnerWithArg",
                "args": [
                    {
                        "type": "application",
                        "name": "app",
                        "desc": "The application to call"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The incremented counter value from the inner call"
                },
                "desc": "Calls the increment method on another Counter app passed as an argument"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}