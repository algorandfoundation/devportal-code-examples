#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 6 0 1
    bytecblock 0x151f7c75 0x4a325901
    // contracts/ReferenceApp/contract.algo.ts:33
    // export default class ReferenceApp extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x9407ae96 0xec904a91 // method "incrementViaInner()uint64", method "incrementViaInnerWithArg(uint64)uint64"
    txna ApplicationArgs 0
    match incrementViaInner incrementViaInnerWithArg
    err

main___algots__.defaultCreate@9:
    // contracts/ReferenceApp/contract.algo.ts:33
    // export default class ReferenceApp extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contracts/ReferenceApp/contract.algo.ts::ReferenceApp.incrementViaInner[routing]() -> void:
incrementViaInner:
    // contracts/ReferenceApp/contract.algo.ts:43-50
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: app.id,
    //     // Use methodSelector to get the ABI selector for the increment method
    //     appArgs: [arc4.methodSelector('increment()uint64')],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/ReferenceApp/contract.algo.ts:47
    // appArgs: [arc4.methodSelector('increment()uint64')],
    bytec_1 // method "increment()uint64"
    itxn_field ApplicationArgs
    // contracts/ReferenceApp/contract.algo.ts:40
    // const app = Application(1717) // Replace with your application id
    pushint 1717 // 1717
    itxn_field ApplicationID
    // contracts/ReferenceApp/contract.algo.ts:43-49
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: app.id,
    //     // Use methodSelector to get the ABI selector for the increment method
    //     appArgs: [arc4.methodSelector('increment()uint64')],
    //     fee: 0,
    //   })
    intc_0 // 6
    itxn_field TypeEnum
    // contracts/ReferenceApp/contract.algo.ts:48
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/ReferenceApp/contract.algo.ts:43-50
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: app.id,
    //     // Use methodSelector to get the ABI selector for the increment method
    //     appArgs: [arc4.methodSelector('increment()uint64')],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn LastLog
    // contracts/ReferenceApp/contract.algo.ts:54
    // return arc4.decodeArc4<uint64>(appCallTxn.lastLog, 'log')
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // contracts/ReferenceApp/contract.algo.ts:38
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return


// contracts/ReferenceApp/contract.algo.ts::ReferenceApp.incrementViaInnerWithArg[routing]() -> void:
incrementViaInnerWithArg:
    // contracts/ReferenceApp/contract.algo.ts:62
    // @abimethod()
    txna ApplicationArgs 1
    btoi
    // contracts/ReferenceApp/contract.algo.ts:65-72
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: app.id,
    //     // Use methodSelector to get the ABI selector for the increment method
    //     appArgs: [arc4.methodSelector('increment()uint64')],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/ReferenceApp/contract.algo.ts:69
    // appArgs: [arc4.methodSelector('increment()uint64')],
    bytec_1 // method "increment()uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // contracts/ReferenceApp/contract.algo.ts:65-71
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: app.id,
    //     // Use methodSelector to get the ABI selector for the increment method
    //     appArgs: [arc4.methodSelector('increment()uint64')],
    //     fee: 0,
    //   })
    intc_0 // 6
    itxn_field TypeEnum
    // contracts/ReferenceApp/contract.algo.ts:70
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/ReferenceApp/contract.algo.ts:65-72
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: app.id,
    //     // Use methodSelector to get the ABI selector for the increment method
    //     appArgs: [arc4.methodSelector('increment()uint64')],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn LastLog
    // contracts/ReferenceApp/contract.algo.ts:76
    // return arc4.decodeArc4<uint64>(appCallTxn.lastLog, 'log')
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // contracts/ReferenceApp/contract.algo.ts:62
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return
