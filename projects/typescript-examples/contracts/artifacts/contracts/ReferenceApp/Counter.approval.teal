#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "counter"
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/ReferenceApp/contract.algo.ts:17
    // public counter = GlobalState<uint64>({ initialValue: Uint64(0) })
    bytec_0 // "counter"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // contracts/ReferenceApp/contract.algo.ts:16
    // export class Counter extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytes 0x4a325901 // method "increment()uint64"
    txna ApplicationArgs 0
    match main_increment_route@5

main_after_if_else@12:
    err

main_increment_route@5:
    // contracts/ReferenceApp/contract.algo.ts:23
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub increment
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@8:
    // contracts/ReferenceApp/contract.algo.ts:16
    // export class Counter extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/ReferenceApp/contract.algo.ts::Counter.increment() -> uint64:
increment:
    // contracts/ReferenceApp/contract.algo.ts:25
    // this.counter.value = this.counter.value + 1
    intc_1 // 0
    // contracts/ReferenceApp/contract.algo.ts:17
    // public counter = GlobalState<uint64>({ initialValue: Uint64(0) })
    bytec_0 // "counter"
    // contracts/ReferenceApp/contract.algo.ts:25
    // this.counter.value = this.counter.value + 1
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 1
    +
    // contracts/ReferenceApp/contract.algo.ts:17
    // public counter = GlobalState<uint64>({ initialValue: Uint64(0) })
    bytec_0 // "counter"
    // contracts/ReferenceApp/contract.algo.ts:25
    // this.counter.value = this.counter.value + 1
    dig 1
    app_global_put
    // contracts/ReferenceApp/contract.algo.ts:26
    // return this.counter.value
    retsub
