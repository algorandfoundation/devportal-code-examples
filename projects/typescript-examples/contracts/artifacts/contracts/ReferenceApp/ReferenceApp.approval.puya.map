{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ReferenceApp/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAgCA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AA6BG;;AAAA;AAAA;AAAA;;AAAA;AA7BH;;;AAAA;AAAA;;AA6BG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAUuB;AAIL;;;AAPU;;;;;AAGL;;;AAKV;;;AALU;;;AAWZ;AAAA;;;AAAA;AAAA;;;AAA4C;AAA5C;AAAA;AAAA;AAAP;AAQF;;;AAGqB;AAIL;;;;;;;AAJK;;;AAKV;;;AALU;;;AAWZ;AAAA;;;AAAA;AAAA;;;AAA4C;AAA5C;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 0x4a325901"
    },
    "18": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "23": {
      "op": "pushbytess 0x9407ae96 0x1118334b // method \"incrementViaInner()uint64\", method \"incrementViaInnerWithArg(application)uint64\"",
      "defined_out": [
        "Method(incrementViaInner()uint64)",
        "Method(incrementViaInnerWithArg(application)uint64)"
      ],
      "stack_out": [
        "Method(incrementViaInner()uint64)",
        "Method(incrementViaInnerWithArg(application)uint64)"
      ]
    },
    "35": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(incrementViaInner()uint64)",
        "Method(incrementViaInnerWithArg(application)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(incrementViaInner()uint64)",
        "Method(incrementViaInnerWithArg(application)uint64)",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "match main_incrementViaInner_route@3 main_incrementViaInnerWithArg_route@4",
      "stack_out": []
    },
    "44": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "45": {
      "op": "return",
      "stack_out": []
    },
    "46": {
      "block": "main_incrementViaInnerWithArg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "48": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "49": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "52": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "53": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "56": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "57": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "59": {
      "callsub": "contracts/ReferenceApp/contract.algo.ts::ReferenceApp.incrementViaInnerWithArg",
      "op": "callsub incrementViaInnerWithArg",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "62": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "63": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "64": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "65": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "66": {
      "op": "log",
      "stack_out": []
    },
    "67": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "68": {
      "op": "return",
      "stack_out": []
    },
    "69": {
      "block": "main_incrementViaInner_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "71": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "72": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "73": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "75": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "76": {
      "callsub": "contracts/ReferenceApp/contract.algo.ts::ReferenceApp.incrementViaInner",
      "op": "callsub incrementViaInner",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "79": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "80": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "81": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "82": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "83": {
      "op": "log",
      "stack_out": []
    },
    "84": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "85": {
      "op": "return",
      "stack_out": []
    },
    "86": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "88": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "94": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "95": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "subroutine": "contracts/ReferenceApp/contract.algo.ts::ReferenceApp.incrementViaInner",
      "params": {},
      "block": "incrementViaInner",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "98": {
      "op": "bytec_1 // method \"increment()uint64\"",
      "defined_out": [
        "Method(increment()uint64)"
      ],
      "stack_out": [
        "Method(increment()uint64)"
      ]
    },
    "99": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "101": {
      "op": "pushint 1717 // 1717",
      "defined_out": [
        "1717"
      ],
      "stack_out": [
        "1717"
      ]
    },
    "104": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "106": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "107": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "109": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "110": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "112": {
      "op": "itxn_submit"
    },
    "113": {
      "op": "itxn LastLog",
      "defined_out": [
        "appCallTxn.LastLog#0"
      ],
      "stack_out": [
        "appCallTxn.LastLog#0"
      ]
    },
    "115": {
      "op": "dup",
      "defined_out": [
        "appCallTxn.LastLog#0",
        "appCallTxn.LastLog#0 (copy)"
      ],
      "stack_out": [
        "appCallTxn.LastLog#0",
        "appCallTxn.LastLog#0 (copy)"
      ]
    },
    "116": {
      "op": "extract 4 0",
      "defined_out": [
        "appCallTxn.LastLog#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "appCallTxn.LastLog#0",
        "tmp%0#0"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "appCallTxn.LastLog#0"
      ]
    },
    "120": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "123": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "124": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "125": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "126": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "127": {
      "retsub": true,
      "op": "retsub"
    },
    "128": {
      "subroutine": "contracts/ReferenceApp/contract.algo.ts::ReferenceApp.incrementViaInnerWithArg",
      "params": {
        "app#0": "uint64"
      },
      "block": "incrementViaInnerWithArg",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "131": {
      "op": "itxn_begin"
    },
    "132": {
      "op": "bytec_1 // method \"increment()uint64\"",
      "defined_out": [
        "Method(increment()uint64)"
      ],
      "stack_out": [
        "Method(increment()uint64)"
      ]
    },
    "133": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "135": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "137": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "139": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "140": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "142": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "143": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "145": {
      "op": "itxn_submit"
    },
    "146": {
      "op": "itxn LastLog",
      "defined_out": [
        "appCallTxn.LastLog#0"
      ],
      "stack_out": [
        "appCallTxn.LastLog#0"
      ]
    },
    "148": {
      "op": "dup",
      "defined_out": [
        "appCallTxn.LastLog#0",
        "appCallTxn.LastLog#0 (copy)"
      ],
      "stack_out": [
        "appCallTxn.LastLog#0",
        "appCallTxn.LastLog#0 (copy)"
      ]
    },
    "149": {
      "op": "extract 4 0",
      "defined_out": [
        "appCallTxn.LastLog#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "appCallTxn.LastLog#0",
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "appCallTxn.LastLog#0"
      ]
    },
    "153": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "156": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "157": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "158": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "159": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "160": {
      "retsub": true,
      "op": "retsub"
    }
  }
}