{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ScratchStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAO4B;AAAxB;;AACuB;AAAvB;;AACwB;AAAxB;;AACyB;AAAzB;;AAUe;;AACA;;AACI;;AAHJ;;AAKG;AAAX;AAAP;AAC4B;AAArB;AAAP;AACO;AAAW;AAAX;AAAP;AACkB;AAAX;AAAP;AAOF;;;;;;;AAAA;AAAA;AAAA;AAaA;;;AAAA;AAAA;;;AAAA;AAES;AAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;AAAA;AAAA;;;AAAA;AAES;AAFT;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 42 100 999"
    },
    "8": {
      "op": "bytecblock \"Hello, Algorand!\" 0x151f7c75"
    },
    "32": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "34": {
      "op": "bz main___algots__.defaultCreate@10",
      "stack_out": []
    },
    "37": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "39": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "40": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "41": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "43": {
      "op": "assert",
      "stack_out": []
    },
    "44": {
      "op": "pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66 // method \"demonstrateScratchStorage()bool\", method \"readFromGroupTransaction(uint64,uint64)uint64\", method \"readBytesFromGroupTransaction(uint64,uint64)byte[]\"",
      "defined_out": [
        "Method(demonstrateScratchStorage()bool)",
        "Method(readBytesFromGroupTransaction(uint64,uint64)byte[])",
        "Method(readFromGroupTransaction(uint64,uint64)uint64)"
      ],
      "stack_out": [
        "Method(demonstrateScratchStorage()bool)",
        "Method(readFromGroupTransaction(uint64,uint64)uint64)",
        "Method(readBytesFromGroupTransaction(uint64,uint64)byte[])"
      ]
    },
    "61": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(demonstrateScratchStorage()bool)",
        "Method(readBytesFromGroupTransaction(uint64,uint64)byte[])",
        "Method(readFromGroupTransaction(uint64,uint64)uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(demonstrateScratchStorage()bool)",
        "Method(readFromGroupTransaction(uint64,uint64)uint64)",
        "Method(readBytesFromGroupTransaction(uint64,uint64)byte[])",
        "tmp%6#0"
      ]
    },
    "64": {
      "op": "match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction",
      "stack_out": []
    },
    "72": {
      "op": "err"
    },
    "73": {
      "block": "main___algots__.defaultCreate@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "75": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "76": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "78": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "79": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "80": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "81": {
      "subroutine": "contracts/ScratchStorage/contract.algo.ts::ScratchStorage.demonstrateScratchStorage[routing]",
      "params": {},
      "block": "demonstrateScratchStorage",
      "stack_in": [],
      "op": "intc_1 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "82": {
      "op": "store 0",
      "stack_out": []
    },
    "84": {
      "op": "bytec_0 // \"Hello, Algorand!\"",
      "defined_out": [
        "\"Hello, Algorand!\""
      ],
      "stack_out": [
        "\"Hello, Algorand!\""
      ]
    },
    "85": {
      "op": "store 1",
      "stack_out": []
    },
    "87": {
      "op": "intc_2 // 100",
      "defined_out": [
        "100"
      ],
      "stack_out": [
        "100"
      ]
    },
    "88": {
      "op": "store 2",
      "stack_out": []
    },
    "90": {
      "op": "intc_3 // 999",
      "defined_out": [
        "999"
      ],
      "stack_out": [
        "999"
      ]
    },
    "91": {
      "op": "store 15",
      "stack_out": []
    },
    "93": {
      "op": "load 2",
      "defined_out": [
        "value2#0"
      ],
      "stack_out": [
        "value2#0"
      ]
    },
    "95": {
      "op": "load 15",
      "defined_out": [
        "value2#0",
        "value3#0"
      ],
      "stack_out": [
        "value2#0",
        "value3#0"
      ]
    },
    "97": {
      "op": "load 1",
      "defined_out": [
        "bytesValue#0",
        "value2#0",
        "value3#0"
      ],
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0"
      ]
    },
    "99": {
      "op": "load 0",
      "defined_out": [
        "bytesValue#0",
        "value1#0",
        "value2#0",
        "value3#0"
      ],
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0",
        "value1#0"
      ]
    },
    "101": {
      "op": "intc_1 // 42",
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0",
        "value1#0",
        "42"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "bytesValue#0",
        "tmp%4#0",
        "value2#0",
        "value3#0"
      ],
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0",
        "tmp%4#0"
      ]
    },
    "103": {
      "error": "Value in slot 0 should be 42",
      "op": "assert // Value in slot 0 should be 42",
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0"
      ]
    },
    "104": {
      "op": "bytec_0 // \"Hello, Algorand!\"",
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0",
        "\"Hello, Algorand!\""
      ]
    },
    "105": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "value2#0",
        "value3#0"
      ],
      "stack_out": [
        "value2#0",
        "value3#0",
        "tmp%5#0"
      ]
    },
    "106": {
      "error": "Value in slot 1 should be \"Hello, Algorand!\"",
      "op": "assert // Value in slot 1 should be \"Hello, Algorand!\"",
      "stack_out": [
        "value2#0",
        "value3#0"
      ]
    },
    "107": {
      "op": "swap",
      "stack_out": [
        "value3#0",
        "value2#0"
      ]
    },
    "108": {
      "op": "intc_2 // 100",
      "stack_out": [
        "value3#0",
        "value2#0",
        "100"
      ]
    },
    "109": {
      "op": "==",
      "defined_out": [
        "tmp%6#0",
        "value3#0"
      ],
      "stack_out": [
        "value3#0",
        "tmp%6#0"
      ]
    },
    "110": {
      "error": "Value in slot 2 should be 100",
      "op": "assert // Value in slot 2 should be 100",
      "stack_out": [
        "value3#0"
      ]
    },
    "111": {
      "op": "intc_3 // 999",
      "stack_out": [
        "value3#0",
        "999"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "113": {
      "error": "Value in slot 15 should be 999",
      "op": "assert // Value in slot 15 should be 999",
      "stack_out": []
    },
    "114": {
      "op": "pushbytes 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "121": {
      "op": "log",
      "stack_out": []
    },
    "122": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "subroutine": "contracts/ScratchStorage/contract.algo.ts::ScratchStorage.readFromGroupTransaction[routing]",
      "params": {},
      "block": "readFromGroupTransaction",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "127": {
      "op": "btoi",
      "defined_out": [
        "groupIndex#0"
      ],
      "stack_out": [
        "groupIndex#0"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "groupIndex#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "groupIndex#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "131": {
      "op": "btoi",
      "defined_out": [
        "groupIndex#0",
        "scratchSlot#0"
      ],
      "stack_out": [
        "groupIndex#0",
        "scratchSlot#0"
      ]
    },
    "132": {
      "op": "gloadss",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "133": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "134": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": []
    },
    "138": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "subroutine": "contracts/ScratchStorage/contract.algo.ts::ScratchStorage.readBytesFromGroupTransaction[routing]",
      "params": {},
      "block": "readBytesFromGroupTransaction",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "143": {
      "op": "btoi",
      "defined_out": [
        "groupIndex#0"
      ],
      "stack_out": [
        "groupIndex#0"
      ]
    },
    "144": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "groupIndex#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "groupIndex#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "147": {
      "op": "btoi",
      "defined_out": [
        "groupIndex#0",
        "scratchSlot#0"
      ],
      "stack_out": [
        "groupIndex#0",
        "scratchSlot#0"
      ]
    },
    "148": {
      "op": "gloadss",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "149": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "150": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%length%0#0"
      ]
    },
    "151": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "152": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "155": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#1"
      ]
    },
    "156": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "157": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "158": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "159": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "160": {
      "op": "log",
      "stack_out": []
    },
    "161": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "162": {
      "op": "return",
      "stack_out": []
    }
  }
}