{
    "name": "ScratchStorage",
    "structs": {},
    "methods": [
        {
            "name": "demonstrateScratchStorage",
            "args": [],
            "returns": {
                "type": "bool",
                "desc": "true if all operations succeed"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Demonstrates basic scratch storage operations",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "readFromGroupTransaction",
            "args": [
                {
                    "type": "uint64",
                    "name": "groupIndex",
                    "desc": "The index of the transaction in the group to read from"
                },
                {
                    "type": "uint64",
                    "name": "scratchSlot",
                    "desc": "The scratch slot to read from"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The uint64 value read from the specified transaction's scratch slot"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Demonstrates reading values from another transaction in the same group",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "readBytesFromGroupTransaction",
            "args": [
                {
                    "type": "uint64",
                    "name": "groupIndex",
                    "desc": "The index of the transaction in the group to read from"
                },
                {
                    "type": "uint64",
                    "name": "scratchSlot",
                    "desc": "The scratch slot to read from"
                }
            ],
            "returns": {
                "type": "byte[]",
                "desc": "The bytes value read from the specified transaction's scratch slot"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Demonstrates reading bytes values from another transaction in the same group",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "ScratchStorage Contract\n\nThis contract demonstrates how to use scratch storage in Algorand smart contracts.\nScratch storage persists for the lifetime of a group transaction and can be used to pass\nvalues between multiple calls and/or applications in the same group.\n\nKey features demonstrated:\n- Reserving scratch slots using the contract decorator\n- Storing and loading values from scratch space\n- Using scratch space to pass values between transactions in a group\n- Different data types in scratch space (uint64 and bytes)",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        40
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        80
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        103
                    ],
                    "errorMessage": "Value in slot 0 should be 42"
                },
                {
                    "pc": [
                        106
                    ],
                    "errorMessage": "Value in slot 1 should be \"Hello, Algorand!\""
                },
                {
                    "pc": [
                        113
                    ],
                    "errorMessage": "Value in slot 15 should be 999"
                },
                {
                    "pc": [
                        110
                    ],
                    "errorMessage": "Value in slot 2 should be 100"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSA0MiAxMDAgOTk5CiAgICBieXRlY2Jsb2NrICJIZWxsbywgQWxnb3JhbmQhIiAweDE1MWY3Yzc1CiAgICAvLyBjb250cmFjdHMvU2NyYXRjaFN0b3JhZ2UvY29udHJhY3QuYWxnby50czoyNy0yOAogICAgLy8gQGNvbnRyYWN0KHsgc2NyYXRjaFNsb3RzOiBbMCwgMSwgMiwgeyBmcm9tOiAxMCwgdG86IDIwIH1dIH0pIC8vIFRoaXMgcmVzZXJ2ZXMgc2xvdHMgMCwgMSwgMiBhbmQgc2xvdHMgMTAtMjAKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmF0Y2hTdG9yYWdlIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDEwCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydAogICAgcHVzaGJ5dGVzcyAweDAxMTY4YzVjIDB4MGVlYzBiZDkgMHgxMGZiNGE2NiAvLyBtZXRob2QgImRlbW9uc3RyYXRlU2NyYXRjaFN0b3JhZ2UoKWJvb2wiLCBtZXRob2QgInJlYWRGcm9tR3JvdXBUcmFuc2FjdGlvbih1aW50NjQsdWludDY0KXVpbnQ2NCIsIG1ldGhvZCAicmVhZEJ5dGVzRnJvbUdyb3VwVHJhbnNhY3Rpb24odWludDY0LHVpbnQ2NClieXRlW10iCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBkZW1vbnN0cmF0ZVNjcmF0Y2hTdG9yYWdlIHJlYWRGcm9tR3JvdXBUcmFuc2FjdGlvbiByZWFkQnl0ZXNGcm9tR3JvdXBUcmFuc2FjdGlvbgogICAgZXJyCgptYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUAxMDoKICAgIC8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjI3LTI4CiAgICAvLyBAY29udHJhY3QoeyBzY3JhdGNoU2xvdHM6IFswLCAxLCAyLCB7IGZyb206IDEwLCB0bzogMjAgfV0gfSkgLy8gVGhpcyByZXNlcnZlcyBzbG90cyAwLCAxLCAyIGFuZCBzbG90cyAxMC0yMAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NyYXRjaFN0b3JhZ2UgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIHJldHVybiAvLyBvbiBlcnJvcjogT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKCgovLyBjb250cmFjdHMvU2NyYXRjaFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo6U2NyYXRjaFN0b3JhZ2UuZGVtb25zdHJhdGVTY3JhdGNoU3RvcmFnZVtyb3V0aW5nXSgpIC0+IHZvaWQ6CmRlbW9uc3RyYXRlU2NyYXRjaFN0b3JhZ2U6CiAgICAvLyBjb250cmFjdHMvU2NyYXRjaFN0b3JhZ2UvY29udHJhY3QuYWxnby50czozNAogICAgLy8gU2NyYXRjaC5zdG9yZSgwLCBVaW50NjQoNDIpKQogICAgaW50Y18xIC8vIDQyCiAgICBzdG9yZSAwCiAgICAvLyBjb250cmFjdHMvU2NyYXRjaFN0b3JhZ2UvY29udHJhY3QuYWxnby50czozNQogICAgLy8gU2NyYXRjaC5zdG9yZSgxLCBCeXRlcygnSGVsbG8sIEFsZ29yYW5kIScpKQogICAgYnl0ZWNfMCAvLyAiSGVsbG8sIEFsZ29yYW5kISIKICAgIHN0b3JlIDEKICAgIC8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjM2CiAgICAvLyBTY3JhdGNoLnN0b3JlKDIsIFVpbnQ2NCgxMDApKQogICAgaW50Y18yIC8vIDEwMAogICAgc3RvcmUgMgogICAgLy8gY29udHJhY3RzL1NjcmF0Y2hTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIFNjcmF0Y2guc3RvcmUoMTUsIFVpbnQ2NCg5OTkpKQogICAgaW50Y18zIC8vIDk5OQogICAgc3RvcmUgMTUKICAgIC8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjQ3CiAgICAvLyBjb25zdCB2YWx1ZTIgPSBTY3JhdGNoLmxvYWRVaW50NjQoMikKICAgIGxvYWQgMgogICAgLy8gY29udHJhY3RzL1NjcmF0Y2hTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NDgKICAgIC8vIGNvbnN0IHZhbHVlMyA9IFNjcmF0Y2gubG9hZFVpbnQ2NCgxNSkKICAgIGxvYWQgMTUKICAgIC8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjQ5CiAgICAvLyBjb25zdCBieXRlc1ZhbHVlID0gU2NyYXRjaC5sb2FkQnl0ZXMoMSkKICAgIGxvYWQgMQogICAgLy8gY29udHJhY3RzL1NjcmF0Y2hTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NDYKICAgIC8vIGNvbnN0IHZhbHVlMSA9IFNjcmF0Y2gubG9hZFVpbnQ2NCgwKQogICAgbG9hZCAwCiAgICAvLyBjb250cmFjdHMvU2NyYXRjaFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo1MQogICAgLy8gYXNzZXJ0KHZhbHVlMSA9PT0gNDIsICdWYWx1ZSBpbiBzbG90IDAgc2hvdWxkIGJlIDQyJykKICAgIGludGNfMSAvLyA0MgogICAgPT0KICAgIGFzc2VydCAvLyBWYWx1ZSBpbiBzbG90IDAgc2hvdWxkIGJlIDQyCiAgICAvLyBjb250cmFjdHMvU2NyYXRjaFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo1MgogICAgLy8gYXNzZXJ0KGJ5dGVzVmFsdWUgPT09IEJ5dGVzKCdIZWxsbywgQWxnb3JhbmQhJyksICdWYWx1ZSBpbiBzbG90IDEgc2hvdWxkIGJlICJIZWxsbywgQWxnb3JhbmQhIicpCiAgICBieXRlY18wIC8vICJIZWxsbywgQWxnb3JhbmQhIgogICAgPT0KICAgIGFzc2VydCAvLyBWYWx1ZSBpbiBzbG90IDEgc2hvdWxkIGJlICJIZWxsbywgQWxnb3JhbmQhIgogICAgLy8gY29udHJhY3RzL1NjcmF0Y2hTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NTMKICAgIC8vIGFzc2VydCh2YWx1ZTIgPT09IDEwMCwgJ1ZhbHVlIGluIHNsb3QgMiBzaG91bGQgYmUgMTAwJykKICAgIHN3YXAKICAgIGludGNfMiAvLyAxMDAKICAgID09CiAgICBhc3NlcnQgLy8gVmFsdWUgaW4gc2xvdCAyIHNob3VsZCBiZSAxMDAKICAgIC8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjU0CiAgICAvLyBhc3NlcnQodmFsdWUzID09PSA5OTksICdWYWx1ZSBpbiBzbG90IDE1IHNob3VsZCBiZSA5OTknKQogICAgaW50Y18zIC8vIDk5OQogICAgPT0KICAgIGFzc2VydCAvLyBWYWx1ZSBpbiBzbG90IDE1IHNob3VsZCBiZSA5OTkKICAgIC8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjYxCiAgICAvLyBwdWJsaWMgZGVtb25zdHJhdGVTY3JhdGNoU3RvcmFnZSgpOiBib29sZWFuIHsKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1ODAKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjpTY3JhdGNoU3RvcmFnZS5yZWFkRnJvbUdyb3VwVHJhbnNhY3Rpb25bcm91dGluZ10oKSAtPiB2b2lkOgpyZWFkRnJvbUdyb3VwVHJhbnNhY3Rpb246CiAgICAvLyBjb250cmFjdHMvU2NyYXRjaFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo3NC03NQogICAgLy8gQHJlYWRvbmx5CiAgICAvLyBwdWJsaWMgcmVhZEZyb21Hcm91cFRyYW5zYWN0aW9uKGdyb3VwSW5kZXg6IHVpbnQ2NCwgc2NyYXRjaFNsb3Q6IHVpbnQ2NCk6IHVpbnQ2NCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICAvLyBjb250cmFjdHMvU2NyYXRjaFN0b3JhZ2UvY29udHJhY3QuYWxnby50czo3NgogICAgLy8gcmV0dXJuIGdsb2FkVWludDY0KGdyb3VwSW5kZXgsIHNjcmF0Y2hTbG90KQogICAgZ2xvYWRzcwogICAgLy8gY29udHJhY3RzL1NjcmF0Y2hTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6NzQtNzUKICAgIC8vIEByZWFkb25seQogICAgLy8gcHVibGljIHJlYWRGcm9tR3JvdXBUcmFuc2FjdGlvbihncm91cEluZGV4OiB1aW50NjQsIHNjcmF0Y2hTbG90OiB1aW50NjQpOiB1aW50NjQgewogICAgaXRvYgogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjpTY3JhdGNoU3RvcmFnZS5yZWFkQnl0ZXNGcm9tR3JvdXBUcmFuc2FjdGlvbltyb3V0aW5nXSgpIC0+IHZvaWQ6CnJlYWRCeXRlc0Zyb21Hcm91cFRyYW5zYWN0aW9uOgogICAgLy8gY29udHJhY3RzL1NjcmF0Y2hTdG9yYWdlL2NvbnRyYWN0LmFsZ28udHM6ODUtODYKICAgIC8vIEByZWFkb25seQogICAgLy8gcHVibGljIHJlYWRCeXRlc0Zyb21Hcm91cFRyYW5zYWN0aW9uKGdyb3VwSW5kZXg6IHVpbnQ2NCwgc2NyYXRjaFNsb3Q6IHVpbnQ2NCk6IGJ5dGVzIHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIC8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjg3CiAgICAvLyByZXR1cm4gZ2xvYWRCeXRlcyhncm91cEluZGV4LCBzY3JhdGNoU2xvdCkKICAgIGdsb2Fkc3MKICAgIC8vIGNvbnRyYWN0cy9TY3JhdGNoU3RvcmFnZS9jb250cmFjdC5hbGdvLnRzOjg1LTg2CiAgICAvLyBAcmVhZG9ubHkKICAgIC8vIHB1YmxpYyByZWFkQnl0ZXNGcm9tR3JvdXBUcmFuc2FjdGlvbihncm91cEluZGV4OiB1aW50NjQsIHNjcmF0Y2hTbG90OiB1aW50NjQpOiBieXRlcyB7CiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEASpk5wcmAhBIZWxsbywgQWxnb3JhbmQhBBUffHUxG0EAJDEZFEQxGESCAwQBFoxcBA7sC9kEEPtKZjYaAI4DAAkANABEADEZFDEYFBBDIzUAKDUBJDUCJTUPNAI0DzQBNAAjEkQoEkRMJBJEJRJEgAUVH3x1gLAiQzYaARc2GgIXxBYpTFCwIkM2GgEXNhoCF8RJFRZXBgJMUClMULAiQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}