#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 42 100 999
    bytecblock "Hello, Algorand!" 0x151f7c75
    // contracts/ScratchStorage/contract.algo.ts:27-28
    // @contract({ scratchSlots: [0, 1, 2, { from: 10, to: 20 }] }) // This reserves slots 0, 1, 2 and slots 10-20
    // export default class ScratchStorage extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66 // method "demonstrateScratchStorage()bool", method "readFromGroupTransaction(uint64,uint64)uint64", method "readBytesFromGroupTransaction(uint64,uint64)byte[]"
    txna ApplicationArgs 0
    match demonstrateScratchStorage readFromGroupTransaction readBytesFromGroupTransaction
    err

main___algots__.defaultCreate@10:
    // contracts/ScratchStorage/contract.algo.ts:27-28
    // @contract({ scratchSlots: [0, 1, 2, { from: 10, to: 20 }] }) // This reserves slots 0, 1, 2 and slots 10-20
    // export default class ScratchStorage extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contracts/ScratchStorage/contract.algo.ts::ScratchStorage.demonstrateScratchStorage[routing]() -> void:
demonstrateScratchStorage:
    // contracts/ScratchStorage/contract.algo.ts:34
    // Scratch.store(0, Uint64(42))
    intc_1 // 42
    store 0
    // contracts/ScratchStorage/contract.algo.ts:35
    // Scratch.store(1, Bytes('Hello, Algorand!'))
    bytec_0 // "Hello, Algorand!"
    store 1
    // contracts/ScratchStorage/contract.algo.ts:36
    // Scratch.store(2, Uint64(100))
    intc_2 // 100
    store 2
    // contracts/ScratchStorage/contract.algo.ts:37
    // Scratch.store(15, Uint64(999))
    intc_3 // 999
    store 15
    // contracts/ScratchStorage/contract.algo.ts:47
    // const value2 = Scratch.loadUint64(2)
    load 2
    // contracts/ScratchStorage/contract.algo.ts:48
    // const value3 = Scratch.loadUint64(15)
    load 15
    // contracts/ScratchStorage/contract.algo.ts:49
    // const bytesValue = Scratch.loadBytes(1)
    load 1
    // contracts/ScratchStorage/contract.algo.ts:46
    // const value1 = Scratch.loadUint64(0)
    load 0
    // contracts/ScratchStorage/contract.algo.ts:51
    // assert(value1 === 42, 'Value in slot 0 should be 42')
    intc_1 // 42
    ==
    assert // Value in slot 0 should be 42
    // contracts/ScratchStorage/contract.algo.ts:52
    // assert(bytesValue === Bytes('Hello, Algorand!'), 'Value in slot 1 should be "Hello, Algorand!"')
    bytec_0 // "Hello, Algorand!"
    ==
    assert // Value in slot 1 should be "Hello, Algorand!"
    // contracts/ScratchStorage/contract.algo.ts:53
    // assert(value2 === 100, 'Value in slot 2 should be 100')
    swap
    intc_2 // 100
    ==
    assert // Value in slot 2 should be 100
    // contracts/ScratchStorage/contract.algo.ts:54
    // assert(value3 === 999, 'Value in slot 15 should be 999')
    intc_3 // 999
    ==
    assert // Value in slot 15 should be 999
    // contracts/ScratchStorage/contract.algo.ts:61
    // public demonstrateScratchStorage(): boolean {
    pushbytes 0x151f7c7580
    log
    intc_0 // 1
    return


// contracts/ScratchStorage/contract.algo.ts::ScratchStorage.readFromGroupTransaction[routing]() -> void:
readFromGroupTransaction:
    // contracts/ScratchStorage/contract.algo.ts:74-75
    // @readonly
    // public readFromGroupTransaction(groupIndex: uint64, scratchSlot: uint64): uint64 {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // contracts/ScratchStorage/contract.algo.ts:76
    // return gloadUint64(groupIndex, scratchSlot)
    gloadss
    // contracts/ScratchStorage/contract.algo.ts:74-75
    // @readonly
    // public readFromGroupTransaction(groupIndex: uint64, scratchSlot: uint64): uint64 {
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/ScratchStorage/contract.algo.ts::ScratchStorage.readBytesFromGroupTransaction[routing]() -> void:
readBytesFromGroupTransaction:
    // contracts/ScratchStorage/contract.algo.ts:85-86
    // @readonly
    // public readBytesFromGroupTransaction(groupIndex: uint64, scratchSlot: uint64): bytes {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // contracts/ScratchStorage/contract.algo.ts:87
    // return gloadBytes(groupIndex, scratchSlot)
    gloadss
    // contracts/ScratchStorage/contract.algo.ts:85-86
    // @readonly
    // public readBytesFromGroupTransaction(groupIndex: uint64, scratchSlot: uint64): bytes {
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
