{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ReferenceAppBox/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBS;AAAuD;;AAA9D;AACO;;AAAyD;AAAhE;AAasC;AAd/B;AAc+B;AAAA;AAb0B;AAazC;AAZhB;;AAYL;;AAAA;AAC+D;AAA5B;AAAR;;;AAAP;AAZf;AAYL;AAAA;AAlBJ;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2BE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGgB;AAAA;;AAAuB;AAxBhC;AAwBgC;AAAA;AAA9B;AAAP;AACc;;AAAoB;;AAA3B;AAAP;AAtByB;AAwBgC;;AAxBhC;AAwBwC;AAAnC;AAAA;AAAA;AAE9B;;;AAE6C;AAAU;AAAV;AA5BpB;AA4BI;;AA5BJ;AA4BY;;AAAA;AAAnC;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlB2B;AAgCI;;AAhCJ;AAgC2B;AAAf;AAAnC;AACc;AAflB;;;AAlB2B;AA2CgC;;AA3ChC;AA2CwC;AAAnC;AAAA;AAAA;AAE9B;;;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQS;AART;;;AAzC2B;AAyD3B;;;AAzD2B;AA2DqC;AAAhC;AAAA;AAAA;AAE9B;;;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQS;AART;;;AAiBqB;AA7Ed;AA6Ec;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWyB;AAzFlB;AAyFkB;AAAA;AAAwB;AAxF1C;;AAwF0C;AAAA;AAAoB;AAvF9D;;AAuF8D;AAAA;AAAmB;AAtFjF;AAsFiF;AAAA;AAA/E;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAAA;AAAA;;;AAAA;AAjGO;AAmGL;;AAAA;AAlGK;;AAmGL;;AAAA;AAGoC;AAvG/B;AAuG+B;AAAA;AAAf;AArGhB;;AAqGL;;AAAA;AAC+D;AAA5B;AAAR;;;AAAP;AArGf;AAqGL;AAAA;AAPF;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8 400"
    },
    "8": {
      "op": "bytecblock \"keyLength\" \"boxMbr\" \"counter\" 0x151f7c75 \"valueLength\" \"boxSize\""
    },
    "60": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "62": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "65": {
      "op": "bytec_0 // \"keyLength\"",
      "defined_out": [
        "\"keyLength\""
      ],
      "stack_out": [
        "\"keyLength\""
      ]
    },
    "66": {
      "op": "pushint 51 // 51",
      "defined_out": [
        "\"keyLength\"",
        "51"
      ],
      "stack_out": [
        "\"keyLength\"",
        "51"
      ]
    },
    "68": {
      "op": "app_global_put",
      "stack_out": []
    },
    "69": {
      "op": "bytec 4 // \"valueLength\"",
      "defined_out": [
        "\"valueLength\""
      ],
      "stack_out": [
        "\"valueLength\""
      ]
    },
    "71": {
      "op": "intc_2 // 8",
      "defined_out": [
        "\"valueLength\"",
        "8"
      ],
      "stack_out": [
        "\"valueLength\"",
        "8"
      ]
    },
    "72": {
      "op": "app_global_put",
      "stack_out": []
    },
    "73": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "74": {
      "op": "bytec_0 // \"keyLength\"",
      "stack_out": [
        "0",
        "\"keyLength\""
      ]
    },
    "75": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "76": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "77": {
      "op": "intc_2 // 8",
      "stack_out": [
        "maybe_value%0#0",
        "8"
      ]
    },
    "78": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "79": {
      "op": "bytec 5 // \"boxSize\"",
      "defined_out": [
        "\"boxSize\"",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "\"boxSize\""
      ]
    },
    "81": {
      "op": "dig 1",
      "defined_out": [
        "\"boxSize\"",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "\"boxSize\"",
        "tmp%0#1 (copy)"
      ]
    },
    "83": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "84": {
      "op": "intc_3 // 400",
      "defined_out": [
        "400",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "400"
      ]
    },
    "85": {
      "op": "*",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "86": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "2500"
      ]
    },
    "89": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "90": {
      "op": "bytec_1 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"boxMbr\""
      ]
    },
    "91": {
      "op": "swap",
      "stack_out": [
        "\"boxMbr\"",
        "tmp%2#0"
      ]
    },
    "92": {
      "op": "app_global_put",
      "stack_out": []
    },
    "93": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "95": {
      "op": "bz main___algots__.defaultCreate@15",
      "stack_out": []
    },
    "98": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "100": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "101": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "102": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "104": {
      "op": "assert",
      "stack_out": []
    },
    "105": {
      "op": "pushbytess 0x040a235e 0x5425a145 0xe924e5e0 0xbbb5239e 0x1aefe7f5 0x0e385162 // method \"incrementBoxCounter(pay)uint64\", method \"getBoxCounter()uint64\", method \"getBoxCounterForAccount(address)uint64\", method \"getBoxMbr()uint64\", method \"getBoxConfiguration()(uint64,uint64,uint64,uint64)\", method \"updateBoxConfiguration(uint64,uint64)void\"",
      "defined_out": [
        "Method(getBoxConfiguration()(uint64,uint64,uint64,uint64))",
        "Method(getBoxCounter()uint64)",
        "Method(getBoxCounterForAccount(address)uint64)",
        "Method(getBoxMbr()uint64)",
        "Method(incrementBoxCounter(pay)uint64)",
        "Method(updateBoxConfiguration(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(incrementBoxCounter(pay)uint64)",
        "Method(getBoxCounter()uint64)",
        "Method(getBoxCounterForAccount(address)uint64)",
        "Method(getBoxMbr()uint64)",
        "Method(getBoxConfiguration()(uint64,uint64,uint64,uint64))",
        "Method(updateBoxConfiguration(uint64,uint64)void)"
      ]
    },
    "137": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getBoxConfiguration()(uint64,uint64,uint64,uint64))",
        "Method(getBoxCounter()uint64)",
        "Method(getBoxCounterForAccount(address)uint64)",
        "Method(getBoxMbr()uint64)",
        "Method(incrementBoxCounter(pay)uint64)",
        "Method(updateBoxConfiguration(uint64,uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(incrementBoxCounter(pay)uint64)",
        "Method(getBoxCounter()uint64)",
        "Method(getBoxCounterForAccount(address)uint64)",
        "Method(getBoxMbr()uint64)",
        "Method(getBoxConfiguration()(uint64,uint64,uint64,uint64))",
        "Method(updateBoxConfiguration(uint64,uint64)void)",
        "tmp%6#0"
      ]
    },
    "140": {
      "op": "match incrementBoxCounter getBoxCounter getBoxCounterForAccount getBoxMbr getBoxConfiguration updateBoxConfiguration",
      "stack_out": []
    },
    "154": {
      "op": "err"
    },
    "155": {
      "block": "main___algots__.defaultCreate@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "157": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "158": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "160": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "161": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "162": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "163": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.incrementBoxCounter[routing]",
      "params": {},
      "block": "incrementBoxCounter",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "166": {
      "op": "-",
      "defined_out": [
        "payMbr#0"
      ],
      "stack_out": [
        "payMbr#0"
      ]
    },
    "167": {
      "op": "dup",
      "defined_out": [
        "payMbr#0",
        "payMbr#0 (copy)"
      ],
      "stack_out": [
        "payMbr#0",
        "payMbr#0 (copy)"
      ]
    },
    "168": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "payMbr#0"
      ],
      "stack_out": [
        "payMbr#0",
        "gtxn_type%0#0"
      ]
    },
    "170": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay",
        "payMbr#0"
      ],
      "stack_out": [
        "payMbr#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "payMbr#0"
      ],
      "stack_out": [
        "payMbr#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "172": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "payMbr#0"
      ]
    },
    "173": {
      "op": "dup",
      "stack_out": [
        "payMbr#0",
        "payMbr#0 (copy)"
      ]
    },
    "174": {
      "op": "gtxns Amount",
      "stack_out": [
        "payMbr#0",
        "tmp%0#0"
      ]
    },
    "176": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "payMbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payMbr#0",
        "tmp%0#0",
        "0"
      ]
    },
    "177": {
      "op": "bytec_1 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "0",
        "payMbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payMbr#0",
        "tmp%0#0",
        "0",
        "\"boxMbr\""
      ]
    },
    "178": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "payMbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payMbr#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "179": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payMbr#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "180": {
      "op": "==",
      "defined_out": [
        "payMbr#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "payMbr#0",
        "tmp%1#1"
      ]
    },
    "181": {
      "error": "Payment must cover the box MBR",
      "op": "assert // Payment must cover the box MBR",
      "stack_out": [
        "payMbr#0"
      ]
    },
    "182": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "184": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "187": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": []
    },
    "188": {
      "op": "bytec_2 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "189": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ]
    },
    "191": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "192": {
      "op": "box_get",
      "defined_out": [
        "hasCounter#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "hasCounter#0"
      ]
    },
    "193": {
      "op": "swap",
      "stack_out": [
        "hasCounter#0",
        "maybe_value%1#0"
      ]
    },
    "194": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "hasCounter#0",
        "counter#0"
      ]
    },
    "195": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "counter#0",
        "hasCounter#0"
      ]
    },
    "196": {
      "op": "bz incrementBoxCounter_else_body@3",
      "stack_out": [
        "counter#0"
      ]
    },
    "199": {
      "op": "dup",
      "stack_out": [
        "counter#0",
        "counter#0"
      ]
    },
    "200": {
      "op": "intc_0 // 1",
      "stack_out": [
        "counter#0",
        "counter#0",
        "1"
      ]
    },
    "201": {
      "op": "+",
      "defined_out": [
        "counter#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%5#0"
      ]
    },
    "202": {
      "op": "bytec_2 // \"counter\"",
      "stack_out": [
        "counter#0",
        "tmp%5#0",
        "\"counter\""
      ]
    },
    "203": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "counter#0",
        "materialized_values%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%5#0",
        "\"counter\"",
        "materialized_values%1#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "counter#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%5#0",
        "box_prefixed_key%1#0"
      ]
    },
    "206": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%1#0",
        "counter#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "counter#0",
        "tmp%5#0",
        "box_prefixed_key%1#0",
        "tmp%5#0 (copy)"
      ]
    },
    "208": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%1#0",
        "counter#0",
        "encoded_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%5#0",
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ]
    },
    "209": {
      "op": "box_put",
      "defined_out": [
        "counter#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%1#0"
      ]
    },
    "210": {
      "block": "incrementBoxCounter_after_inlined_contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.incrementBoxCounter@4",
      "stack_in": [
        "counter#0",
        "tmp%1#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "211": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "212": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%3#0"
      ]
    },
    "214": {
      "op": "log",
      "stack_out": [
        "counter#0"
      ]
    },
    "215": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "counter#0",
        "1"
      ]
    },
    "216": {
      "op": "return",
      "stack_out": [
        "counter#0"
      ]
    },
    "217": {
      "block": "incrementBoxCounter_else_body@3",
      "stack_in": [
        "counter#0"
      ],
      "op": "bytec_2 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "counter#0",
        "\"counter\""
      ]
    },
    "218": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "counter#0",
        "\"counter\"",
        "materialized_values%2#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "counter#0",
        "box_prefixed_key%2#0"
      ]
    },
    "221": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "counter#0",
        "box_prefixed_key%2#0",
        "1"
      ]
    },
    "222": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%2#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "counter#0",
        "box_prefixed_key%2#0",
        "encoded_value%1#0"
      ]
    },
    "223": {
      "op": "box_put",
      "stack_out": [
        "counter#0"
      ]
    },
    "224": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%1#0"
      ]
    },
    "225": {
      "op": "b incrementBoxCounter_after_inlined_contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.incrementBoxCounter@4"
    },
    "228": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounter[routing]",
      "params": {},
      "block": "getBoxCounter",
      "stack_in": [],
      "op": "bytec_2 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "229": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ]
    },
    "231": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "232": {
      "op": "box_get",
      "defined_out": [
        "hasCounter#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "hasCounter#0"
      ]
    },
    "233": {
      "op": "swap",
      "stack_out": [
        "hasCounter#0",
        "maybe_value%0#0"
      ]
    },
    "234": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "hasCounter#0",
        "counter#0"
      ]
    },
    "235": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "counter#0",
        "hasCounter#0"
      ]
    },
    "236": {
      "op": "bz getBoxCounter_after_if_else@3",
      "stack_out": [
        "counter#0"
      ]
    },
    "239": {
      "op": "dup",
      "defined_out": [
        "counter#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%0#0"
      ]
    },
    "240": {
      "block": "getBoxCounter_after_inlined_contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounter@4",
      "stack_in": [
        "counter#0",
        "tmp%0#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "241": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%2#0"
      ]
    },
    "244": {
      "op": "log",
      "stack_out": [
        "counter#0"
      ]
    },
    "245": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "counter#0",
        "1"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": [
        "counter#0"
      ]
    },
    "247": {
      "block": "getBoxCounter_after_if_else@3",
      "stack_in": [
        "counter#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "b getBoxCounter_after_inlined_contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounter@4"
    },
    "251": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounterForAccount[routing]",
      "params": {},
      "block": "getBoxCounterForAccount",
      "stack_in": [],
      "op": "bytec_2 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "252": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"counter\"",
        "account#0"
      ],
      "stack_out": [
        "\"counter\"",
        "account#0"
      ]
    },
    "255": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "256": {
      "op": "box_get",
      "defined_out": [
        "hasCounter#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "hasCounter#0"
      ]
    },
    "257": {
      "op": "swap",
      "stack_out": [
        "hasCounter#0",
        "maybe_value%0#0"
      ]
    },
    "258": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "hasCounter#0",
        "counter#0"
      ]
    },
    "259": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "counter#0",
        "hasCounter#0"
      ]
    },
    "260": {
      "op": "bz getBoxCounterForAccount_after_if_else@3",
      "stack_out": [
        "counter#0"
      ]
    },
    "263": {
      "op": "dup",
      "defined_out": [
        "counter#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%1#0"
      ]
    },
    "264": {
      "block": "getBoxCounterForAccount_after_inlined_contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounterForAccount@4",
      "stack_in": [
        "counter#0",
        "tmp%1#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "265": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "266": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "267": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%3#0"
      ]
    },
    "268": {
      "op": "log",
      "stack_out": [
        "counter#0"
      ]
    },
    "269": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "counter#0",
        "1"
      ]
    },
    "270": {
      "op": "return",
      "stack_out": [
        "counter#0"
      ]
    },
    "271": {
      "block": "getBoxCounterForAccount_after_if_else@3",
      "stack_in": [
        "counter#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%1#0"
      ]
    },
    "272": {
      "op": "b getBoxCounterForAccount_after_inlined_contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounterForAccount@4"
    },
    "275": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxMbr[routing]",
      "params": {},
      "block": "getBoxMbr",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "276": {
      "op": "bytec_1 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"boxMbr\""
      ]
    },
    "277": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "278": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "279": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "280": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "281": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "282": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "283": {
      "op": "log",
      "stack_out": []
    },
    "284": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "285": {
      "op": "return",
      "stack_out": []
    },
    "286": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxConfiguration[routing]",
      "params": {},
      "block": "getBoxConfiguration",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "287": {
      "op": "bytec_0 // \"keyLength\"",
      "defined_out": [
        "\"keyLength\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"keyLength\""
      ]
    },
    "288": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "289": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "290": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "291": {
      "op": "bytec 4 // \"valueLength\"",
      "defined_out": [
        "\"valueLength\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"valueLength\""
      ]
    },
    "293": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "294": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "295": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "296": {
      "op": "bytec 5 // \"boxSize\"",
      "defined_out": [
        "\"boxSize\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"boxSize\""
      ]
    },
    "298": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "299": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "300": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "301": {
      "op": "bytec_1 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"boxMbr\""
      ]
    },
    "302": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "303": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "304": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%0#0"
      ]
    },
    "306": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "307": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "309": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "310": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "aggregate%head%1#0"
      ]
    },
    "311": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%3#0",
        "aggregate%head%1#0",
        "maybe_value%2#0"
      ]
    },
    "313": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "aggregate%head%2#0"
      ]
    },
    "315": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "maybe_value%3#0"
      ]
    },
    "316": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "317": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%3#0"
      ]
    },
    "318": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%3#0",
        "0x151f7c75"
      ]
    },
    "319": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%3#0"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "321": {
      "op": "log",
      "stack_out": []
    },
    "322": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "323": {
      "op": "return",
      "stack_out": []
    },
    "324": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.updateBoxConfiguration[routing]",
      "params": {},
      "block": "updateBoxConfiguration",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "327": {
      "op": "btoi",
      "defined_out": [
        "newKeyLength#0"
      ],
      "stack_out": [
        "newKeyLength#0"
      ]
    },
    "328": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "newKeyLength#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "newKeyLength#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "331": {
      "op": "btoi",
      "defined_out": [
        "newKeyLength#0",
        "newValueLength#0"
      ],
      "stack_out": [
        "newKeyLength#0",
        "newValueLength#0"
      ]
    },
    "332": {
      "op": "bytec_0 // \"keyLength\"",
      "defined_out": [
        "\"keyLength\"",
        "newKeyLength#0",
        "newValueLength#0"
      ],
      "stack_out": [
        "newKeyLength#0",
        "newValueLength#0",
        "\"keyLength\""
      ]
    },
    "333": {
      "op": "uncover 2",
      "stack_out": [
        "newValueLength#0",
        "\"keyLength\"",
        "newKeyLength#0"
      ]
    },
    "335": {
      "op": "app_global_put",
      "stack_out": [
        "newValueLength#0"
      ]
    },
    "336": {
      "op": "bytec 4 // \"valueLength\"",
      "defined_out": [
        "\"valueLength\"",
        "newValueLength#0"
      ],
      "stack_out": [
        "newValueLength#0",
        "\"valueLength\""
      ]
    },
    "338": {
      "op": "dig 1",
      "defined_out": [
        "\"valueLength\"",
        "newValueLength#0",
        "newValueLength#0 (copy)"
      ],
      "stack_out": [
        "newValueLength#0",
        "\"valueLength\"",
        "newValueLength#0 (copy)"
      ]
    },
    "340": {
      "op": "app_global_put",
      "stack_out": [
        "newValueLength#0"
      ]
    },
    "341": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "newValueLength#0"
      ],
      "stack_out": [
        "newValueLength#0",
        "0"
      ]
    },
    "342": {
      "op": "bytec_0 // \"keyLength\"",
      "stack_out": [
        "newValueLength#0",
        "0",
        "\"keyLength\""
      ]
    },
    "343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "newValueLength#0"
      ],
      "stack_out": [
        "newValueLength#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "344": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newValueLength#0",
        "maybe_value%0#0"
      ]
    },
    "345": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "346": {
      "op": "bytec 5 // \"boxSize\"",
      "defined_out": [
        "\"boxSize\"",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "\"boxSize\""
      ]
    },
    "348": {
      "op": "dig 1",
      "defined_out": [
        "\"boxSize\"",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "\"boxSize\"",
        "tmp%0#1 (copy)"
      ]
    },
    "350": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "351": {
      "op": "intc_3 // 400",
      "defined_out": [
        "400",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "400"
      ]
    },
    "352": {
      "op": "*",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "353": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "2500"
      ]
    },
    "356": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "357": {
      "op": "bytec_1 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"boxMbr\""
      ]
    },
    "358": {
      "op": "swap",
      "stack_out": [
        "\"boxMbr\"",
        "tmp%2#0"
      ]
    },
    "359": {
      "op": "app_global_put",
      "stack_out": []
    },
    "360": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "361": {
      "op": "return",
      "stack_out": []
    }
  }
}