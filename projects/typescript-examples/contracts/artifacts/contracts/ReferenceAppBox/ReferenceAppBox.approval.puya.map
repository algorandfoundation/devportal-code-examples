{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ReferenceAppBox/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBS;AAAuD;;AAA9D;AACO;AAAyD;;AAAhE;AADO;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAagB;AAZhB;AAYL;AAAA;AAZK;AAAA;AAAA;AAAA;AAa0D;AAA5B;AAAR;AAAP;AAZf;AAYL;AAAA;AAlBJ;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAoGG;;AAAA;AAAA;AAAA;;AAAA;AApGH;;;AAAA;AAAA;;;AAAA;AAoGG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAlEH;;;AAAA;AAAA;;AAkEG;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AA3BH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2BG;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA3BH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AA2BE;;;AAGgB;;AAAA;;AAxBT;AAAA;AAAA;AAAA;AAwBE;AAAP;AACc;;AAAA;;AAAoB;;AAA3B;AAAP;AAtB8D;;AAwBC;;AAAV;AAAvB;AAAA;AAAA;AAAA;AAE9B;;;AA1B8D;;AA4B7B;;AAAR;AAAgB;;AAAU;AAAV;AAAvC;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AA7B4D;;AAgC7B;;AAAR;AAAuB;AAA9C;AAAA;AACc;AAAd;AAAA;AAQJ;;;AAzCgE;;AA2CC;;AAAV;AAAvB;AAAA;AAAA;AAAA;AAE9B;;;AACE;;AAAA;AAAA;AAGK;AAAP;AAAA;AAQF;;;AAzDgE;;AA2DT;;AAAA;AAAvB;AAAA;AAAA;AAAA;AAE9B;;;AACE;;AAAA;AAAA;AAGK;AAAP;AAAA;AApEK;AAAA;AAAA;AAAA;AA6EL;AAhFK;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAsFL;AAQF;;;AAjGO;AAmGL;;AAAA;AAlGK;AAmGL;;AAAA;AApGK;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAsGgB;AArGhB;AAqGL;AAAA;AArGK;AAAA;AAAA;AAAA;AAsG0D;AAA5B;AAAR;AAAP;AArGf;AAqGL;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 400 2500"
    },
    "9": {
      "op": "bytecblock \"keyLength\" \"valueLength\" \"boxSize\" \"boxMbr\" 0x151f7c75 \"counter\""
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "66": {
      "op": "bytec_0 // \"keyLength\"",
      "defined_out": [
        "\"keyLength\""
      ],
      "stack_out": [
        "\"keyLength\""
      ]
    },
    "67": {
      "op": "pushint 51 // 51",
      "defined_out": [
        "\"keyLength\"",
        "51"
      ],
      "stack_out": [
        "\"keyLength\"",
        "51"
      ]
    },
    "69": {
      "op": "app_global_put",
      "stack_out": []
    },
    "70": {
      "op": "bytec_1 // \"valueLength\"",
      "defined_out": [
        "\"valueLength\""
      ],
      "stack_out": [
        "\"valueLength\""
      ]
    },
    "71": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "\"valueLength\"",
        "8"
      ],
      "stack_out": [
        "\"valueLength\"",
        "8"
      ]
    },
    "73": {
      "op": "app_global_put",
      "stack_out": []
    },
    "74": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "75": {
      "op": "bytec_0 // \"keyLength\"",
      "stack_out": [
        "0",
        "\"keyLength\""
      ]
    },
    "76": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "77": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "78": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "79": {
      "op": "bytec_1 // \"valueLength\"",
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"valueLength\""
      ]
    },
    "80": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "81": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "82": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "83": {
      "op": "bytec_2 // \"boxSize\"",
      "defined_out": [
        "\"boxSize\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"boxSize\""
      ]
    },
    "84": {
      "op": "swap",
      "stack_out": [
        "\"boxSize\"",
        "new_state_value%0#0"
      ]
    },
    "85": {
      "op": "app_global_put",
      "stack_out": []
    },
    "86": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "87": {
      "op": "bytec_2 // \"boxSize\"",
      "stack_out": [
        "0",
        "\"boxSize\""
      ]
    },
    "88": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "89": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "90": {
      "op": "intc_2 // 400",
      "defined_out": [
        "400",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "400"
      ]
    },
    "91": {
      "op": "*",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "92": {
      "op": "intc_3 // 2500",
      "defined_out": [
        "2500",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "2500"
      ]
    },
    "93": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "94": {
      "op": "bytec_3 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"boxMbr\""
      ]
    },
    "95": {
      "op": "swap",
      "stack_out": [
        "\"boxMbr\"",
        "new_state_value%1#0"
      ]
    },
    "96": {
      "op": "app_global_put",
      "stack_out": []
    },
    "97": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "99": {
      "op": "bz main_bare_routing@13",
      "stack_out": []
    },
    "102": {
      "op": "pushbytess 0x040a235e 0x5425a145 0xb3b4a265 0xbbb5239e 0x1aefe7f5 0x0e385162 // method \"incrementBoxCounter(pay)uint64\", method \"getBoxCounter()uint64\", method \"getBoxCounterForAccount(account)uint64\", method \"getBoxMbr()uint64\", method \"getBoxConfiguration()(uint64,uint64,uint64,uint64)\", method \"updateBoxConfiguration(uint64,uint64)void\"",
      "defined_out": [
        "Method(getBoxConfiguration()(uint64,uint64,uint64,uint64))",
        "Method(getBoxCounter()uint64)",
        "Method(getBoxCounterForAccount(account)uint64)",
        "Method(getBoxMbr()uint64)",
        "Method(incrementBoxCounter(pay)uint64)",
        "Method(updateBoxConfiguration(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(incrementBoxCounter(pay)uint64)",
        "Method(getBoxCounter()uint64)",
        "Method(getBoxCounterForAccount(account)uint64)",
        "Method(getBoxMbr()uint64)",
        "Method(getBoxConfiguration()(uint64,uint64,uint64,uint64))",
        "Method(updateBoxConfiguration(uint64,uint64)void)"
      ]
    },
    "134": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getBoxConfiguration()(uint64,uint64,uint64,uint64))",
        "Method(getBoxCounter()uint64)",
        "Method(getBoxCounterForAccount(account)uint64)",
        "Method(getBoxMbr()uint64)",
        "Method(incrementBoxCounter(pay)uint64)",
        "Method(updateBoxConfiguration(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(incrementBoxCounter(pay)uint64)",
        "Method(getBoxCounter()uint64)",
        "Method(getBoxCounterForAccount(account)uint64)",
        "Method(getBoxMbr()uint64)",
        "Method(getBoxConfiguration()(uint64,uint64,uint64,uint64))",
        "Method(updateBoxConfiguration(uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "137": {
      "op": "match main_incrementBoxCounter_route@5 main_getBoxCounter_route@6 main_getBoxCounterForAccount_route@7 main_getBoxMbr_route@8 main_getBoxConfiguration_route@9 main_updateBoxConfiguration_route@10",
      "stack_out": []
    },
    "151": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "block": "main_updateBoxConfiguration_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "155": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "159": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "160": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "163": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "164": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "167": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "168": {
      "callsub": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.updateBoxConfiguration",
      "op": "callsub updateBoxConfiguration",
      "stack_out": []
    },
    "171": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "return",
      "stack_out": []
    },
    "173": {
      "block": "main_getBoxConfiguration_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "175": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "176": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "177": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "179": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "180": {
      "callsub": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxConfiguration",
      "op": "callsub getBoxConfiguration",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "183": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0"
      ]
    },
    "185": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "186": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "elements_to_encode%1#0"
      ]
    },
    "188": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "189": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%2#0"
      ]
    },
    "191": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "192": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "elements_to_encode%3#0"
      ]
    },
    "194": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "195": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%4#0"
      ]
    },
    "197": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "200": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%7#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "203": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%7#0"
      ]
    },
    "204": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "205": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x151f7c75"
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "208": {
      "op": "concat",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "209": {
      "op": "log",
      "stack_out": []
    },
    "210": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "return",
      "stack_out": []
    },
    "212": {
      "block": "main_getBoxMbr_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "214": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "215": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "216": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "218": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "219": {
      "callsub": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxMbr",
      "op": "callsub getBoxMbr",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "222": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "223": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "225": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "227": {
      "op": "log",
      "stack_out": []
    },
    "228": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "229": {
      "op": "return",
      "stack_out": []
    },
    "230": {
      "block": "main_getBoxCounterForAccount_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "232": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "233": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "234": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "236": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "237": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "240": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "241": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "243": {
      "callsub": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounterForAccount",
      "op": "callsub getBoxCounterForAccount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "246": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "247": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "249": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "251": {
      "op": "log",
      "stack_out": []
    },
    "252": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "253": {
      "op": "return",
      "stack_out": []
    },
    "254": {
      "block": "main_getBoxCounter_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "256": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "257": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "258": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "260": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "261": {
      "callsub": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounter",
      "op": "callsub getBoxCounter",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "264": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "265": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "269": {
      "op": "log",
      "stack_out": []
    },
    "270": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "271": {
      "op": "return",
      "stack_out": []
    },
    "272": {
      "block": "main_incrementBoxCounter_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "274": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "275": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "276": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "278": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "279": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "281": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "282": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "283": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "284": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "286": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "287": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "288": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "289": {
      "callsub": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.incrementBoxCounter",
      "op": "callsub incrementBoxCounter",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "292": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "293": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "295": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "296": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "297": {
      "op": "log",
      "stack_out": []
    },
    "298": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "299": {
      "op": "return",
      "stack_out": []
    },
    "300": {
      "block": "main_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "302": {
      "op": "bnz main_after_if_else@17",
      "stack_out": []
    },
    "305": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "307": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "308": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "309": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "return",
      "stack_out": []
    },
    "311": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.incrementBoxCounter",
      "params": {
        "payMbr#0": "uint64"
      },
      "block": "incrementBoxCounter",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "314": {
      "op": "frame_dig -1",
      "defined_out": [
        "payMbr#0 (copy)"
      ],
      "stack_out": [
        "payMbr#0 (copy)"
      ]
    },
    "316": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "318": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "319": {
      "op": "bytec_3 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"boxMbr\""
      ]
    },
    "320": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "321": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "322": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "323": {
      "error": "Payment must cover the box MBR",
      "op": "assert // Payment must cover the box MBR",
      "stack_out": []
    },
    "324": {
      "op": "frame_dig -1",
      "stack_out": [
        "payMbr#0 (copy)"
      ]
    },
    "326": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "328": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "330": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "331": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": []
    },
    "332": {
      "op": "bytec 5 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "334": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "\"counter\"",
        "tmp%5#0"
      ]
    },
    "336": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "337": {
      "op": "box_get",
      "defined_out": [
        "hasCounter#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "hasCounter#0"
      ]
    },
    "338": {
      "op": "swap",
      "stack_out": [
        "hasCounter#0",
        "maybe_value%1#0"
      ]
    },
    "339": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "hasCounter#0",
        "counter#0"
      ]
    },
    "340": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "counter#0",
        "hasCounter#0"
      ]
    },
    "341": {
      "op": "bz incrementBoxCounter_else_body@2",
      "stack_out": [
        "counter#0"
      ]
    },
    "344": {
      "op": "bytec 5 // \"counter\"",
      "stack_out": [
        "counter#0",
        "\"counter\""
      ]
    },
    "346": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "counter#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "counter#0",
        "\"counter\"",
        "tmp%7#0"
      ]
    },
    "348": {
      "op": "concat",
      "defined_out": [
        "counter#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%8#0"
      ]
    },
    "349": {
      "op": "frame_dig 0",
      "stack_out": [
        "counter#0",
        "tmp%8#0",
        "counter#0"
      ]
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "counter#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%8#0",
        "counter#0",
        "1"
      ]
    },
    "352": {
      "op": "+",
      "defined_out": [
        "counter#0",
        "new_box_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%8#0",
        "new_box_value%0#0"
      ]
    },
    "353": {
      "op": "dup",
      "defined_out": [
        "counter#0",
        "new_box_value%0#0",
        "new_box_value%0#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%8#0",
        "new_box_value%0#0",
        "new_box_value%0#0 (copy)"
      ]
    },
    "354": {
      "op": "itob",
      "defined_out": [
        "counter#0",
        "new_box_value%0#0",
        "new_box_value%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%8#0",
        "new_box_value%0#0",
        "new_box_value%1#0"
      ]
    },
    "355": {
      "op": "uncover 2",
      "stack_out": [
        "counter#0",
        "new_box_value%0#0",
        "new_box_value%1#0",
        "tmp%8#0"
      ]
    },
    "357": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "new_box_value%0#0",
        "tmp%8#0",
        "new_box_value%1#0"
      ]
    },
    "358": {
      "op": "box_put",
      "stack_out": [
        "counter#0",
        "new_box_value%0#0"
      ]
    },
    "359": {
      "op": "swap"
    },
    "360": {
      "retsub": true,
      "op": "retsub"
    },
    "361": {
      "block": "incrementBoxCounter_else_body@2",
      "stack_in": [
        "counter#0"
      ],
      "op": "bytec 5 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "counter#0",
        "\"counter\""
      ]
    },
    "363": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "tmp%10#0"
      ],
      "stack_out": [
        "counter#0",
        "\"counter\"",
        "tmp%10#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%11#0"
      ]
    },
    "366": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%11#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%11#0",
        "1"
      ]
    },
    "367": {
      "op": "itob",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%11#0",
        "new_box_value%2#0"
      ]
    },
    "368": {
      "op": "box_put",
      "stack_out": [
        "counter#0"
      ]
    },
    "369": {
      "op": "intc_1 // 1",
      "stack_out": [
        "counter#0",
        "1"
      ]
    },
    "370": {
      "op": "swap"
    },
    "371": {
      "retsub": true,
      "op": "retsub"
    },
    "372": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounter",
      "params": {},
      "block": "getBoxCounter",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "375": {
      "op": "bytec 5 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "377": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"counter\"",
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "380": {
      "op": "box_get",
      "defined_out": [
        "hasCounter#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "hasCounter#0"
      ]
    },
    "381": {
      "op": "swap",
      "stack_out": [
        "hasCounter#0",
        "maybe_value%0#0"
      ]
    },
    "382": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "hasCounter#0",
        "counter#0"
      ]
    },
    "383": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "counter#0",
        "hasCounter#0"
      ]
    },
    "384": {
      "op": "bz getBoxCounter_after_if_else@2",
      "stack_out": [
        "counter#0"
      ]
    },
    "387": {
      "op": "frame_dig 0",
      "stack_out": [
        "counter#0",
        "counter#0"
      ]
    },
    "389": {
      "op": "swap"
    },
    "390": {
      "retsub": true,
      "op": "retsub"
    },
    "391": {
      "block": "getBoxCounter_after_if_else@2",
      "stack_in": [
        "counter#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "counter#0",
        "0"
      ]
    },
    "392": {
      "op": "swap"
    },
    "393": {
      "retsub": true,
      "op": "retsub"
    },
    "394": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounterForAccount",
      "params": {
        "account#0": "bytes"
      },
      "block": "getBoxCounterForAccount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "397": {
      "op": "bytec 5 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "399": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"counter\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"counter\"",
        "account#0 (copy)"
      ]
    },
    "401": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "402": {
      "op": "box_get",
      "defined_out": [
        "hasCounter#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "hasCounter#0"
      ]
    },
    "403": {
      "op": "swap",
      "stack_out": [
        "hasCounter#0",
        "maybe_value%0#0"
      ]
    },
    "404": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "hasCounter#0",
        "counter#0"
      ]
    },
    "405": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "hasCounter#0"
      ],
      "stack_out": [
        "counter#0",
        "hasCounter#0"
      ]
    },
    "406": {
      "op": "bz getBoxCounterForAccount_after_if_else@2",
      "stack_out": [
        "counter#0"
      ]
    },
    "409": {
      "op": "frame_dig 0",
      "stack_out": [
        "counter#0",
        "counter#0"
      ]
    },
    "411": {
      "op": "swap"
    },
    "412": {
      "retsub": true,
      "op": "retsub"
    },
    "413": {
      "block": "getBoxCounterForAccount_after_if_else@2",
      "stack_in": [
        "counter#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "counter#0",
        "0"
      ]
    },
    "414": {
      "op": "swap"
    },
    "415": {
      "retsub": true,
      "op": "retsub"
    },
    "416": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxMbr",
      "params": {},
      "block": "getBoxMbr",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "417": {
      "op": "bytec_3 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"boxMbr\""
      ]
    },
    "418": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "419": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "420": {
      "retsub": true,
      "op": "retsub"
    },
    "421": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxConfiguration",
      "params": {},
      "block": "getBoxConfiguration",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "422": {
      "op": "bytec_0 // \"keyLength\"",
      "defined_out": [
        "\"keyLength\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"keyLength\""
      ]
    },
    "423": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "424": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "426": {
      "op": "bytec_1 // \"valueLength\"",
      "defined_out": [
        "\"valueLength\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"valueLength\""
      ]
    },
    "427": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "428": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "429": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "430": {
      "op": "bytec_2 // \"boxSize\"",
      "defined_out": [
        "\"boxSize\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"boxSize\""
      ]
    },
    "431": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "432": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "433": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "434": {
      "op": "bytec_3 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"boxMbr\""
      ]
    },
    "435": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "436": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "437": {
      "retsub": true,
      "op": "retsub"
    },
    "438": {
      "subroutine": "contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.updateBoxConfiguration",
      "params": {
        "newKeyLength#0": "uint64",
        "newValueLength#0": "uint64"
      },
      "block": "updateBoxConfiguration",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "441": {
      "op": "bytec_0 // \"keyLength\"",
      "defined_out": [
        "\"keyLength\""
      ],
      "stack_out": [
        "\"keyLength\""
      ]
    },
    "442": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"keyLength\"",
        "newKeyLength#0 (copy)"
      ],
      "stack_out": [
        "\"keyLength\"",
        "newKeyLength#0 (copy)"
      ]
    },
    "444": {
      "op": "app_global_put",
      "stack_out": []
    },
    "445": {
      "op": "bytec_1 // \"valueLength\"",
      "defined_out": [
        "\"valueLength\""
      ],
      "stack_out": [
        "\"valueLength\""
      ]
    },
    "446": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"valueLength\"",
        "newValueLength#0 (copy)"
      ],
      "stack_out": [
        "\"valueLength\"",
        "newValueLength#0 (copy)"
      ]
    },
    "448": {
      "op": "app_global_put",
      "stack_out": []
    },
    "449": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "450": {
      "op": "bytec_0 // \"keyLength\"",
      "stack_out": [
        "0",
        "\"keyLength\""
      ]
    },
    "451": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "452": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "453": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "454": {
      "op": "bytec_1 // \"valueLength\"",
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"valueLength\""
      ]
    },
    "455": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "456": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "457": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "458": {
      "op": "bytec_2 // \"boxSize\"",
      "defined_out": [
        "\"boxSize\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"boxSize\""
      ]
    },
    "459": {
      "op": "swap",
      "stack_out": [
        "\"boxSize\"",
        "new_state_value%0#0"
      ]
    },
    "460": {
      "op": "app_global_put",
      "stack_out": []
    },
    "461": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "462": {
      "op": "bytec_2 // \"boxSize\"",
      "stack_out": [
        "0",
        "\"boxSize\""
      ]
    },
    "463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "464": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "465": {
      "op": "intc_2 // 400",
      "defined_out": [
        "400",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "400"
      ]
    },
    "466": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "467": {
      "op": "intc_3 // 2500",
      "defined_out": [
        "2500",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2500"
      ]
    },
    "468": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "469": {
      "op": "bytec_3 // \"boxMbr\"",
      "defined_out": [
        "\"boxMbr\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"boxMbr\""
      ]
    },
    "470": {
      "op": "swap",
      "stack_out": [
        "\"boxMbr\"",
        "new_state_value%1#0"
      ]
    },
    "471": {
      "op": "app_global_put",
      "stack_out": []
    },
    "472": {
      "retsub": true,
      "op": "retsub"
    }
  }
}