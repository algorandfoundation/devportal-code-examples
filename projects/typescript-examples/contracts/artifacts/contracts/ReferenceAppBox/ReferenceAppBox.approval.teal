#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 400 2500
    bytecblock "keyLength" "valueLength" "boxSize" "boxMbr" 0x151f7c75 "counter"
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/ReferenceAppBox/contract.algo.ts:24
    // public keyLength = GlobalState<uint64>({ initialValue: Uint64(32 + 19) }) // Account address (32 bytes) + key prefix overhead (19 bytes)
    bytec_0 // "keyLength"
    pushint 51 // 51
    app_global_put
    // contracts/ReferenceAppBox/contract.algo.ts:25
    // public valueLength = GlobalState<uint64>({ initialValue: Uint64(8) }) // uint64 (8 bytes)
    bytec_1 // "valueLength"
    pushint 8 // 8
    app_global_put
    // contracts/ReferenceAppBox/contract.algo.ts:24
    // public keyLength = GlobalState<uint64>({ initialValue: Uint64(32 + 19) }) // Account address (32 bytes) + key prefix overhead (19 bytes)
    intc_0 // 0
    bytec_0 // "keyLength"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:25
    // public valueLength = GlobalState<uint64>({ initialValue: Uint64(8) }) // uint64 (8 bytes)
    intc_0 // 0
    bytec_1 // "valueLength"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:38
    // this.boxSize.value = this.keyLength.value + this.valueLength.value
    +
    // contracts/ReferenceAppBox/contract.algo.ts:26
    // public boxSize = GlobalState<uint64>() // Calculated in constructor
    bytec_2 // "boxSize"
    // contracts/ReferenceAppBox/contract.algo.ts:38
    // this.boxSize.value = this.keyLength.value + this.valueLength.value
    swap
    app_global_put
    // contracts/ReferenceAppBox/contract.algo.ts:26
    // public boxSize = GlobalState<uint64>() // Calculated in constructor
    intc_0 // 0
    bytec_2 // "boxSize"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:39
    // this.boxMbr.value = Uint64(2500) + this.boxSize.value * Uint64(400) // Base MBR + (size * per-byte cost)
    intc_2 // 400
    *
    intc_3 // 2500
    +
    // contracts/ReferenceAppBox/contract.algo.ts:27
    // public boxMbr = GlobalState<uint64>() // Calculated in constructor
    bytec_3 // "boxMbr"
    // contracts/ReferenceAppBox/contract.algo.ts:39
    // this.boxMbr.value = Uint64(2500) + this.boxSize.value * Uint64(400) // Base MBR + (size * per-byte cost)
    swap
    app_global_put

main_after_if_else@2:
    // contracts/ReferenceAppBox/contract.algo.ts:21-22
    // @contract({ stateTotals: { globalUints: 4 } })
    // export default class ReferenceAppBox extends Contract {
    txn NumAppArgs
    bz main_bare_routing@13
    pushbytess 0x040a235e 0x5425a145 0xb3b4a265 0xbbb5239e 0x1aefe7f5 0x0e385162 // method "incrementBoxCounter(pay)uint64", method "getBoxCounter()uint64", method "getBoxCounterForAccount(account)uint64", method "getBoxMbr()uint64", method "getBoxConfiguration()(uint64,uint64,uint64,uint64)", method "updateBoxConfiguration(uint64,uint64)void"
    txna ApplicationArgs 0
    match main_incrementBoxCounter_route@5 main_getBoxCounter_route@6 main_getBoxCounterForAccount_route@7 main_getBoxMbr_route@8 main_getBoxConfiguration_route@9 main_updateBoxConfiguration_route@10

main_after_if_else@17:
    // contracts/ReferenceAppBox/contract.algo.ts:21-22
    // @contract({ stateTotals: { globalUints: 4 } })
    // export default class ReferenceAppBox extends Contract {
    intc_0 // 0
    return

main_updateBoxConfiguration_route@10:
    // contracts/ReferenceAppBox/contract.algo.ts:121
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/ReferenceAppBox/contract.algo.ts:21-22
    // @contract({ stateTotals: { globalUints: 4 } })
    // export default class ReferenceAppBox extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // contracts/ReferenceAppBox/contract.algo.ts:121
    // @abimethod()
    callsub updateBoxConfiguration
    intc_1 // 1
    return

main_getBoxConfiguration_route@9:
    // contracts/ReferenceAppBox/contract.algo.ts:111
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getBoxConfiguration
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getBoxMbr_route@8:
    // contracts/ReferenceAppBox/contract.algo.ts:102
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getBoxMbr
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getBoxCounterForAccount_route@7:
    // contracts/ReferenceAppBox/contract.algo.ts:87
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/ReferenceAppBox/contract.algo.ts:21-22
    // @contract({ stateTotals: { globalUints: 4 } })
    // export default class ReferenceAppBox extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // contracts/ReferenceAppBox/contract.algo.ts:87
    // @abimethod({ readonly: true })
    callsub getBoxCounterForAccount
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getBoxCounter_route@6:
    // contracts/ReferenceAppBox/contract.algo.ts:71
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getBoxCounter
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_incrementBoxCounter_route@5:
    // contracts/ReferenceAppBox/contract.algo.ts:48
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/ReferenceAppBox/contract.algo.ts:21-22
    // @contract({ stateTotals: { globalUints: 4 } })
    // export default class ReferenceAppBox extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // contracts/ReferenceAppBox/contract.algo.ts:48
    // @abimethod()
    callsub incrementBoxCounter
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@13:
    // contracts/ReferenceAppBox/contract.algo.ts:21-22
    // @contract({ stateTotals: { globalUints: 4 } })
    // export default class ReferenceAppBox extends Contract {
    txn OnCompletion
    bnz main_after_if_else@17
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.incrementBoxCounter(payMbr: uint64) -> uint64:
incrementBoxCounter:
    // contracts/ReferenceAppBox/contract.algo.ts:48-49
    // @abimethod()
    // public incrementBoxCounter(payMbr: gtxn.PaymentTxn): uint64 {
    proto 1 1
    // contracts/ReferenceAppBox/contract.algo.ts:51
    // assert(payMbr.amount === this.boxMbr.value, 'Payment must cover the box MBR')
    frame_dig -1
    gtxns Amount
    // contracts/ReferenceAppBox/contract.algo.ts:27
    // public boxMbr = GlobalState<uint64>() // Calculated in constructor
    intc_0 // 0
    bytec_3 // "boxMbr"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:51
    // assert(payMbr.amount === this.boxMbr.value, 'Payment must cover the box MBR')
    ==
    assert // Payment must cover the box MBR
    // contracts/ReferenceAppBox/contract.algo.ts:52
    // assert(payMbr.receiver === Global.currentApplicationAddress, 'Payment must be to the contract')
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to the contract
    // contracts/ReferenceAppBox/contract.algo.ts:30
    // public accountBoxCounter = BoxMap<Account, uint64>({ keyPrefix: 'counter' })
    bytec 5 // "counter"
    // contracts/ReferenceAppBox/contract.algo.ts:54
    // const [counter, hasCounter] = this.accountBoxCounter.maybe(Txn.sender)
    txn Sender
    concat
    box_get
    swap
    btoi
    swap
    // contracts/ReferenceAppBox/contract.algo.ts:56
    // if (hasCounter) {
    bz incrementBoxCounter_else_body@2
    // contracts/ReferenceAppBox/contract.algo.ts:30
    // public accountBoxCounter = BoxMap<Account, uint64>({ keyPrefix: 'counter' })
    bytec 5 // "counter"
    // contracts/ReferenceAppBox/contract.algo.ts:58
    // this.accountBoxCounter.set(Txn.sender, counter + 1)
    txn Sender
    concat
    frame_dig 0
    intc_1 // 1
    +
    dup
    itob
    uncover 2
    swap
    box_put
    // contracts/ReferenceAppBox/contract.algo.ts:59
    // return counter + 1
    swap
    retsub

incrementBoxCounter_else_body@2:
    // contracts/ReferenceAppBox/contract.algo.ts:30
    // public accountBoxCounter = BoxMap<Account, uint64>({ keyPrefix: 'counter' })
    bytec 5 // "counter"
    // contracts/ReferenceAppBox/contract.algo.ts:62
    // this.accountBoxCounter.set(Txn.sender, Uint64(1))
    txn Sender
    concat
    intc_1 // 1
    itob
    box_put
    // contracts/ReferenceAppBox/contract.algo.ts:63
    // return Uint64(1)
    intc_1 // 1
    swap
    retsub


// contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounter() -> uint64:
getBoxCounter:
    // contracts/ReferenceAppBox/contract.algo.ts:71-72
    // @abimethod({ readonly: true })
    // public getBoxCounter(): uint64 {
    proto 0 1
    // contracts/ReferenceAppBox/contract.algo.ts:30
    // public accountBoxCounter = BoxMap<Account, uint64>({ keyPrefix: 'counter' })
    bytec 5 // "counter"
    // contracts/ReferenceAppBox/contract.algo.ts:73
    // const [counter, hasCounter] = this.accountBoxCounter.maybe(Txn.sender)
    txn Sender
    concat
    box_get
    swap
    btoi
    swap
    // contracts/ReferenceAppBox/contract.algo.ts:75
    // if (hasCounter) {
    bz getBoxCounter_after_if_else@2
    // contracts/ReferenceAppBox/contract.algo.ts:76
    // return counter
    frame_dig 0
    swap
    retsub

getBoxCounter_after_if_else@2:
    // contracts/ReferenceAppBox/contract.algo.ts:79
    // return 0
    intc_0 // 0
    swap
    retsub


// contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxCounterForAccount(account: bytes) -> uint64:
getBoxCounterForAccount:
    // contracts/ReferenceAppBox/contract.algo.ts:87-88
    // @abimethod({ readonly: true })
    // public getBoxCounterForAccount(account: Account): uint64 {
    proto 1 1
    // contracts/ReferenceAppBox/contract.algo.ts:30
    // public accountBoxCounter = BoxMap<Account, uint64>({ keyPrefix: 'counter' })
    bytec 5 // "counter"
    // contracts/ReferenceAppBox/contract.algo.ts:89
    // const [counter, hasCounter] = this.accountBoxCounter.maybe(account)
    frame_dig -1
    concat
    box_get
    swap
    btoi
    swap
    // contracts/ReferenceAppBox/contract.algo.ts:91
    // if (hasCounter) {
    bz getBoxCounterForAccount_after_if_else@2
    // contracts/ReferenceAppBox/contract.algo.ts:92
    // return counter
    frame_dig 0
    swap
    retsub

getBoxCounterForAccount_after_if_else@2:
    // contracts/ReferenceAppBox/contract.algo.ts:95
    // return 0
    intc_0 // 0
    swap
    retsub


// contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxMbr() -> uint64:
getBoxMbr:
    // contracts/ReferenceAppBox/contract.algo.ts:27
    // public boxMbr = GlobalState<uint64>() // Calculated in constructor
    intc_0 // 0
    bytec_3 // "boxMbr"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:104
    // return this.boxMbr.value
    retsub


// contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.getBoxConfiguration() -> uint64, uint64, uint64, uint64:
getBoxConfiguration:
    // contracts/ReferenceAppBox/contract.algo.ts:24
    // public keyLength = GlobalState<uint64>({ initialValue: Uint64(32 + 19) }) // Account address (32 bytes) + key prefix overhead (19 bytes)
    intc_0 // 0
    bytec_0 // "keyLength"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:25
    // public valueLength = GlobalState<uint64>({ initialValue: Uint64(8) }) // uint64 (8 bytes)
    intc_0 // 0
    bytec_1 // "valueLength"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:26
    // public boxSize = GlobalState<uint64>() // Calculated in constructor
    intc_0 // 0
    bytec_2 // "boxSize"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:27
    // public boxMbr = GlobalState<uint64>() // Calculated in constructor
    intc_0 // 0
    bytec_3 // "boxMbr"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:113
    // return [this.keyLength.value, this.valueLength.value, this.boxSize.value, this.boxMbr.value]
    retsub


// contracts/ReferenceAppBox/contract.algo.ts::ReferenceAppBox.updateBoxConfiguration(newKeyLength: uint64, newValueLength: uint64) -> void:
updateBoxConfiguration:
    // contracts/ReferenceAppBox/contract.algo.ts:121-122
    // @abimethod()
    // public updateBoxConfiguration(newKeyLength: uint64, newValueLength: uint64): void {
    proto 2 0
    // contracts/ReferenceAppBox/contract.algo.ts:24
    // public keyLength = GlobalState<uint64>({ initialValue: Uint64(32 + 19) }) // Account address (32 bytes) + key prefix overhead (19 bytes)
    bytec_0 // "keyLength"
    // contracts/ReferenceAppBox/contract.algo.ts:123
    // this.keyLength.value = newKeyLength
    frame_dig -2
    app_global_put
    // contracts/ReferenceAppBox/contract.algo.ts:25
    // public valueLength = GlobalState<uint64>({ initialValue: Uint64(8) }) // uint64 (8 bytes)
    bytec_1 // "valueLength"
    // contracts/ReferenceAppBox/contract.algo.ts:124
    // this.valueLength.value = newValueLength
    frame_dig -1
    app_global_put
    // contracts/ReferenceAppBox/contract.algo.ts:24
    // public keyLength = GlobalState<uint64>({ initialValue: Uint64(32 + 19) }) // Account address (32 bytes) + key prefix overhead (19 bytes)
    intc_0 // 0
    bytec_0 // "keyLength"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:25
    // public valueLength = GlobalState<uint64>({ initialValue: Uint64(8) }) // uint64 (8 bytes)
    intc_0 // 0
    bytec_1 // "valueLength"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:127
    // this.boxSize.value = this.keyLength.value + this.valueLength.value
    +
    // contracts/ReferenceAppBox/contract.algo.ts:26
    // public boxSize = GlobalState<uint64>() // Calculated in constructor
    bytec_2 // "boxSize"
    // contracts/ReferenceAppBox/contract.algo.ts:127
    // this.boxSize.value = this.keyLength.value + this.valueLength.value
    swap
    app_global_put
    // contracts/ReferenceAppBox/contract.algo.ts:26
    // public boxSize = GlobalState<uint64>() // Calculated in constructor
    intc_0 // 0
    bytec_2 // "boxSize"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/ReferenceAppBox/contract.algo.ts:128
    // this.boxMbr.value = Uint64(2500) + this.boxSize.value * Uint64(400)
    intc_2 // 400
    *
    intc_3 // 2500
    +
    // contracts/ReferenceAppBox/contract.algo.ts:27
    // public boxMbr = GlobalState<uint64>() // Calculated in constructor
    bytec_3 // "boxMbr"
    // contracts/ReferenceAppBox/contract.algo.ts:128
    // this.boxMbr.value = Uint64(2500) + this.boxSize.value * Uint64(400)
    swap
    app_global_put
    retsub
