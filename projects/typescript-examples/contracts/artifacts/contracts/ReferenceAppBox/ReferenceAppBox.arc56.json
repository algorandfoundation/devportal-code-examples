{
    "name": "ReferenceAppBox",
    "structs": {},
    "methods": [
        {
            "name": "incrementBoxCounter",
            "args": [
                {
                    "type": "pay",
                    "name": "payMbr",
                    "desc": "Payment transaction covering the box MBR"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The new counter value"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Increments the counter for the transaction sender\nRequires a payment transaction to cover the MBR for the box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxCounter",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The current counter value or 0 if not set"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Gets the current counter value for the transaction sender",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxCounterForAccount",
            "args": [
                {
                    "type": "account",
                    "name": "account",
                    "desc": "The account to check"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The current counter value or 0 if not set"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Gets the current counter value for any account",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxMbr",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The MBR cost in microAlgos"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the MBR cost for creating a box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxConfiguration",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)",
                "desc": "A tuple containing [keyLength, valueLength, boxSize, boxMbr]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns all the box size configuration values",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateBoxConfiguration",
            "args": [
                {
                    "type": "uint64",
                    "name": "newKeyLength",
                    "desc": "The new key length"
                },
                {
                    "type": "uint64",
                    "name": "newValueLength",
                    "desc": "The new value length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Updates the box size configuration values",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "A contract that uses box storage to maintain a counter for each account\nEach account needs to pay for the Minimum Balance Requirement (MBR) for their box\nConstants for box storage are stored in global state",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "keyLength": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "a2V5TGVuZ3Ro"
                },
                "valueLength": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dmFsdWVMZW5ndGg="
                },
                "boxSize": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym94U2l6ZQ=="
                },
                "boxMbr": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym94TWJy"
                }
            },
            "local": {},
            "box": {
                "accountBoxCounter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnRlcg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        156,
                        176,
                        215,
                        233,
                        257,
                        275
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        331
                    ],
                    "errorMessage": "Payment must be to the contract"
                },
                {
                    "pc": [
                        323
                    ],
                    "errorMessage": "Payment must cover the box MBR"
                },
                {
                    "pc": [
                        308
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        159,
                        179,
                        218,
                        236,
                        260,
                        278
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        77,
                        81,
                        89,
                        321,
                        419,
                        424,
                        428,
                        432,
                        436,
                        452,
                        456,
                        464
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        288
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAGQA8QTJgYJa2V5TGVuZ3RoC3ZhbHVlTGVuZ3RoB2JveFNpemUGYm94TWJyBBUffHUHY291bnRlcjEYQAAfKIEzZymBCGciKGVEIillRAgqTGciKmVEJAslCCtMZzEbQQDGggYEBAojXgRUJaFFBLO0omUEu7UjngQa7+f1BA44UWI2GgCOBgB5AGcATwA9ABYAAiJDMRkURDEYRDYaARc2GgIXiAELI0MxGRREMRhEiADuTwMWTwMWTwMWTwMWTwNPA1BPAlBMUCcETFCwI0MxGRREMRhEiADCFicETFCwI0MxGRREMRhENhoBF8AciACUFicETFCwI0MxGRREMRhEiABsFicETFCwI0MxGRREMRhEMRYjCUk4ECMSRIgAExYnBExQsCNDMRlA/2YxGBREI0OKAQGL/zgIIitlRBJEi/84BzIKEkQnBTEAUL5MF0xBABEnBTEAUIsAIwhJFk8CTL9MiScFMQBQIxa/I0yJigABJwUxAFC+TBdMQQAEiwBMiSJMiYoBAScFi/9QvkwXTEEABIsATIkiTIkiK2VEiSIoZUQiKWVEIiplRCIrZUSJigIAKIv+ZymL/2ciKGVEIillRAgqTGciKmVEJAslCCtMZ4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}