{
    "hints": {
        "incrementBoxCounter(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBoxCounter()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBoxCounterForAccount(account)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBoxMbr()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBoxConfiguration()(uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateBoxConfiguration(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "boxMbr": {
                    "type": "uint64",
                    "key": "boxMbr"
                },
                "boxSize": {
                    "type": "uint64",
                    "key": "boxSize"
                },
                "keyLength": {
                    "type": "uint64",
                    "key": "keyLength"
                },
                "valueLength": {
                    "type": "uint64",
                    "key": "valueLength"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ReferenceAppBox",
        "desc": "A contract that uses box storage to maintain a counter for each account\nEach account needs to pay for the Minimum Balance Requirement (MBR) for their box\nConstants for box storage are stored in global state",
        "methods": [
            {
                "name": "incrementBoxCounter",
                "args": [
                    {
                        "type": "pay",
                        "name": "payMbr",
                        "desc": "Payment transaction covering the box MBR"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The new counter value"
                },
                "desc": "Increments the counter for the transaction sender\nRequires a payment transaction to cover the MBR for the box"
            },
            {
                "name": "getBoxCounter",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The current counter value or 0 if not set"
                },
                "desc": "Gets the current counter value for the transaction sender"
            },
            {
                "name": "getBoxCounterForAccount",
                "args": [
                    {
                        "type": "account",
                        "name": "account",
                        "desc": "The account to check"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The current counter value or 0 if not set"
                },
                "desc": "Gets the current counter value for any account"
            },
            {
                "name": "getBoxMbr",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The MBR cost in microAlgos"
                },
                "desc": "Returns the MBR cost for creating a box"
            },
            {
                "name": "getBoxConfiguration",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)",
                    "desc": "A tuple containing [keyLength, valueLength, boxSize, boxMbr]"
                },
                "desc": "Returns all the box size configuration values"
            },
            {
                "name": "updateBoxConfiguration",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newKeyLength",
                        "desc": "The new key length"
                    },
                    {
                        "type": "uint64",
                        "name": "newValueLength",
                        "desc": "The new value length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the box size configuration values"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}