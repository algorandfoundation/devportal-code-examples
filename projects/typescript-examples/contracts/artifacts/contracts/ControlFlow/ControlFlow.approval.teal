#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 8 2
    bytecblock 0x151f7c75 0x0000 0x0001
    // contracts/ControlFlow/contract.algo.ts:17
    // export default class ControlFlow extends Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654 // method "isRich(uint64)string", method "isEven(uint64)string", method "forLoop()uint64[]", method "getDay(uint64)string", method "calculateBoxStorageCost(string,string)uint64", method "loop()uint64"
    txna ApplicationArgs 0
    match main_isRich_route@3 main_isEven_route@4 main_forLoop_route@5 main_getDay_route@6 main_calculateBoxStorageCost_route@7 main_loop_route@8

main_after_if_else@15:
    err

main_loop_route@8:
    // contracts/ControlFlow/contract.algo.ts:176
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub loop
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_calculateBoxStorageCost_route@7:
    // contracts/ControlFlow/contract.algo.ts:125
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/ControlFlow/contract.algo.ts:17
    // export default class ControlFlow extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // contracts/ControlFlow/contract.algo.ts:125
    // @arc4.abimethod({ readonly: true })
    callsub calculateBoxStorageCost
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_getDay_route@6:
    // contracts/ControlFlow/contract.algo.ts:92
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/ControlFlow/contract.algo.ts:17
    // export default class ControlFlow extends Contract {
    txna ApplicationArgs 1
    btoi
    // contracts/ControlFlow/contract.algo.ts:92
    // @arc4.abimethod({ readonly: true })
    callsub getDay
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_forLoop_route@5:
    // contracts/ControlFlow/contract.algo.ts:53
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub forLoop
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_isEven_route@4:
    // contracts/ControlFlow/contract.algo.ts:42
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/ControlFlow/contract.algo.ts:17
    // export default class ControlFlow extends Contract {
    txna ApplicationArgs 1
    btoi
    // contracts/ControlFlow/contract.algo.ts:42
    // @arc4.abimethod({ readonly: true })
    callsub isEven
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_isRich_route@3:
    // contracts/ControlFlow/contract.algo.ts:24
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/ControlFlow/contract.algo.ts:17
    // export default class ControlFlow extends Contract {
    txna ApplicationArgs 1
    btoi
    // contracts/ControlFlow/contract.algo.ts:24
    // @arc4.abimethod({ readonly: true })
    callsub isRich
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@11:
    // contracts/ControlFlow/contract.algo.ts:17
    // export default class ControlFlow extends Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich(accountBalance: uint64) -> bytes:
isRich:
    // contracts/ControlFlow/contract.algo.ts:24-25
    // @arc4.abimethod({ readonly: true })
    // public isRich(accountBalance: uint64): string {
    proto 1 1
    // contracts/ControlFlow/contract.algo.ts:26
    // if (accountBalance > 1000) {
    frame_dig -1
    pushint 1000 // 1000
    >
    bz isRich_else_body@2
    // contracts/ControlFlow/contract.algo.ts:27
    // return 'This account is rich!'
    pushbytes "This account is rich!"
    retsub

isRich_else_body@2:
    // contracts/ControlFlow/contract.algo.ts:28
    // } else if (accountBalance > 100) {
    frame_dig -1
    pushint 100 // 100
    >
    bz isRich_else_body@4
    // contracts/ControlFlow/contract.algo.ts:29
    // return 'This account is doing well.'
    pushbytes "This account is doing well."
    retsub

isRich_else_body@4:
    // contracts/ControlFlow/contract.algo.ts:31
    // return 'This account is poor :('
    pushbytes "This account is poor :("
    retsub


// contracts/ControlFlow/contract.algo.ts::ControlFlow.isEven(number: uint64) -> bytes:
isEven:
    // contracts/ControlFlow/contract.algo.ts:42-43
    // @arc4.abimethod({ readonly: true })
    // public isEven(number: uint64): string {
    proto 1 1
    // contracts/ControlFlow/contract.algo.ts:44
    // return number % 2 === 0 ? 'Even' : 'Odd'
    frame_dig -1
    intc_3 // 2
    %
    bnz isEven_ternary_false@2
    pushbytes "Even"
    retsub

isEven_ternary_false@2:
    // contracts/ControlFlow/contract.algo.ts:44
    // return number % 2 === 0 ? 'Even' : 'Odd'
    pushbytes "Odd"
    retsub


// contracts/ControlFlow/contract.algo.ts::ControlFlow.forLoop() -> bytes:
forLoop:
    // contracts/ControlFlow/contract.algo.ts:53-54
    // @arc4.abimethod({ readonly: true })
    // public forLoop(): uint64[] {
    proto 0 1
    intc_1 // 0
    pushbytes ""
    dupn 4
    // contracts/ControlFlow/contract.algo.ts:56
    // let numbers: uint64[] = []
    bytec_1 // 0x0000
    // contracts/ControlFlow/contract.algo.ts:59
    // for (const item of urange(4)) {
    intc_1 // 0
    // contracts/ControlFlow/contract.algo.ts:56
    // let numbers: uint64[] = []
    bytec_1 // 0x0000

forLoop_for_header@1:
    // contracts/ControlFlow/contract.algo.ts:59
    // for (const item of urange(4)) {
    frame_dig 7
    pushint 4 // 4
    <
    bz forLoop_after_for@4
    // contracts/ControlFlow/contract.algo.ts:60
    // numbers = [...numbers, item]
    frame_dig 7
    dup
    itob
    bytec_2 // 0x0001
    swap
    concat
    extract 2 0
    frame_dig 8
    swap
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    replace2 0
    frame_bury 8
    // contracts/ControlFlow/contract.algo.ts:59
    // for (const item of urange(4)) {
    intc_0 // 1
    +
    frame_bury 7
    b forLoop_for_header@1

forLoop_after_for@4:
    // contracts/ControlFlow/contract.algo.ts:68
    // for (const num of numbers) {
    frame_dig 8
    intc_1 // 0
    extract_uint16
    frame_bury 1
    intc_1 // 0
    frame_bury 3
    frame_dig 6
    frame_bury 0

forLoop_for_header@5:
    // contracts/ControlFlow/contract.algo.ts:68
    // for (const num of numbers) {
    frame_dig 3
    frame_dig 1
    <
    bz forLoop_after_for@8
    frame_dig 8
    extract 2 0
    frame_dig 3
    dup
    cover 2
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    // contracts/ControlFlow/contract.algo.ts:70
    // reversed = [num, ...reversed]
    bytec_2 // 0x0001
    swap
    concat
    frame_dig 0
    extract 2 0
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    replace2 0
    frame_bury 0
    intc_0 // 1
    +
    frame_bury 3
    b forLoop_for_header@5

forLoop_after_for@8:
    // contracts/ControlFlow/contract.algo.ts:74
    // let sum: uint64 = 0
    intc_1 // 0
    frame_bury 5
    // contracts/ControlFlow/contract.algo.ts:75
    // for (const num of reversed) {
    frame_dig 0
    intc_1 // 0
    extract_uint16
    frame_bury 2
    intc_1 // 0
    frame_bury 4

forLoop_for_header@9:
    // contracts/ControlFlow/contract.algo.ts:75
    // for (const num of reversed) {
    frame_dig 4
    frame_dig 2
    <
    bz forLoop_after_for@12
    frame_dig 0
    extract 2 0
    frame_dig 4
    dup
    cover 2
    intc_2 // 8
    *
    extract_uint64
    // contracts/ControlFlow/contract.algo.ts:76
    // sum += num
    frame_dig 5
    +
    frame_bury 5
    intc_0 // 1
    +
    frame_bury 4
    b forLoop_for_header@9

forLoop_after_for@12:
    // contracts/ControlFlow/contract.algo.ts:80
    // assert(sum === 6, 'Sum of reversed array should be 6')
    frame_dig 5
    pushint 6 // 6
    ==
    assert // Sum of reversed array should be 6
    // contracts/ControlFlow/contract.algo.ts:82
    // return reversed
    retsub


// contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay(date: uint64) -> bytes:
getDay:
    // contracts/ControlFlow/contract.algo.ts:92-93
    // @arc4.abimethod({ readonly: true })
    // public getDay(date: uint64): string {
    proto 1 1
    // contracts/ControlFlow/contract.algo.ts:95
    // case Uint64(1):
    frame_dig -1
    intc_0 // 1
    ==
    // contracts/ControlFlow/contract.algo.ts:95-96
    // case Uint64(1):
    //   return 'Monday'
    bz getDay_after_if_else@3
    // contracts/ControlFlow/contract.algo.ts:96
    // return 'Monday'
    pushbytes "Monday"
    retsub

getDay_after_if_else@3:
    // contracts/ControlFlow/contract.algo.ts:97
    // case Uint64(2):
    frame_dig -1
    intc_3 // 2
    ==
    // contracts/ControlFlow/contract.algo.ts:97-98
    // case Uint64(2):
    //   return 'Tuesday'
    bz getDay_after_if_else@6
    // contracts/ControlFlow/contract.algo.ts:98
    // return 'Tuesday'
    pushbytes "Tuesday"
    retsub

getDay_after_if_else@6:
    // contracts/ControlFlow/contract.algo.ts:99
    // case Uint64(3):
    frame_dig -1
    pushint 3 // 3
    ==
    // contracts/ControlFlow/contract.algo.ts:99-100
    // case Uint64(3):
    //   return 'Wednesday'
    bz getDay_after_if_else@9
    // contracts/ControlFlow/contract.algo.ts:100
    // return 'Wednesday'
    pushbytes "Wednesday"
    retsub

getDay_after_if_else@9:
    // contracts/ControlFlow/contract.algo.ts:101
    // case Uint64(4):
    frame_dig -1
    pushint 4 // 4
    ==
    // contracts/ControlFlow/contract.algo.ts:101-102
    // case Uint64(4):
    //   return 'Thursday'
    bz getDay_after_if_else@12
    // contracts/ControlFlow/contract.algo.ts:102
    // return 'Thursday'
    pushbytes "Thursday"
    retsub

getDay_after_if_else@12:
    // contracts/ControlFlow/contract.algo.ts:103
    // case Uint64(5):
    frame_dig -1
    pushint 5 // 5
    ==
    // contracts/ControlFlow/contract.algo.ts:103-104
    // case Uint64(5):
    //   return 'Friday'
    bz getDay_after_if_else@15
    // contracts/ControlFlow/contract.algo.ts:104
    // return 'Friday'
    pushbytes "Friday"
    retsub

getDay_after_if_else@15:
    // contracts/ControlFlow/contract.algo.ts:105
    // case Uint64(6):
    frame_dig -1
    pushint 6 // 6
    ==
    // contracts/ControlFlow/contract.algo.ts:105-106
    // case Uint64(6):
    //   return 'Saturday'
    bz getDay_after_if_else@18
    // contracts/ControlFlow/contract.algo.ts:106
    // return 'Saturday'
    pushbytes "Saturday"
    retsub

getDay_after_if_else@18:
    // contracts/ControlFlow/contract.algo.ts:107
    // case Uint64(7):
    frame_dig -1
    pushint 7 // 7
    ==
    // contracts/ControlFlow/contract.algo.ts:107-108
    // case Uint64(7):
    //   return 'Sunday'
    bz getDay_after_if_else@21
    // contracts/ControlFlow/contract.algo.ts:108
    // return 'Sunday'
    pushbytes "Sunday"
    retsub

getDay_after_if_else@21:
    // contracts/ControlFlow/contract.algo.ts:110
    // return 'Invalid day'
    pushbytes "Invalid day"
    retsub


// contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost(boxSizeLabel: bytes, boxName: bytes) -> uint64:
calculateBoxStorageCost:
    // contracts/ControlFlow/contract.algo.ts:125-126
    // @arc4.abimethod({ readonly: true })
    // public calculateBoxStorageCost(boxSizeLabel: string, boxName: string): uint64 {
    proto 2 1
    // contracts/ControlFlow/contract.algo.ts:132
    // const boxNameLength: uint64 = Bytes(boxName).length
    frame_dig -1
    len
    // contracts/ControlFlow/contract.algo.ts:138
    // case 'xs':
    frame_dig -2
    pushbytes "xs"
    ==
    // contracts/ControlFlow/contract.algo.ts:138-140
    // case 'xs':
    //   boxSize = 8 // 8 bytes (enough for a uint64)
    //   break
    bz calculateBoxStorageCost_after_if_else@3
    // contracts/ControlFlow/contract.algo.ts:139
    // boxSize = 8 // 8 bytes (enough for a uint64)
    intc_2 // 8

calculateBoxStorageCost_block@17:
    // contracts/ControlFlow/contract.algo.ts:165
    // const mbrIncrease: uint64 = baseCost + byteUnitCost * (boxNameLength + boxSize)
    frame_dig 0
    +
    pushint 400 // 400
    *
    pushint 2500 // 2500
    +
    // contracts/ControlFlow/contract.algo.ts:167
    // return mbrIncrease
    swap
    retsub

calculateBoxStorageCost_after_if_else@3:
    // contracts/ControlFlow/contract.algo.ts:142
    // case 'sm':
    frame_dig -2
    pushbytes "sm"
    ==
    // contracts/ControlFlow/contract.algo.ts:142-144
    // case 'sm':
    //   boxSize = 64 // 64 bytes
    //   break
    bz calculateBoxStorageCost_after_if_else@6
    // contracts/ControlFlow/contract.algo.ts:143
    // boxSize = 64 // 64 bytes
    pushint 64 // 64
    // contracts/ControlFlow/contract.algo.ts:144
    // break
    b calculateBoxStorageCost_block@17

calculateBoxStorageCost_after_if_else@6:
    // contracts/ControlFlow/contract.algo.ts:146
    // case 'md':
    frame_dig -2
    pushbytes "md"
    ==
    // contracts/ControlFlow/contract.algo.ts:146-148
    // case 'md':
    //   boxSize = 256 // 256 bytes
    //   break
    bz calculateBoxStorageCost_after_if_else@9
    // contracts/ControlFlow/contract.algo.ts:147
    // boxSize = 256 // 256 bytes
    pushint 256 // 256
    // contracts/ControlFlow/contract.algo.ts:148
    // break
    b calculateBoxStorageCost_block@17

calculateBoxStorageCost_after_if_else@9:
    // contracts/ControlFlow/contract.algo.ts:150
    // case 'lg':
    frame_dig -2
    pushbytes "lg"
    ==
    // contracts/ControlFlow/contract.algo.ts:150-152
    // case 'lg':
    //   boxSize = 1024 // 1KB
    //   break
    bz calculateBoxStorageCost_after_if_else@12
    // contracts/ControlFlow/contract.algo.ts:151
    // boxSize = 1024 // 1KB
    pushint 1024 // 1024
    // contracts/ControlFlow/contract.algo.ts:152
    // break
    b calculateBoxStorageCost_block@17

calculateBoxStorageCost_after_if_else@12:
    // contracts/ControlFlow/contract.algo.ts:154
    // case 'max':
    frame_dig -2
    pushbytes "max"
    ==
    // contracts/ControlFlow/contract.algo.ts:154-156
    // case 'max':
    //   boxSize = 32000 // 32KB (close to max allowed)
    //   break
    bz calculateBoxStorageCost_after_if_else@15
    // contracts/ControlFlow/contract.algo.ts:155
    // boxSize = 32000 // 32KB (close to max allowed)
    pushint 32000 // 32000
    // contracts/ControlFlow/contract.algo.ts:156
    // break
    b calculateBoxStorageCost_block@17

calculateBoxStorageCost_after_if_else@15:
    // contracts/ControlFlow/contract.algo.ts:160
    // return 0
    intc_1 // 0
    swap
    retsub


// contracts/ControlFlow/contract.algo.ts::ControlFlow.loop() -> uint64:
loop:
    // contracts/ControlFlow/contract.algo.ts:176-177
    // @arc4.abimethod({ readonly: true })
    // public loop(): uint64 {
    proto 0 1
    // contracts/ControlFlow/contract.algo.ts:178
    // let num: uint64 = 10
    pushint 10 // 10
    // contracts/ControlFlow/contract.algo.ts:179
    // let loopCount: uint64 = 0
    intc_1 // 0

loop_while_top@1:
    // contracts/ControlFlow/contract.algo.ts:181-194
    // while (num > 0) {
    //   if (num > 5) {
    //     num -= 1
    //     loopCount += 1
    //     continue
    //   }
    // 
    //   num -= 2
    //   loopCount += 1
    // 
    //   if (num === 1) {
    //     break
    //   }
    // }
    frame_dig 0
    bz loop_block@9
    // contracts/ControlFlow/contract.algo.ts:182
    // if (num > 5) {
    frame_dig 0
    pushint 5 // 5
    >
    bz loop_after_if_else@4
    // contracts/ControlFlow/contract.algo.ts:183
    // num -= 1
    frame_dig 0
    intc_0 // 1
    -
    frame_bury 0
    // contracts/ControlFlow/contract.algo.ts:184
    // loopCount += 1
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    // contracts/ControlFlow/contract.algo.ts:185
    // continue
    b loop_while_top@1

loop_after_if_else@4:
    // contracts/ControlFlow/contract.algo.ts:188
    // num -= 2
    frame_dig 0
    intc_3 // 2
    -
    dup
    frame_bury 0
    // contracts/ControlFlow/contract.algo.ts:189
    // loopCount += 1
    frame_dig 1
    intc_0 // 1
    +
    frame_bury 1
    // contracts/ControlFlow/contract.algo.ts:191
    // if (num === 1) {
    intc_0 // 1
    ==
    bz loop_while_top@1

loop_block@9:
    // contracts/ControlFlow/contract.algo.ts:196
    // return loopCount
    frame_dig 1
    frame_bury 0
    retsub
