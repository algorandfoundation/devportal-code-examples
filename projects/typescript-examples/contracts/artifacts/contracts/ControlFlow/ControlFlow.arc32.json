{
    "hints": {
        "isRich(uint64)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isEven(uint64)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "forLoop()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getDay(uint64)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculateBoxStorageCost(string,string)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "loop()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ControlFlow",
        "desc": "ControlFlow Contract\n\nThis contract demonstrates various control flow operations in Algorand smart contracts.\nIt shows how to use:\n- If/else statements\n- For loops\n- Switch statements (equivalent to Python's match)\n- While loops\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/control_flow/contract.py",
        "methods": [
            {
                "name": "isRich",
                "args": [
                    {
                        "type": "uint64",
                        "name": "accountBalance",
                        "desc": "The account balance to check"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string",
                    "desc": "A string describing the account's wealth status"
                },
                "desc": "Determines if an account is rich based on its balance"
            },
            {
                "name": "isEven",
                "args": [
                    {
                        "type": "uint64",
                        "name": "number",
                        "desc": "The number to check"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string",
                    "desc": "\"Even\" if the number is even, \"Odd\" otherwise"
                },
                "desc": "Determines if a number is even or odd"
            },
            {
                "name": "forLoop",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64[]",
                    "desc": "An array of uint64 values in reversed order"
                },
                "desc": "Demonstrates different types of for loops"
            },
            {
                "name": "getDay",
                "args": [
                    {
                        "type": "uint64",
                        "name": "date",
                        "desc": "A number from 0-6 representing a day of the week"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string",
                    "desc": "The name of the day, or \"Invalid day\" if out of range"
                },
                "desc": "Returns the day of the week based on a numeric input"
            },
            {
                "name": "calculateBoxStorageCost",
                "args": [
                    {
                        "type": "string",
                        "name": "boxSizeLabel",
                        "desc": "The category of box size as a string label. Valid values:\n'xs' (8B), 'sm' (64B), 'md' (256B), 'lg' (1KB), 'max' (32KB)"
                    },
                    {
                        "type": "string",
                        "name": "boxName",
                        "desc": "The name of the box (used to calculate name length)"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The MBR increase in microAlgos, or 0 if invalid size label"
                },
                "desc": "Calculates the minimum balance requirement (MBR) increase for box storage\nbased on different box size categories."
            },
            {
                "name": "loop",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The number of iterations performed"
                },
                "desc": "Demonstrates while loop with continue and break statements"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}