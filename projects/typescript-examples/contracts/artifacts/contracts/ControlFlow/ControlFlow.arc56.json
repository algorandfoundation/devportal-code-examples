{
    "name": "ControlFlow",
    "structs": {},
    "methods": [
        {
            "name": "isRich",
            "args": [
                {
                    "type": "uint64",
                    "name": "accountBalance",
                    "desc": "The account balance to check"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "A string describing the account's wealth status"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Determines if an account is rich based on its balance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "isEven",
            "args": [
                {
                    "type": "uint64",
                    "name": "number",
                    "desc": "The number to check"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "\"Even\" if the number is even, \"Odd\" otherwise"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Determines if a number is even or odd",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "forLoop",
            "args": [],
            "returns": {
                "type": "uint64[]",
                "desc": "An array of uint64 values in reversed order"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Demonstrates different types of for loops",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getDay",
            "args": [
                {
                    "type": "uint64",
                    "name": "date",
                    "desc": "A number from 0-6 representing a day of the week"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "The name of the day, or \"Invalid day\" if out of range"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the day of the week based on a numeric input",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateBoxStorageCost",
            "args": [
                {
                    "type": "string",
                    "name": "boxSizeLabel",
                    "desc": "The category of box size as a string label. Valid values:\n'xs' (8B), 'sm' (64B), 'md' (256B), 'lg' (1KB), 'max' (32KB)"
                },
                {
                    "type": "string",
                    "name": "boxName",
                    "desc": "The name of the box (used to calculate name length)"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The MBR increase in microAlgos, or 0 if invalid size label"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculates the minimum balance requirement (MBR) increase for box storage\nbased on different box size categories.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "loop",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The number of iterations performed"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Demonstrates while loop with continue and break statements",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "ControlFlow Contract\n\nThis contract demonstrates various control flow operations in Algorand smart contracts.\nIt shows how to use:\n- If/else statements\n- For loops\n- Switch statements (equivalent to Python's match)\n- While loops\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/control_flow/contract.py",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        25
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        86
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        409
                    ],
                    "errorMessage": "Sum of reversed array should be 6"
                },
                {
                    "pc": [
                        327
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        270,
                        336
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQAIAiYCBBUffHUCAAExG0EAOTEZFEQxGESCBgTvCC97BJT7fvEEciumaAR/rGpeBMnCvFcE+ComVDYaAI4GAAkAfQCiAVMB9gJlADEZFDEYFBBDNhoBF0mB6AcNQQAlgBVUaGlzIGFjY291bnQgaXMgcmljaCFJFRZXBgJMUChMULAiQ0mBZA1BACCAG1RoaXMgYWNjb3VudCBpcyBkb2luZyB3ZWxsLkL/y4AXVGhpcyBhY2NvdW50IGlzIHBvb3IgOihC/682GgEXJRhAABSABEV2ZW5JFRZXBgJMUChMULAiQ4ADT2RkQv/qI4AARwSAAgAASSNJgQQMQQAjRwIWKUxQVwIASwNMUElXAgAVJAoWVwYCXABFAyIIRQFC/9ZLASNZRQgjRQZLAkUJSwVLCAxBAC1LAVcCAEsGSU4CJAskWClMUEsKVwIAUElXAgAVJAoWVwYCXABFCiIIRQZC/8sjRQRLCCNZRQcjRQVLBEsHDEEAGUsIVwIASwVJTgIkC1tLBQhFBSIIRQVC/99LA4EGEkQoSwlQsCJDNhoBF0kiEkEAFoAGTW9uZGF5SRUWVwYCTFAoTFCwIkNJJRJBAAyAB1R1ZXNkYXlC/+BJgQMSQQAOgAlXZWRuZXNkYXlC/8tJgQQSQQANgAhUaHVyc2RheUL/t0mBBRJBAAuABkZyaWRheUL/pUmBBhJBAA2ACFNhdHVyZGF5Qv+RSYEHEkEAC4AGU3VuZGF5Qv9/gAtJbnZhbGlkIGRheUL/bzYaAVcCAEk2GgJXAgAVTIACeHMSQQATJEsBCIGQAwuBxBMIFihMULAiQ0sBgAJzbRJBAAWBQEL/30sBgAJtZBJBAAaBgAJC/89LAYACbGcSQQAGgYAIQv+/SwGAA21heBJBAAeBgPoBQv+tI0L/tIEKI0sBQQAoSwGBBQ1BAA5LASIJRQJJIghFAUL/5UsBJQlJRQNLASIIRQIiEkH/00kWKExQsCJD",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}