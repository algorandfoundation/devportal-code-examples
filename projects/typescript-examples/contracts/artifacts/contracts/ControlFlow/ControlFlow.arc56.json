{
    "name": "ControlFlow",
    "structs": {},
    "methods": [
        {
            "name": "isRich",
            "args": [
                {
                    "type": "uint64",
                    "name": "accountBalance",
                    "desc": "The account balance to check"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "A string describing the account's wealth status"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Determines if an account is rich based on its balance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "isEven",
            "args": [
                {
                    "type": "uint64",
                    "name": "number",
                    "desc": "The number to check"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "\"Even\" if the number is even, \"Odd\" otherwise"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Determines if a number is even or odd",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "forLoop",
            "args": [],
            "returns": {
                "type": "uint64[]",
                "desc": "An array of uint64 values in reversed order"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Demonstrates different types of for loops",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getDay",
            "args": [
                {
                    "type": "uint64",
                    "name": "date",
                    "desc": "A number from 0-6 representing a day of the week"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "The name of the day, or \"Invalid day\" if out of range"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the day of the week based on a numeric input",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateBoxStorageCost",
            "args": [
                {
                    "type": "string",
                    "name": "boxSizeLabel",
                    "desc": "The category of box size as a string label. Valid values:\n'xs' (8B), 'sm' (64B), 'md' (256B), 'lg' (1KB), 'max' (32KB)"
                },
                {
                    "type": "string",
                    "name": "boxName",
                    "desc": "The name of the box (used to calculate name length)"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The MBR increase in microAlgos, or 0 if invalid size label"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculates the minimum balance requirement (MBR) increase for box storage\nbased on different box size categories.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "loop",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The number of iterations performed"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Demonstrates while loop with continue and break statements",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "ControlFlow Contract\n\nThis contract demonstrates various control flow operations in Algorand smart contracts.\nIt shows how to use:\n- If/else statements\n- For loops\n- Switch statements (equivalent to Python's match)\n- While loops\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/control_flow/contract.py",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        25
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        86
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        409
                    ],
                    "errorMessage": "Sum of reversed array should be 6"
                },
                {
                    "pc": [
                        327
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        270,
                        336
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDggMgogICAgYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDAwMQogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTcKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xGbG93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDEzCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydAogICAgcHVzaGJ5dGVzcyAweGVmMDgyZjdiIDB4OTRmYjdlZjEgMHg3MjJiYTY2OCAweDdmYWM2YTVlIDB4YzljMmJjNTcgMHhmODJhMjY1NCAvLyBtZXRob2QgImlzUmljaCh1aW50NjQpc3RyaW5nIiwgbWV0aG9kICJpc0V2ZW4odWludDY0KXN0cmluZyIsIG1ldGhvZCAiZm9yTG9vcCgpdWludDY0W10iLCBtZXRob2QgImdldERheSh1aW50NjQpc3RyaW5nIiwgbWV0aG9kICJjYWxjdWxhdGVCb3hTdG9yYWdlQ29zdChzdHJpbmcsc3RyaW5nKXVpbnQ2NCIsIG1ldGhvZCAibG9vcCgpdWludDY0IgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggaXNSaWNoIGlzRXZlbiBmb3JMb29wIGdldERheSBjYWxjdWxhdGVCb3hTdG9yYWdlQ29zdCBsb29wCiAgICBlcnIKCm1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDEzOgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTcKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xGbG93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgICYmCiAgICByZXR1cm4gLy8gb24gZXJyb3I6IE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AgJiYgY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCgoKLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmlzUmljaFtyb3V0aW5nXSgpIC0+IHZvaWQ6CmlzUmljaDoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjI0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgZHVwCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoyNgogICAgLy8gaWYgKGFjY291bnRCYWxhbmNlID4gMTAwMCkgewogICAgcHVzaGludCAxMDAwIC8vIDEwMDAKICAgID4KICAgIGJ6IGlzUmljaF9lbHNlX2JvZHlAMwogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIHJldHVybiAnVGhpcyBhY2NvdW50IGlzIHJpY2ghJwogICAgcHVzaGJ5dGVzICJUaGlzIGFjY291bnQgaXMgcmljaCEiCgppc1JpY2hfYWZ0ZXJfaW5saW5lZF9jb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo6Q29udHJvbEZsb3cuaXNSaWNoQDY6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoyNAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgppc1JpY2hfZWxzZV9ib2R5QDM6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoyOAogICAgLy8gfSBlbHNlIGlmIChhY2NvdW50QmFsYW5jZSA+IDEwMCkgewogICAgZHVwCiAgICBwdXNoaW50IDEwMCAvLyAxMDAKICAgID4KICAgIGJ6IGlzUmljaF9lbHNlX2JvZHlANQogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIHJldHVybiAnVGhpcyBhY2NvdW50IGlzIGRvaW5nIHdlbGwuJwogICAgcHVzaGJ5dGVzICJUaGlzIGFjY291bnQgaXMgZG9pbmcgd2VsbC4iCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoyNAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGIgaXNSaWNoX2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmlzUmljaEA2Cgppc1JpY2hfZWxzZV9ib2R5QDU6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czozMQogICAgLy8gcmV0dXJuICdUaGlzIGFjY291bnQgaXMgcG9vciA6KCcKICAgIHB1c2hieXRlcyAiVGhpcyBhY2NvdW50IGlzIHBvb3IgOigiCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoyNAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGIgaXNSaWNoX2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmlzUmljaEA2CgoKLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmlzRXZlbltyb3V0aW5nXSgpIC0+IHZvaWQ6CmlzRXZlbjoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6NDQKICAgIC8vIHJldHVybiBudW1iZXIgJSAyID09PSAwID8gJ0V2ZW4nIDogJ09kZCcKICAgIGludGNfMyAvLyAyCiAgICAlCiAgICBibnogaXNFdmVuX3Rlcm5hcnlfZmFsc2VAMwogICAgcHVzaGJ5dGVzICJFdmVuIgoKaXNFdmVuX3Rlcm5hcnlfbWVyZ2VANDoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCmlzRXZlbl90ZXJuYXJ5X2ZhbHNlQDM6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo0NAogICAgLy8gcmV0dXJuIG51bWJlciAlIDIgPT09IDAgPyAnRXZlbicgOiAnT2RkJwogICAgcHVzaGJ5dGVzICJPZGQiCiAgICBiIGlzRXZlbl90ZXJuYXJ5X21lcmdlQDQKCgovLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo6Q29udHJvbEZsb3cuZm9yTG9vcFtyb3V0aW5nXSgpIC0+IHZvaWQ6CmZvckxvb3A6CiAgICBpbnRjXzEgLy8gMAogICAgcHVzaGJ5dGVzICIiCiAgICBkdXBuIDQKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjU2CiAgICAvLyBsZXQgbnVtYmVyczogdWludDY0W10gPSBbXQogICAgcHVzaGJ5dGVzIDB4MDAwMAogICAgZHVwCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo1OQogICAgLy8gZm9yIChjb25zdCBpdGVtIG9mIHVyYW5nZSg0KSkgewogICAgaW50Y18xIC8vIDAKCmZvckxvb3BfZm9yX2hlYWRlckAyOgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6NTkKICAgIC8vIGZvciAoY29uc3QgaXRlbSBvZiB1cmFuZ2UoNCkpIHsKICAgIGR1cAogICAgcHVzaGludCA0IC8vIDQKICAgIDwKICAgIGJ6IGZvckxvb3BfYWZ0ZXJfZm9yQDUKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjYwCiAgICAvLyBudW1iZXJzID0gWy4uLm51bWJlcnMsIGl0ZW1dCiAgICBkdXBuIDIKICAgIGl0b2IKICAgIGJ5dGVjXzEgLy8gMHgwMDAxCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgMwogICAgc3dhcAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIGludGNfMiAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgYnVyeSAzCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo1OQogICAgLy8gZm9yIChjb25zdCBpdGVtIG9mIHVyYW5nZSg0KSkgewogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGJ1cnkgMQogICAgYiBmb3JMb29wX2Zvcl9oZWFkZXJAMgoKZm9yTG9vcF9hZnRlcl9mb3JANToKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjY4CiAgICAvLyBmb3IgKGNvbnN0IG51bSBvZiBudW1iZXJzKSB7CiAgICBkaWcgMQogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBidXJ5IDgKICAgIGludGNfMSAvLyAwCiAgICBidXJ5IDYKICAgIGRpZyAyCiAgICBidXJ5IDkKCmZvckxvb3BfZm9yX2hlYWRlckA2OgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6NjgKICAgIC8vIGZvciAoY29uc3QgbnVtIG9mIG51bWJlcnMpIHsKICAgIGRpZyA1CiAgICBkaWcgOAogICAgPAogICAgYnogZm9yTG9vcF9hZnRlcl9mb3JAOQogICAgZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgNgogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgaW50Y18yIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6NzAKICAgIC8vIHJldmVyc2VkID0gW251bSwgLi4ucmV2ZXJzZWRdCiAgICBieXRlY18xIC8vIDB4MDAwMQogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMTAKICAgIGV4dHJhY3QgMiAwCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGR1cAogICAgZXh0cmFjdCAyIDAKICAgIGxlbgogICAgaW50Y18yIC8vIDgKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICByZXBsYWNlMiAwCiAgICBidXJ5IDEwCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgYnVyeSA2CiAgICBiIGZvckxvb3BfZm9yX2hlYWRlckA2Cgpmb3JMb29wX2FmdGVyX2ZvckA5OgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIGxldCBzdW06IHVpbnQ2NCA9IDAKICAgIGludGNfMSAvLyAwCiAgICBidXJ5IDQKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjc1CiAgICAvLyBmb3IgKGNvbnN0IG51bSBvZiByZXZlcnNlZCkgewogICAgZGlnIDgKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgYnVyeSA3CiAgICBpbnRjXzEgLy8gMAogICAgYnVyeSA1Cgpmb3JMb29wX2Zvcl9oZWFkZXJAMTA6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo3NQogICAgLy8gZm9yIChjb25zdCBudW0gb2YgcmV2ZXJzZWQpIHsKICAgIGRpZyA0CiAgICBkaWcgNwogICAgPAogICAgYnogZm9yTG9vcF9hZnRlcl9mb3JAMTMKICAgIGRpZyA4CiAgICBleHRyYWN0IDIgMAogICAgZGlnIDUKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo3NgogICAgLy8gc3VtICs9IG51bQogICAgZGlnIDUKICAgICsKICAgIGJ1cnkgNQogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGJ1cnkgNQogICAgYiBmb3JMb29wX2Zvcl9oZWFkZXJAMTAKCmZvckxvb3BfYWZ0ZXJfZm9yQDEzOgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6ODAKICAgIC8vIGFzc2VydChzdW0gPT09IDYsICdTdW0gb2YgcmV2ZXJzZWQgYXJyYXkgc2hvdWxkIGJlIDYnKQogICAgZGlnIDMKICAgIHB1c2hpbnQgNiAvLyA2CiAgICA9PQogICAgYXNzZXJ0IC8vIFN1bSBvZiByZXZlcnNlZCBhcnJheSBzaG91bGQgYmUgNgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6NTMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIGRpZyA5CiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjpDb250cm9sRmxvdy5nZXREYXlbcm91dGluZ10oKSAtPiB2b2lkOgpnZXREYXk6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIGR1cAogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OTUKICAgIC8vIGNhc2UgVWludDY0KDEpOgogICAgaW50Y18wIC8vIDEKICAgID09CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5NS05NgogICAgLy8gY2FzZSBVaW50NjQoMSk6CiAgICAvLyAgIHJldHVybiAnTW9uZGF5JwogICAgYnogZ2V0RGF5X2FmdGVyX2lmX2Vsc2VANAogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OTYKICAgIC8vIHJldHVybiAnTW9uZGF5JwogICAgcHVzaGJ5dGVzICJNb25kYXkiCgpnZXREYXlfYWZ0ZXJfaW5saW5lZF9jb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo6Q29udHJvbEZsb3cuZ2V0RGF5QDI0OgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OTIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKZ2V0RGF5X2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjk3CiAgICAvLyBjYXNlIFVpbnQ2NCgyKToKICAgIGR1cAogICAgaW50Y18zIC8vIDIKICAgID09CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5Ny05OAogICAgLy8gY2FzZSBVaW50NjQoMik6CiAgICAvLyAgIHJldHVybiAnVHVlc2RheScKICAgIGJ6IGdldERheV9hZnRlcl9pZl9lbHNlQDcKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjk4CiAgICAvLyByZXR1cm4gJ1R1ZXNkYXknCiAgICBwdXNoYnl0ZXMgIlR1ZXNkYXkiCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGIgZ2V0RGF5X2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmdldERheUAyNAoKZ2V0RGF5X2FmdGVyX2lmX2Vsc2VANzoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjk5CiAgICAvLyBjYXNlIFVpbnQ2NCgzKToKICAgIGR1cAogICAgcHVzaGludCAzIC8vIDMKICAgID09CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5OS0xMDAKICAgIC8vIGNhc2UgVWludDY0KDMpOgogICAgLy8gICByZXR1cm4gJ1dlZG5lc2RheScKICAgIGJ6IGdldERheV9hZnRlcl9pZl9lbHNlQDEwCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMDAKICAgIC8vIHJldHVybiAnV2VkbmVzZGF5JwogICAgcHVzaGJ5dGVzICJXZWRuZXNkYXkiCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGIgZ2V0RGF5X2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmdldERheUAyNAoKZ2V0RGF5X2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMDEKICAgIC8vIGNhc2UgVWludDY0KDQpOgogICAgZHVwCiAgICBwdXNoaW50IDQgLy8gNAogICAgPT0KICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjEwMS0xMDIKICAgIC8vIGNhc2UgVWludDY0KDQpOgogICAgLy8gICByZXR1cm4gJ1RodXJzZGF5JwogICAgYnogZ2V0RGF5X2FmdGVyX2lmX2Vsc2VAMTMKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjEwMgogICAgLy8gcmV0dXJuICdUaHVyc2RheScKICAgIHB1c2hieXRlcyAiVGh1cnNkYXkiCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGIgZ2V0RGF5X2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmdldERheUAyNAoKZ2V0RGF5X2FmdGVyX2lmX2Vsc2VAMTM6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMDMKICAgIC8vIGNhc2UgVWludDY0KDUpOgogICAgZHVwCiAgICBwdXNoaW50IDUgLy8gNQogICAgPT0KICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjEwMy0xMDQKICAgIC8vIGNhc2UgVWludDY0KDUpOgogICAgLy8gICByZXR1cm4gJ0ZyaWRheScKICAgIGJ6IGdldERheV9hZnRlcl9pZl9lbHNlQDE2CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMDQKICAgIC8vIHJldHVybiAnRnJpZGF5JwogICAgcHVzaGJ5dGVzICJGcmlkYXkiCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGIgZ2V0RGF5X2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmdldERheUAyNAoKZ2V0RGF5X2FmdGVyX2lmX2Vsc2VAMTY6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMDUKICAgIC8vIGNhc2UgVWludDY0KDYpOgogICAgZHVwCiAgICBwdXNoaW50IDYgLy8gNgogICAgPT0KICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjEwNS0xMDYKICAgIC8vIGNhc2UgVWludDY0KDYpOgogICAgLy8gICByZXR1cm4gJ1NhdHVyZGF5JwogICAgYnogZ2V0RGF5X2FmdGVyX2lmX2Vsc2VAMTkKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjEwNgogICAgLy8gcmV0dXJuICdTYXR1cmRheScKICAgIHB1c2hieXRlcyAiU2F0dXJkYXkiCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGIgZ2V0RGF5X2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmdldERheUAyNAoKZ2V0RGF5X2FmdGVyX2lmX2Vsc2VAMTk6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMDcKICAgIC8vIGNhc2UgVWludDY0KDcpOgogICAgZHVwCiAgICBwdXNoaW50IDcgLy8gNwogICAgPT0KICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjEwNy0xMDgKICAgIC8vIGNhc2UgVWludDY0KDcpOgogICAgLy8gICByZXR1cm4gJ1N1bmRheScKICAgIGJ6IGdldERheV9hZnRlcl9pZl9lbHNlQDIyCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMDgKICAgIC8vIHJldHVybiAnU3VuZGF5JwogICAgcHVzaGJ5dGVzICJTdW5kYXkiCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo5MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGIgZ2V0RGF5X2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmdldERheUAyNAoKZ2V0RGF5X2FmdGVyX2lmX2Vsc2VAMjI6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMTAKICAgIC8vIHJldHVybiAnSW52YWxpZCBkYXknCiAgICBwdXNoYnl0ZXMgIkludmFsaWQgZGF5IgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OTIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBiIGdldERheV9hZnRlcl9pbmxpbmVkX2NvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjpDb250cm9sRmxvdy5nZXREYXlAMjQKCgovLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czo6Q29udHJvbEZsb3cuY2FsY3VsYXRlQm94U3RvcmFnZUNvc3Rbcm91dGluZ10oKSAtPiB2b2lkOgpjYWxjdWxhdGVCb3hTdG9yYWdlQ29zdDoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjEyNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICBkdXAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMzIKICAgIC8vIGNvbnN0IGJveE5hbWVMZW5ndGg6IHVpbnQ2NCA9IEJ5dGVzKGJveE5hbWUpLmxlbmd0aAogICAgbGVuCiAgICBzd2FwCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMzgKICAgIC8vIGNhc2UgJ3hzJzoKICAgIHB1c2hieXRlcyAieHMiCiAgICA9PQogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTM4LTE0MAogICAgLy8gY2FzZSAneHMnOgogICAgLy8gICBib3hTaXplID0gOCAvLyA4IGJ5dGVzIChlbm91Z2ggZm9yIGEgdWludDY0KQogICAgLy8gICBicmVhawogICAgYnogY2FsY3VsYXRlQm94U3RvcmFnZUNvc3RfYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMzkKICAgIC8vIGJveFNpemUgPSA4IC8vIDggYnl0ZXMgKGVub3VnaCBmb3IgYSB1aW50NjQpCiAgICBpbnRjXzIgLy8gOAoKY2FsY3VsYXRlQm94U3RvcmFnZUNvc3RfYmxvY2tAMTg6CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxNjUKICAgIC8vIGNvbnN0IG1ickluY3JlYXNlOiB1aW50NjQgPSBiYXNlQ29zdCArIGJ5dGVVbml0Q29zdCAqIChib3hOYW1lTGVuZ3RoICsgYm94U2l6ZSkKICAgIGRpZyAxCiAgICArCiAgICBwdXNoaW50IDQwMCAvLyA0MDAKICAgICoKICAgIHB1c2hpbnQgMjUwMCAvLyAyNTAwCiAgICArCgpjYWxjdWxhdGVCb3hTdG9yYWdlQ29zdF9hZnRlcl9pbmxpbmVkX2NvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjpDb250cm9sRmxvdy5jYWxjdWxhdGVCb3hTdG9yYWdlQ29zdEAxOToKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjEyNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCmNhbGN1bGF0ZUJveFN0b3JhZ2VDb3N0X2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE0MgogICAgLy8gY2FzZSAnc20nOgogICAgZGlnIDEKICAgIHB1c2hieXRlcyAic20iCiAgICA9PQogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTQyLTE0NAogICAgLy8gY2FzZSAnc20nOgogICAgLy8gICBib3hTaXplID0gNjQgLy8gNjQgYnl0ZXMKICAgIC8vICAgYnJlYWsKICAgIGJ6IGNhbGN1bGF0ZUJveFN0b3JhZ2VDb3N0X2FmdGVyX2lmX2Vsc2VANwogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTQzCiAgICAvLyBib3hTaXplID0gNjQgLy8gNjQgYnl0ZXMKICAgIHB1c2hpbnQgNjQgLy8gNjQKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE0NAogICAgLy8gYnJlYWsKICAgIGIgY2FsY3VsYXRlQm94U3RvcmFnZUNvc3RfYmxvY2tAMTgKCmNhbGN1bGF0ZUJveFN0b3JhZ2VDb3N0X2FmdGVyX2lmX2Vsc2VANzoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE0NgogICAgLy8gY2FzZSAnbWQnOgogICAgZGlnIDEKICAgIHB1c2hieXRlcyAibWQiCiAgICA9PQogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTQ2LTE0OAogICAgLy8gY2FzZSAnbWQnOgogICAgLy8gICBib3hTaXplID0gMjU2IC8vIDI1NiBieXRlcwogICAgLy8gICBicmVhawogICAgYnogY2FsY3VsYXRlQm94U3RvcmFnZUNvc3RfYWZ0ZXJfaWZfZWxzZUAxMAogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTQ3CiAgICAvLyBib3hTaXplID0gMjU2IC8vIDI1NiBieXRlcwogICAgcHVzaGludCAyNTYgLy8gMjU2CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxNDgKICAgIC8vIGJyZWFrCiAgICBiIGNhbGN1bGF0ZUJveFN0b3JhZ2VDb3N0X2Jsb2NrQDE4CgpjYWxjdWxhdGVCb3hTdG9yYWdlQ29zdF9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTUwCiAgICAvLyBjYXNlICdsZyc6CiAgICBkaWcgMQogICAgcHVzaGJ5dGVzICJsZyIKICAgID09CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxNTAtMTUyCiAgICAvLyBjYXNlICdsZyc6CiAgICAvLyAgIGJveFNpemUgPSAxMDI0IC8vIDFLQgogICAgLy8gICBicmVhawogICAgYnogY2FsY3VsYXRlQm94U3RvcmFnZUNvc3RfYWZ0ZXJfaWZfZWxzZUAxMwogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBib3hTaXplID0gMTAyNCAvLyAxS0IKICAgIHB1c2hpbnQgMTAyNCAvLyAxMDI0CiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxNTIKICAgIC8vIGJyZWFrCiAgICBiIGNhbGN1bGF0ZUJveFN0b3JhZ2VDb3N0X2Jsb2NrQDE4CgpjYWxjdWxhdGVCb3hTdG9yYWdlQ29zdF9hZnRlcl9pZl9lbHNlQDEzOgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTU0CiAgICAvLyBjYXNlICdtYXgnOgogICAgZGlnIDEKICAgIHB1c2hieXRlcyAibWF4IgogICAgPT0KICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE1NC0xNTYKICAgIC8vIGNhc2UgJ21heCc6CiAgICAvLyAgIGJveFNpemUgPSAzMjAwMCAvLyAzMktCIChjbG9zZSB0byBtYXggYWxsb3dlZCkKICAgIC8vICAgYnJlYWsKICAgIGJ6IGNhbGN1bGF0ZUJveFN0b3JhZ2VDb3N0X2FmdGVyX2lmX2Vsc2VAMTYKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE1NQogICAgLy8gYm94U2l6ZSA9IDMyMDAwIC8vIDMyS0IgKGNsb3NlIHRvIG1heCBhbGxvd2VkKQogICAgcHVzaGludCAzMjAwMCAvLyAzMjAwMAogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTU2CiAgICAvLyBicmVhawogICAgYiBjYWxjdWxhdGVCb3hTdG9yYWdlQ29zdF9ibG9ja0AxOAoKY2FsY3VsYXRlQm94U3RvcmFnZUNvc3RfYWZ0ZXJfaWZfZWxzZUAxNjoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE2MAogICAgLy8gcmV0dXJuIDAKICAgIGludGNfMSAvLyAwCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxMjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBiIGNhbGN1bGF0ZUJveFN0b3JhZ2VDb3N0X2FmdGVyX2lubGluZWRfY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93LmNhbGN1bGF0ZUJveFN0b3JhZ2VDb3N0QDE5CgoKLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6OkNvbnRyb2xGbG93Lmxvb3Bbcm91dGluZ10oKSAtPiB2b2lkOgpsb29wOgogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTc4CiAgICAvLyBsZXQgbnVtOiB1aW50NjQgPSAxMAogICAgcHVzaGludCAxMCAvLyAxMAogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTc5CiAgICAvLyBsZXQgbG9vcENvdW50OiB1aW50NjQgPSAwCiAgICBpbnRjXzEgLy8gMAoKbG9vcF93aGlsZV90b3BAMjoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE4MS0xOTQKICAgIC8vIHdoaWxlIChudW0gPiAwKSB7CiAgICAvLyAgIGlmIChudW0gPiA1KSB7CiAgICAvLyAgICAgbnVtIC09IDEKICAgIC8vICAgICBsb29wQ291bnQgKz0gMQogICAgLy8gICAgIGNvbnRpbnVlCiAgICAvLyAgIH0KICAgIC8vIAogICAgLy8gICBudW0gLT0gMgogICAgLy8gICBsb29wQ291bnQgKz0gMQogICAgLy8gCiAgICAvLyAgIGlmIChudW0gPT09IDEpIHsKICAgIC8vICAgICBicmVhawogICAgLy8gICB9CiAgICAvLyB9CiAgICBkaWcgMQogICAgYnogbG9vcF9ibG9ja0AxMAogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTgyCiAgICAvLyBpZiAobnVtID4gNSkgewogICAgZGlnIDEKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA+CiAgICBieiBsb29wX2FmdGVyX2lmX2Vsc2VANQogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTgzCiAgICAvLyBudW0gLT0gMQogICAgZGlnIDEKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBidXJ5IDIKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE4NAogICAgLy8gbG9vcENvdW50ICs9IDEKICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGJ1cnkgMQogICAgLy8gY29udHJhY3RzL0NvbnRyb2xGbG93L2NvbnRyYWN0LmFsZ28udHM6MTg1CiAgICAvLyBjb250aW51ZQogICAgYiBsb29wX3doaWxlX3RvcEAyCgpsb29wX2FmdGVyX2lmX2Vsc2VANToKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE4OAogICAgLy8gbnVtIC09IDIKICAgIGRpZyAxCiAgICBpbnRjXzMgLy8gMgogICAgLQogICAgZHVwCiAgICBidXJ5IDMKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE4OQogICAgLy8gbG9vcENvdW50ICs9IDEKICAgIGRpZyAxCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgYnVyeSAyCiAgICAvLyBjb250cmFjdHMvQ29udHJvbEZsb3cvY29udHJhY3QuYWxnby50czoxOTEKICAgIC8vIGlmIChudW0gPT09IDEpIHsKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgYnogbG9vcF93aGlsZV90b3BAMgoKbG9vcF9ibG9ja0AxMDoKICAgIC8vIGNvbnRyYWN0cy9Db250cm9sRmxvdy9jb250cmFjdC5hbGdvLnRzOjE3NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGR1cAogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQAIAiYCBBUffHUCAAExG0EAOTEZFEQxGESCBgTvCC97BJT7fvEEciumaAR/rGpeBMnCvFcE+ComVDYaAI4GAAkAfQCiAVMB9gJlADEZFDEYFBBDNhoBF0mB6AcNQQAlgBVUaGlzIGFjY291bnQgaXMgcmljaCFJFRZXBgJMUChMULAiQ0mBZA1BACCAG1RoaXMgYWNjb3VudCBpcyBkb2luZyB3ZWxsLkL/y4AXVGhpcyBhY2NvdW50IGlzIHBvb3IgOihC/682GgEXJRhAABSABEV2ZW5JFRZXBgJMUChMULAiQ4ADT2RkQv/qI4AARwSAAgAASSNJgQQMQQAjRwIWKUxQVwIASwNMUElXAgAVJAoWVwYCXABFAyIIRQFC/9ZLASNZRQgjRQZLAkUJSwVLCAxBAC1LAVcCAEsGSU4CJAskWClMUEsKVwIAUElXAgAVJAoWVwYCXABFCiIIRQZC/8sjRQRLCCNZRQcjRQVLBEsHDEEAGUsIVwIASwVJTgIkC1tLBQhFBSIIRQVC/99LA4EGEkQoSwlQsCJDNhoBF0kiEkEAFoAGTW9uZGF5SRUWVwYCTFAoTFCwIkNJJRJBAAyAB1R1ZXNkYXlC/+BJgQMSQQAOgAlXZWRuZXNkYXlC/8tJgQQSQQANgAhUaHVyc2RheUL/t0mBBRJBAAuABkZyaWRheUL/pUmBBhJBAA2ACFNhdHVyZGF5Qv+RSYEHEkEAC4AGU3VuZGF5Qv9/gAtJbnZhbGlkIGRheUL/bzYaAVcCAEk2GgJXAgAVTIACeHMSQQATJEsBCIGQAwuBxBMIFihMULAiQ0sBgAJzbRJBAAWBQEL/30sBgAJtZBJBAAaBgAJC/89LAYACbGcSQQAGgYAIQv+/SwGAA21heBJBAAeBgPoBQv+tI0L/tIEKI0sBQQAoSwGBBQ1BAA5LASIJRQJJIghFAUL/5UsBJQlJRQNLASIIRQIiEkH/00kWKExQsCJD",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}