{
    "name": "ControlFlow",
    "structs": {},
    "methods": [
        {
            "name": "isRich",
            "args": [
                {
                    "type": "uint64",
                    "name": "accountBalance",
                    "desc": "The account balance to check"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "A string describing the account's wealth status"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Determines if an account is rich based on its balance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "isEven",
            "args": [
                {
                    "type": "uint64",
                    "name": "number",
                    "desc": "The number to check"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "\"Even\" if the number is even, \"Odd\" otherwise"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Determines if a number is even or odd",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "forLoop",
            "args": [],
            "returns": {
                "type": "uint64[]",
                "desc": "An array of uint64 values in reversed order"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Demonstrates different types of for loops",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getDay",
            "args": [
                {
                    "type": "uint64",
                    "name": "date",
                    "desc": "A number from 0-6 representing a day of the week"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "The name of the day, or \"Invalid day\" if out of range"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the day of the week based on a numeric input",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateBoxStorageCost",
            "args": [
                {
                    "type": "string",
                    "name": "boxSizeLabel",
                    "desc": "The category of box size as a string label. Valid values:\n'xs' (8B), 'sm' (64B), 'md' (256B), 'lg' (1KB), 'max' (32KB)"
                },
                {
                    "type": "string",
                    "name": "boxName",
                    "desc": "The name of the box (used to calculate name length)"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The MBR increase in microAlgos, or 0 if invalid size label"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculates the minimum balance requirement (MBR) increase for box storage\nbased on different box size categories.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "loop",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The number of iterations performed"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Demonstrates while loop with continue and break statements",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "ControlFlow Contract\n\nThis contract demonstrates various control flow operations in Algorand smart contracts.\nIt shows how to use:\n- If/else statements\n- For loops\n- Switch statements (equivalent to Python's match)\n- While loops\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/control_flow/contract.py",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        76,
                        93,
                        122,
                        150,
                        166,
                        194
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        537
                    ],
                    "errorMessage": "Sum of reversed array should be 6"
                },
                {
                    "pc": [
                        227
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        79,
                        96,
                        125,
                        153,
                        169,
                        197
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAIAiYCBBUffHUCAAAxG0EAxYIGBO8IL3sElPt+8QRyK6ZoBH+sal4EycK8VwT4KiZUNhoAjgYAeABcAEwAMAATAAIjQzEZFEQxGESIArgWKExQsCJDMRkURDEYRDYaAVcCADYaAlcCAIgCORYoTFCwIkMxGRREMRhENhoBF4gBlkkVFlcGAkxQKExQsCJDMRkURDEYRIgAxChMULAiQzEZFEQxGEQ2GgEXiACZSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBF4gAGUkVFlcGAkxQKExQsCJDMRlA/2cxGBREIkOKAQGL/4HoBw1BABiAFVRoaXMgYWNjb3VudCBpcyByaWNoIYmL/4FkDUEAHoAbVGhpcyBhY2NvdW50IGlzIGRvaW5nIHdlbGwuiYAXVGhpcyBhY2NvdW50IGlzIHBvb3IgOiiJigEBi/8lGEAAB4AERXZlbomAA09kZImKAAEjgABHBCkjiweBBAxBACyLBlcCAIsHSU4CFkkVJAoWVwYCTFBXAgBQSRUkChZXBgJMUIwGIgiMB0L/zCmMAIsGI1mMASOMA4sDiwEMQQA0iwZXAgCLA0lOAiQLWxZJFSQKFlcGAkxQVwIAiwBXAgBQSRUkChZXBgJMUIwAIgiMA0L/xCOMBYsAI1mMAiOMBIsEiwIMQQAZiwBXAgCLBElOAiQLW4sFCIwFIgiMBEL/34sFgQYSRImKAQGL/yISQQAJgAZNb25kYXmJi/8lEkEACoAHVHVlc2RheYmL/4EDEkEADIAJV2VkbmVzZGF5iYv/gQQSQQALgAhUaHVyc2RheYmL/4EFEkEACYAGRnJpZGF5iYv/gQYSQQALgAhTYXR1cmRheYmL/4EHEkEACYAGU3VuZGF5iYALSW52YWxpZCBkYXmJigIBi/8Vi/6AAnhzEkEADiSLAAiBkAMLgcQTCEyJi/6AAnNtEkEABYFAQv/ki/6AAm1kEkEABoGAAkL/1Iv+gAJsZxJBAAaBgAhC/8SL/oADbWF4EkEAB4GA+gFC/7IjTImKAAGBCiOLAEEAKYsAgQUNQQAPiwAiCYwAiwEiCIwBQv/kiwAlCUmMAIsBIgiMASISQf/SiwGMAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}