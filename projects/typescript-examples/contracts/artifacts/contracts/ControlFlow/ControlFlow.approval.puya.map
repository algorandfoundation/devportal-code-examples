{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ControlFlow/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAgBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;AA+JG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnDA;;AAAA;AAAA;AAAA;;AAAA;AA5GH;;;AAAA;;;AAAA;;;AAAA;;;AA4GG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AA3EH;;;AAAA;AA2EG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAzBH;;;AAAA;AAyBG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAPH;;;AAAA;AAOG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAOE;;;AAEM;;AAAiB;;;AAAjB;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;AAAP;AACS;;AAAiB;;AAAjB;AAAJ;;;AACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAWJ;;;AAES;;AAAS;AAAT;AAAA;;;AAAmB;;;;;;AAA1B;AAAmC;;;;;AAAnC;AASF;;;;;;;;AAG0B;AAGL;AAHK;AAGL;;AAAO;;AAAP;AAAnB;;;AACY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AADO;AAAA;AAAA;;;;;AASnB;;AAAA;AAAA;AAAA;;;;;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEa;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;;;;;AAIK;AAAd;;AACJ;;AAAA;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;;AAAA;AAAA;;;;;;;;;AAIK;;AAAQ;;AAAR;AAAP;AAEA;AAUF;;;AAGgB;;AAAA;AAAA;AAAZ;;;AACS;;;;;;;;AAAP;AACU;;AAAA;AAAA;AAAZ;;;AACS;;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;AAAP;AAEO;;;;;;;;;;;;;AAAP;AAeN;;;AAO+C;;AAAA;AAMtC;;AAAA;;;;AAAA;AAAL;;;AACY;AA0ByC;;AAAA;AAAhB;;;AAAA;AAAX;;;AAAA;AAE5B;AAAA;AAzBO;;AAAA;;;;AAAA;AAAL;;;AACY;;AACV;;;AAEG;;AAAA;;;;AAAA;AAAL;;;AACY;;;AACV;;;AAEG;;AAAA;;;;AAAA;AAAL;;;AACY;;;AACV;;;AAEG;;AAAA;;;;;AAAA;AAAL;;;AACY;;;;AACV;;;AAIO;AAAP;AAAA;AAgBN;;;AAEoB;;AACM;AAExB;;AAAA;;;AACM;;AAAM;;AAAN;AAAJ;;;AACE;;AAAO;AAAP;AAAA;;AACA;;AAAa;AAAb;AAAA;;AACA;;;AAGF;;AAAO;AAAP;AAAA;AAAA;;AACA;;AAAa;AAAb;AAAA;;AAEY;AAAR;AAAJ;;;AAKF;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x0000 0x0001"
    },
    "20": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "22": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "25": {
      "op": "pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654 // method \"isRich(uint64)string\", method \"isEven(uint64)string\", method \"forLoop()uint64[]\", method \"getDay(uint64)string\", method \"calculateBoxStorageCost(string,string)uint64\", method \"loop()uint64\"",
      "defined_out": [
        "Method(calculateBoxStorageCost(string,string)uint64)",
        "Method(forLoop()uint64[])",
        "Method(getDay(uint64)string)",
        "Method(isEven(uint64)string)",
        "Method(isRich(uint64)string)",
        "Method(loop()uint64)"
      ],
      "stack_out": [
        "Method(isRich(uint64)string)",
        "Method(isEven(uint64)string)",
        "Method(forLoop()uint64[])",
        "Method(getDay(uint64)string)",
        "Method(calculateBoxStorageCost(string,string)uint64)",
        "Method(loop()uint64)"
      ]
    },
    "57": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calculateBoxStorageCost(string,string)uint64)",
        "Method(forLoop()uint64[])",
        "Method(getDay(uint64)string)",
        "Method(isEven(uint64)string)",
        "Method(isRich(uint64)string)",
        "Method(loop()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(isRich(uint64)string)",
        "Method(isEven(uint64)string)",
        "Method(forLoop()uint64[])",
        "Method(getDay(uint64)string)",
        "Method(calculateBoxStorageCost(string,string)uint64)",
        "Method(loop()uint64)",
        "tmp%2#0"
      ]
    },
    "60": {
      "op": "match main_isRich_route@3 main_isEven_route@4 main_forLoop_route@5 main_getDay_route@6 main_calculateBoxStorageCost_route@7 main_loop_route@8",
      "stack_out": []
    },
    "74": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "75": {
      "block": "main_loop_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "78": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "79": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "81": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "82": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.loop",
      "op": "callsub loop",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "85": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "86": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "87": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "88": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "89": {
      "op": "log",
      "stack_out": []
    },
    "90": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "block": "main_calculateBoxStorageCost_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "94": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "95": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "98": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "99": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "102": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "105": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "108": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "111": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost",
      "op": "callsub calculateBoxStorageCost",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "114": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "115": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "117": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "118": {
      "op": "log",
      "stack_out": []
    },
    "119": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "120": {
      "op": "return",
      "stack_out": []
    },
    "121": {
      "block": "main_getDay_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "123": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "128": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "131": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "132": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay",
      "op": "callsub getDay",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%30#0 (copy)"
      ]
    },
    "136": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "aggregate%length%2#0"
      ]
    },
    "137": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "138": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%2#0",
        "tmp%30#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%2#0"
      ]
    },
    "143": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "144": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%2#0"
      ]
    },
    "145": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "146": {
      "op": "log",
      "stack_out": []
    },
    "147": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "148": {
      "op": "return",
      "stack_out": []
    },
    "149": {
      "block": "main_forLoop_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "151": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "152": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "153": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "155": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "156": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.forLoop",
      "op": "callsub forLoop",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "159": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0x151f7c75"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%23#0"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "162": {
      "op": "log",
      "stack_out": []
    },
    "163": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "164": {
      "op": "return",
      "stack_out": []
    },
    "165": {
      "block": "main_isEven_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "167": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "168": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "169": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "171": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "172": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "175": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "176": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.isEven",
      "op": "callsub isEven",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "179": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "180": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "aggregate%length%1#0"
      ]
    },
    "181": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "182": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "185": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%16#0"
      ]
    },
    "186": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "187": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "188": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "190": {
      "op": "log",
      "stack_out": []
    },
    "191": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "return",
      "stack_out": []
    },
    "193": {
      "block": "main_isRich_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "195": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "199": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "200": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "203": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "204": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich",
      "op": "callsub isRich",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "207": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "208": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%length%0#0"
      ]
    },
    "209": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "210": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "213": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%8#0"
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "215": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "216": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "218": {
      "op": "log",
      "stack_out": []
    },
    "219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "return",
      "stack_out": []
    },
    "221": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "223": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "226": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "228": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "229": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "230": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "op": "return",
      "stack_out": []
    },
    "232": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich",
      "params": {
        "accountBalance#0": "uint64"
      },
      "block": "isRich",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "235": {
      "op": "frame_dig -1",
      "defined_out": [
        "accountBalance#0 (copy)"
      ],
      "stack_out": [
        "accountBalance#0 (copy)"
      ]
    },
    "237": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "accountBalance#0 (copy)"
      ],
      "stack_out": [
        "accountBalance#0 (copy)",
        "1000"
      ]
    },
    "240": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "241": {
      "op": "bz isRich_else_body@2",
      "stack_out": []
    },
    "244": {
      "op": "pushbytes \"This account is rich!\"",
      "defined_out": [
        "\"This account is rich!\""
      ],
      "stack_out": [
        "\"This account is rich!\""
      ]
    },
    "267": {
      "retsub": true,
      "op": "retsub"
    },
    "268": {
      "block": "isRich_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "accountBalance#0 (copy)"
      ],
      "stack_out": [
        "accountBalance#0 (copy)"
      ]
    },
    "270": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "accountBalance#0 (copy)"
      ],
      "stack_out": [
        "accountBalance#0 (copy)",
        "100"
      ]
    },
    "272": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "273": {
      "op": "bz isRich_else_body@4",
      "stack_out": []
    },
    "276": {
      "op": "pushbytes \"This account is doing well.\"",
      "defined_out": [
        "\"This account is doing well.\""
      ],
      "stack_out": [
        "\"This account is doing well.\""
      ]
    },
    "305": {
      "retsub": true,
      "op": "retsub"
    },
    "306": {
      "block": "isRich_else_body@4",
      "stack_in": [],
      "op": "pushbytes \"This account is poor :(\"",
      "defined_out": [
        "\"This account is poor :(\""
      ],
      "stack_out": [
        "\"This account is poor :(\""
      ]
    },
    "331": {
      "retsub": true,
      "op": "retsub"
    },
    "332": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.isEven",
      "params": {
        "number#0": "uint64"
      },
      "block": "isEven",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "335": {
      "op": "frame_dig -1",
      "defined_out": [
        "number#0 (copy)"
      ],
      "stack_out": [
        "number#0 (copy)"
      ]
    },
    "337": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "number#0 (copy)"
      ],
      "stack_out": [
        "number#0 (copy)",
        "2"
      ]
    },
    "338": {
      "op": "%",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "339": {
      "op": "bnz isEven_ternary_false@2",
      "stack_out": []
    },
    "342": {
      "op": "pushbytes \"Even\"",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "348": {
      "retsub": true,
      "op": "retsub"
    },
    "349": {
      "block": "isEven_ternary_false@2",
      "stack_in": [],
      "op": "pushbytes \"Odd\"",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "354": {
      "retsub": true,
      "op": "retsub"
    },
    "355": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.forLoop",
      "params": {},
      "block": "forLoop",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "358": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reversed#1"
      ]
    },
    "359": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0"
      ]
    },
    "361": {
      "op": "dupn 4",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0"
      ]
    },
    "363": {
      "op": "bytec_1 // 0x0000"
    },
    "364": {
      "op": "intc_1 // 0"
    },
    "365": {
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "numbers#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "366": {
      "block": "forLoop_for_header@1",
      "stack_in": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0"
      ]
    },
    "368": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "4"
      ]
    },
    "370": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "continue_looping%0#0"
      ]
    },
    "371": {
      "op": "bz forLoop_after_for@4",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "374": {
      "op": "frame_dig 7",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0"
      ]
    },
    "376": {
      "op": "dup",
      "defined_out": [
        "temp#0",
        "temp#0 (copy)"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "temp#0 (copy)"
      ]
    },
    "377": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "378": {
      "op": "bytec_2 // 0x0001",
      "defined_out": [
        "0x0001",
        "aggregate%val_as_bytes%0#0",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "aggregate%val_as_bytes%0#0",
        "0x0001"
      ]
    },
    "379": {
      "op": "swap",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "0x0001",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "380": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "aggregate%head%0#0"
      ]
    },
    "381": {
      "op": "extract 2 0",
      "defined_out": [
        "extract_to_end%0#0",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "extract_to_end%0#0"
      ]
    },
    "384": {
      "op": "frame_dig 8",
      "defined_out": [
        "extract_to_end%0#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "extract_to_end%0#0",
        "numbers#1"
      ]
    },
    "386": {
      "op": "swap",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "numbers#1",
        "extract_to_end%0#0"
      ]
    },
    "387": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "concat%0#0"
      ]
    },
    "388": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "389": {
      "op": "extract 2 0",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%1#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "392": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "len%0#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "concat%0#0",
        "len%0#0"
      ]
    },
    "393": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "concat%0#0",
        "len%0#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "concat%0#0",
        "len%0#0",
        "8"
      ]
    },
    "394": {
      "op": "/",
      "defined_out": [
        "concat%0#0",
        "div_floor%0#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "395": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "396": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "399": {
      "op": "replace2 0",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "numbers#1"
      ]
    },
    "401": {
      "op": "frame_bury 8",
      "defined_out": [
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0"
      ]
    },
    "403": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0",
        "1"
      ]
    },
    "404": {
      "op": "+",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "temp#0"
      ]
    },
    "405": {
      "op": "frame_bury 7",
      "defined_out": [
        "numbers#1",
        "temp#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "407": {
      "op": "b forLoop_for_header@1"
    },
    "410": {
      "block": "forLoop_after_for@4",
      "stack_in": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "numbers#1"
      ]
    },
    "412": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "numbers#1",
        "0"
      ]
    },
    "413": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "aggregate%array_length%0#0"
      ]
    },
    "414": {
      "op": "frame_bury 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "416": {
      "op": "intc_1 // 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0"
      ]
    },
    "417": {
      "op": "frame_bury 3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "419": {
      "op": "frame_dig 6",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "reversed#1"
      ]
    },
    "421": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "423": {
      "block": "forLoop_for_header@5",
      "stack_in": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0"
      ]
    },
    "425": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "427": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%0#0",
        "continue_looping%1#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "continue_looping%1#0"
      ]
    },
    "428": {
      "op": "bz forLoop_after_for@8",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "431": {
      "op": "frame_dig 8",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "numbers#1"
      ]
    },
    "433": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "436": {
      "op": "frame_dig 3",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ]
    },
    "438": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "439": {
      "op": "cover 2",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "441": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "442": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "443": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "8"
      ]
    },
    "444": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "445": {
      "op": "bytec_2 // 0x0001",
      "defined_out": [
        "0x0001",
        "aggregate%array_length%0#0",
        "aggregate%encoded_element%0#0",
        "item_index_internal%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%encoded_element%0#0",
        "0x0001"
      ]
    },
    "446": {
      "op": "swap",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "0x0001",
        "aggregate%encoded_element%0#0"
      ]
    },
    "447": {
      "op": "concat",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%head%1#0",
        "item_index_internal%0#0",
        "numbers#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%head%1#0"
      ]
    },
    "448": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%head%1#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%head%1#0",
        "reversed#1"
      ]
    },
    "450": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%head%1#0",
        "extract_to_end%2#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "aggregate%head%1#0",
        "extract_to_end%2#0"
      ]
    },
    "453": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%array_length%0#0",
        "concat%1#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "concat%1#0"
      ]
    },
    "454": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "concat%1#0",
        "concat%1#0 (copy)",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "concat%1#0",
        "concat%1#0 (copy)"
      ]
    },
    "455": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "concat%1#0",
        "extract_to_end%3#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "concat%1#0",
        "extract_to_end%3#0"
      ]
    },
    "458": {
      "op": "len",
      "defined_out": [
        "aggregate%array_length%0#0",
        "concat%1#0",
        "item_index_internal%0#0",
        "len%1#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "concat%1#0",
        "len%1#0"
      ]
    },
    "459": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "concat%1#0",
        "len%1#0",
        "8"
      ]
    },
    "460": {
      "op": "/",
      "defined_out": [
        "aggregate%array_length%0#0",
        "concat%1#0",
        "div_floor%1#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "concat%1#0",
        "div_floor%1#0"
      ]
    },
    "461": {
      "op": "itob",
      "defined_out": [
        "aggregate%array_length%0#0",
        "as_bytes%1#0",
        "concat%1#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "concat%1#0",
        "as_bytes%1#0"
      ]
    },
    "462": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "as_u16_bytes%1#0",
        "concat%1#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "concat%1#0",
        "as_u16_bytes%1#0"
      ]
    },
    "465": {
      "op": "replace2 0",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "reversed#1"
      ]
    },
    "467": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0"
      ]
    },
    "469": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "470": {
      "op": "+",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%0#0"
      ]
    },
    "471": {
      "op": "frame_bury 3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "item_index_internal%0#0",
        "numbers#1",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "473": {
      "op": "b forLoop_for_header@5"
    },
    "476": {
      "block": "forLoop_after_for@8",
      "stack_in": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "sum#0"
      ]
    },
    "477": {
      "op": "frame_bury 5",
      "defined_out": [
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "479": {
      "op": "frame_dig 0",
      "defined_out": [
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "reversed#1"
      ]
    },
    "481": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "reversed#1",
        "0"
      ]
    },
    "482": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "aggregate%array_length%1#0"
      ]
    },
    "483": {
      "op": "frame_bury 2",
      "defined_out": [
        "aggregate%array_length%1#0",
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "485": {
      "op": "intc_1 // 0",
      "defined_out": [
        "aggregate%array_length%1#0",
        "item_index_internal%1#0",
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0"
      ]
    },
    "486": {
      "op": "frame_bury 4",
      "defined_out": [
        "aggregate%array_length%1#0",
        "item_index_internal%1#0",
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "488": {
      "block": "forLoop_for_header@9",
      "stack_in": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0"
      ]
    },
    "490": {
      "op": "frame_dig 2",
      "defined_out": [
        "aggregate%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0",
        "aggregate%array_length%1#0"
      ]
    },
    "492": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%1#0",
        "continue_looping%2#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "continue_looping%2#0"
      ]
    },
    "493": {
      "op": "bz forLoop_after_for@12",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "496": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%array_length%1#0",
        "item_index_internal%1#0",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "reversed#1"
      ]
    },
    "498": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%1#0",
        "aggregate%array_trimmed%1#0",
        "item_index_internal%1#0",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "aggregate%array_trimmed%1#0"
      ]
    },
    "501": {
      "op": "frame_dig 4",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "aggregate%array_trimmed%1#0",
        "item_index_internal%1#0"
      ]
    },
    "503": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%1#0",
        "aggregate%array_trimmed%1#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "aggregate%array_trimmed%1#0",
        "item_index_internal%1#0 (copy)",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "504": {
      "op": "cover 2",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0",
        "aggregate%array_trimmed%1#0",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "506": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%array_length%1#0",
        "aggregate%array_trimmed%1#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0",
        "aggregate%array_trimmed%1#0",
        "item_index_internal%1#0 (copy)",
        "8"
      ]
    },
    "507": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%1#0",
        "aggregate%array_trimmed%1#0",
        "aggregate%bytes_offset%1#0",
        "item_index_internal%1#0",
        "reversed#1"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0",
        "aggregate%array_trimmed%1#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "508": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%array_length%1#0",
        "item_index_internal%1#0",
        "reversed#1",
        "temp\u2082#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0",
        "temp\u2082#0"
      ]
    },
    "509": {
      "op": "frame_dig 5",
      "defined_out": [
        "aggregate%array_length%1#0",
        "item_index_internal%1#0",
        "reversed#1",
        "sum#0",
        "temp\u2082#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0",
        "temp\u2082#0",
        "sum#0"
      ]
    },
    "511": {
      "op": "+",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0",
        "sum#0"
      ]
    },
    "512": {
      "op": "frame_bury 5",
      "defined_out": [
        "aggregate%array_length%1#0",
        "item_index_internal%1#0",
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0"
      ]
    },
    "514": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%array_length%1#0",
        "item_index_internal%1#0",
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0",
        "1"
      ]
    },
    "515": {
      "op": "+",
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "item_index_internal%1#0"
      ]
    },
    "516": {
      "op": "frame_bury 4",
      "defined_out": [
        "aggregate%array_length%1#0",
        "item_index_internal%1#0",
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ]
    },
    "518": {
      "op": "b forLoop_for_header@9"
    },
    "521": {
      "block": "forLoop_after_for@12",
      "stack_in": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "sum#0"
      ]
    },
    "523": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "sum#0",
        "6"
      ]
    },
    "525": {
      "op": "==",
      "defined_out": [
        "sum#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "tmp%1#0"
      ]
    },
    "526": {
      "error": "Sum of reversed array should be 6",
      "op": "assert // Sum of reversed array should be 6",
      "defined_out": [
        "reversed#1",
        "sum#0"
      ],
      "stack_out": [
        "reversed#1",
        "aggregate%array_length%0#0",
        "aggregate%array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "temp#0",
        "numbers#1",
        "reversed#1"
      ]
    },
    "527": {
      "retsub": true,
      "op": "retsub"
    },
    "528": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay",
      "params": {
        "date#0": "uint64"
      },
      "block": "getDay",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "531": {
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "533": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "1"
      ]
    },
    "534": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "535": {
      "op": "bz getDay_after_if_else@3",
      "stack_out": []
    },
    "538": {
      "op": "pushbytes \"Monday\"",
      "defined_out": [
        "\"Monday\""
      ],
      "stack_out": [
        "\"Monday\""
      ]
    },
    "546": {
      "retsub": true,
      "op": "retsub"
    },
    "547": {
      "block": "getDay_after_if_else@3",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "549": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "2"
      ]
    },
    "550": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "551": {
      "op": "bz getDay_after_if_else@6",
      "stack_out": []
    },
    "554": {
      "op": "pushbytes \"Tuesday\"",
      "defined_out": [
        "\"Tuesday\""
      ],
      "stack_out": [
        "\"Tuesday\""
      ]
    },
    "563": {
      "retsub": true,
      "op": "retsub"
    },
    "564": {
      "block": "getDay_after_if_else@6",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "566": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "3"
      ]
    },
    "568": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "569": {
      "op": "bz getDay_after_if_else@9",
      "stack_out": []
    },
    "572": {
      "op": "pushbytes \"Wednesday\"",
      "defined_out": [
        "\"Wednesday\""
      ],
      "stack_out": [
        "\"Wednesday\""
      ]
    },
    "583": {
      "retsub": true,
      "op": "retsub"
    },
    "584": {
      "block": "getDay_after_if_else@9",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "586": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "4"
      ]
    },
    "588": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "589": {
      "op": "bz getDay_after_if_else@12",
      "stack_out": []
    },
    "592": {
      "op": "pushbytes \"Thursday\"",
      "defined_out": [
        "\"Thursday\""
      ],
      "stack_out": [
        "\"Thursday\""
      ]
    },
    "602": {
      "retsub": true,
      "op": "retsub"
    },
    "603": {
      "block": "getDay_after_if_else@12",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "605": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "5"
      ]
    },
    "607": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "608": {
      "op": "bz getDay_after_if_else@15",
      "stack_out": []
    },
    "611": {
      "op": "pushbytes \"Friday\"",
      "defined_out": [
        "\"Friday\""
      ],
      "stack_out": [
        "\"Friday\""
      ]
    },
    "619": {
      "retsub": true,
      "op": "retsub"
    },
    "620": {
      "block": "getDay_after_if_else@15",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "622": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "6"
      ]
    },
    "624": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "625": {
      "op": "bz getDay_after_if_else@18",
      "stack_out": []
    },
    "628": {
      "op": "pushbytes \"Saturday\"",
      "defined_out": [
        "\"Saturday\""
      ],
      "stack_out": [
        "\"Saturday\""
      ]
    },
    "638": {
      "retsub": true,
      "op": "retsub"
    },
    "639": {
      "block": "getDay_after_if_else@18",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "641": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "7"
      ]
    },
    "643": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "644": {
      "op": "bz getDay_after_if_else@21",
      "stack_out": []
    },
    "647": {
      "op": "pushbytes \"Sunday\"",
      "defined_out": [
        "\"Sunday\""
      ],
      "stack_out": [
        "\"Sunday\""
      ]
    },
    "655": {
      "retsub": true,
      "op": "retsub"
    },
    "656": {
      "block": "getDay_after_if_else@21",
      "stack_in": [],
      "op": "pushbytes \"Invalid day\"",
      "defined_out": [
        "\"Invalid day\""
      ],
      "stack_out": [
        "\"Invalid day\""
      ]
    },
    "669": {
      "retsub": true,
      "op": "retsub"
    },
    "670": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost",
      "params": {
        "boxSizeLabel#0": "bytes",
        "boxName#0": "bytes"
      },
      "block": "calculateBoxStorageCost",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "673": {
      "op": "frame_dig -1",
      "defined_out": [
        "boxName#0 (copy)"
      ],
      "stack_out": [
        "boxName#0 (copy)"
      ]
    },
    "675": {
      "op": "len",
      "defined_out": [
        "boxNameLength#0"
      ],
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "676": {
      "op": "frame_dig -2",
      "defined_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "678": {
      "op": "pushbytes \"xs\"",
      "defined_out": [
        "\"xs\"",
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"xs\""
      ]
    },
    "682": {
      "op": "==",
      "defined_out": [
        "boxNameLength#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%1#0"
      ]
    },
    "683": {
      "op": "bz calculateBoxStorageCost_after_if_else@3",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "686": {
      "op": "intc_2 // 8",
      "defined_out": [
        "boxNameLength#0",
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "687": {
      "block": "calculateBoxStorageCost_block@17",
      "stack_in": [
        "boxNameLength#0",
        "boxSize#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "boxNameLength#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0",
        "boxNameLength#0"
      ]
    },
    "689": {
      "op": "+",
      "defined_out": [
        "boxNameLength#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%6#0"
      ]
    },
    "690": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "boxNameLength#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%6#0",
        "400"
      ]
    },
    "693": {
      "op": "*",
      "defined_out": [
        "boxNameLength#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%7#0"
      ]
    },
    "694": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "boxNameLength#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%7#0",
        "2500"
      ]
    },
    "697": {
      "op": "+",
      "defined_out": [
        "boxNameLength#0",
        "mbrIncrease#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "mbrIncrease#0"
      ]
    },
    "698": {
      "op": "swap"
    },
    "699": {
      "retsub": true,
      "op": "retsub"
    },
    "700": {
      "block": "calculateBoxStorageCost_after_if_else@3",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "702": {
      "op": "pushbytes \"sm\"",
      "defined_out": [
        "\"sm\"",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"sm\""
      ]
    },
    "706": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%2#0"
      ]
    },
    "707": {
      "op": "bz calculateBoxStorageCost_after_if_else@6",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "710": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "712": {
      "op": "b calculateBoxStorageCost_block@17"
    },
    "715": {
      "block": "calculateBoxStorageCost_after_if_else@6",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "717": {
      "op": "pushbytes \"md\"",
      "defined_out": [
        "\"md\"",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"md\""
      ]
    },
    "721": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%3#0"
      ]
    },
    "722": {
      "op": "bz calculateBoxStorageCost_after_if_else@9",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "725": {
      "op": "pushint 256 // 256",
      "defined_out": [
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "728": {
      "op": "b calculateBoxStorageCost_block@17"
    },
    "731": {
      "block": "calculateBoxStorageCost_after_if_else@9",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "733": {
      "op": "pushbytes \"lg\"",
      "defined_out": [
        "\"lg\"",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"lg\""
      ]
    },
    "737": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%4#0"
      ]
    },
    "738": {
      "op": "bz calculateBoxStorageCost_after_if_else@12",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "741": {
      "op": "pushint 1024 // 1024",
      "defined_out": [
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "744": {
      "op": "b calculateBoxStorageCost_block@17"
    },
    "747": {
      "block": "calculateBoxStorageCost_after_if_else@12",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "749": {
      "op": "pushbytes \"max\"",
      "defined_out": [
        "\"max\"",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"max\""
      ]
    },
    "754": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%5#0"
      ]
    },
    "755": {
      "op": "bz calculateBoxStorageCost_after_if_else@15",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "758": {
      "op": "pushint 32000 // 32000",
      "defined_out": [
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "762": {
      "op": "b calculateBoxStorageCost_block@17"
    },
    "765": {
      "block": "calculateBoxStorageCost_after_if_else@15",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "0"
      ]
    },
    "766": {
      "op": "swap"
    },
    "767": {
      "retsub": true,
      "op": "retsub"
    },
    "768": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.loop",
      "params": {},
      "block": "loop",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "771": {
      "op": "pushint 10 // 10"
    },
    "773": {
      "op": "intc_1 // 0",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "774": {
      "block": "loop_while_top@1",
      "stack_in": [
        "num#0",
        "loopCount#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "776": {
      "op": "bz loop_block@9",
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "779": {
      "op": "frame_dig 0",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "781": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "5"
      ]
    },
    "783": {
      "op": ">",
      "defined_out": [
        "num#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "tmp%1#0"
      ]
    },
    "784": {
      "op": "bz loop_after_if_else@4",
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "787": {
      "op": "frame_dig 0",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "789": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "1"
      ]
    },
    "790": {
      "op": "-",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "791": {
      "op": "frame_bury 0",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "793": {
      "op": "frame_dig 1",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "loopCount#0"
      ]
    },
    "795": {
      "op": "intc_0 // 1",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "loopCount#0",
        "1"
      ]
    },
    "796": {
      "op": "+",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "loopCount#0"
      ]
    },
    "797": {
      "op": "frame_bury 1",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "799": {
      "op": "b loop_while_top@1"
    },
    "802": {
      "block": "loop_after_if_else@4",
      "stack_in": [
        "num#0",
        "loopCount#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "804": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "2"
      ]
    },
    "805": {
      "op": "-",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "806": {
      "op": "dup",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "num#0"
      ]
    },
    "807": {
      "op": "frame_bury 0",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "809": {
      "op": "frame_dig 1",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "loopCount#0"
      ]
    },
    "811": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "loopCount#0",
        "1"
      ]
    },
    "812": {
      "op": "+",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "loopCount#0"
      ]
    },
    "813": {
      "op": "frame_bury 1",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "815": {
      "op": "intc_0 // 1",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "1"
      ]
    },
    "816": {
      "op": "==",
      "defined_out": [
        "loopCount#0",
        "num#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "tmp%6#0"
      ]
    },
    "817": {
      "op": "bz loop_while_top@1",
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "820": {
      "block": "loop_block@9",
      "stack_in": [
        "num#0",
        "loopCount#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "loopCount#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "loopCount#0"
      ]
    },
    "822": {
      "op": "frame_bury 0"
    },
    "824": {
      "retsub": true,
      "op": "retsub"
    }
  }
}