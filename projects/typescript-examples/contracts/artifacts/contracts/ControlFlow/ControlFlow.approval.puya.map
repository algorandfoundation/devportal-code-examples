{
  "version": 3,
  "sources": [
    "/Users/hyunggunkim/Documents/buidl/new-devportal/code-examples/devportal-code-examples/projects/typescript-examples/contracts/ControlFlow/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAgBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AA4JG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnDA;;AAAA;AAAA;AAAA;;AAAA;AAzGH;;;AAAA;;;AAAA;;;AAAA;;;AAyGG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAxEH;;;AAAA;AAwEG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAvBH;;;AAAA;AAuBG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAPH;;;AAAA;AAOG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAOE;;;AAEM;;AAAiB;;;AAAjB;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;AAAP;AACS;;AAAiB;;AAAjB;AAAJ;;;AACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AASJ;;;AAES;;AAAS;AAAT;AAAA;;;AAAmB;;;;;;AAA1B;AAAmC;;;;;AAAnC;AASF;;;;;;;;AAG0B;AAGL;AAAA;;AAAO;;AAAP;AAAnB;;;AACY;;AAAA;;;AAAa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAb;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AADO;AAAA;AAAA;;;;;AAKM;AAAA;;AAIzB;;AAAA;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAD;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;AAIK;AAAd;;AACJ;;AAAA;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;;AAAA;AAAA;;;;;;;;;AAIK;;AAAQ;;AAAR;AAAP;AAEA;AASF;;;AAGgB;;AAAA;AAAA;AAAZ;;;AACS;;;;;;;;AAAP;AACU;;AAAA;AAAA;AAAZ;;;AACS;;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;;;AAAP;AACU;;AAAA;;AAAA;AAAZ;;;AACS;;;;;;;;AAAP;AAEO;;;;;;;;;;;;;AAAP;AAeN;;;AAOQ;;AAAuC;AAMtC;;AAAA;;;;AAAA;AAAL;;;AACY;AA0ByC;;AAAA;AApC1B;;;AAoCU;AArCd;;;AAqCG;AAE5B;AAAA;AAzBO;;AAAA;;;;AAAA;AAAL;;;AACY;;AACV;;;AAEG;;AAAA;;;;AAAA;AAAL;;;AACY;;;AACV;;;AAEG;;AAAA;;;;AAAA;AAAL;;;AACY;;;AACV;;;AAEG;;AAAA;;;;;AAAA;AAAL;;;AACY;;;;AACV;;;AAIO;AAAP;AAAA;AAgBN;;;AAEoB;;AACM;AAExB;;AAAA;;;AACM;;AAAM;;AAAN;AAAJ;;;AACE;;AAAO;AAAP;AAAA;;AACA;;AAAa;AAAb;AAAA;;AACA;;;AAGF;;AAAO;AAAP;AAAA;AAAA;;AACA;;AAAa;AAAb;AAAA;;AAEY;AAAR;AAAJ;;;AAKF;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x0000"
    },
    "17": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "19": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "22": {
      "op": "pushbytess 0xef082f7b 0x94fb7ef1 0x722ba668 0x7fac6a5e 0xc9c2bc57 0xf82a2654 // method \"isRich(uint64)string\", method \"isEven(uint64)string\", method \"forLoop()uint64[]\", method \"getDay(uint64)string\", method \"calculateBoxStorageCost(string,string)uint64\", method \"loop()uint64\"",
      "defined_out": [
        "Method(calculateBoxStorageCost(string,string)uint64)",
        "Method(forLoop()uint64[])",
        "Method(getDay(uint64)string)",
        "Method(isEven(uint64)string)",
        "Method(isRich(uint64)string)",
        "Method(loop()uint64)"
      ],
      "stack_out": [
        "Method(isRich(uint64)string)",
        "Method(isEven(uint64)string)",
        "Method(forLoop()uint64[])",
        "Method(getDay(uint64)string)",
        "Method(calculateBoxStorageCost(string,string)uint64)",
        "Method(loop()uint64)"
      ]
    },
    "54": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calculateBoxStorageCost(string,string)uint64)",
        "Method(forLoop()uint64[])",
        "Method(getDay(uint64)string)",
        "Method(isEven(uint64)string)",
        "Method(isRich(uint64)string)",
        "Method(loop()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(isRich(uint64)string)",
        "Method(isEven(uint64)string)",
        "Method(forLoop()uint64[])",
        "Method(getDay(uint64)string)",
        "Method(calculateBoxStorageCost(string,string)uint64)",
        "Method(loop()uint64)",
        "tmp%2#0"
      ]
    },
    "57": {
      "op": "match main_isRich_route@3 main_isEven_route@4 main_forLoop_route@5 main_getDay_route@6 main_calculateBoxStorageCost_route@7 main_loop_route@8",
      "stack_out": []
    },
    "71": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "72": {
      "op": "return",
      "stack_out": []
    },
    "73": {
      "block": "main_loop_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "75": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "76": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "77": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "79": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "80": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.loop",
      "op": "callsub loop",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "83": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "84": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "86": {
      "op": "concat",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "87": {
      "op": "log",
      "stack_out": []
    },
    "88": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "89": {
      "op": "return",
      "stack_out": []
    },
    "90": {
      "block": "main_calculateBoxStorageCost_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "92": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "93": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "94": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "96": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "97": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "100": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "103": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "106": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%32#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%34#0"
      ]
    },
    "109": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost",
      "op": "callsub calculateBoxStorageCost",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "112": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "113": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "114": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "115": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "116": {
      "op": "log",
      "stack_out": []
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "118": {
      "op": "return",
      "stack_out": []
    },
    "119": {
      "block": "main_getDay_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "121": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "122": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "123": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "125": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "126": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "129": {
      "op": "btoi",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "130": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay",
      "op": "callsub getDay",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "133": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "134": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%2#0"
      ]
    },
    "135": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%2#0"
      ]
    },
    "136": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%2#0"
      ]
    },
    "139": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%2#0"
      ]
    },
    "140": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "141": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "144": {
      "op": "log",
      "stack_out": []
    },
    "145": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "146": {
      "op": "return",
      "stack_out": []
    },
    "147": {
      "block": "main_forLoop_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "149": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "150": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "151": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "153": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "154": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.forLoop",
      "op": "callsub forLoop",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "157": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "158": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%19#0"
      ]
    },
    "159": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "160": {
      "op": "log",
      "stack_out": []
    },
    "161": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "return",
      "stack_out": []
    },
    "163": {
      "block": "main_isEven_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "165": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "166": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "167": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "169": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "170": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "173": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "174": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.isEven",
      "op": "callsub isEven",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "177": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "178": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "179": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "180": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "183": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "184": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "185": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "188": {
      "op": "log",
      "stack_out": []
    },
    "189": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "190": {
      "op": "return",
      "stack_out": []
    },
    "191": {
      "block": "main_isRich_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "193": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "194": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "195": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "197": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "198": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "201": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "202": {
      "callsub": "contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich",
      "op": "callsub isRich",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "205": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "206": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "207": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "208": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "211": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "213": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "214": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "215": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "216": {
      "op": "log",
      "stack_out": []
    },
    "217": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "218": {
      "op": "return",
      "stack_out": []
    },
    "219": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "221": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "224": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "226": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "227": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "228": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "229": {
      "op": "return",
      "stack_out": []
    },
    "230": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.isRich",
      "params": {
        "accountBalance#0": "uint64"
      },
      "block": "isRich",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "233": {
      "op": "frame_dig -1",
      "defined_out": [
        "accountBalance#0 (copy)"
      ],
      "stack_out": [
        "accountBalance#0 (copy)"
      ]
    },
    "235": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "accountBalance#0 (copy)"
      ],
      "stack_out": [
        "accountBalance#0 (copy)",
        "1000"
      ]
    },
    "238": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "bz isRich_else_body@2",
      "stack_out": []
    },
    "242": {
      "op": "pushbytes \"This account is rich!\"",
      "defined_out": [
        "\"This account is rich!\""
      ],
      "stack_out": [
        "\"This account is rich!\""
      ]
    },
    "265": {
      "retsub": true,
      "op": "retsub"
    },
    "266": {
      "block": "isRich_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "accountBalance#0 (copy)"
      ],
      "stack_out": [
        "accountBalance#0 (copy)"
      ]
    },
    "268": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "accountBalance#0 (copy)"
      ],
      "stack_out": [
        "accountBalance#0 (copy)",
        "100"
      ]
    },
    "270": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "271": {
      "op": "bz isRich_else_body@4",
      "stack_out": []
    },
    "274": {
      "op": "pushbytes \"This account is doing well.\"",
      "defined_out": [
        "\"This account is doing well.\""
      ],
      "stack_out": [
        "\"This account is doing well.\""
      ]
    },
    "303": {
      "retsub": true,
      "op": "retsub"
    },
    "304": {
      "block": "isRich_else_body@4",
      "stack_in": [],
      "op": "pushbytes \"This account is poor :(\"",
      "defined_out": [
        "\"This account is poor :(\""
      ],
      "stack_out": [
        "\"This account is poor :(\""
      ]
    },
    "329": {
      "retsub": true,
      "op": "retsub"
    },
    "330": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.isEven",
      "params": {
        "number#0": "uint64"
      },
      "block": "isEven",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "333": {
      "op": "frame_dig -1",
      "defined_out": [
        "number#0 (copy)"
      ],
      "stack_out": [
        "number#0 (copy)"
      ]
    },
    "335": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "number#0 (copy)"
      ],
      "stack_out": [
        "number#0 (copy)",
        "2"
      ]
    },
    "336": {
      "op": "%",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "337": {
      "op": "bnz isEven_ternary_false@2",
      "stack_out": []
    },
    "340": {
      "op": "pushbytes \"Even\"",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "346": {
      "retsub": true,
      "op": "retsub"
    },
    "347": {
      "block": "isEven_ternary_false@2",
      "stack_in": [],
      "op": "pushbytes \"Odd\"",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "352": {
      "retsub": true,
      "op": "retsub"
    },
    "353": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.forLoop",
      "params": {},
      "block": "forLoop",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "356": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reversed#0"
      ]
    },
    "357": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "reversed#0",
        "array_length%0#0"
      ]
    },
    "359": {
      "op": "dupn 4",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0"
      ]
    },
    "361": {
      "op": "bytec_1 // 0x0000"
    },
    "362": {
      "op": "intc_1 // 0",
      "defined_out": [
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "363": {
      "block": "forLoop_for_header@1",
      "stack_in": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "item#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0"
      ]
    },
    "365": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "4"
      ]
    },
    "367": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "continue_looping%0#0"
      ]
    },
    "368": {
      "op": "bz forLoop_after_for@4",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "371": {
      "op": "frame_dig 6",
      "defined_out": [
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "numbers#0"
      ]
    },
    "373": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "376": {
      "op": "frame_dig 7",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "item#0"
      ]
    },
    "378": {
      "op": "dup",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "item#0",
        "item#0 (copy)",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "item#0 (copy)",
        "item#0 (copy)"
      ]
    },
    "379": {
      "op": "cover 2",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "item#0 (copy)"
      ]
    },
    "381": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "expr_value_trimmed%0#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1"
      ]
    },
    "382": {
      "op": "dup",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%0#1 (copy)",
        "expr_value_trimmed%0#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1",
        "array%sub_item%0#1 (copy)"
      ]
    },
    "383": {
      "op": "len",
      "defined_out": [
        "array%sub_item%0#1",
        "byte_len%0#0",
        "expr_value_trimmed%0#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1",
        "byte_len%0#0"
      ]
    },
    "384": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array%sub_item%0#1",
        "byte_len%0#0",
        "expr_value_trimmed%0#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "385": {
      "op": "/",
      "defined_out": [
        "array%sub_item%0#1",
        "expr_value_trimmed%0#0",
        "item#0",
        "len_%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1",
        "len_%0#0"
      ]
    },
    "386": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "as_bytes%0#0",
        "expr_value_trimmed%0#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1",
        "as_bytes%0#0"
      ]
    },
    "387": {
      "op": "extract 6 2",
      "defined_out": [
        "array%sub_item%0#1",
        "expr_value_trimmed%0#0",
        "item#0",
        "len_16_bit%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "array%sub_item%0#1",
        "len_16_bit%0#0"
      ]
    },
    "390": {
      "op": "swap",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "len_16_bit%0#0",
        "array%sub_item%0#1"
      ]
    },
    "391": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "expr_value_trimmed%0#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "concat_result%0#0"
      ]
    },
    "392": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%2#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%2#0"
      ]
    },
    "395": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "concatenated%1#0"
      ]
    },
    "396": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "397": {
      "op": "len",
      "defined_out": [
        "byte_len%1#0",
        "concatenated%1#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "398": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "concatenated%1#0",
        "byte_len%1#0",
        "8"
      ]
    },
    "399": {
      "op": "/",
      "defined_out": [
        "concatenated%1#0",
        "item#0",
        "len_%1#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "400": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "401": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "item#0",
        "len_16_bit%1#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "404": {
      "op": "swap",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "405": {
      "op": "concat",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "numbers#0"
      ]
    },
    "406": {
      "op": "frame_bury 6",
      "defined_out": [
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0"
      ]
    },
    "408": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0",
        "1"
      ]
    },
    "409": {
      "op": "+",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item#0"
      ]
    },
    "410": {
      "op": "frame_bury 7",
      "defined_out": [
        "item#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "412": {
      "op": "b forLoop_for_header@1"
    },
    "415": {
      "block": "forLoop_after_for@4",
      "stack_in": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ],
      "op": "bytec_1 // 0x0000",
      "defined_out": [
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "reversed#0"
      ]
    },
    "416": {
      "op": "frame_bury 0",
      "defined_out": [
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "418": {
      "op": "frame_dig 6",
      "defined_out": [
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "numbers#0"
      ]
    },
    "420": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "numbers#0",
        "0"
      ]
    },
    "421": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "array_length%0#0"
      ]
    },
    "422": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_length%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "424": {
      "op": "intc_1 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0"
      ]
    },
    "425": {
      "op": "frame_bury 3",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "427": {
      "block": "forLoop_for_header@5",
      "stack_in": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0"
      ]
    },
    "429": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "431": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%1#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "continue_looping%1#0"
      ]
    },
    "432": {
      "op": "bz forLoop_after_for@8",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "435": {
      "op": "frame_dig 6",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "numbers#0"
      ]
    },
    "437": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "array_head_and_tail%0#0"
      ]
    },
    "440": {
      "op": "frame_dig 3",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "442": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "443": {
      "op": "cover 2",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "445": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "446": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "447": {
      "op": "extract_uint64",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "num#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "num#0"
      ]
    },
    "448": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%1#1",
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array%sub_item%1#1"
      ]
    },
    "449": {
      "op": "dup",
      "defined_out": [
        "array%sub_item%1#1",
        "array%sub_item%1#1 (copy)",
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array%sub_item%1#1",
        "array%sub_item%1#1 (copy)"
      ]
    },
    "450": {
      "op": "len",
      "defined_out": [
        "array%sub_item%1#1",
        "array_length%0#0",
        "byte_len%2#0",
        "item_index_internal%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array%sub_item%1#1",
        "byte_len%2#0"
      ]
    },
    "451": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array%sub_item%1#1",
        "byte_len%2#0",
        "8"
      ]
    },
    "452": {
      "op": "/",
      "defined_out": [
        "array%sub_item%1#1",
        "array_length%0#0",
        "item_index_internal%0#0",
        "len_%2#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array%sub_item%1#1",
        "len_%2#0"
      ]
    },
    "453": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%1#1",
        "array_length%0#0",
        "as_bytes%2#0",
        "item_index_internal%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array%sub_item%1#1",
        "as_bytes%2#0"
      ]
    },
    "454": {
      "op": "extract 6 2",
      "defined_out": [
        "array%sub_item%1#1",
        "array_length%0#0",
        "item_index_internal%0#0",
        "len_16_bit%2#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "array%sub_item%1#1",
        "len_16_bit%2#0"
      ]
    },
    "457": {
      "op": "swap",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "len_16_bit%2#0",
        "array%sub_item%1#1"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "array_length%0#0",
        "concat_result%2#0",
        "item_index_internal%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "concat_result%2#0"
      ]
    },
    "459": {
      "op": "extract 2 0",
      "defined_out": [
        "array_length%0#0",
        "expr_value_trimmed%4#0",
        "item_index_internal%0#0",
        "numbers#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "expr_value_trimmed%4#0"
      ]
    },
    "462": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_length%0#0",
        "expr_value_trimmed%4#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "expr_value_trimmed%4#0",
        "reversed#0"
      ]
    },
    "464": {
      "op": "extract 2 0",
      "defined_out": [
        "array_length%0#0",
        "expr_value_trimmed%4#0",
        "expr_value_trimmed%5#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "expr_value_trimmed%4#0",
        "expr_value_trimmed%5#0"
      ]
    },
    "467": {
      "op": "concat",
      "defined_out": [
        "array_length%0#0",
        "concatenated%3#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "concatenated%3#0"
      ]
    },
    "468": {
      "op": "dup",
      "defined_out": [
        "array_length%0#0",
        "concatenated%3#0",
        "concatenated%3#0 (copy)",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "concatenated%3#0",
        "concatenated%3#0 (copy)"
      ]
    },
    "469": {
      "op": "len",
      "defined_out": [
        "array_length%0#0",
        "byte_len%3#0",
        "concatenated%3#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "concatenated%3#0",
        "byte_len%3#0"
      ]
    },
    "470": {
      "op": "intc_2 // 8",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "concatenated%3#0",
        "byte_len%3#0",
        "8"
      ]
    },
    "471": {
      "op": "/",
      "defined_out": [
        "array_length%0#0",
        "concatenated%3#0",
        "item_index_internal%0#0",
        "len_%3#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "concatenated%3#0",
        "len_%3#0"
      ]
    },
    "472": {
      "op": "itob",
      "defined_out": [
        "array_length%0#0",
        "as_bytes%3#0",
        "concatenated%3#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "concatenated%3#0",
        "as_bytes%3#0"
      ]
    },
    "473": {
      "op": "extract 6 2",
      "defined_out": [
        "array_length%0#0",
        "concatenated%3#0",
        "item_index_internal%0#0",
        "len_16_bit%3#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "concatenated%3#0",
        "len_16_bit%3#0"
      ]
    },
    "476": {
      "op": "swap",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "len_16_bit%3#0",
        "concatenated%3#0"
      ]
    },
    "477": {
      "op": "concat",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "reversed#0"
      ]
    },
    "478": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0"
      ]
    },
    "480": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "481": {
      "op": "+",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%0#0"
      ]
    },
    "482": {
      "op": "frame_bury 3",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "numbers#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "484": {
      "op": "b forLoop_for_header@5"
    },
    "487": {
      "block": "forLoop_after_for@8",
      "stack_in": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "sum#0"
      ]
    },
    "488": {
      "op": "frame_bury 5",
      "defined_out": [
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "490": {
      "op": "frame_dig 0",
      "defined_out": [
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "reversed#0"
      ]
    },
    "492": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "reversed#0",
        "0"
      ]
    },
    "493": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%1#0",
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "array_length%1#0"
      ]
    },
    "494": {
      "op": "frame_bury 2",
      "defined_out": [
        "array_length%1#0",
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "496": {
      "op": "intc_1 // 0",
      "defined_out": [
        "array_length%1#0",
        "item_index_internal%1#0",
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0"
      ]
    },
    "497": {
      "op": "frame_bury 4",
      "defined_out": [
        "array_length%1#0",
        "item_index_internal%1#0",
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "499": {
      "block": "forLoop_for_header@9",
      "stack_in": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0"
      ]
    },
    "501": {
      "op": "frame_dig 2",
      "defined_out": [
        "array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0",
        "array_length%1#0"
      ]
    },
    "503": {
      "op": "<",
      "defined_out": [
        "array_length%1#0",
        "continue_looping%2#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "continue_looping%2#0"
      ]
    },
    "504": {
      "op": "bz forLoop_after_for@12",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "507": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_length%1#0",
        "item_index_internal%1#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "reversed#0"
      ]
    },
    "509": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_index_internal%1#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "array_head_and_tail%1#0"
      ]
    },
    "512": {
      "op": "frame_dig 4",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "array_head_and_tail%1#0",
        "item_index_internal%1#0"
      ]
    },
    "514": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "array_head_and_tail%1#0",
        "item_index_internal%1#0 (copy)",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "515": {
      "op": "cover 2",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0",
        "array_head_and_tail%1#0",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "517": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0",
        "array_head_and_tail%1#0",
        "item_index_internal%1#0 (copy)",
        "8"
      ]
    },
    "518": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%1#0",
        "array_length%1#0",
        "item_index_internal%1#0",
        "item_offset%1#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0",
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "519": {
      "op": "extract_uint64",
      "defined_out": [
        "array_length%1#0",
        "item_index_internal%1#0",
        "num\u2081#0",
        "reversed#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0",
        "num\u2081#0"
      ]
    },
    "520": {
      "op": "frame_dig 5",
      "defined_out": [
        "array_length%1#0",
        "item_index_internal%1#0",
        "num\u2081#0",
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0",
        "num\u2081#0",
        "sum#0"
      ]
    },
    "522": {
      "op": "+",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0",
        "sum#0"
      ]
    },
    "523": {
      "op": "frame_bury 5",
      "defined_out": [
        "array_length%1#0",
        "item_index_internal%1#0",
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0"
      ]
    },
    "525": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "array_length%1#0",
        "item_index_internal%1#0",
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0",
        "1"
      ]
    },
    "526": {
      "op": "+",
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "item_index_internal%1#0"
      ]
    },
    "527": {
      "op": "frame_bury 4",
      "defined_out": [
        "array_length%1#0",
        "item_index_internal%1#0",
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ]
    },
    "529": {
      "op": "b forLoop_for_header@9"
    },
    "532": {
      "block": "forLoop_after_for@12",
      "stack_in": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "sum#0"
      ]
    },
    "534": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "sum#0",
        "6"
      ]
    },
    "536": {
      "op": "==",
      "defined_out": [
        "sum#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "tmp%0#0"
      ]
    },
    "537": {
      "error": "Sum of reversed array should be 6",
      "op": "assert // Sum of reversed array should be 6",
      "defined_out": [
        "reversed#0",
        "sum#0"
      ],
      "stack_out": [
        "reversed#0",
        "array_length%0#0",
        "array_length%1#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "sum#0",
        "numbers#0",
        "item#0",
        "reversed#0"
      ]
    },
    "538": {
      "retsub": true,
      "op": "retsub"
    },
    "539": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.getDay",
      "params": {
        "date#0": "uint64"
      },
      "block": "getDay",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "542": {
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "544": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "1"
      ]
    },
    "545": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "op": "bz getDay_after_if_else@3",
      "stack_out": []
    },
    "549": {
      "op": "pushbytes \"Monday\"",
      "defined_out": [
        "\"Monday\""
      ],
      "stack_out": [
        "\"Monday\""
      ]
    },
    "557": {
      "retsub": true,
      "op": "retsub"
    },
    "558": {
      "block": "getDay_after_if_else@3",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "560": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "2"
      ]
    },
    "561": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "562": {
      "op": "bz getDay_after_if_else@6",
      "stack_out": []
    },
    "565": {
      "op": "pushbytes \"Tuesday\"",
      "defined_out": [
        "\"Tuesday\""
      ],
      "stack_out": [
        "\"Tuesday\""
      ]
    },
    "574": {
      "retsub": true,
      "op": "retsub"
    },
    "575": {
      "block": "getDay_after_if_else@6",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "577": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "3"
      ]
    },
    "579": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "580": {
      "op": "bz getDay_after_if_else@9",
      "stack_out": []
    },
    "583": {
      "op": "pushbytes \"Wednesday\"",
      "defined_out": [
        "\"Wednesday\""
      ],
      "stack_out": [
        "\"Wednesday\""
      ]
    },
    "594": {
      "retsub": true,
      "op": "retsub"
    },
    "595": {
      "block": "getDay_after_if_else@9",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "597": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "4"
      ]
    },
    "599": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "600": {
      "op": "bz getDay_after_if_else@12",
      "stack_out": []
    },
    "603": {
      "op": "pushbytes \"Thursday\"",
      "defined_out": [
        "\"Thursday\""
      ],
      "stack_out": [
        "\"Thursday\""
      ]
    },
    "613": {
      "retsub": true,
      "op": "retsub"
    },
    "614": {
      "block": "getDay_after_if_else@12",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "616": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "5"
      ]
    },
    "618": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "619": {
      "op": "bz getDay_after_if_else@15",
      "stack_out": []
    },
    "622": {
      "op": "pushbytes \"Friday\"",
      "defined_out": [
        "\"Friday\""
      ],
      "stack_out": [
        "\"Friday\""
      ]
    },
    "630": {
      "retsub": true,
      "op": "retsub"
    },
    "631": {
      "block": "getDay_after_if_else@15",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "633": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "6"
      ]
    },
    "635": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "636": {
      "op": "bz getDay_after_if_else@18",
      "stack_out": []
    },
    "639": {
      "op": "pushbytes \"Saturday\"",
      "defined_out": [
        "\"Saturday\""
      ],
      "stack_out": [
        "\"Saturday\""
      ]
    },
    "649": {
      "retsub": true,
      "op": "retsub"
    },
    "650": {
      "block": "getDay_after_if_else@18",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)"
      ]
    },
    "652": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "date#0 (copy)"
      ],
      "stack_out": [
        "date#0 (copy)",
        "7"
      ]
    },
    "654": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "655": {
      "op": "bz getDay_after_if_else@21",
      "stack_out": []
    },
    "658": {
      "op": "pushbytes \"Sunday\"",
      "defined_out": [
        "\"Sunday\""
      ],
      "stack_out": [
        "\"Sunday\""
      ]
    },
    "666": {
      "retsub": true,
      "op": "retsub"
    },
    "667": {
      "block": "getDay_after_if_else@21",
      "stack_in": [],
      "op": "pushbytes \"Invalid day\"",
      "defined_out": [
        "\"Invalid day\""
      ],
      "stack_out": [
        "\"Invalid day\""
      ]
    },
    "680": {
      "retsub": true,
      "op": "retsub"
    },
    "681": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.calculateBoxStorageCost",
      "params": {
        "boxSizeLabel#0": "bytes",
        "boxName#0": "bytes"
      },
      "block": "calculateBoxStorageCost",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "684": {
      "op": "frame_dig -1",
      "defined_out": [
        "boxName#0 (copy)"
      ],
      "stack_out": [
        "boxName#0 (copy)"
      ]
    },
    "686": {
      "op": "len",
      "defined_out": [
        "boxNameLength#0"
      ],
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "687": {
      "op": "frame_dig -2",
      "defined_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "689": {
      "op": "pushbytes \"xs\"",
      "defined_out": [
        "\"xs\"",
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"xs\""
      ]
    },
    "693": {
      "op": "==",
      "defined_out": [
        "boxNameLength#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%0#0"
      ]
    },
    "694": {
      "op": "bz calculateBoxStorageCost_after_if_else@3",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "697": {
      "op": "intc_2 // 8",
      "defined_out": [
        "boxNameLength#0",
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "698": {
      "block": "calculateBoxStorageCost_block@17",
      "stack_in": [
        "boxNameLength#0",
        "boxSize#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "boxNameLength#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0",
        "boxNameLength#0"
      ]
    },
    "700": {
      "op": "+",
      "defined_out": [
        "boxNameLength#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%5#0"
      ]
    },
    "701": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "boxNameLength#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%5#0",
        "400"
      ]
    },
    "704": {
      "op": "*",
      "defined_out": [
        "boxNameLength#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%6#0"
      ]
    },
    "705": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "boxNameLength#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%6#0",
        "2500"
      ]
    },
    "708": {
      "op": "+",
      "defined_out": [
        "boxNameLength#0",
        "mbrIncrease#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "mbrIncrease#0"
      ]
    },
    "709": {
      "op": "swap"
    },
    "710": {
      "retsub": true,
      "op": "retsub"
    },
    "711": {
      "block": "calculateBoxStorageCost_after_if_else@3",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "713": {
      "op": "pushbytes \"sm\"",
      "defined_out": [
        "\"sm\"",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"sm\""
      ]
    },
    "717": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%1#0"
      ]
    },
    "718": {
      "op": "bz calculateBoxStorageCost_after_if_else@6",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "721": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "723": {
      "op": "b calculateBoxStorageCost_block@17"
    },
    "726": {
      "block": "calculateBoxStorageCost_after_if_else@6",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "728": {
      "op": "pushbytes \"md\"",
      "defined_out": [
        "\"md\"",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"md\""
      ]
    },
    "732": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%2#0"
      ]
    },
    "733": {
      "op": "bz calculateBoxStorageCost_after_if_else@9",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "736": {
      "op": "pushint 256 // 256",
      "defined_out": [
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "739": {
      "op": "b calculateBoxStorageCost_block@17"
    },
    "742": {
      "block": "calculateBoxStorageCost_after_if_else@9",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "744": {
      "op": "pushbytes \"lg\"",
      "defined_out": [
        "\"lg\"",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"lg\""
      ]
    },
    "748": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%3#0"
      ]
    },
    "749": {
      "op": "bz calculateBoxStorageCost_after_if_else@12",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "752": {
      "op": "pushint 1024 // 1024",
      "defined_out": [
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "755": {
      "op": "b calculateBoxStorageCost_block@17"
    },
    "758": {
      "block": "calculateBoxStorageCost_after_if_else@12",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)"
      ]
    },
    "760": {
      "op": "pushbytes \"max\"",
      "defined_out": [
        "\"max\"",
        "boxSizeLabel#0 (copy)"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSizeLabel#0 (copy)",
        "\"max\""
      ]
    },
    "765": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "tmp%4#0"
      ]
    },
    "766": {
      "op": "bz calculateBoxStorageCost_after_if_else@15",
      "stack_out": [
        "boxNameLength#0"
      ]
    },
    "769": {
      "op": "pushint 32000 // 32000",
      "defined_out": [
        "boxSize#0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "boxSize#0"
      ]
    },
    "773": {
      "op": "b calculateBoxStorageCost_block@17"
    },
    "776": {
      "block": "calculateBoxStorageCost_after_if_else@15",
      "stack_in": [
        "boxNameLength#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "boxNameLength#0",
        "0"
      ]
    },
    "777": {
      "op": "swap"
    },
    "778": {
      "retsub": true,
      "op": "retsub"
    },
    "779": {
      "subroutine": "contracts/ControlFlow/contract.algo.ts::ControlFlow.loop",
      "params": {},
      "block": "loop",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "782": {
      "op": "pushint 10 // 10"
    },
    "784": {
      "op": "intc_1 // 0",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "785": {
      "block": "loop_while_top@1",
      "stack_in": [
        "num#0",
        "loopCount#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "787": {
      "op": "bz loop_block@9",
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "790": {
      "op": "frame_dig 0",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "792": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "5"
      ]
    },
    "794": {
      "op": ">",
      "defined_out": [
        "num#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "tmp%1#0"
      ]
    },
    "795": {
      "op": "bz loop_after_if_else@4",
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "798": {
      "op": "frame_dig 0",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "800": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "1"
      ]
    },
    "801": {
      "op": "-",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "802": {
      "op": "frame_bury 0",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "804": {
      "op": "frame_dig 1",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "loopCount#0"
      ]
    },
    "806": {
      "op": "intc_0 // 1",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "loopCount#0",
        "1"
      ]
    },
    "807": {
      "op": "+",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "loopCount#0"
      ]
    },
    "808": {
      "op": "frame_bury 1",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "810": {
      "op": "b loop_while_top@1"
    },
    "813": {
      "block": "loop_after_if_else@4",
      "stack_in": [
        "num#0",
        "loopCount#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "815": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "2"
      ]
    },
    "816": {
      "op": "-",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "817": {
      "op": "dup",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "num#0"
      ]
    },
    "818": {
      "op": "frame_bury 0",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "820": {
      "op": "frame_dig 1",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "loopCount#0"
      ]
    },
    "822": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "loopCount#0",
        "1"
      ]
    },
    "823": {
      "op": "+",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "loopCount#0"
      ]
    },
    "824": {
      "op": "frame_bury 1",
      "defined_out": [
        "loopCount#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0"
      ]
    },
    "826": {
      "op": "intc_0 // 1",
      "stack_out": [
        "num#0",
        "loopCount#0",
        "num#0",
        "1"
      ]
    },
    "827": {
      "op": "==",
      "defined_out": [
        "loopCount#0",
        "num#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "tmp%2#0"
      ]
    },
    "828": {
      "op": "bz loop_while_top@1",
      "stack_out": [
        "num#0",
        "loopCount#0"
      ]
    },
    "831": {
      "block": "loop_block@9",
      "stack_in": [
        "num#0",
        "loopCount#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "loopCount#0"
      ],
      "stack_out": [
        "num#0",
        "loopCount#0",
        "loopCount#0"
      ]
    },
    "833": {
      "op": "frame_bury 0"
    },
    "835": {
      "retsub": true,
      "op": "retsub"
    }
  }
}