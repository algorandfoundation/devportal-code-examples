{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ReferenceAccountApp/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAoBA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAgBG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AASuB;;AAPwB;AAOR;AAAnC;;AASW;;AAAwB;;AAA5B;AAAP;AAEsD;;AAAQ;AAlBnB;AAkBmB;AAAA;AAA3C;;AAAgB;AAAmC;AAAnC;AAlBQ;AAkB3C;AAAA;AAE0B;;AAAQ;AApBS;AAoBT;AAAA;AAAlC",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"my_counter\""
    },
    "18": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "23": {
      "op": "pushbytess 0x29314d95 0xe6dbed7f // method \"optIn()void\", method \"incrementMyCounter()uint64\"",
      "defined_out": [
        "Method(incrementMyCounter()uint64)",
        "Method(optIn()void)"
      ],
      "stack_out": [
        "Method(optIn()void)",
        "Method(incrementMyCounter()uint64)"
      ]
    },
    "35": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(incrementMyCounter()uint64)",
        "Method(optIn()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(optIn()void)",
        "Method(incrementMyCounter()uint64)",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "match main_optIn_route@3 main_incrementMyCounter_route@4",
      "stack_out": []
    },
    "44": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "45": {
      "op": "return",
      "stack_out": []
    },
    "46": {
      "block": "main_incrementMyCounter_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "48": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "49": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "52": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "53": {
      "callsub": "contracts/ReferenceAccountApp/contract.algo.ts::MyCounter.incrementMyCounter",
      "op": "callsub incrementMyCounter",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "56": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "57": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "63": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "64": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "65": {
      "op": "log",
      "stack_out": []
    },
    "66": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "return",
      "stack_out": []
    },
    "68": {
      "block": "main_optIn_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "70": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "71": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "72": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "73": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "75": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "76": {
      "callsub": "contracts/ReferenceAccountApp/contract.algo.ts::MyCounter.optIn",
      "op": "callsub optIn"
    },
    "79": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "80": {
      "op": "return",
      "stack_out": []
    },
    "81": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "83": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "86": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "88": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "89": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "90": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "subroutine": "contracts/ReferenceAccountApp/contract.algo.ts::MyCounter.optIn",
      "params": {},
      "block": "optIn",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "94": {
      "op": "bytec_0 // \"my_counter\"",
      "defined_out": [
        "\"my_counter\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"my_counter\""
      ]
    },
    "95": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"my_counter\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"my_counter\"",
        "0"
      ]
    },
    "96": {
      "op": "app_local_put",
      "stack_out": []
    },
    "97": {
      "retsub": true,
      "op": "retsub"
    },
    "98": {
      "subroutine": "contracts/ReferenceAccountApp/contract.algo.ts::MyCounter.incrementMyCounter",
      "params": {},
      "block": "incrementMyCounter",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "100": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "102": {
      "op": "app_opted_in",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "103": {
      "error": "Account must opt in to contract first",
      "op": "assert // Account must opt in to contract first",
      "stack_out": []
    },
    "104": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "106": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "107": {
      "op": "bytec_0 // \"my_counter\"",
      "defined_out": [
        "\"my_counter\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"my_counter\""
      ]
    },
    "108": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "109": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "110": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%4#0"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0"
      ]
    },
    "113": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "114": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_state_value%0#0"
      ]
    },
    "115": {
      "op": "bytec_0 // \"my_counter\""
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "\"my_counter\"",
        "new_state_value%0#0"
      ]
    },
    "117": {
      "op": "app_local_put",
      "stack_out": []
    },
    "118": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "120": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "121": {
      "op": "bytec_0 // \"my_counter\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"my_counter\""
      ]
    },
    "122": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "123": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "124": {
      "retsub": true,
      "op": "retsub"
    }
  }
}