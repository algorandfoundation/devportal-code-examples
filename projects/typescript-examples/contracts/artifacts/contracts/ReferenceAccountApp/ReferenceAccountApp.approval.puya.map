{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ReferenceAccountApp/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAiDA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEG;;;AAG8C;AAA5C;AAEtB;;;AACK;AAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAuBA;;;AAAA;;;AAAA;AAGwE;AAA5C;AAEtB;;;AACK;AANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"my_counter\" 0x151f7c75"
    },
    "23": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "bz main___algots__.defaultCreate@9",
      "stack_out": []
    },
    "28": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "30": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "31": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "32": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "34": {
      "op": "assert",
      "stack_out": []
    },
    "35": {
      "op": "pushbytess 0x87ad70bf 0x605c4419 // method \"getMyCounter()uint64\", method \"getMyCounterWithArg(address,uint64)uint64\"",
      "defined_out": [
        "Method(getMyCounter()uint64)",
        "Method(getMyCounterWithArg(address,uint64)uint64)"
      ],
      "stack_out": [
        "Method(getMyCounter()uint64)",
        "Method(getMyCounterWithArg(address,uint64)uint64)"
      ]
    },
    "47": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getMyCounter()uint64)",
        "Method(getMyCounterWithArg(address,uint64)uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(getMyCounter()uint64)",
        "Method(getMyCounterWithArg(address,uint64)uint64)",
        "tmp%6#0"
      ]
    },
    "50": {
      "op": "match getMyCounter getMyCounterWithArg",
      "stack_out": []
    },
    "56": {
      "op": "err"
    },
    "57": {
      "block": "main___algots__.defaultCreate@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "60": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "62": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "63": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "64": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "65": {
      "subroutine": "contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounter[routing]",
      "params": {},
      "block": "getMyCounter",
      "stack_in": [],
      "op": "pushbytes base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M",
      "defined_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ]
    },
    "99": {
      "op": "pushint 1717 // 1717",
      "defined_out": [
        "1717",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1717"
      ]
    },
    "102": {
      "op": "bytec_0 // \"my_counter\"",
      "defined_out": [
        "\"my_counter\"",
        "1717",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1717",
        "\"my_counter\""
      ]
    },
    "103": {
      "op": "app_local_get_ex",
      "defined_out": [
        "hasValue#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "104": {
      "op": "bnz getMyCounter_after_if_else@3",
      "stack_out": [
        "value#0"
      ]
    },
    "107": {
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0"
      ]
    },
    "108": {
      "block": "getMyCounter_after_inlined_contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounter@4",
      "stack_in": [
        "value#0",
        "tmp%0#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "109": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "111": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%2#0"
      ]
    },
    "112": {
      "op": "log",
      "stack_out": [
        "value#0"
      ]
    },
    "113": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "value#0",
        "1"
      ]
    },
    "114": {
      "op": "return",
      "stack_out": [
        "value#0"
      ]
    },
    "115": {
      "block": "getMyCounter_after_if_else@3",
      "stack_in": [
        "value#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0"
      ]
    },
    "116": {
      "op": "b getMyCounter_after_inlined_contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounter@4"
    },
    "119": {
      "subroutine": "contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounterWithArg[routing]",
      "params": {},
      "block": "getMyCounterWithArg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "account#0"
      ],
      "stack_out": [
        "account#0"
      ]
    },
    "122": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "account#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "account#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "125": {
      "op": "btoi",
      "defined_out": [
        "account#0",
        "app#0"
      ],
      "stack_out": [
        "account#0",
        "app#0"
      ]
    },
    "126": {
      "op": "bytec_0 // \"my_counter\"",
      "defined_out": [
        "\"my_counter\"",
        "account#0",
        "app#0"
      ],
      "stack_out": [
        "account#0",
        "app#0",
        "\"my_counter\""
      ]
    },
    "127": {
      "op": "app_local_get_ex",
      "defined_out": [
        "hasValue#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "128": {
      "op": "bnz getMyCounterWithArg_after_if_else@3",
      "stack_out": [
        "value#0"
      ]
    },
    "131": {
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%2#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%2#0"
      ]
    },
    "132": {
      "block": "getMyCounterWithArg_after_inlined_contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounterWithArg@4",
      "stack_in": [
        "value#0",
        "tmp%2#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "133": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "134": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "135": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%4#0"
      ]
    },
    "136": {
      "op": "log",
      "stack_out": [
        "value#0"
      ]
    },
    "137": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "value#0",
        "1"
      ]
    },
    "138": {
      "op": "return",
      "stack_out": [
        "value#0"
      ]
    },
    "139": {
      "block": "getMyCounterWithArg_after_if_else@3",
      "stack_in": [
        "value#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%2#0"
      ]
    },
    "140": {
      "op": "b getMyCounterWithArg_after_inlined_contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounterWithArg@4"
    }
  }
}