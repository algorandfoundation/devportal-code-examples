{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ReferenceAccountApp/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAkDA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AA4BG;;AAAA;AAAA;AAAA;;AAAA;AA5BH;;;AAAA;;;AAAA;AA4BG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAKE;;;AAGuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEG;;;AAG8C;AAA5C;AAEtB;;;AACK;AAAP;AAAA;AAGF;;AAAA;AAAA;AASF;;;AAG4B;;AAAA;;AAA4C;AAA5C;AAEtB;;;AACK;AAAP;AAAA;AAGF;;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 \"my_counter\""
    },
    "23": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "28": {
      "op": "pushbytess 0x87ad70bf 0x605c4419 // method \"getMyCounter()uint64\", method \"getMyCounterWithArg(address,uint64)uint64\"",
      "defined_out": [
        "Method(getMyCounter()uint64)",
        "Method(getMyCounterWithArg(address,uint64)uint64)"
      ],
      "stack_out": [
        "Method(getMyCounter()uint64)",
        "Method(getMyCounterWithArg(address,uint64)uint64)"
      ]
    },
    "40": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getMyCounter()uint64)",
        "Method(getMyCounterWithArg(address,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getMyCounter()uint64)",
        "Method(getMyCounterWithArg(address,uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "43": {
      "op": "match main_getMyCounter_route@3 main_getMyCounterWithArg_route@4",
      "stack_out": []
    },
    "49": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "50": {
      "block": "main_getMyCounterWithArg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "52": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "53": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "56": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "57": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "60": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "63": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%15#0"
      ]
    },
    "64": {
      "callsub": "contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounterWithArg",
      "op": "callsub getMyCounterWithArg",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "67": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "68": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "71": {
      "op": "log",
      "stack_out": []
    },
    "72": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "return",
      "stack_out": []
    },
    "74": {
      "block": "main_getMyCounter_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "76": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "77": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "78": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "80": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "81": {
      "callsub": "contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounter",
      "op": "callsub getMyCounter",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "84": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "85": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "88": {
      "op": "log",
      "stack_out": []
    },
    "89": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "93": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "98": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "99": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "100": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "return",
      "stack_out": []
    },
    "102": {
      "subroutine": "contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounter",
      "params": {},
      "block": "getMyCounter",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "105": {
      "op": "pushbytes base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M",
      "defined_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ]
    },
    "139": {
      "op": "pushint 1717 // 1717",
      "defined_out": [
        "1717",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1717"
      ]
    },
    "142": {
      "op": "bytec_1 // \"my_counter\"",
      "defined_out": [
        "\"my_counter\"",
        "1717",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1717",
        "\"my_counter\""
      ]
    },
    "143": {
      "op": "app_local_get_ex",
      "defined_out": [
        "hasValue#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "144": {
      "op": "bnz getMyCounter_after_if_else@2",
      "stack_out": [
        "value#0"
      ]
    },
    "147": {
      "op": "intc_1 // 0",
      "stack_out": [
        "value#0",
        "0"
      ]
    },
    "148": {
      "op": "swap"
    },
    "149": {
      "retsub": true,
      "op": "retsub"
    },
    "150": {
      "block": "getMyCounter_after_if_else@2",
      "stack_in": [
        "value#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "value#0"
      ]
    },
    "152": {
      "op": "swap"
    },
    "153": {
      "retsub": true,
      "op": "retsub"
    },
    "154": {
      "subroutine": "contracts/ReferenceAccountApp/contract.algo.ts::ReferenceAccountApp.getMyCounterWithArg",
      "params": {
        "account#0": "bytes",
        "app#0": "uint64"
      },
      "block": "getMyCounterWithArg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "157": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "159": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)",
        "app#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "161": {
      "op": "bytec_1 // \"my_counter\"",
      "defined_out": [
        "\"my_counter\"",
        "account#0 (copy)",
        "app#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "app#0 (copy)",
        "\"my_counter\""
      ]
    },
    "162": {
      "op": "app_local_get_ex",
      "defined_out": [
        "hasValue#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "163": {
      "op": "bnz getMyCounterWithArg_after_if_else@2",
      "stack_out": [
        "value#0"
      ]
    },
    "166": {
      "op": "intc_1 // 0",
      "stack_out": [
        "value#0",
        "0"
      ]
    },
    "167": {
      "op": "swap"
    },
    "168": {
      "retsub": true,
      "op": "retsub"
    },
    "169": {
      "block": "getMyCounterWithArg_after_if_else@2",
      "stack_in": [
        "value#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "value#0"
      ]
    },
    "171": {
      "op": "swap"
    },
    "172": {
      "retsub": true,
      "op": "retsub"
    }
  }
}