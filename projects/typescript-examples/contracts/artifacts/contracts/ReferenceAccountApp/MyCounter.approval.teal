#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "my_counter"
    // contracts/ReferenceAccountApp/contract.algo.ts:21
    // export class MyCounter extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@6
    pushbytess 0x29314d95 0xe6dbed7f // method "optIn()void", method "incrementMyCounter()uint64"
    txna ApplicationArgs 0
    match main_optIn_route@3 main_incrementMyCounter_route@4
    err

main_incrementMyCounter_route@4:
    // contracts/ReferenceAccountApp/contract.algo.ts:37
    // public incrementMyCounter(): uint64 {
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b incrementMyCounter

main_optIn_route@3:
    // contracts/ReferenceAccountApp/contract.algo.ts:28
    // @abimethod({ allowActions: 'OptIn' })
    txn OnCompletion
    intc_0 // OptIn
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be OptIn && can only call when not creating
    b optIn

main___algots__.defaultCreate@6:
    // contracts/ReferenceAccountApp/contract.algo.ts:21
    // export class MyCounter extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contracts/ReferenceAccountApp/contract.algo.ts::MyCounter.optIn[routing]() -> void:
optIn:
    // contracts/ReferenceAccountApp/contract.algo.ts:30
    // this.myCounter(Txn.sender).value = 0
    txn Sender
    // contracts/ReferenceAccountApp/contract.algo.ts:23
    // public myCounter = LocalState<uint64>({ key: 'my_counter' })
    bytec_0 // "my_counter"
    // contracts/ReferenceAccountApp/contract.algo.ts:30
    // this.myCounter(Txn.sender).value = 0
    intc_1 // 0
    app_local_put
    // contracts/ReferenceAccountApp/contract.algo.ts:28
    // @abimethod({ allowActions: 'OptIn' })
    intc_0 // 1
    return


// contracts/ReferenceAccountApp/contract.algo.ts::MyCounter.incrementMyCounter[routing]() -> void:
incrementMyCounter:
    // contracts/ReferenceAccountApp/contract.algo.ts:38
    // assert(Txn.sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    txn Sender
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/ReferenceAccountApp/contract.algo.ts:40
    // this.myCounter(Txn.sender).value = this.myCounter(Txn.sender).value + 1
    txn Sender
    intc_1 // 0
    // contracts/ReferenceAccountApp/contract.algo.ts:23
    // public myCounter = LocalState<uint64>({ key: 'my_counter' })
    bytec_0 // "my_counter"
    // contracts/ReferenceAccountApp/contract.algo.ts:40
    // this.myCounter(Txn.sender).value = this.myCounter(Txn.sender).value + 1
    app_local_get_ex
    assert // check LocalState exists
    intc_0 // 1
    +
    txn Sender
    // contracts/ReferenceAccountApp/contract.algo.ts:23
    // public myCounter = LocalState<uint64>({ key: 'my_counter' })
    bytec_0 // "my_counter"
    // contracts/ReferenceAccountApp/contract.algo.ts:40
    // this.myCounter(Txn.sender).value = this.myCounter(Txn.sender).value + 1
    uncover 2
    app_local_put
    // contracts/ReferenceAccountApp/contract.algo.ts:42
    // return this.myCounter(Txn.sender).value
    txn Sender
    intc_1 // 0
    // contracts/ReferenceAccountApp/contract.algo.ts:23
    // public myCounter = LocalState<uint64>({ key: 'my_counter' })
    bytec_0 // "my_counter"
    // contracts/ReferenceAccountApp/contract.algo.ts:42
    // return this.myCounter(Txn.sender).value
    app_local_get_ex
    assert // check LocalState exists
    // contracts/ReferenceAccountApp/contract.algo.ts:37
    // public incrementMyCounter(): uint64 {
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
