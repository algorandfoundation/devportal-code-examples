{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/Reference/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;;AA+BG;;AAAA;AAAA;AAAA;;AAAA;AA/BH;;;AAAA;AAAA;;AA+BG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AApBH;;;AAAA;AAAA;;AAoBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAQoB;AAID;;AAAA;AAAf;AAQF;;;AAEiB;;AAAA;;AAAA;AAAf;AASF;;;AAEkB;AAIT;;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock 0x151f7c75 base32(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDA)"
    },
    "44": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "46": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "49": {
      "op": "pushbytess 0x55448e69 0x93b0416b 0xc57199a8 // method \"getAccountBalance()uint64\", method \"getAccountBalanceWithArgument(account)uint64\", method \"getAssetBalance(asset)uint64\"",
      "defined_out": [
        "Method(getAccountBalance()uint64)",
        "Method(getAccountBalanceWithArgument(account)uint64)",
        "Method(getAssetBalance(asset)uint64)"
      ],
      "stack_out": [
        "Method(getAccountBalance()uint64)",
        "Method(getAccountBalanceWithArgument(account)uint64)",
        "Method(getAssetBalance(asset)uint64)"
      ]
    },
    "66": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getAccountBalance()uint64)",
        "Method(getAccountBalanceWithArgument(account)uint64)",
        "Method(getAssetBalance(asset)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getAccountBalance()uint64)",
        "Method(getAccountBalanceWithArgument(account)uint64)",
        "Method(getAssetBalance(asset)uint64)",
        "tmp%2#0"
      ]
    },
    "69": {
      "op": "match main_getAccountBalance_route@3 main_getAccountBalanceWithArgument_route@4 main_getAssetBalance_route@5",
      "stack_out": []
    },
    "77": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "block": "main_getAssetBalance_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "83": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "84": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "86": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "87": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "90": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "91": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "93": {
      "callsub": "contracts/Reference/contract.algo.ts::Reference.getAssetBalance",
      "op": "callsub getAssetBalance",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "96": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "97": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "100": {
      "op": "log",
      "stack_out": []
    },
    "101": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "return",
      "stack_out": []
    },
    "103": {
      "block": "main_getAccountBalanceWithArgument_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "113": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "114": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "116": {
      "callsub": "contracts/Reference/contract.algo.ts::Reference.getAccountBalanceWithArgument",
      "op": "callsub getAccountBalanceWithArgument",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "119": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "120": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "121": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "122": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "123": {
      "op": "log",
      "stack_out": []
    },
    "124": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "125": {
      "op": "return",
      "stack_out": []
    },
    "126": {
      "block": "main_getAccountBalance_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "128": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "129": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "133": {
      "callsub": "contracts/Reference/contract.algo.ts::Reference.getAccountBalance",
      "op": "callsub getAccountBalance",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "136": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "137": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "138": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "139": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "140": {
      "op": "log",
      "stack_out": []
    },
    "141": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "142": {
      "op": "return",
      "stack_out": []
    },
    "143": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "145": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "148": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "150": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "151": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "152": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "153": {
      "op": "return",
      "stack_out": []
    },
    "154": {
      "subroutine": "contracts/Reference/contract.algo.ts::Reference.getAccountBalance",
      "params": {},
      "block": "getAccountBalance",
      "stack_in": [],
      "op": "bytec_1 // addr R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM",
      "defined_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)"
      ],
      "stack_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)"
      ]
    },
    "155": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "157": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "158": {
      "retsub": true,
      "op": "retsub"
    },
    "159": {
      "subroutine": "contracts/Reference/contract.algo.ts::Reference.getAccountBalanceWithArgument",
      "params": {
        "account#0": "bytes"
      },
      "block": "getAccountBalanceWithArgument",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "162": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "164": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "166": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "167": {
      "retsub": true,
      "op": "retsub"
    },
    "168": {
      "subroutine": "contracts/Reference/contract.algo.ts::Reference.getAssetBalance",
      "params": {
        "asset#0": "uint64"
      },
      "block": "getAssetBalance",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "171": {
      "op": "bytec_1 // addr R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM",
      "defined_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)"
      ],
      "stack_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)"
      ]
    },
    "172": {
      "op": "frame_dig -1",
      "defined_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)",
        "asset#0 (copy)"
      ]
    },
    "174": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "176": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "177": {
      "retsub": true,
      "op": "retsub"
    }
  }
}