#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 TMPL_EXPIRATION_ROUND TMPL_KNOWN_APP
    bytecblock TMPL_TARGET_NETWORK_GENESIS
    // contracts/SubsidizeAppCall/contract.algo.ts:18
    // export default class SubsidizeAppCall extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x55e323aa // method "subsidize()bool"
    txna ApplicationArgs 0
    match main_subsidize_route@3

main_after_if_else@10:
    // contracts/SubsidizeAppCall/contract.algo.ts:18
    // export default class SubsidizeAppCall extends Contract {
    intc_1 // 0
    return

main_subsidize_route@3:
    // contracts/SubsidizeAppCall/contract.algo.ts:23
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub subsidize
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@6:
    // contracts/SubsidizeAppCall/contract.algo.ts:18
    // export default class SubsidizeAppCall extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/SubsidizeAppCall/contract.algo.ts::SubsidizeAppCall.subsidize() -> uint64:
subsidize:
    // contracts/SubsidizeAppCall/contract.algo.ts:23-24
    // @abimethod()
    // public subsidize(): boolean {
    proto 0 1
    // contracts/SubsidizeAppCall/contract.algo.ts:25
    // const prevTxn = gtxn.Transaction(Txn.groupIndex - 1)
    txn GroupIndex
    intc_0 // 1
    -
    // contracts/SubsidizeAppCall/contract.algo.ts:28
    // Txn.typeEnum === TransactionType.Payment &&
    txn TypeEnum
    intc_0 // 1
    ==
    // contracts/SubsidizeAppCall/contract.algo.ts:28-29
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:29
    // Txn.receiver === Txn.sender &&
    txn Receiver
    txn Sender
    ==
    // contracts/SubsidizeAppCall/contract.algo.ts:28-29
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:30
    // Txn.amount === 0 &&
    txn Amount
    // contracts/SubsidizeAppCall/contract.algo.ts:28-30
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    bnz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:31
    // Txn.rekeyTo === Global.zeroAddress &&
    txn RekeyTo
    global ZeroAddress
    ==
    // contracts/SubsidizeAppCall/contract.algo.ts:28-31
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:32
    // Txn.closeRemainderTo === Global.zeroAddress &&
    txn CloseRemainderTo
    global ZeroAddress
    ==
    // contracts/SubsidizeAppCall/contract.algo.ts:28-32
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:33
    // Txn.fee === 2 * Global.minTxnFee &&
    txn Fee
    pushint 2 // 2
    global MinTxnFee
    *
    ==
    // contracts/SubsidizeAppCall/contract.algo.ts:28-33
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === 2 * Global.minTxnFee &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:34
    // Txn.lastValid <= TemplateVar<uint64>('EXPIRATION_ROUND') &&
    txn LastValid
    intc_2 // TMPL_EXPIRATION_ROUND
    <=
    // contracts/SubsidizeAppCall/contract.algo.ts:28-34
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === 2 * Global.minTxnFee &&
    // Txn.lastValid <= TemplateVar<uint64>('EXPIRATION_ROUND') &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:35
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    global GenesisHash
    bytec_0 // TMPL_TARGET_NETWORK_GENESIS
    ==
    // contracts/SubsidizeAppCall/contract.algo.ts:28-35
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === 2 * Global.minTxnFee &&
    // Txn.lastValid <= TemplateVar<uint64>('EXPIRATION_ROUND') &&
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:37
    // prevTxn.type === TransactionType.ApplicationCall &&
    frame_dig 0
    gtxns TypeEnum
    pushint 6 // 6
    ==
    // contracts/SubsidizeAppCall/contract.algo.ts:28-37
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === 2 * Global.minTxnFee &&
    // Txn.lastValid <= TemplateVar<uint64>('EXPIRATION_ROUND') &&
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    // // is the previous transaction in the group an application call to a known app?
    // prevTxn.type === TransactionType.ApplicationCall &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:38
    // prevTxn.appId === TemplateVar<Application>('KNOWN_APP') &&
    frame_dig 0
    gtxns ApplicationID
    intc_3 // TMPL_KNOWN_APP
    ==
    // contracts/SubsidizeAppCall/contract.algo.ts:28-38
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === 2 * Global.minTxnFee &&
    // Txn.lastValid <= TemplateVar<uint64>('EXPIRATION_ROUND') &&
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    // // is the previous transaction in the group an application call to a known app?
    // prevTxn.type === TransactionType.ApplicationCall &&
    // prevTxn.appId === TemplateVar<Application>('KNOWN_APP') &&
    bz subsidize_bool_false@12
    // contracts/SubsidizeAppCall/contract.algo.ts:39
    // prevTxn.fee === 0
    frame_dig 0
    gtxns Fee
    // contracts/SubsidizeAppCall/contract.algo.ts:28-39
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === 2 * Global.minTxnFee &&
    // Txn.lastValid <= TemplateVar<uint64>('EXPIRATION_ROUND') &&
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    // // is the previous transaction in the group an application call to a known app?
    // prevTxn.type === TransactionType.ApplicationCall &&
    // prevTxn.appId === TemplateVar<Application>('KNOWN_APP') &&
    // prevTxn.fee === 0
    bnz subsidize_bool_false@12
    intc_0 // 1

subsidize_bool_merge@13:
    // contracts/SubsidizeAppCall/contract.algo.ts:26-40
    // return (
    //   // is it safe to pay for the fees of the previous transaction?
    //   Txn.typeEnum === TransactionType.Payment &&
    //   Txn.receiver === Txn.sender &&
    //   Txn.amount === 0 &&
    //   Txn.rekeyTo === Global.zeroAddress &&
    //   Txn.closeRemainderTo === Global.zeroAddress &&
    //   Txn.fee === 2 * Global.minTxnFee &&
    //   Txn.lastValid <= TemplateVar<uint64>('EXPIRATION_ROUND') &&
    //   Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    //   // is the previous transaction in the group an application call to a known app?
    //   prevTxn.type === TransactionType.ApplicationCall &&
    //   prevTxn.appId === TemplateVar<Application>('KNOWN_APP') &&
    //   prevTxn.fee === 0
    // )
    swap
    retsub

subsidize_bool_false@12:
    intc_1 // 0
    b subsidize_bool_merge@13
