{
    "name": "InnerTransactions",
    "structs": {},
    "methods": [
        {
            "name": "payment",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The amount of the payment"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Demonstrates a simple payment inner transaction.\nThe fee is set to 0 by default. Manually set here for demonstration purposes.\nThe `Sender` for the payment is implied to be Global.currentApplicationAddress.\nIf a different sender is needed, it'd have to be an account that has been\nrekeyed to the application address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fungibleAssetCreate",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The ID of the created asset"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a fungible asset (token)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nonFungibleAssetCreate",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The ID of the created asset"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a non-fungible asset (NFT).\nFollowing the ARC3 standard, the total supply must be 1 for a non-fungible asset.\nIf you want to create fractional NFTs, `total` * `decimals` point must be 1.\nex) total=100, decimals=2, 100 * 0.01 = 1\nThe fee is set to 0 by default for inner transactions.\nThe Sender is implied to be Global.currentApplicationAddress.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assetOptIn",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset",
                    "desc": "The asset to opt into"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opts the application into an asset.\nA zero amount asset transfer to one's self is a special type of asset transfer\nthat is used to opt-in to an asset.\nTo send an asset transfer, the asset must be an available resource.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assetTransfer",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset",
                    "desc": "The asset to transfer"
                },
                {
                    "type": "address",
                    "name": "receiver",
                    "desc": "The account to receive the asset"
                },
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "The amount to transfer"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfers an asset from the application to another account.\nFor a smart contract to transfer an asset, the app account must be opted into the asset\nand be holding non zero amount of assets.\nTo send an asset transfer, the asset must be an available resource.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assetFreeze",
            "args": [
                {
                    "type": "address",
                    "name": "acctToBeFrozen",
                    "desc": "The account to freeze the asset for"
                },
                {
                    "type": "uint64",
                    "name": "asset",
                    "desc": "The asset to freeze"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Freezes an asset for a specific account.\nTo freeze an asset, the asset must be a freezable asset\nby having an account with freeze authority.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assetRevoke",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset",
                    "desc": "The asset to revoke"
                },
                {
                    "type": "address",
                    "name": "accountToBeRevoked",
                    "desc": "The account to revoke the asset from"
                },
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "The amount to revoke"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Revokes (clawbacks) an asset from an account.\nTo revoke an asset, the asset must be a revocable asset\nby having an account with clawback authority.\nThe Sender is implied to be current_application_address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assetConfig",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset",
                    "desc": "The asset to reconfigure"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reconfigures an existing asset.\nFor a smart contract to transfer an asset, the app account must be opted into the asset\nand be holding non zero amount of assets.\nTo send an asset transfer, the asset must be an available resource.\nRefer the Resource Availability section for more information.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assetDelete",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset",
                    "desc": "The asset to delete"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes an asset.\nTo delete an asset, the asset must be a deleteable asset\nby having an account with delete authority.\nThe Sender is implied to be current_application_address.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "multiInnerTxns",
            "args": [
                {
                    "type": "uint64",
                    "name": "appId",
                    "desc": "The application to call"
                }
            ],
            "returns": {
                "type": "(uint64,string)",
                "desc": "A tuple containing the payment amount and the result of the hello world call"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Demonstrates grouped inner transactions",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deployApp",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The ID of the deployed application"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deploys a HelloWorld contract using direct application call\n\nThis method uses the itxn.applicationCall to deploy the HelloWorld contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4DeployApp",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The ID of the deployed application"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deploys a HelloWorld contract using arc4\n\nThis method uses arc4 to deploy the HelloWorld contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noopAppCall",
            "args": [
                {
                    "type": "uint64",
                    "name": "appId",
                    "desc": "The application to call"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "A string result from the hello world call"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Demonstrates calling methods on another application",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "InnerTransactions contract demonstrates various inner transaction patterns\nin Algorand smart contracts.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        749,
                        869
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        132,
                        160,
                        184,
                        201,
                        221,
                        237,
                        253,
                        276,
                        295,
                        318,
                        334,
                        351,
                        368
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        390
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        135,
                        163,
                        187,
                        204,
                        224,
                        240,
                        256,
                        279,
                        298,
                        321,
                        337,
                        354,
                        371
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQADBCYDBBUffHUEOq1thgUAA0RvZTEbQQFggg0EI5UAJwQCB/d9BNIkkoQEML2zHwTJmvxhBLvySHMEVQr//wTRNuMoBIiSmdgEzj/y9QTaIKh+BDjswBQERkCOpTYaAI4NAO0A3ADLALsApACRAHoAagBaAEYANQAdAAEAMRkURDEYRDYaAReIAq5JFRZXBgJMUChMULAiQzEZFEQxGESADBUffHUAAAAAAAAE0rAiQzEZFEQxGESIAkcWKExQsCJDMRkURDEYRDYaAReIAd4oTFCwIkMxGRREMRhENhoBF4gBuiJDMRkURDEYRDYaAReIAYwiQzEZFEQxGEQ2GgEXNhoCNhoDF4gBWSJDMRkURDEYRDYaATYaAheIAS4iQzEZFEQxGEQ2GgEXNhoCNhoDF4gA/yJDMRkURDEYRDYaAReIANgiQzEZFEQxGESIAHgWKExQsCJDMRkURDEYRIgANxYoTFCwIkMxGRREMRhEiAASFihMULAiQzEZQP79MRgURCJDsTEAsgeBiCeyCCKyECOyAbO0CImxgA5Sb3lhbHR5IFBvaW50c7ImgAJSULIlgQKyI4GA0NvD9AKyIiSyECOyAbO0PImxMgpHA7IssiuyKrIpgB5odHRwczovL2xpbmtfdG9faXBmcy9Nb25hX0xpc2GyJ4AJTW9uYSBMaXNhsiaAAk1MsiWBArIjgWSyIiSyECOyAbO0PImKAQCxMgojshKL/7IRshQlshAjsgGziYoDALGL/7ISi/2yEYv+shQlshAjsgGziYoCALEisi+L/7Iti/6yLoEFshAjsgGziYoDALEyCov/shKL/rITi/2yEbIUJbIQI7IBs4mKAQCxMgpJMQBJsiyyK7IqsimL/7IhJLIQI7IBs4mKAQCxi/+yISSyECOyAbOJigEBsTEAsgeBiCeyCCKyECOyAbO0CLEpshqABgAESmFuZbIaKrIai/+yGIEGshAjsgGztD5JVwAEKBJEVwYATBZLARUWVwYCTwJQTIACAApQTFCJsYATY2xlYXJfc3RhdGVfcHJvZ3JhbbJCgBBhcHByb3ZhbF9wcm9ncmFtskCBBrIQI7IBs7Q9iYoBAbEpshqABgAESm9obrIaKrIai/+yGIEGshAjsgGztD5JVwAEKBJEVwYAiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}