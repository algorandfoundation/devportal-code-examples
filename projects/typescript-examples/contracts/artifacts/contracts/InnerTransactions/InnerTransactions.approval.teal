#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 3 4
    bytecblock 0x151f7c75 0x3aad6d86 0x0003446f65
    // contracts/InnerTransactions/contract.algo.ts:18
    // export default class InnerTransactions extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@20
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x23950027 0x0207f77d 0xd2249284 0x30bdb31f 0xc99afc61 0xbbf24873 0x550affff 0xd136e328 0x889299d8 0xce3ff2f5 0xda20a87e 0x38ecc014 0x46408ea5 // method "payment()uint64", method "fungibleAssetCreate()uint64", method "nonFungibleAssetCreate()uint64", method "assetOptIn(uint64)void", method "assetTransfer(uint64,address,uint64)void", method "assetFreeze(address,uint64)void", method "assetRevoke(uint64,address,uint64)void", method "assetConfig(uint64)void", method "assetDelete(uint64)void", method "multiInnerTxns(uint64)(uint64,string)", method "deployApp()uint64", method "arc4DeployApp()uint64", method "noopAppCall(uint64)string"
    txna ApplicationArgs 0
    match payment fungibleAssetCreate nonFungibleAssetCreate assetOptIn assetTransfer assetFreeze assetRevoke assetConfig assetDelete multiInnerTxns deployApp main_arc4DeployApp_route@15 noopAppCall
    err

main_arc4DeployApp_route@15:
    // contracts/InnerTransactions/contract.algo.ts:280
    // public arc4DeployApp(): uint64 {
    pushbytes 0x151f7c7500000000000004d2
    log
    intc_0 // 1
    return

main___algots__.defaultCreate@20:
    // contracts/InnerTransactions/contract.algo.ts:18
    // export default class InnerTransactions extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.payment[routing]() -> void:
payment:
    // contracts/InnerTransactions/contract.algo.ts:29-35
    // const result = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:32
    // receiver: Txn.sender,
    txn Sender
    itxn_field Receiver
    // contracts/InnerTransactions/contract.algo.ts:31
    // amount: 5000,
    pushint 5000 // 5000
    itxn_field Amount
    // contracts/InnerTransactions/contract.algo.ts:29-34
    // const result = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    intc_0 // 1
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:33
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:29-35
    // const result = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn Amount
    // contracts/InnerTransactions/contract.algo.ts:28
    // public payment(): uint64 {
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.fungibleAssetCreate[routing]() -> void:
fungibleAssetCreate:
    // contracts/InnerTransactions/contract.algo.ts:47-54
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100_000_000_000,
    //     decimals: 2,
    //     unitName: 'RP',
    //     assetName: 'Royalty Points',
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:52
    // assetName: 'Royalty Points',
    pushbytes "Royalty Points"
    itxn_field ConfigAssetName
    // contracts/InnerTransactions/contract.algo.ts:51
    // unitName: 'RP',
    pushbytes "RP"
    itxn_field ConfigAssetUnitName
    // contracts/InnerTransactions/contract.algo.ts:50
    // decimals: 2,
    pushint 2 // 2
    itxn_field ConfigAssetDecimals
    // contracts/InnerTransactions/contract.algo.ts:49
    // total: 100_000_000_000,
    pushint 100000000000 // 100000000000
    itxn_field ConfigAssetTotal
    // contracts/InnerTransactions/contract.algo.ts:47-53
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100_000_000_000,
    //     decimals: 2,
    //     unitName: 'RP',
    //     assetName: 'Royalty Points',
    //   })
    intc_2 // 3
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:47-54
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100_000_000_000,
    //     decimals: 2,
    //     unitName: 'RP',
    //     assetName: 'Royalty Points',
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // contracts/InnerTransactions/contract.algo.ts:46
    // public fungibleAssetCreate(): uint64 {
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.nonFungibleAssetCreate[routing]() -> void:
nonFungibleAssetCreate:
    // contracts/InnerTransactions/contract.algo.ts:69-82
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100,
    //     decimals: 2,
    //     unitName: 'ML',
    //     assetName: 'Mona Lisa',
    //     url: 'https://link_to_ipfs/Mona_Lisa',
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:76
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/InnerTransactions/contract.algo.ts:77-79
    // reserve: Global.currentApplicationAddress,
    // freeze: Global.currentApplicationAddress,
    // clawback: Global.currentApplicationAddress,
    dupn 3
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // contracts/InnerTransactions/contract.algo.ts:75
    // url: 'https://link_to_ipfs/Mona_Lisa',
    pushbytes "https://link_to_ipfs/Mona_Lisa"
    itxn_field ConfigAssetURL
    // contracts/InnerTransactions/contract.algo.ts:74
    // assetName: 'Mona Lisa',
    pushbytes "Mona Lisa"
    itxn_field ConfigAssetName
    // contracts/InnerTransactions/contract.algo.ts:73
    // unitName: 'ML',
    pushbytes "ML"
    itxn_field ConfigAssetUnitName
    // contracts/InnerTransactions/contract.algo.ts:72
    // decimals: 2,
    pushint 2 // 2
    itxn_field ConfigAssetDecimals
    // contracts/InnerTransactions/contract.algo.ts:71
    // total: 100,
    pushint 100 // 100
    itxn_field ConfigAssetTotal
    // contracts/InnerTransactions/contract.algo.ts:69-81
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100,
    //     decimals: 2,
    //     unitName: 'ML',
    //     assetName: 'Mona Lisa',
    //     url: 'https://link_to_ipfs/Mona_Lisa',
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    intc_2 // 3
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:80
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:69-82
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100,
    //     decimals: 2,
    //     unitName: 'ML',
    //     assetName: 'Mona Lisa',
    //     url: 'https://link_to_ipfs/Mona_Lisa',
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // contracts/InnerTransactions/contract.algo.ts:68
    // public nonFungibleAssetCreate(): uint64 {
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetOptIn[routing]() -> void:
assetOptIn:
    // contracts/InnerTransactions/contract.algo.ts:96
    // public assetOptIn(asset: Asset): void {
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:97-104
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:99
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/InnerTransactions/contract.algo.ts:101
    // assetAmount: 0,
    intc_1 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // contracts/InnerTransactions/contract.algo.ts:97-103
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:102
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:97-104
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:96
    // public assetOptIn(asset: Asset): void {
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetTransfer[routing]() -> void:
assetTransfer:
    // contracts/InnerTransactions/contract.algo.ts:118
    // public assetTransfer(asset: Asset, receiver: Account, amount: uint64): void {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // contracts/InnerTransactions/contract.algo.ts:119-126
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver,
    //     xferAsset: asset,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // contracts/InnerTransactions/contract.algo.ts:119-125
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver,
    //     xferAsset: asset,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:124
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:119-126
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver,
    //     xferAsset: asset,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:118
    // public assetTransfer(asset: Asset, receiver: Account, amount: uint64): void {
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetFreeze[routing]() -> void:
assetFreeze:
    // contracts/InnerTransactions/contract.algo.ts:139
    // public assetFreeze(acctToBeFrozen: Account, asset: Asset): void {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // contracts/InnerTransactions/contract.algo.ts:140-147
    // itxn
    //   .assetFreeze({
    //     freezeAccount: acctToBeFrozen, // account to be frozen
    //     freezeAsset: asset,
    //     frozen: true,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:144
    // frozen: true,
    intc_0 // 1
    itxn_field FreezeAssetFrozen
    itxn_field FreezeAsset
    itxn_field FreezeAssetAccount
    // contracts/InnerTransactions/contract.algo.ts:140-146
    // itxn
    //   .assetFreeze({
    //     freezeAccount: acctToBeFrozen, // account to be frozen
    //     freezeAsset: asset,
    //     frozen: true,
    //     fee: 0,
    //   })
    pushint 5 // 5
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:145
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:140-147
    // itxn
    //   .assetFreeze({
    //     freezeAccount: acctToBeFrozen, // account to be frozen
    //     freezeAsset: asset,
    //     frozen: true,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:139
    // public assetFreeze(acctToBeFrozen: Account, asset: Asset): void {
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetRevoke[routing]() -> void:
assetRevoke:
    // contracts/InnerTransactions/contract.algo.ts:161
    // public assetRevoke(asset: Asset, accountToBeRevoked: Account, amount: uint64): void {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // contracts/InnerTransactions/contract.algo.ts:162-170
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetSender: accountToBeRevoked, // AssetSender is only used in the case of clawback
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:164
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    itxn_field AssetAmount
    itxn_field AssetSender
    itxn_field XferAsset
    // contracts/InnerTransactions/contract.algo.ts:162-169
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetSender: accountToBeRevoked, // AssetSender is only used in the case of clawback
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:168
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:162-170
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetSender: accountToBeRevoked, // AssetSender is only used in the case of clawback
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:161
    // public assetRevoke(asset: Asset, accountToBeRevoked: Account, amount: uint64): void {
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetConfig[routing]() -> void:
assetConfig:
    // contracts/InnerTransactions/contract.algo.ts:183
    // public assetConfig(asset: Asset): void {
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:184-193
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Txn.sender,
    //     clawback: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:187
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/InnerTransactions/contract.algo.ts:188
    // reserve: Global.currentApplicationAddress,
    dup
    // contracts/InnerTransactions/contract.algo.ts:189
    // freeze: Txn.sender,
    txn Sender
    // contracts/InnerTransactions/contract.algo.ts:190
    // clawback: Txn.sender,
    dup
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    itxn_field ConfigAsset
    // contracts/InnerTransactions/contract.algo.ts:184-192
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Txn.sender,
    //     clawback: Txn.sender,
    //     fee: 0,
    //   })
    intc_2 // 3
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:191
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:184-193
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Txn.sender,
    //     clawback: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:183
    // public assetConfig(asset: Asset): void {
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetDelete[routing]() -> void:
assetDelete:
    // contracts/InnerTransactions/contract.algo.ts:205
    // public assetDelete(asset: Asset): void {
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:206-211
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    itxn_field ConfigAsset
    // contracts/InnerTransactions/contract.algo.ts:206-210
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     fee: 0,
    //   })
    intc_2 // 3
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:209
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:206-211
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:205
    // public assetDelete(asset: Asset): void {
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.multiInnerTxns[routing]() -> void:
multiInnerTxns:
    // contracts/InnerTransactions/contract.algo.ts:221
    // public multiInnerTxns(appId: Application): [uint64, string] {
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:223-229
    // const payTxn = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:226
    // receiver: Txn.sender,
    txn Sender
    itxn_field Receiver
    // contracts/InnerTransactions/contract.algo.ts:225
    // amount: 5000,
    pushint 5000 // 5000
    itxn_field Amount
    // contracts/InnerTransactions/contract.algo.ts:223-228
    // const payTxn = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    intc_0 // 1
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:227
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:223-229
    // const payTxn = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn Amount
    // contracts/InnerTransactions/contract.algo.ts:232-238
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('Jane'), new arc4.Str('Doe')],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:235
    // appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('Jane'), new arc4.Str('Doe')],
    bytec_1 // method "sayHello(string,string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00044a616e65
    itxn_field ApplicationArgs
    bytec_2 // 0x0003446f65
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationID
    // contracts/InnerTransactions/contract.algo.ts:232-237
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('Jane'), new arc4.Str('Doe')],
    //     fee: 0,
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:236
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:232-238
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('Jane'), new arc4.Str('Doe')],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn LastLog
    // contracts/InnerTransactions/contract.algo.ts:241
    // const helloWorldResult = arc4.decodeArc4<string>(appCallTxn.lastLog, 'log')
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // contracts/InnerTransactions/contract.algo.ts:242
    // return [payTxn.amount, helloWorldResult]
    swap
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    pushbytes 0x000a
    concat
    swap
    concat
    // contracts/InnerTransactions/contract.algo.ts:221
    // public multiInnerTxns(appId: Application): [uint64, string] {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.deployApp[routing]() -> void:
deployApp:
    // contracts/InnerTransactions/contract.algo.ts:263-269
    // const appTxn = itxn
    //   .applicationCall({
    //     approvalProgram: Bytes('approval_program'),
    //     clearStateProgram: Bytes('clear_state_program'),
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:266
    // clearStateProgram: Bytes('clear_state_program'),
    pushbytes "clear_state_program"
    itxn_field ClearStateProgramPages
    // contracts/InnerTransactions/contract.algo.ts:265
    // approvalProgram: Bytes('approval_program'),
    pushbytes "approval_program"
    itxn_field ApprovalProgramPages
    // contracts/InnerTransactions/contract.algo.ts:263-268
    // const appTxn = itxn
    //   .applicationCall({
    //     approvalProgram: Bytes('approval_program'),
    //     clearStateProgram: Bytes('clear_state_program'),
    //     fee: 0,
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:267
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:263-269
    // const appTxn = itxn
    //   .applicationCall({
    //     approvalProgram: Bytes('approval_program'),
    //     clearStateProgram: Bytes('clear_state_program'),
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedApplicationID
    // contracts/InnerTransactions/contract.algo.ts:260
    // public deployApp(): uint64 {
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.noopAppCall[routing]() -> void:
noopAppCall:
    // contracts/InnerTransactions/contract.algo.ts:297
    // public noopAppCall(appId: Application): string {
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:299-304
    // const callTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('John'), new arc4.Str('Doe')],
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:302
    // appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('John'), new arc4.Str('Doe')],
    bytec_1 // method "sayHello(string,string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00044a6f686e
    itxn_field ApplicationArgs
    bytec_2 // 0x0003446f65
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // contracts/InnerTransactions/contract.algo.ts:299-303
    // const callTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('John'), new arc4.Str('Doe')],
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:299-304
    // const callTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('John'), new arc4.Str('Doe')],
    //   })
    //   .submit()
    itxn_submit
    itxn LastLog
    // contracts/InnerTransactions/contract.algo.ts:307
    // return arc4.decodeArc4<string>(callTxn.lastLog, 'log')
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // contracts/InnerTransactions/contract.algo.ts:297
    // public noopAppCall(appId: Application): string {
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
