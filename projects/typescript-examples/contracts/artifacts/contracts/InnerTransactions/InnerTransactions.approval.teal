#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 3 4
    bytecblock 0x151f7c75 0x3aad6d86 0x0003446f65
    // contracts/InnerTransactions/contract.algo.ts:19
    // export default class InnerTransactions extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@20
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x23950027 0x0207f77d 0xd2249284 0x30bdb31f 0xc99afc61 0xbbf24873 0x550affff 0xd136e328 0x889299d8 0xce3ff2f5 0xda20a87e 0x38ecc014 0x46408ea5 // method "payment()uint64", method "fungibleAssetCreate()uint64", method "nonFungibleAssetCreate()uint64", method "assetOptIn(uint64)void", method "assetTransfer(uint64,address,uint64)void", method "assetFreeze(address,uint64)void", method "assetRevoke(uint64,address,uint64)void", method "assetConfig(uint64)void", method "assetDelete(uint64)void", method "multiInnerTxns(uint64)(uint64,string)", method "deployApp()uint64", method "arc4DeployApp()uint64", method "noopAppCall(uint64)string"
    txna ApplicationArgs 0
    match payment fungibleAssetCreate nonFungibleAssetCreate assetOptIn assetTransfer assetFreeze assetRevoke assetConfig assetDelete multiInnerTxns deployApp main_arc4DeployApp_route@15 noopAppCall
    err

main_arc4DeployApp_route@15:
    // contracts/InnerTransactions/contract.algo.ts:292
    // @abimethod()
    pushbytes 0x151f7c7500000000000004d2
    log
    intc_0 // 1
    return

main___algots__.defaultCreate@20:
    // contracts/InnerTransactions/contract.algo.ts:19
    // export default class InnerTransactions extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.payment[routing]() -> void:
payment:
    // contracts/InnerTransactions/contract.algo.ts:31-37
    // const result = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:34
    // receiver: Txn.sender,
    txn Sender
    itxn_field Receiver
    // contracts/InnerTransactions/contract.algo.ts:33
    // amount: 5000,
    pushint 5000 // 5000
    itxn_field Amount
    // contracts/InnerTransactions/contract.algo.ts:31-36
    // const result = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    intc_0 // 1
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:35
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:31-37
    // const result = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn Amount
    // contracts/InnerTransactions/contract.algo.ts:29
    // @abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.fungibleAssetCreate[routing]() -> void:
fungibleAssetCreate:
    // contracts/InnerTransactions/contract.algo.ts:50-57
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100_000_000_000,
    //     decimals: 2,
    //     unitName: 'RP',
    //     assetName: 'Royalty Points',
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:55
    // assetName: 'Royalty Points',
    pushbytes "Royalty Points"
    itxn_field ConfigAssetName
    // contracts/InnerTransactions/contract.algo.ts:54
    // unitName: 'RP',
    pushbytes "RP"
    itxn_field ConfigAssetUnitName
    // contracts/InnerTransactions/contract.algo.ts:53
    // decimals: 2,
    pushint 2 // 2
    itxn_field ConfigAssetDecimals
    // contracts/InnerTransactions/contract.algo.ts:52
    // total: 100_000_000_000,
    pushint 100000000000 // 100000000000
    itxn_field ConfigAssetTotal
    // contracts/InnerTransactions/contract.algo.ts:50-56
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100_000_000_000,
    //     decimals: 2,
    //     unitName: 'RP',
    //     assetName: 'Royalty Points',
    //   })
    intc_2 // 3
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:50-57
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100_000_000_000,
    //     decimals: 2,
    //     unitName: 'RP',
    //     assetName: 'Royalty Points',
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // contracts/InnerTransactions/contract.algo.ts:48
    // @abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.nonFungibleAssetCreate[routing]() -> void:
nonFungibleAssetCreate:
    // contracts/InnerTransactions/contract.algo.ts:73-86
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100,
    //     decimals: 2,
    //     unitName: 'ML',
    //     assetName: 'Mona Lisa',
    //     url: 'https://link_to_ipfs/Mona_Lisa',
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:80
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/InnerTransactions/contract.algo.ts:81-83
    // reserve: Global.currentApplicationAddress,
    // freeze: Global.currentApplicationAddress,
    // clawback: Global.currentApplicationAddress,
    dupn 3
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // contracts/InnerTransactions/contract.algo.ts:79
    // url: 'https://link_to_ipfs/Mona_Lisa',
    pushbytes "https://link_to_ipfs/Mona_Lisa"
    itxn_field ConfigAssetURL
    // contracts/InnerTransactions/contract.algo.ts:78
    // assetName: 'Mona Lisa',
    pushbytes "Mona Lisa"
    itxn_field ConfigAssetName
    // contracts/InnerTransactions/contract.algo.ts:77
    // unitName: 'ML',
    pushbytes "ML"
    itxn_field ConfigAssetUnitName
    // contracts/InnerTransactions/contract.algo.ts:76
    // decimals: 2,
    pushint 2 // 2
    itxn_field ConfigAssetDecimals
    // contracts/InnerTransactions/contract.algo.ts:75
    // total: 100,
    pushint 100 // 100
    itxn_field ConfigAssetTotal
    // contracts/InnerTransactions/contract.algo.ts:73-85
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100,
    //     decimals: 2,
    //     unitName: 'ML',
    //     assetName: 'Mona Lisa',
    //     url: 'https://link_to_ipfs/Mona_Lisa',
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    intc_2 // 3
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:84
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:73-86
    // const itxnResult = itxn
    //   .assetConfig({
    //     total: 100,
    //     decimals: 2,
    //     unitName: 'ML',
    //     assetName: 'Mona Lisa',
    //     url: 'https://link_to_ipfs/Mona_Lisa',
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // contracts/InnerTransactions/contract.algo.ts:71
    // @abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetOptIn[routing]() -> void:
assetOptIn:
    // contracts/InnerTransactions/contract.algo.ts:100
    // @abimethod()
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:102-109
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:104
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/InnerTransactions/contract.algo.ts:106
    // assetAmount: 0,
    intc_1 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // contracts/InnerTransactions/contract.algo.ts:102-108
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:107
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:102-109
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:100
    // @abimethod()
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetTransfer[routing]() -> void:
assetTransfer:
    // contracts/InnerTransactions/contract.algo.ts:123
    // @abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // contracts/InnerTransactions/contract.algo.ts:125-132
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver,
    //     xferAsset: asset,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // contracts/InnerTransactions/contract.algo.ts:125-131
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver,
    //     xferAsset: asset,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:130
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:125-132
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver,
    //     xferAsset: asset,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:123
    // @abimethod()
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetFreeze[routing]() -> void:
assetFreeze:
    // contracts/InnerTransactions/contract.algo.ts:145
    // @abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // contracts/InnerTransactions/contract.algo.ts:147-154
    // itxn
    //   .assetFreeze({
    //     freezeAccount: acctToBeFrozen, // account to be frozen
    //     freezeAsset: asset,
    //     frozen: true,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:151
    // frozen: true,
    intc_0 // 1
    itxn_field FreezeAssetFrozen
    itxn_field FreezeAsset
    itxn_field FreezeAssetAccount
    // contracts/InnerTransactions/contract.algo.ts:147-153
    // itxn
    //   .assetFreeze({
    //     freezeAccount: acctToBeFrozen, // account to be frozen
    //     freezeAsset: asset,
    //     frozen: true,
    //     fee: 0,
    //   })
    pushint 5 // 5
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:152
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:147-154
    // itxn
    //   .assetFreeze({
    //     freezeAccount: acctToBeFrozen, // account to be frozen
    //     freezeAsset: asset,
    //     frozen: true,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:145
    // @abimethod()
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetRevoke[routing]() -> void:
assetRevoke:
    // contracts/InnerTransactions/contract.algo.ts:168
    // @abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // contracts/InnerTransactions/contract.algo.ts:170-178
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetSender: accountToBeRevoked, // AssetSender is only used in the case of clawback
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:172
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    itxn_field AssetAmount
    itxn_field AssetSender
    itxn_field XferAsset
    // contracts/InnerTransactions/contract.algo.ts:170-177
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetSender: accountToBeRevoked, // AssetSender is only used in the case of clawback
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:176
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:170-178
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: asset,
    //     assetSender: accountToBeRevoked, // AssetSender is only used in the case of clawback
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:168
    // @abimethod()
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetConfig[routing]() -> void:
assetConfig:
    // contracts/InnerTransactions/contract.algo.ts:191
    // @abimethod()
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:193-202
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Txn.sender,
    //     clawback: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:196
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/InnerTransactions/contract.algo.ts:197
    // reserve: Global.currentApplicationAddress,
    dup
    // contracts/InnerTransactions/contract.algo.ts:198
    // freeze: Txn.sender,
    txn Sender
    // contracts/InnerTransactions/contract.algo.ts:199
    // clawback: Txn.sender,
    dup
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    itxn_field ConfigAsset
    // contracts/InnerTransactions/contract.algo.ts:193-201
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Txn.sender,
    //     clawback: Txn.sender,
    //     fee: 0,
    //   })
    intc_2 // 3
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:200
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:193-202
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Txn.sender,
    //     clawback: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:191
    // @abimethod()
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.assetDelete[routing]() -> void:
assetDelete:
    // contracts/InnerTransactions/contract.algo.ts:214
    // @abimethod()
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:216-221
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    itxn_field ConfigAsset
    // contracts/InnerTransactions/contract.algo.ts:216-220
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     fee: 0,
    //   })
    intc_2 // 3
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:219
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:216-221
    // itxn
    //   .assetConfig({
    //     configAsset: asset,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // contracts/InnerTransactions/contract.algo.ts:214
    // @abimethod()
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.multiInnerTxns[routing]() -> void:
multiInnerTxns:
    // contracts/InnerTransactions/contract.algo.ts:231
    // @abimethod()
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:234-240
    // const payTxn = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:237
    // receiver: Txn.sender,
    txn Sender
    itxn_field Receiver
    // contracts/InnerTransactions/contract.algo.ts:236
    // amount: 5000,
    pushint 5000 // 5000
    itxn_field Amount
    // contracts/InnerTransactions/contract.algo.ts:234-239
    // const payTxn = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    intc_0 // 1
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:238
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:234-240
    // const payTxn = itxn
    //   .payment({
    //     amount: 5000,
    //     receiver: Txn.sender,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn Amount
    // contracts/InnerTransactions/contract.algo.ts:243-249
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('Jane'), new arc4.Str('Doe')],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:246
    // appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('Jane'), new arc4.Str('Doe')],
    bytec_1 // method "sayHello(string,string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00044a616e65
    itxn_field ApplicationArgs
    bytec_2 // 0x0003446f65
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationID
    // contracts/InnerTransactions/contract.algo.ts:243-248
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('Jane'), new arc4.Str('Doe')],
    //     fee: 0,
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:247
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:243-249
    // const appCallTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('Jane'), new arc4.Str('Doe')],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn LastLog
    // contracts/InnerTransactions/contract.algo.ts:252
    // const helloWorldResult = arc4.decodeArc4<string>(appCallTxn.lastLog, 'log')
    dup
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    extract 6 0
    // contracts/InnerTransactions/contract.algo.ts:253
    // return [payTxn.amount, helloWorldResult]
    swap
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    pushbytes 0x000a
    concat
    swap
    concat
    // contracts/InnerTransactions/contract.algo.ts:231
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.deployApp[routing]() -> void:
deployApp:
    // contracts/InnerTransactions/contract.algo.ts:275-281
    // const appTxn = itxn
    //   .applicationCall({
    //     approvalProgram: Bytes('approval_program'),
    //     clearStateProgram: Bytes('clear_state_program'),
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:278
    // clearStateProgram: Bytes('clear_state_program'),
    pushbytes "clear_state_program"
    itxn_field ClearStateProgramPages
    // contracts/InnerTransactions/contract.algo.ts:277
    // approvalProgram: Bytes('approval_program'),
    pushbytes "approval_program"
    itxn_field ApprovalProgramPages
    // contracts/InnerTransactions/contract.algo.ts:275-280
    // const appTxn = itxn
    //   .applicationCall({
    //     approvalProgram: Bytes('approval_program'),
    //     clearStateProgram: Bytes('clear_state_program'),
    //     fee: 0,
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    // contracts/InnerTransactions/contract.algo.ts:279
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:275-281
    // const appTxn = itxn
    //   .applicationCall({
    //     approvalProgram: Bytes('approval_program'),
    //     clearStateProgram: Bytes('clear_state_program'),
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedApplicationID
    // contracts/InnerTransactions/contract.algo.ts:271
    // @abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/InnerTransactions/contract.algo.ts::InnerTransactions.noopAppCall[routing]() -> void:
noopAppCall:
    // contracts/InnerTransactions/contract.algo.ts:310
    // @abimethod()
    txna ApplicationArgs 1
    btoi
    // contracts/InnerTransactions/contract.algo.ts:313-318
    // const callTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('John'), new arc4.Str('Doe')],
    //   })
    //   .submit()
    itxn_begin
    // contracts/InnerTransactions/contract.algo.ts:316
    // appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('John'), new arc4.Str('Doe')],
    bytec_1 // method "sayHello(string,string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00044a6f686e
    itxn_field ApplicationArgs
    bytec_2 // 0x0003446f65
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // contracts/InnerTransactions/contract.algo.ts:313-317
    // const callTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('John'), new arc4.Str('Doe')],
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/InnerTransactions/contract.algo.ts:313-318
    // const callTxn = itxn
    //   .applicationCall({
    //     appId: appId.id,
    //     appArgs: [arc4.methodSelector('sayHello(string,string)string'), new arc4.Str('John'), new arc4.Str('Doe')],
    //   })
    //   .submit()
    itxn_submit
    itxn LastLog
    // contracts/InnerTransactions/contract.algo.ts:321
    // return arc4.decodeArc4<string>(callTxn.lastLog, 'log')
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    // contracts/InnerTransactions/contract.algo.ts:310
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
