#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "globalInt" "globalBytes" 0x151f7c75 "globalBytesNoDefault" "globalBoolNoDefault" "globalAsset"
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/GlobalStorage/contract.algo.ts:10
    // public globalInt = GlobalState<uint64>({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    pushint 50 // 50
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:15
    // public globalBytes = GlobalState({ initialValue: Bytes('Hello') }) // Bytes with default value
    bytec_1 // "globalBytes"
    pushbytes "Hello"
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:20
    // public globalBool = GlobalState({ initialValue: true }) // Bool with default value
    pushbytes "globalBool"
    intc_1 // 1
    app_global_put

main_after_if_else@2:
    // contracts/GlobalStorage/contract.algo.ts:7-8
    // @contract({ scratchSlots: [50] })
    // export default class GlobalStorage extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0xd4035ec3 0x47b45cd1 0xd4c4fbd9 0xf5b1f705 // method "getGlobalState()(uint64,byte[])", method "hasGlobalState()(uint64,bool)", method "setGlobalState(byte[])void", method "setGlobalStateExample(byte[],asset,bool)void"
    txna ApplicationArgs 0
    match main_getGlobalState_route@5 main_hasGlobalState_route@6 main_setGlobalState_route@7 main_setGlobalStateExample_route@8

main_after_if_else@15:
    // contracts/GlobalStorage/contract.algo.ts:7-8
    // @contract({ scratchSlots: [50] })
    // export default class GlobalStorage extends arc4.Contract {
    intc_0 // 0
    return

main_setGlobalStateExample_route@8:
    // contracts/GlobalStorage/contract.algo.ts:59
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/GlobalStorage/contract.algo.ts:7-8
    // @contract({ scratchSlots: [50] })
    // export default class GlobalStorage extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    intc_0 // 0
    getbit
    // contracts/GlobalStorage/contract.algo.ts:59
    // @arc4.abimethod()
    callsub setGlobalStateExample
    intc_1 // 1
    return

main_setGlobalState_route@7:
    // contracts/GlobalStorage/contract.algo.ts:52
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/GlobalStorage/contract.algo.ts:7-8
    // @contract({ scratchSlots: [50] })
    // export default class GlobalStorage extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    // contracts/GlobalStorage/contract.algo.ts:52
    // @arc4.abimethod()
    callsub setGlobalState
    intc_1 // 1
    return

main_hasGlobalState_route@6:
    // contracts/GlobalStorage/contract.algo.ts:43
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub hasGlobalState
    swap
    itob
    pushbytes 0x00
    intc_0 // 0
    uncover 3
    setbit
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getGlobalState_route@5:
    // contracts/GlobalStorage/contract.algo.ts:37
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getGlobalState
    swap
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    pushbytes 0x000a
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@11:
    // contracts/GlobalStorage/contract.algo.ts:7-8
    // @contract({ scratchSlots: [50] })
    // export default class GlobalStorage extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalState() -> uint64, bytes:
getGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:37-38
    // @arc4.abimethod({ readonly: true })
    // public getGlobalState(): [uint64, bytes] {
    proto 0 2
    // contracts/GlobalStorage/contract.algo.ts:39
    // return [this.globalInt.value, this.globalBytes.value]
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:10
    // public globalInt = GlobalState<uint64>({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:39
    // return [this.globalInt.value, this.globalBytes.value]
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:15
    // public globalBytes = GlobalState({ initialValue: Bytes('Hello') }) // Bytes with default value
    bytec_1 // "globalBytes"
    // contracts/GlobalStorage/contract.algo.ts:39
    // return [this.globalInt.value, this.globalBytes.value]
    app_global_get_ex
    assert // check GlobalState exists
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState() -> uint64, uint64:
hasGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:43-44
    // @arc4.abimethod({ readonly: true })
    // public hasGlobalState(): [uint64, boolean] {
    proto 0 2
    // contracts/GlobalStorage/contract.algo.ts:45
    // const hasValue = this.globalInt.hasValue
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:10
    // public globalInt = GlobalState<uint64>({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:45
    // const hasValue = this.globalInt.hasValue
    app_global_get_ex
    bury 1
    // contracts/GlobalStorage/contract.algo.ts:46
    // const value = this.globalInt.value
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:10
    // public globalInt = GlobalState<uint64>({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:46
    // const value = this.globalInt.value
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:48
    // return [value, hasValue]
    swap
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalState(value: bytes) -> void:
setGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:52-53
    // @arc4.abimethod()
    // public setGlobalState(value: bytes): void {
    proto 1 0
    // contracts/GlobalStorage/contract.algo.ts:15
    // public globalBytes = GlobalState({ initialValue: Bytes('Hello') }) // Bytes with default value
    bytec_1 // "globalBytes"
    // contracts/GlobalStorage/contract.algo.ts:54
    // this.globalBytes.value = value
    frame_dig -1
    app_global_put
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalStateExample(valueBytes: bytes, valueAsset: uint64, valueBool: uint64) -> void:
setGlobalStateExample:
    // contracts/GlobalStorage/contract.algo.ts:59-60
    // @arc4.abimethod()
    // public setGlobalStateExample(valueBytes: bytes, valueAsset: Asset, valueBool: boolean): void {
    proto 3 0
    // contracts/GlobalStorage/contract.algo.ts:16
    // public globalBytesNoDefault = GlobalState<bytes>() // Bytes with no default value
    bytec_3 // "globalBytesNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:61
    // this.globalBytesNoDefault.value = valueBytes
    frame_dig -3
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:62
    // assert(this.globalBytesNoDefault.value === valueBytes)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:16
    // public globalBytesNoDefault = GlobalState<bytes>() // Bytes with no default value
    bytec_3 // "globalBytesNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:62
    // assert(this.globalBytesNoDefault.value === valueBytes)
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -3
    ==
    assert
    // contracts/GlobalStorage/contract.algo.ts:21
    // public globalBoolNoDefault = GlobalState<boolean>() // Bool with no default value
    bytec 4 // "globalBoolNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:64
    // this.globalBoolNoDefault.value = valueBool
    frame_dig -1
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:65
    // assert(this.globalBoolNoDefault.value)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:21
    // public globalBoolNoDefault = GlobalState<boolean>() // Bool with no default value
    bytec 4 // "globalBoolNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:65
    // assert(this.globalBoolNoDefault.value)
    app_global_get_ex
    assert // check GlobalState exists
    assert
    // contracts/GlobalStorage/contract.algo.ts:25
    // public globalAsset = GlobalState<Asset>() // Asset
    bytec 5 // "globalAsset"
    // contracts/GlobalStorage/contract.algo.ts:67
    // this.globalAsset.value = valueAsset
    frame_dig -2
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:68
    // assert(this.globalAsset.value === valueAsset)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:25
    // public globalAsset = GlobalState<Asset>() // Asset
    bytec 5 // "globalAsset"
    // contracts/GlobalStorage/contract.algo.ts:68
    // assert(this.globalAsset.value === valueAsset)
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -2
    ==
    assert
    retsub
