#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 50
    bytecblock "globalInt" "globalBytes" 0x151f7c75 "Hello" "globalBytesNoDefault" "globalBoolNoDefault" "globalAsset"
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/GlobalStorage/contract.algo.ts:9
    // globalInt = GlobalState({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    intc_2 // 50
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:14
    // globalBytes = GlobalState({ initialValue: Bytes('Hello') }) // Bytes with default value
    bytec_1 // "globalBytes"
    bytec_3 // "Hello"
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:19
    // globalBool = GlobalState({ initialValue: true }) // Bool with default value
    pushbytes "globalBool"
    intc_1 // 1
    app_global_put

main_after_if_else@2:
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@13
    pushbytess 0x77a0e117 0x47b45cd1 0x41c3e123 0xd4c4fbd9 0xf5b1f705 0x6d827efc // method "getGlobalState()uint64", method "hasGlobalState()(uint64,bool)", method "getGlobalStateExample()(uint64,byte[])", method "setGlobalState(byte[])void", method "setGlobalStateExample(byte[],asset,bool)void", method "delGlobalState()bool"
    txna ApplicationArgs 0
    match main_getGlobalState_route@5 main_hasGlobalState_route@6 main_getGlobalStateExample_route@7 main_setGlobalState_route@8 main_setGlobalStateExample_route@9 main_delGlobalState_route@10

main_after_if_else@17:
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    intc_0 // 0
    return

main_delGlobalState_route@10:
    // contracts/GlobalStorage/contract.algo.ts:83
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    pushbytes 0x151f7c7580
    log
    intc_1 // 1
    return

main_setGlobalStateExample_route@9:
    // contracts/GlobalStorage/contract.algo.ts:69
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    intc_0 // 0
    getbit
    // contracts/GlobalStorage/contract.algo.ts:69
    // @arc4.abimethod()
    callsub setGlobalStateExample
    intc_1 // 1
    return

main_setGlobalState_route@8:
    // contracts/GlobalStorage/contract.algo.ts:62
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    // contracts/GlobalStorage/contract.algo.ts:62
    // @arc4.abimethod()
    callsub setGlobalState
    intc_1 // 1
    return

main_getGlobalStateExample_route@7:
    // contracts/GlobalStorage/contract.algo.ts:54
    // public getGlobalStateExample(): [uint64, bytes] {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getGlobalStateExample
    swap
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    pushbytes 0x000a
    concat
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_hasGlobalState_route@6:
    // contracts/GlobalStorage/contract.algo.ts:42
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub hasGlobalState
    swap
    itob
    pushbytes 0x00
    intc_0 // 0
    uncover 3
    setbit
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getGlobalState_route@5:
    // contracts/GlobalStorage/contract.algo.ts:36
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getGlobalState
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@13:
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@17
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalState() -> uint64:
getGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:36-37
    // @arc4.abimethod({ readonly: true })
    // public getGlobalState(): uint64 {
    proto 0 1
    // contracts/GlobalStorage/contract.algo.ts:38
    // return this.globalInt.value
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:9
    // globalInt = GlobalState({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:38
    // return this.globalInt.value
    app_global_get_ex
    assert // check GlobalState exists
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState() -> uint64, uint64:
hasGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:42-43
    // @arc4.abimethod({ readonly: true })
    // public hasGlobalState(): [uint64, boolean] {
    proto 0 2
    // contracts/GlobalStorage/contract.algo.ts:44
    // const value = this.globalInt.value
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:9
    // globalInt = GlobalState({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:44
    // const value = this.globalInt.value
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:45
    // const hasValue = this.globalInt.hasValue
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:9
    // globalInt = GlobalState({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:45
    // const hasValue = this.globalInt.hasValue
    app_global_get_ex
    dup
    cover 2
    cover 3
    pop
    // contracts/GlobalStorage/contract.algo.ts:47
    // if (!hasValue) {
    bnz hasGlobalState_after_if_else@2
    // contracts/GlobalStorage/contract.algo.ts:48
    // return [value, hasValue]
    frame_dig 0
    uncover 2
    retsub

hasGlobalState_after_if_else@2:
    // contracts/GlobalStorage/contract.algo.ts:51
    // return [value, hasValue]
    frame_dig 0
    uncover 2
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalStateExample() -> uint64, bytes:
getGlobalStateExample:
    // contracts/GlobalStorage/contract.algo.ts:54
    // public getGlobalStateExample(): [uint64, bytes] {
    proto 0 2
    // contracts/GlobalStorage/contract.algo.ts:55
    // assert(this.globalInt.value === Uint64(50))
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:9
    // globalInt = GlobalState({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:55
    // assert(this.globalInt.value === Uint64(50))
    app_global_get_ex
    assert // check GlobalState exists
    intc_2 // 50
    ==
    assert
    // contracts/GlobalStorage/contract.algo.ts:56
    // assert(this.globalBytes.value === Bytes('Hello'))
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:14
    // globalBytes = GlobalState({ initialValue: Bytes('Hello') }) // Bytes with default value
    bytec_1 // "globalBytes"
    // contracts/GlobalStorage/contract.algo.ts:56
    // assert(this.globalBytes.value === Bytes('Hello'))
    app_global_get_ex
    assert // check GlobalState exists
    bytec_3 // "Hello"
    ==
    assert
    // contracts/GlobalStorage/contract.algo.ts:58
    // return [this.globalInt.value, this.globalBytes.value]
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:9
    // globalInt = GlobalState({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec_0 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:58
    // return [this.globalInt.value, this.globalBytes.value]
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:14
    // globalBytes = GlobalState({ initialValue: Bytes('Hello') }) // Bytes with default value
    bytec_1 // "globalBytes"
    // contracts/GlobalStorage/contract.algo.ts:58
    // return [this.globalInt.value, this.globalBytes.value]
    app_global_get_ex
    assert // check GlobalState exists
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalState(value: bytes) -> void:
setGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:62-63
    // @arc4.abimethod()
    // setGlobalState(value: bytes): void {
    proto 1 0
    // contracts/GlobalStorage/contract.algo.ts:14
    // globalBytes = GlobalState({ initialValue: Bytes('Hello') }) // Bytes with default value
    bytec_1 // "globalBytes"
    // contracts/GlobalStorage/contract.algo.ts:64
    // this.globalBytes.value = value
    frame_dig -1
    app_global_put
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalStateExample(valueBytes: bytes, valueAsset: uint64, valueBool: uint64) -> void:
setGlobalStateExample:
    // contracts/GlobalStorage/contract.algo.ts:69-70
    // @arc4.abimethod()
    // public setGlobalStateExample(valueBytes: bytes, valueAsset: Asset, valueBool: boolean): void {
    proto 3 0
    // contracts/GlobalStorage/contract.algo.ts:15
    // globalBytesNoDefault = GlobalState<bytes>() // Bytes with no default value
    bytec 4 // "globalBytesNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:71
    // this.globalBytesNoDefault.value = valueBytes
    frame_dig -3
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:72
    // assert(this.globalBytesNoDefault.value === valueBytes)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:15
    // globalBytesNoDefault = GlobalState<bytes>() // Bytes with no default value
    bytec 4 // "globalBytesNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:72
    // assert(this.globalBytesNoDefault.value === valueBytes)
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -3
    ==
    assert
    // contracts/GlobalStorage/contract.algo.ts:20
    // globalBoolNoDefault = GlobalState<boolean>() // Bool with no default value
    bytec 5 // "globalBoolNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:74
    // this.globalBoolNoDefault.value = valueBool
    frame_dig -1
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:75
    // assert(this.globalBoolNoDefault.value)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:20
    // globalBoolNoDefault = GlobalState<boolean>() // Bool with no default value
    bytec 5 // "globalBoolNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:75
    // assert(this.globalBoolNoDefault.value)
    app_global_get_ex
    assert // check GlobalState exists
    assert
    // contracts/GlobalStorage/contract.algo.ts:24
    // globalAsset = GlobalState<Asset>() // Asset
    bytec 6 // "globalAsset"
    // contracts/GlobalStorage/contract.algo.ts:77
    // this.globalAsset.value = valueAsset
    frame_dig -2
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:78
    // assert(this.globalAsset.value === valueAsset)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:24
    // globalAsset = GlobalState<Asset>() // Asset
    bytec 6 // "globalAsset"
    // contracts/GlobalStorage/contract.algo.ts:78
    // assert(this.globalAsset.value === valueAsset)
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -2
    ==
    assert
    retsub
