#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "globalString" "globalBool" "globalIntNoDefault" "globalAccount" "globalInt" "globalBytes" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/GlobalStorage/contract.algo.ts:9
    // public globalInt = GlobalState<uint64>({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec 4 // "globalInt"
    pushint 50 // 50
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:11
    // public globalBytes = GlobalState<bytes>({ initialValue: Bytes('Silvio') }) // Bytes with default value
    bytec 5 // "globalBytes"
    pushbytes "Silvio"
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:12
    // public globalString = GlobalState<string>({ initialValue: 'Micali' }) // Bytes with default value
    bytec_0 // "globalString"
    pushbytes "Micali"
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:13
    // public globalBool = GlobalState({ initialValue: true }) // Bool with default value
    bytec_1 // "globalBool"
    intc_1 // 1
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:10
    // public globalIntNoDefault = GlobalState<uint64>() // UInt64 with no default value
    bytec_2 // "globalIntNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:22
    // this.globalIntNoDefault.value = Uint64(0)
    intc_0 // 0
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:14
    // public globalAccount = GlobalState<Account>() // Address with no default value
    bytec_3 // "globalAccount"
    // contracts/GlobalStorage/contract.algo.ts:23
    // this.globalAccount.value = Txn.sender
    txn Sender
    app_global_put

main_after_if_else@2:
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0xd38f6072 0x47b45cd1 0xf7a04ede // method "readGlobalState()(uint64,uint64,byte[],string,bool,address)", method "hasGlobalState()(uint64,bool)", method "writeGlobalState(string,bool,account)void"
    txna ApplicationArgs 0
    match main_readGlobalState_route@5 main_hasGlobalState_route@6 main_writeGlobalState_route@7

main_after_if_else@14:
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    intc_0 // 0
    return

main_writeGlobalState_route@7:
    // contracts/GlobalStorage/contract.algo.ts:73
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    // contracts/GlobalStorage/contract.algo.ts:73
    // @arc4.abimethod()
    callsub writeGlobalState
    intc_1 // 1
    return

main_hasGlobalState_route@6:
    // contracts/GlobalStorage/contract.algo.ts:55
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub hasGlobalState
    swap
    itob
    pushbytes 0x00
    intc_0 // 0
    uncover 3
    setbit
    concat
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_readGlobalState_route@5:
    // contracts/GlobalStorage/contract.algo.ts:33
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub readGlobalState
    uncover 5
    itob
    uncover 5
    itob
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    pushbytes 0x00
    intc_0 // 0
    uncover 7
    setbit
    uncover 4
    uncover 4
    concat
    pushbytes 0x0035
    concat
    dig 3
    len
    pushint 53 // 53
    +
    itob
    extract 6 2
    concat
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // contracts/GlobalStorage/contract.algo.ts:7
    // export default class GlobalStorage extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.readGlobalState() -> uint64, uint64, bytes, bytes, uint64, bytes:
readGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:33-34
    // @arc4.abimethod({ readonly: true })
    // public readGlobalState(): [uint64, uint64, bytes, string, boolean, arc4.Address] {
    proto 0 6
    // contracts/GlobalStorage/contract.algo.ts:36
    // const accountAddress = new arc4.Address(this.globalAccount.value)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:14
    // public globalAccount = GlobalState<Account>() // Address with no default value
    bytec_3 // "globalAccount"
    // contracts/GlobalStorage/contract.algo.ts:36
    // const accountAddress = new arc4.Address(this.globalAccount.value)
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:39
    // this.globalInt.value,
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:9
    // public globalInt = GlobalState<uint64>({ initialValue: Uint64(50) }) // UInt64 with default value
    bytec 4 // "globalInt"
    // contracts/GlobalStorage/contract.algo.ts:39
    // this.globalInt.value,
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:40
    // this.globalIntNoDefault.value,
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:10
    // public globalIntNoDefault = GlobalState<uint64>() // UInt64 with no default value
    bytec_2 // "globalIntNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:40
    // this.globalIntNoDefault.value,
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:41
    // this.globalBytes.value,
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:11
    // public globalBytes = GlobalState<bytes>({ initialValue: Bytes('Silvio') }) // Bytes with default value
    bytec 5 // "globalBytes"
    // contracts/GlobalStorage/contract.algo.ts:41
    // this.globalBytes.value,
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:42
    // this.globalString.value,
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:12
    // public globalString = GlobalState<string>({ initialValue: 'Micali' }) // Bytes with default value
    bytec_0 // "globalString"
    // contracts/GlobalStorage/contract.algo.ts:42
    // this.globalString.value,
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:43
    // this.globalBool.value,
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:13
    // public globalBool = GlobalState({ initialValue: true }) // Bool with default value
    bytec_1 // "globalBool"
    // contracts/GlobalStorage/contract.algo.ts:43
    // this.globalBool.value,
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:38-45
    // return [
    //   this.globalInt.value,
    //   this.globalIntNoDefault.value,
    //   this.globalBytes.value,
    //   this.globalString.value,
    //   this.globalBool.value,
    //   accountAddress,
    // ]
    uncover 5
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState() -> uint64, uint64:
hasGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:55-56
    // @arc4.abimethod({ readonly: true })
    // public hasGlobalState(): [uint64, boolean] {
    proto 0 2
    // contracts/GlobalStorage/contract.algo.ts:57
    // const hasValue = this.globalIntNoDefault.hasValue
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:10
    // public globalIntNoDefault = GlobalState<uint64>() // UInt64 with no default value
    bytec_2 // "globalIntNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:57
    // const hasValue = this.globalIntNoDefault.hasValue
    app_global_get_ex
    bury 1
    // contracts/GlobalStorage/contract.algo.ts:58
    // const value = this.globalIntNoDefault.value
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:10
    // public globalIntNoDefault = GlobalState<uint64>() // UInt64 with no default value
    bytec_2 // "globalIntNoDefault"
    // contracts/GlobalStorage/contract.algo.ts:58
    // const value = this.globalIntNoDefault.value
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/GlobalStorage/contract.algo.ts:60
    // assert(hasValue, 'Global state not set.')
    dig 1
    assert // Global state not set.
    // contracts/GlobalStorage/contract.algo.ts:62
    // return [value, hasValue]
    swap
    retsub


// contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeGlobalState(valueString: bytes, valueBool: uint64, valueAccount: bytes) -> void:
writeGlobalState:
    // contracts/GlobalStorage/contract.algo.ts:73-74
    // @arc4.abimethod()
    // public writeGlobalState(valueString: string, valueBool: boolean, valueAccount: Account): void {
    proto 3 0
    // contracts/GlobalStorage/contract.algo.ts:12
    // public globalString = GlobalState<string>({ initialValue: 'Micali' }) // Bytes with default value
    bytec_0 // "globalString"
    // contracts/GlobalStorage/contract.algo.ts:75
    // this.globalString.value = valueString
    frame_dig -3
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:13
    // public globalBool = GlobalState({ initialValue: true }) // Bool with default value
    bytec_1 // "globalBool"
    // contracts/GlobalStorage/contract.algo.ts:76
    // this.globalBool.value = valueBool
    frame_dig -2
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:14
    // public globalAccount = GlobalState<Account>() // Address with no default value
    bytec_3 // "globalAccount"
    // contracts/GlobalStorage/contract.algo.ts:77
    // this.globalAccount.value = valueAccount
    frame_dig -1
    app_global_put
    // contracts/GlobalStorage/contract.algo.ts:79
    // assert(this.globalString.value === valueString)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:12
    // public globalString = GlobalState<string>({ initialValue: 'Micali' }) // Bytes with default value
    bytec_0 // "globalString"
    // contracts/GlobalStorage/contract.algo.ts:79
    // assert(this.globalString.value === valueString)
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -3
    ==
    assert
    // contracts/GlobalStorage/contract.algo.ts:80
    // assert(this.globalBool.value === valueBool)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:13
    // public globalBool = GlobalState({ initialValue: true }) // Bool with default value
    bytec_1 // "globalBool"
    // contracts/GlobalStorage/contract.algo.ts:80
    // assert(this.globalBool.value === valueBool)
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -2
    ==
    assert
    // contracts/GlobalStorage/contract.algo.ts:81
    // assert(this.globalAccount.value === valueAccount)
    intc_0 // 0
    // contracts/GlobalStorage/contract.algo.ts:14
    // public globalAccount = GlobalState<Account>() // Address with no default value
    bytec_3 // "globalAccount"
    // contracts/GlobalStorage/contract.algo.ts:81
    // assert(this.globalAccount.value === valueAccount)
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -1
    ==
    assert
    retsub
