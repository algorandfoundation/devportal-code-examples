{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/GlobalStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBS;;AAAuD;;AAA9D;AAEO;;AAAuD;;;;;;;;AAA9D;AACO;AAAmD;;;;;;;;AAA1D;AACO;AAAyC;AAAhD;AAHO;AAYkC;AAAvC;AARK;AAS0B;;AAA/B;AAjBJ;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAqFG;;AAAA;AAAA;AAAA;;AAAA;AArFH;;;AAAA;;;AAAA;;;AAAA;;;AAqFG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAnEH;;;AAAA;;;AAAA;;;;AAAA;AAAA;;;AAAA;AAAA;;AAmEG;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA3BH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AA2BE;;;AAG6D;AAtBtD;AAsBsD;AAAA;AAG1C;AA9BZ;;AA8BY;AAAA;AACS;AA9BrB;AA8BqB;AAAA;AACP;AA9Bd;;AA8Bc;AAAA;AACC;AA9Bf;AA8Be;AAAA;AACF;AA9Bb;AA8Ba;AAAA;AALlB;;AAAA;AAiBF;;;AAE2C;AA/CpC;AA+CoC;AAAA;;AACH;AAhDjC;AAgDiC;AAAA;AAEtC;;AAAA;AAEA;AAAA;AAWF;;;AA7DO;AA+DL;;AAAA;AA9DK;AA+DL;;AAAA;AA9DK;AA+DL;;AAAA;AAEyB;AAnEpB;AAmEoB;AAAA;AAAlB;;AAAA;AAAP;AACuB;AAnElB;AAmEkB;AAAA;AAAhB;;AAAA;AAAP;AAC0B;AAnErB;AAmEqB;AAAA;AAAnB;;AAAA;AAAP;;AAUF;;;AAIE;;AAAA;;AAAA;AAE2B;AAAA;;AAAA;AAAA;AAApB;;AAAA;AAAP;AAE2B;AAAA;;AAAA;AAAA;AAA3B",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"globalString\" \"globalBool\" \"globalIntNoDefault\" \"globalAccount\" 0x151f7c75 \"globalInt\" \"globalBytes\""
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "93": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "96": {
      "op": "bytec 5 // \"globalInt\""
    },
    "98": {
      "op": "pushint 50 // 50"
    },
    "100": {
      "op": "app_global_put"
    },
    "101": {
      "op": "bytec 6 // \"globalBytes\""
    },
    "103": {
      "op": "pushbytes \"Silvio\""
    },
    "111": {
      "op": "app_global_put"
    },
    "112": {
      "op": "bytec_0 // \"globalString\""
    },
    "113": {
      "op": "pushbytes \"Micali\""
    },
    "121": {
      "op": "app_global_put"
    },
    "122": {
      "op": "bytec_1 // \"globalBool\""
    },
    "123": {
      "op": "intc_1 // 1"
    },
    "124": {
      "op": "app_global_put"
    },
    "125": {
      "op": "bytec_2 // \"globalIntNoDefault\""
    },
    "126": {
      "op": "intc_0 // 0"
    },
    "127": {
      "op": "app_global_put"
    },
    "128": {
      "op": "bytec_3 // \"globalAccount\""
    },
    "129": {
      "op": "txn Sender"
    },
    "131": {
      "op": "app_global_put"
    },
    "132": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "134": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "137": {
      "op": "pushbytess 0xd38f6072 0x47b45cd1 0xf7a04ede 0x4a4c6bf6 // method \"readGlobalState()(uint64,uint64,byte[],string,bool,address)\", method \"hasGlobalState()(uint64,bool)\", method \"writeGlobalState(string,bool,account)void\", method \"writeDynamicGlobalState(string,string)string\""
    },
    "159": {
      "op": "txna ApplicationArgs 0"
    },
    "162": {
      "op": "match main_readGlobalState_route@5 main_hasGlobalState_route@6 main_writeGlobalState_route@7 main_writeDynamicGlobalState_route@8"
    },
    "172": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "173": {
      "op": "return"
    },
    "174": {
      "block": "main_writeDynamicGlobalState_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "176": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "177": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "178": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "180": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "181": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "184": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "187": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "190": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "193": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeDynamicGlobalState",
      "op": "callsub writeDynamicGlobalState",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "196": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "197": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%2#0"
      ]
    },
    "198": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%4#0"
      ]
    },
    "199": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%2#0"
      ]
    },
    "202": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%0#0"
      ]
    },
    "203": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "204": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "207": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "208": {
      "op": "log",
      "stack_out": []
    },
    "209": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "210": {
      "op": "return"
    },
    "211": {
      "block": "main_writeGlobalState_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "213": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "214": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "215": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "217": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "218": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "221": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "224": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "227": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "0"
      ]
    },
    "228": {
      "op": "getbit",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "229": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "232": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "233": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%23#0"
      ]
    },
    "235": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeGlobalState",
      "op": "callsub writeGlobalState",
      "stack_out": []
    },
    "238": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "return"
    },
    "240": {
      "block": "main_hasGlobalState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "242": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "243": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "244": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "246": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "247": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "op": "callsub hasGlobalState",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "250": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0"
      ]
    },
    "251": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ]
    },
    "252": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "0x00"
      ]
    },
    "255": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "0x00",
        "0"
      ]
    },
    "256": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%2#0",
        "0x00",
        "0",
        "elements_to_encode%7#0"
      ]
    },
    "258": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_bool%1#0"
      ]
    },
    "259": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "260": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "0x151f7c75"
      ]
    },
    "262": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "264": {
      "op": "log",
      "stack_out": []
    },
    "265": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "266": {
      "op": "return"
    },
    "267": {
      "block": "main_readGlobalState_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "269": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "270": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "271": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "273": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "274": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.readGlobalState",
      "op": "callsub readGlobalState",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "277": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%0#0"
      ]
    },
    "279": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "280": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "282": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "283": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "285": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length%0#0"
      ]
    },
    "286": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "as_bytes%0#0"
      ]
    },
    "287": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0"
      ]
    },
    "290": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "292": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0"
      ]
    },
    "293": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "295": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "296": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "297": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "300": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "elements_to_encode%3#0"
      ]
    },
    "302": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "303": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00"
      ]
    },
    "306": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00",
        "0"
      ]
    },
    "307": {
      "op": "uncover 7",
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00",
        "0",
        "elements_to_encode%4#0"
      ]
    },
    "309": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0"
      ]
    },
    "310": {
      "op": "uncover 4"
    },
    "312": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "315": {
      "op": "pushbytes 0x0035",
      "defined_out": [
        "0x0035",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "0x0035"
      ]
    },
    "319": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "320": {
      "op": "dig 3",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "322": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0"
      ]
    },
    "323": {
      "op": "pushint 53 // 53",
      "defined_out": [
        "53",
        "data_length%0#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0",
        "53"
      ]
    },
    "325": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "326": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "as_bytes%3#0"
      ]
    },
    "327": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "331": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_bool%0#0"
      ]
    },
    "332": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "333": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0",
        "elements_to_encode%5#0"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "336": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "339": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ]
    },
    "340": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0"
      ]
    },
    "341": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "0x151f7c75"
      ]
    },
    "343": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "344": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "345": {
      "op": "log",
      "stack_out": []
    },
    "346": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "347": {
      "op": "return"
    },
    "348": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "350": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "353": {
      "op": "txn ApplicationID"
    },
    "355": {
      "op": "!"
    },
    "356": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "357": {
      "op": "intc_1 // 1"
    },
    "358": {
      "op": "return"
    },
    "359": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.readGlobalState",
      "params": {},
      "block": "readGlobalState",
      "stack_in": [],
      "op": "proto 0 6"
    },
    "362": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "363": {
      "op": "bytec_3 // \"globalAccount\"",
      "defined_out": [
        "\"globalAccount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalAccount\""
      ]
    },
    "364": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_exists%0#0"
      ]
    },
    "365": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0"
      ]
    },
    "366": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "0"
      ]
    },
    "367": {
      "op": "bytec 5 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0",
        "accountAddress#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "0",
        "\"globalInt\""
      ]
    },
    "369": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "370": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0"
      ]
    },
    "371": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "372": {
      "op": "bytec_2 // \"globalIntNoDefault\"",
      "defined_out": [
        "\"globalIntNoDefault\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "0",
        "\"globalIntNoDefault\""
      ]
    },
    "373": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "374": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "375": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "376": {
      "op": "bytec 6 // \"globalBytes\"",
      "defined_out": [
        "\"globalBytes\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"globalBytes\""
      ]
    },
    "378": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "379": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "380": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "381": {
      "op": "bytec_0 // \"globalString\"",
      "defined_out": [
        "\"globalString\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"globalString\""
      ]
    },
    "382": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "383": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "384": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "385": {
      "op": "bytec_1 // \"globalBool\"",
      "defined_out": [
        "\"globalBool\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"globalBool\""
      ]
    },
    "386": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "387": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "388": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "accountAddress#0"
      ]
    },
    "390": {
      "retsub": true,
      "op": "retsub"
    },
    "391": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "params": {},
      "block": "hasGlobalState",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "394": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "395": {
      "op": "bytec_2 // \"globalIntNoDefault\"",
      "defined_out": [
        "\"globalIntNoDefault\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalIntNoDefault\""
      ]
    },
    "396": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hasValue#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "hasValue#0"
      ]
    },
    "397": {
      "op": "bury 1",
      "stack_out": [
        "hasValue#0"
      ]
    },
    "399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "hasValue#0",
        "0"
      ]
    },
    "400": {
      "op": "bytec_2 // \"globalIntNoDefault\"",
      "stack_out": [
        "hasValue#0",
        "0",
        "\"globalIntNoDefault\""
      ]
    },
    "401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hasValue#0",
        "maybe_exists%1#0",
        "value#0"
      ],
      "stack_out": [
        "hasValue#0",
        "value#0",
        "maybe_exists%1#0"
      ]
    },
    "402": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "hasValue#0",
        "value#0"
      ]
    },
    "403": {
      "op": "dig 1",
      "defined_out": [
        "hasValue#0",
        "hasValue#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "hasValue#0",
        "value#0",
        "hasValue#0 (copy)"
      ]
    },
    "405": {
      "error": "Global state not set.",
      "op": "assert // Global state not set.",
      "stack_out": [
        "hasValue#0",
        "value#0"
      ]
    },
    "406": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "407": {
      "retsub": true,
      "op": "retsub"
    },
    "408": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeGlobalState",
      "params": {
        "valueString#0": "bytes",
        "valueBool#0": "uint64",
        "valueAccount#0": "bytes"
      },
      "block": "writeGlobalState",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "411": {
      "op": "bytec_0 // \"globalString\"",
      "defined_out": [
        "\"globalString\""
      ],
      "stack_out": [
        "\"globalString\""
      ]
    },
    "412": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"globalString\"",
        "valueString#0 (copy)"
      ],
      "stack_out": [
        "\"globalString\"",
        "valueString#0 (copy)"
      ]
    },
    "414": {
      "op": "app_global_put",
      "stack_out": []
    },
    "415": {
      "op": "bytec_1 // \"globalBool\"",
      "defined_out": [
        "\"globalBool\""
      ],
      "stack_out": [
        "\"globalBool\""
      ]
    },
    "416": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"globalBool\"",
        "valueBool#0 (copy)"
      ],
      "stack_out": [
        "\"globalBool\"",
        "valueBool#0 (copy)"
      ]
    },
    "418": {
      "op": "app_global_put",
      "stack_out": []
    },
    "419": {
      "op": "bytec_3 // \"globalAccount\"",
      "defined_out": [
        "\"globalAccount\""
      ],
      "stack_out": [
        "\"globalAccount\""
      ]
    },
    "420": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"globalAccount\"",
        "valueAccount#0 (copy)"
      ],
      "stack_out": [
        "\"globalAccount\"",
        "valueAccount#0 (copy)"
      ]
    },
    "422": {
      "op": "app_global_put",
      "stack_out": []
    },
    "423": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "424": {
      "op": "bytec_0 // \"globalString\"",
      "stack_out": [
        "0",
        "\"globalString\""
      ]
    },
    "425": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "426": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "427": {
      "op": "frame_dig -3",
      "stack_out": [
        "maybe_value%0#0",
        "valueString#0 (copy)"
      ]
    },
    "429": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "430": {
      "op": "assert",
      "stack_out": []
    },
    "431": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "432": {
      "op": "bytec_1 // \"globalBool\"",
      "stack_out": [
        "0",
        "\"globalBool\""
      ]
    },
    "433": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "434": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "435": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "valueBool#0 (copy)"
      ]
    },
    "437": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "438": {
      "op": "assert",
      "stack_out": []
    },
    "439": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "440": {
      "op": "bytec_3 // \"globalAccount\"",
      "stack_out": [
        "0",
        "\"globalAccount\""
      ]
    },
    "441": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "442": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "443": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%2#0",
        "valueAccount#0 (copy)"
      ]
    },
    "445": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "446": {
      "op": "assert",
      "stack_out": []
    },
    "447": {
      "retsub": true,
      "op": "retsub"
    },
    "448": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeDynamicGlobalState",
      "params": {
        "key#0": "bytes",
        "value#0": "bytes"
      },
      "block": "writeDynamicGlobalState",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "451": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "453": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "455": {
      "op": "app_global_put",
      "stack_out": []
    },
    "456": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "457": {
      "op": "frame_dig -2",
      "stack_out": [
        "0",
        "key#0 (copy)"
      ]
    },
    "459": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "460": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "461": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "value#0 (copy)"
      ]
    },
    "463": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "assert",
      "stack_out": []
    },
    "465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "466": {
      "op": "frame_dig -2",
      "stack_out": [
        "0",
        "key#0 (copy)"
      ]
    },
    "468": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "469": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "470": {
      "retsub": true,
      "op": "retsub"
    }
  }
}