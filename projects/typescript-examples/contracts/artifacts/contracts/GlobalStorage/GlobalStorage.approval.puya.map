{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/GlobalStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBS;AAAuD;;AAA9D;AAEO;;AAAuD;;;;;;;;AAA9D;AACO;AAAmD;;;;;;;;AAA1D;AACO;AAAyC;AAAhD;AAHO;AAYkC;AAAvC;AARK;;AAS0B;;AAA/B;AAjBJ;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;AA6FG;;AAAA;AAAA;AAAA;;AAAA;AA1FM;AA4FL;AAFD;;;;;;;AAAA;AAAA;;AAXD;;AAAA;AAAA;AAAA;;AAAA;AAlFF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAqFI;;AAAA;AAAA;AAHF;;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAjEF;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;;AAiEE;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA3BF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AA6B+D;AArBtD;;AAqBsD;AAAA;AAG1C;AA7BZ;AA6BY;AAAA;AACS;AA7BrB;AA6BqB;AAAA;AACP;AA7Bd;;AA6Bc;AAAA;AACC;AA7Bf;AA6Be;AAAA;AACF;AA7Bb;AA6Ba;AAAA;AALX;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAkByC;AA7CpC;AA6CoC;AACH;AAAA;AAI/B;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAP;AAWF;;;AA3DO;AA4DL;;AAAA;AA3DK;AA4DL;;AAAA;AA3DK;;AA4DL;;AAAA;AAEyB;AAhEpB;AAgEoB;AAAA;AAAlB;;AAAA;AAAP;AACuB;AAhElB;AAgEkB;AAAA;AAAhB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"globalString\" \"globalBool\" \"globalInt\" \"globalIntNoDefault\" \"globalAccount\" 0x151f7c75 \"globalBytes\""
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "93": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "96": {
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\""
      ],
      "stack_out": [
        "\"globalInt\""
      ]
    },
    "97": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"globalInt\"",
        "50"
      ],
      "stack_out": [
        "\"globalInt\"",
        "50"
      ]
    },
    "99": {
      "op": "app_global_put",
      "stack_out": []
    },
    "100": {
      "op": "bytec 6 // \"globalBytes\"",
      "defined_out": [
        "\"globalBytes\""
      ],
      "stack_out": [
        "\"globalBytes\""
      ]
    },
    "102": {
      "op": "pushbytes \"Silvio\"",
      "defined_out": [
        "\"Silvio\"",
        "\"globalBytes\""
      ],
      "stack_out": [
        "\"globalBytes\"",
        "\"Silvio\""
      ]
    },
    "110": {
      "op": "app_global_put",
      "stack_out": []
    },
    "111": {
      "op": "bytec_0 // \"globalString\"",
      "defined_out": [
        "\"globalString\""
      ],
      "stack_out": [
        "\"globalString\""
      ]
    },
    "112": {
      "op": "pushbytes \"Micali\"",
      "defined_out": [
        "\"Micali\"",
        "\"globalString\""
      ],
      "stack_out": [
        "\"globalString\"",
        "\"Micali\""
      ]
    },
    "120": {
      "op": "app_global_put",
      "stack_out": []
    },
    "121": {
      "op": "bytec_1 // \"globalBool\"",
      "defined_out": [
        "\"globalBool\""
      ],
      "stack_out": [
        "\"globalBool\""
      ]
    },
    "122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"globalBool\"",
        "1"
      ],
      "stack_out": [
        "\"globalBool\"",
        "1"
      ]
    },
    "123": {
      "op": "app_global_put",
      "stack_out": []
    },
    "124": {
      "op": "bytec_3 // \"globalIntNoDefault\"",
      "defined_out": [
        "\"globalIntNoDefault\""
      ],
      "stack_out": [
        "\"globalIntNoDefault\""
      ]
    },
    "125": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"globalIntNoDefault\"",
        "0"
      ],
      "stack_out": [
        "\"globalIntNoDefault\"",
        "0"
      ]
    },
    "126": {
      "op": "app_global_put",
      "stack_out": []
    },
    "127": {
      "op": "bytec 4 // \"globalAccount\"",
      "defined_out": [
        "\"globalAccount\""
      ],
      "stack_out": [
        "\"globalAccount\""
      ]
    },
    "129": {
      "op": "txn Sender",
      "defined_out": [
        "\"globalAccount\"",
        "tmp%0#2"
      ],
      "stack_out": [
        "\"globalAccount\"",
        "tmp%0#2"
      ]
    },
    "131": {
      "op": "app_global_put",
      "stack_out": []
    },
    "132": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "134": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "137": {
      "op": "pushbytess 0xd38f6072 0x47b45cd1 0xba7953dc 0x4a4c6bf6 0x3c7b1f00 // method \"readGlobalState()(uint64,uint64,byte[],string,bool,address)\", method \"hasGlobalState()(uint64,bool)\", method \"writeGlobalState(string,bool,address)void\", method \"writeDynamicGlobalState(string,string)string\", method \"deleteGlobalState()bool\"",
      "defined_out": [
        "Method(deleteGlobalState()bool)",
        "Method(hasGlobalState()(uint64,bool))",
        "Method(readGlobalState()(uint64,uint64,byte[],string,bool,address))",
        "Method(writeDynamicGlobalState(string,string)string)",
        "Method(writeGlobalState(string,bool,address)void)"
      ],
      "stack_out": [
        "Method(readGlobalState()(uint64,uint64,byte[],string,bool,address))",
        "Method(hasGlobalState()(uint64,bool))",
        "Method(writeGlobalState(string,bool,address)void)",
        "Method(writeDynamicGlobalState(string,string)string)",
        "Method(deleteGlobalState()bool)"
      ]
    },
    "164": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(deleteGlobalState()bool)",
        "Method(hasGlobalState()(uint64,bool))",
        "Method(readGlobalState()(uint64,uint64,byte[],string,bool,address))",
        "Method(writeDynamicGlobalState(string,string)string)",
        "Method(writeGlobalState(string,bool,address)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(readGlobalState()(uint64,uint64,byte[],string,bool,address))",
        "Method(hasGlobalState()(uint64,bool))",
        "Method(writeGlobalState(string,bool,address)void)",
        "Method(writeDynamicGlobalState(string,string)string)",
        "Method(deleteGlobalState()bool)",
        "tmp%2#0"
      ]
    },
    "167": {
      "op": "match main_readGlobalState_route@5 main_hasGlobalState_route@6 main_writeGlobalState_route@7 main_writeDynamicGlobalState_route@8 main_deleteGlobalState_route@9",
      "stack_out": []
    },
    "179": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "180": {
      "block": "main_deleteGlobalState_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "182": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "183": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "184": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "186": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "187": {
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\""
      ],
      "stack_out": [
        "\"globalInt\""
      ]
    },
    "188": {
      "op": "app_global_del",
      "stack_out": []
    },
    "189": {
      "op": "pushbytes 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "196": {
      "op": "log",
      "stack_out": []
    },
    "197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return",
      "stack_out": []
    },
    "199": {
      "block": "main_writeDynamicGlobalState_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "201": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "202": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "203": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "205": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "206": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "209": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "212": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%2#0"
      ]
    },
    "215": {
      "op": "dup",
      "defined_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%2#0",
        "reinterpret_Encoded(len+utf8[])%2#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%2#0",
        "reinterpret_Encoded(len+utf8[])%2#0 (copy)"
      ]
    },
    "216": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%2#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%2#0",
        "value#0"
      ]
    },
    "219": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%2#0",
        "value#0",
        "key#0"
      ]
    },
    "221": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%2#0",
        "key#0",
        "value#0"
      ]
    },
    "222": {
      "op": "app_global_put",
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%2#0"
      ]
    },
    "223": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "reinterpret_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%2#0",
        "0x151f7c75"
      ]
    },
    "225": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "reinterpret_Encoded(len+utf8[])%2#0"
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "227": {
      "op": "log",
      "stack_out": []
    },
    "228": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "229": {
      "op": "return",
      "stack_out": []
    },
    "230": {
      "block": "main_writeGlobalState_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "232": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "233": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "234": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "236": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "237": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "240": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "243": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "246": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "247": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "aggregate%get_bit%0#0"
      ]
    },
    "248": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "aggregate%get_bit%0#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "aggregate%get_bit%0#0",
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "251": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeGlobalState",
      "op": "callsub writeGlobalState",
      "stack_out": []
    },
    "254": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "255": {
      "op": "return",
      "stack_out": []
    },
    "256": {
      "block": "main_hasGlobalState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "258": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "259": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "260": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "262": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "263": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "op": "callsub hasGlobalState",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "266": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "268": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%13#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "270": {
      "op": "log",
      "stack_out": []
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "272": {
      "op": "return",
      "stack_out": []
    },
    "273": {
      "block": "main_readGlobalState_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "275": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "276": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "277": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "279": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "280": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.readGlobalState",
      "op": "callsub readGlobalState",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "283": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "285": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%7#0"
      ]
    },
    "286": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "287": {
      "op": "log",
      "stack_out": []
    },
    "288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "289": {
      "op": "return",
      "stack_out": []
    },
    "290": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "292": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "295": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "297": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "298": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "299": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "300": {
      "op": "return",
      "stack_out": []
    },
    "301": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.readGlobalState",
      "params": {},
      "block": "readGlobalState",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "302": {
      "op": "bytec 4 // \"globalAccount\"",
      "defined_out": [
        "\"globalAccount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalAccount\""
      ]
    },
    "304": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_exists%0#0"
      ]
    },
    "305": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0"
      ]
    },
    "306": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "0"
      ]
    },
    "307": {
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0",
        "accountAddress#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "0",
        "\"globalInt\""
      ]
    },
    "308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "309": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0"
      ]
    },
    "310": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "311": {
      "op": "bytec_3 // \"globalIntNoDefault\"",
      "defined_out": [
        "\"globalIntNoDefault\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "0",
        "\"globalIntNoDefault\""
      ]
    },
    "312": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "313": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "314": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "315": {
      "op": "bytec 6 // \"globalBytes\"",
      "defined_out": [
        "\"globalBytes\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"globalBytes\""
      ]
    },
    "317": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "318": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "319": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "320": {
      "op": "bytec_0 // \"globalString\"",
      "defined_out": [
        "\"globalString\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"globalString\""
      ]
    },
    "321": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "322": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "323": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "324": {
      "op": "bytec_1 // \"globalBool\"",
      "defined_out": [
        "\"globalBool\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"globalBool\""
      ]
    },
    "325": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "326": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "327": {
      "op": "uncover 4",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%1#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "accountAddress#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "330": {
      "op": "uncover 4",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "332": {
      "op": "itob",
      "defined_out": [
        "accountAddress#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "333": {
      "op": "concat",
      "defined_out": [
        "accountAddress#0",
        "aggregate%head%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%1#0"
      ]
    },
    "334": {
      "op": "dig 3",
      "defined_out": [
        "accountAddress#0",
        "aggregate%head%1#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%1#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "336": {
      "op": "len",
      "defined_out": [
        "accountAddress#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "337": {
      "op": "itob",
      "defined_out": [
        "accountAddress#0",
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "338": {
      "op": "extract 6 2",
      "defined_out": [
        "accountAddress#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "341": {
      "op": "uncover 4",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "maybe_value%3#0"
      ]
    },
    "343": {
      "op": "concat",
      "defined_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "345": {
      "op": "pushbytes 0x0035",
      "defined_out": [
        "0x0035",
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "0x0035"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "350": {
      "op": "dig 1",
      "defined_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "352": {
      "op": "len",
      "defined_out": [
        "accountAddress#0",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%data_length%0#0"
      ]
    },
    "353": {
      "op": "pushint 53 // 53",
      "defined_out": [
        "53",
        "accountAddress#0",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%data_length%0#0",
        "53"
      ]
    },
    "355": {
      "op": "+",
      "defined_out": [
        "accountAddress#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "356": {
      "op": "dig 4",
      "defined_out": [
        "accountAddress#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "maybe_value%4#0 (copy)"
      ]
    },
    "358": {
      "op": "len",
      "defined_out": [
        "accountAddress#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%length%1#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "359": {
      "op": "itob",
      "defined_out": [
        "accountAddress#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "360": {
      "op": "extract 6 2",
      "defined_out": [
        "accountAddress#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "363": {
      "op": "uncover 5",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "maybe_value%4#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "accountAddress#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "367": {
      "op": "itob",
      "defined_out": [
        "accountAddress#0",
        "aggregate%as_bytes%3#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "368": {
      "op": "extract 6 2",
      "defined_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "371": {
      "op": "uncover 2",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%2#0"
      ]
    },
    "373": {
      "op": "swap",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "374": {
      "op": "concat",
      "defined_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0"
      ]
    },
    "375": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "0x00"
      ]
    },
    "378": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%5#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "0x00",
        "0"
      ]
    },
    "379": {
      "op": "uncover 5",
      "stack_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "0x00",
        "0",
        "maybe_value%5#0"
      ]
    },
    "381": {
      "op": "setbit",
      "defined_out": [
        "accountAddress#0",
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "382": {
      "op": "concat",
      "defined_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0"
      ]
    },
    "383": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%4#0",
        "accountAddress#0"
      ]
    },
    "385": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%5#0"
      ]
    },
    "386": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%head%5#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "388": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "389": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "390": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "391": {
      "retsub": true,
      "op": "retsub"
    },
    "392": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "params": {},
      "block": "hasGlobalState",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "393": {
      "op": "bytec_3 // \"globalIntNoDefault\"",
      "defined_out": [
        "\"globalIntNoDefault\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalIntNoDefault\""
      ]
    },
    "394": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hasValue#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "395": {
      "op": "dup",
      "defined_out": [
        "hasValue#0",
        "hasValue#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "hasValue#0",
        "hasValue#0 (copy)"
      ]
    },
    "396": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "hasValue#0",
        "value#0"
      ]
    },
    "398": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "hasValue#0"
      ],
      "stack_out": [
        "hasValue#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "399": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "hasValue#0"
      ],
      "stack_out": [
        "hasValue#0",
        "aggregate%val_as_bytes%0#0",
        "0x00"
      ]
    },
    "402": {
      "op": "intc_0 // 0",
      "stack_out": [
        "hasValue#0",
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0"
      ]
    },
    "403": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0",
        "hasValue#0"
      ]
    },
    "405": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "406": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "407": {
      "retsub": true,
      "op": "retsub"
    },
    "408": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeGlobalState",
      "params": {
        "valueString#0": "bytes",
        "valueBool#0": "uint64",
        "valueAccount#0": "bytes"
      },
      "block": "writeGlobalState",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "411": {
      "op": "bytec_0 // \"globalString\"",
      "defined_out": [
        "\"globalString\""
      ],
      "stack_out": [
        "\"globalString\""
      ]
    },
    "412": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"globalString\"",
        "valueString#0 (copy)"
      ],
      "stack_out": [
        "\"globalString\"",
        "valueString#0 (copy)"
      ]
    },
    "414": {
      "op": "app_global_put",
      "stack_out": []
    },
    "415": {
      "op": "bytec_1 // \"globalBool\"",
      "defined_out": [
        "\"globalBool\""
      ],
      "stack_out": [
        "\"globalBool\""
      ]
    },
    "416": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"globalBool\"",
        "valueBool#0 (copy)"
      ],
      "stack_out": [
        "\"globalBool\"",
        "valueBool#0 (copy)"
      ]
    },
    "418": {
      "op": "app_global_put",
      "stack_out": []
    },
    "419": {
      "op": "bytec 4 // \"globalAccount\"",
      "defined_out": [
        "\"globalAccount\""
      ],
      "stack_out": [
        "\"globalAccount\""
      ]
    },
    "421": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"globalAccount\"",
        "valueAccount#0 (copy)"
      ],
      "stack_out": [
        "\"globalAccount\"",
        "valueAccount#0 (copy)"
      ]
    },
    "423": {
      "op": "app_global_put",
      "stack_out": []
    },
    "424": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "425": {
      "op": "bytec_0 // \"globalString\"",
      "stack_out": [
        "0",
        "\"globalString\""
      ]
    },
    "426": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "427": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "428": {
      "op": "frame_dig -3",
      "stack_out": [
        "maybe_value%0#0",
        "valueString#0 (copy)"
      ]
    },
    "430": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "431": {
      "op": "assert",
      "stack_out": []
    },
    "432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "433": {
      "op": "bytec_1 // \"globalBool\"",
      "stack_out": [
        "0",
        "\"globalBool\""
      ]
    },
    "434": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "435": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "436": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "valueBool#0 (copy)"
      ]
    },
    "438": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "439": {
      "op": "assert",
      "stack_out": []
    },
    "440": {
      "retsub": true,
      "op": "retsub"
    }
  }
}