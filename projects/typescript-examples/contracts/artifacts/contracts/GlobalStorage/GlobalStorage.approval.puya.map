{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/GlobalStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASS;AAAuD;;AAA9D;AAKO;AAAgD;;;;;;;AAAvD;AAKO;;;;;;;;;;;;AAAyC;AAAhD;AAbF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAoDG;;AAAA;AAAA;AAAA;;AAAA;AApDH;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;;AAAA;AAoDG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA7CH;;;AAAA;;;AA6CG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AA8BE;;;AAEyB;AA7BlB;AA6BkB;AAAA;AAAwB;AAxB1C;AAwB0C;AAAA;AAA/C;AAIF;;;AAEkC;AAnC3B;AAmC2B;AAAA;;AACH;AApCxB;AAoCwB;AAAA;AAE7B;AAAA;AAIF;;;AArCO;AAuCL;;AAAA;;AAKF;;;AA3CO;AA6CL;;AAAA;AACiC;AA9C5B;AA8C4B;AAAA;AAA1B;;AAAA;AAAP;AAzCK;;AA2CL;;AAAA;AACgC;AA5C3B;;AA4C2B;AAAA;AAAhC;AAxCK;;AA0CL;;AAAA;AACwB;AA3CnB;;AA2CmB;AAAA;AAAjB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"globalInt\" \"globalBytes\" 0x151f7c75 \"globalBytesNoDefault\" \"globalBoolNoDefault\" \"globalAsset\""
    },
    "87": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "89": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "92": {
      "op": "bytec_0 // \"globalInt\""
    },
    "93": {
      "op": "pushint 50 // 50"
    },
    "95": {
      "op": "app_global_put"
    },
    "96": {
      "op": "bytec_1 // \"globalBytes\""
    },
    "97": {
      "op": "pushbytes \"Hello\""
    },
    "104": {
      "op": "app_global_put"
    },
    "105": {
      "op": "pushbytes \"globalBool\""
    },
    "117": {
      "op": "intc_1 // 1"
    },
    "118": {
      "op": "app_global_put"
    },
    "119": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "121": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "124": {
      "op": "pushbytess 0xd4035ec3 0x47b45cd1 0xd4c4fbd9 0xf5b1f705 // method \"getGlobalState()(uint64,byte[])\", method \"hasGlobalState()(uint64,bool)\", method \"setGlobalState(byte[])void\", method \"setGlobalStateExample(byte[],asset,bool)void\""
    },
    "146": {
      "op": "txna ApplicationArgs 0"
    },
    "149": {
      "op": "match main_getGlobalState_route@5 main_hasGlobalState_route@6 main_setGlobalState_route@7 main_setGlobalStateExample_route@8"
    },
    "159": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "160": {
      "op": "return"
    },
    "161": {
      "block": "main_setGlobalStateExample_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "163": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "164": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "165": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "167": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "168": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "171": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "174": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "177": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0"
      ]
    },
    "178": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%24#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%27#0"
      ]
    },
    "180": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "183": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0",
        "0"
      ]
    },
    "184": {
      "op": "getbit",
      "defined_out": [
        "tmp%24#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "185": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalStateExample",
      "op": "callsub setGlobalStateExample",
      "stack_out": []
    },
    "188": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "return"
    },
    "190": {
      "block": "main_setGlobalState_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "192": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "193": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "194": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "196": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "197": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "200": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "203": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalState",
      "op": "callsub setGlobalState",
      "stack_out": []
    },
    "206": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "op": "return"
    },
    "208": {
      "block": "main_hasGlobalState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "210": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "211": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "212": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "214": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "215": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "op": "callsub hasGlobalState",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0"
      ]
    },
    "219": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "220": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "223": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%3#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%1#0",
        "0x00",
        "0"
      ]
    },
    "224": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x00",
        "0",
        "elements_to_encode%3#0"
      ]
    },
    "226": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_bool%0#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "228": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "231": {
      "op": "log",
      "stack_out": []
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return"
    },
    "234": {
      "block": "main_getGlobalState_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "237": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "240": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "241": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalState",
      "op": "callsub getGlobalState",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "244": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "245": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "246": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "248": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "length%0#0"
      ]
    },
    "249": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "as_bytes%0#0"
      ]
    },
    "250": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0"
      ]
    },
    "253": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "length_uint16%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "255": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0"
      ]
    },
    "256": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "257": {
      "op": "pushbytes 0x000a",
      "defined_out": [
        "0x000a",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "0x000a"
      ]
    },
    "261": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "262": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "264": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x151f7c75"
      ]
    },
    "265": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "266": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "267": {
      "op": "log",
      "stack_out": []
    },
    "268": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "op": "return"
    },
    "270": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "272": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "275": {
      "op": "txn ApplicationID"
    },
    "277": {
      "op": "!"
    },
    "278": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "279": {
      "op": "intc_1 // 1"
    },
    "280": {
      "op": "return"
    },
    "281": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalState",
      "params": {},
      "block": "getGlobalState",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "284": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "285": {
      "op": "bytec_0 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalInt\""
      ]
    },
    "286": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "287": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "288": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "289": {
      "op": "bytec_1 // \"globalBytes\"",
      "defined_out": [
        "\"globalBytes\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"globalBytes\""
      ]
    },
    "290": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "291": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "292": {
      "retsub": true,
      "op": "retsub"
    },
    "293": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "params": {},
      "block": "hasGlobalState",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "296": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "297": {
      "op": "bytec_0 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalInt\""
      ]
    },
    "298": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hasValue#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "hasValue#0"
      ]
    },
    "299": {
      "op": "bury 1",
      "stack_out": [
        "hasValue#0"
      ]
    },
    "301": {
      "op": "intc_0 // 0",
      "stack_out": [
        "hasValue#0",
        "0"
      ]
    },
    "302": {
      "op": "bytec_0 // \"globalInt\"",
      "stack_out": [
        "hasValue#0",
        "0",
        "\"globalInt\""
      ]
    },
    "303": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hasValue#0",
        "maybe_exists%1#0",
        "value#0"
      ],
      "stack_out": [
        "hasValue#0",
        "value#0",
        "maybe_exists%1#0"
      ]
    },
    "304": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "hasValue#0",
        "value#0"
      ]
    },
    "305": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "306": {
      "retsub": true,
      "op": "retsub"
    },
    "307": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalState",
      "params": {
        "value#0": "bytes"
      },
      "block": "setGlobalState",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "310": {
      "op": "bytec_1 // \"globalBytes\"",
      "defined_out": [
        "\"globalBytes\""
      ],
      "stack_out": [
        "\"globalBytes\""
      ]
    },
    "311": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"globalBytes\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"globalBytes\"",
        "value#0 (copy)"
      ]
    },
    "313": {
      "op": "app_global_put",
      "stack_out": []
    },
    "314": {
      "retsub": true,
      "op": "retsub"
    },
    "315": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalStateExample",
      "params": {
        "valueBytes#0": "bytes",
        "valueAsset#0": "uint64",
        "valueBool#0": "uint64"
      },
      "block": "setGlobalStateExample",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "318": {
      "op": "bytec_3 // \"globalBytesNoDefault\"",
      "defined_out": [
        "\"globalBytesNoDefault\""
      ],
      "stack_out": [
        "\"globalBytesNoDefault\""
      ]
    },
    "319": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"globalBytesNoDefault\"",
        "valueBytes#0 (copy)"
      ],
      "stack_out": [
        "\"globalBytesNoDefault\"",
        "valueBytes#0 (copy)"
      ]
    },
    "321": {
      "op": "app_global_put",
      "stack_out": []
    },
    "322": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "323": {
      "op": "bytec_3 // \"globalBytesNoDefault\"",
      "stack_out": [
        "0",
        "\"globalBytesNoDefault\""
      ]
    },
    "324": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "325": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "326": {
      "op": "frame_dig -3",
      "stack_out": [
        "maybe_value%0#0",
        "valueBytes#0 (copy)"
      ]
    },
    "328": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "329": {
      "op": "assert",
      "stack_out": []
    },
    "330": {
      "op": "bytec 4 // \"globalBoolNoDefault\"",
      "defined_out": [
        "\"globalBoolNoDefault\""
      ],
      "stack_out": [
        "\"globalBoolNoDefault\""
      ]
    },
    "332": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"globalBoolNoDefault\"",
        "valueBool#0 (copy)"
      ],
      "stack_out": [
        "\"globalBoolNoDefault\"",
        "valueBool#0 (copy)"
      ]
    },
    "334": {
      "op": "app_global_put",
      "stack_out": []
    },
    "335": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "336": {
      "op": "bytec 4 // \"globalBoolNoDefault\"",
      "stack_out": [
        "0",
        "\"globalBoolNoDefault\""
      ]
    },
    "338": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "339": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "340": {
      "op": "assert",
      "stack_out": []
    },
    "341": {
      "op": "bytec 5 // \"globalAsset\"",
      "defined_out": [
        "\"globalAsset\""
      ],
      "stack_out": [
        "\"globalAsset\""
      ]
    },
    "343": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"globalAsset\"",
        "valueAsset#0 (copy)"
      ],
      "stack_out": [
        "\"globalAsset\"",
        "valueAsset#0 (copy)"
      ]
    },
    "345": {
      "op": "app_global_put",
      "stack_out": []
    },
    "346": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "347": {
      "op": "bytec 5 // \"globalAsset\"",
      "stack_out": [
        "0",
        "\"globalAsset\""
      ]
    },
    "349": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "350": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "351": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%2#0",
        "valueAsset#0 (copy)"
      ]
    },
    "353": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "354": {
      "op": "assert",
      "stack_out": []
    },
    "355": {
      "retsub": true,
      "op": "retsub"
    }
  }
}