{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/GlobalStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQS;;AAAuD;;AAA9D;AAEO;;AAAuD;;;;;;;;AAA9D;AACO;AAAmD;;;;;;;;AAA1D;AACO;AAAyC;AAAhD;AAHO;AAYkC;AAAvC;AARK;AAS0B;;AAA/B;AAhBJ;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAkEG;;AAAA;AAAA;AAAA;;AAAA;AAlEH;;;AAAA;;;AAAA;;;;AAAA;AAAA;;;AAAA;AAAA;;AAkEG;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA1BH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AA0BE;;;AAG6D;AAtBtD;AAsBsD;AAAA;AAG1C;AA9BZ;;AA8BY;AAAA;AACS;AA9BrB;AA8BqB;AAAA;AACP;AA9Bd;;AA8Bc;AAAA;AACC;AA9Bf;AA8Be;AAAA;AACF;AA9Bb;AA8Ba;AAAA;AALlB;;AAAA;AAiBF;;;AAE2C;AA/CpC;AA+CoC;AAAA;;AACH;AAhDjC;AAgDiC;AAAA;AAEtC;;AAAA;AAEA;AAAA;AAWF;;;AA7DO;AA+DL;;AAAA;AA9DK;AA+DL;;AAAA;AA9DK;AA+DL;;AAAA;AAEyB;AAnEpB;AAmEoB;AAAA;AAAlB;;AAAA;AAAP;AACuB;AAnElB;AAmEkB;AAAA;AAAhB;;AAAA;AAAP;AAC0B;AAnErB;AAmEqB;AAAA;AAAnB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"globalString\" \"globalBool\" \"globalIntNoDefault\" \"globalAccount\" \"globalInt\" \"globalBytes\" 0x151f7c75"
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "93": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "96": {
      "op": "bytec 4 // \"globalInt\""
    },
    "98": {
      "op": "pushint 50 // 50"
    },
    "100": {
      "op": "app_global_put"
    },
    "101": {
      "op": "bytec 5 // \"globalBytes\""
    },
    "103": {
      "op": "pushbytes \"Silvio\""
    },
    "111": {
      "op": "app_global_put"
    },
    "112": {
      "op": "bytec_0 // \"globalString\""
    },
    "113": {
      "op": "pushbytes \"Micali\""
    },
    "121": {
      "op": "app_global_put"
    },
    "122": {
      "op": "bytec_1 // \"globalBool\""
    },
    "123": {
      "op": "intc_1 // 1"
    },
    "124": {
      "op": "app_global_put"
    },
    "125": {
      "op": "bytec_2 // \"globalIntNoDefault\""
    },
    "126": {
      "op": "intc_0 // 0"
    },
    "127": {
      "op": "app_global_put"
    },
    "128": {
      "op": "bytec_3 // \"globalAccount\""
    },
    "129": {
      "op": "txn Sender"
    },
    "131": {
      "op": "app_global_put"
    },
    "132": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "134": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "137": {
      "op": "pushbytess 0xd38f6072 0x47b45cd1 0xf7a04ede // method \"readGlobalState()(uint64,uint64,byte[],string,bool,address)\", method \"hasGlobalState()(uint64,bool)\", method \"writeGlobalState(string,bool,account)void\""
    },
    "154": {
      "op": "txna ApplicationArgs 0"
    },
    "157": {
      "op": "match main_readGlobalState_route@5 main_hasGlobalState_route@6 main_writeGlobalState_route@7"
    },
    "165": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "166": {
      "op": "return"
    },
    "167": {
      "block": "main_writeGlobalState_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "169": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "170": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "171": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "173": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "174": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "177": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "180": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "183": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "0"
      ]
    },
    "184": {
      "op": "getbit",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "185": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "188": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "189": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%23#0"
      ]
    },
    "191": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeGlobalState",
      "op": "callsub writeGlobalState",
      "stack_out": []
    },
    "194": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "return"
    },
    "196": {
      "block": "main_hasGlobalState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "198": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "199": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "200": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "202": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "203": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "op": "callsub hasGlobalState",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0"
      ]
    },
    "207": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ]
    },
    "208": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "0x00"
      ]
    },
    "211": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%7#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "val_as_bytes%2#0",
        "0x00",
        "0"
      ]
    },
    "212": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%2#0",
        "0x00",
        "0",
        "elements_to_encode%7#0"
      ]
    },
    "214": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_bool%1#0"
      ]
    },
    "215": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "216": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "219": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "220": {
      "op": "log",
      "stack_out": []
    },
    "221": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "222": {
      "op": "return"
    },
    "223": {
      "block": "main_readGlobalState_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "225": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "226": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "227": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "229": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "230": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.readGlobalState",
      "op": "callsub readGlobalState",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "233": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%0#0"
      ]
    },
    "235": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "236": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "238": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "239": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "241": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length%0#0"
      ]
    },
    "242": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "as_bytes%0#0"
      ]
    },
    "243": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0"
      ]
    },
    "246": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0"
      ]
    },
    "249": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "251": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "252": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "253": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "256": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "elements_to_encode%3#0"
      ]
    },
    "258": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "259": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00"
      ]
    },
    "262": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00",
        "0"
      ]
    },
    "263": {
      "op": "uncover 7",
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00",
        "0",
        "elements_to_encode%4#0"
      ]
    },
    "265": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0"
      ]
    },
    "266": {
      "op": "uncover 4"
    },
    "268": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "270": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "271": {
      "op": "pushbytes 0x0035",
      "defined_out": [
        "0x0035",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "0x0035"
      ]
    },
    "275": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "276": {
      "op": "dig 3",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "278": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0"
      ]
    },
    "279": {
      "op": "pushint 53 // 53",
      "defined_out": [
        "53",
        "data_length%0#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0",
        "53"
      ]
    },
    "281": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "282": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "as_bytes%3#0"
      ]
    },
    "283": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "286": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "287": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_bool%0#0"
      ]
    },
    "288": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "289": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0",
        "elements_to_encode%5#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "292": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ]
    },
    "294": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "295": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ]
    },
    "296": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0"
      ]
    },
    "297": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "0x151f7c75"
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "300": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "301": {
      "op": "log",
      "stack_out": []
    },
    "302": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "303": {
      "op": "return"
    },
    "304": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "306": {
      "op": "bnz main_after_if_else@14",
      "stack_out": []
    },
    "309": {
      "op": "txn ApplicationID"
    },
    "311": {
      "op": "!"
    },
    "312": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "313": {
      "op": "intc_1 // 1"
    },
    "314": {
      "op": "return"
    },
    "315": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.readGlobalState",
      "params": {},
      "block": "readGlobalState",
      "stack_in": [],
      "op": "proto 0 6"
    },
    "318": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "319": {
      "op": "bytec_3 // \"globalAccount\"",
      "defined_out": [
        "\"globalAccount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalAccount\""
      ]
    },
    "320": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_exists%0#0"
      ]
    },
    "321": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0"
      ]
    },
    "322": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "0"
      ]
    },
    "323": {
      "op": "bytec 4 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0",
        "accountAddress#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "0",
        "\"globalInt\""
      ]
    },
    "325": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "326": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0"
      ]
    },
    "327": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "328": {
      "op": "bytec_2 // \"globalIntNoDefault\"",
      "defined_out": [
        "\"globalIntNoDefault\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "0",
        "\"globalIntNoDefault\""
      ]
    },
    "329": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "330": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "331": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "332": {
      "op": "bytec 5 // \"globalBytes\"",
      "defined_out": [
        "\"globalBytes\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"globalBytes\""
      ]
    },
    "334": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "335": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "336": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "337": {
      "op": "bytec_0 // \"globalString\"",
      "defined_out": [
        "\"globalString\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"globalString\""
      ]
    },
    "338": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "339": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "340": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "341": {
      "op": "bytec_1 // \"globalBool\"",
      "defined_out": [
        "\"globalBool\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"globalBool\""
      ]
    },
    "342": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "343": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "344": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "accountAddress#0"
      ]
    },
    "346": {
      "retsub": true,
      "op": "retsub"
    },
    "347": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "params": {},
      "block": "hasGlobalState",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "350": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "351": {
      "op": "bytec_2 // \"globalIntNoDefault\"",
      "defined_out": [
        "\"globalIntNoDefault\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalIntNoDefault\""
      ]
    },
    "352": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hasValue#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "hasValue#0"
      ]
    },
    "353": {
      "op": "bury 1",
      "stack_out": [
        "hasValue#0"
      ]
    },
    "355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "hasValue#0",
        "0"
      ]
    },
    "356": {
      "op": "bytec_2 // \"globalIntNoDefault\"",
      "stack_out": [
        "hasValue#0",
        "0",
        "\"globalIntNoDefault\""
      ]
    },
    "357": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hasValue#0",
        "maybe_exists%1#0",
        "value#0"
      ],
      "stack_out": [
        "hasValue#0",
        "value#0",
        "maybe_exists%1#0"
      ]
    },
    "358": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "hasValue#0",
        "value#0"
      ]
    },
    "359": {
      "op": "dig 1",
      "defined_out": [
        "hasValue#0",
        "hasValue#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "hasValue#0",
        "value#0",
        "hasValue#0 (copy)"
      ]
    },
    "361": {
      "error": "Global state not set.",
      "op": "assert // Global state not set.",
      "stack_out": [
        "hasValue#0",
        "value#0"
      ]
    },
    "362": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "hasValue#0"
      ]
    },
    "363": {
      "retsub": true,
      "op": "retsub"
    },
    "364": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.writeGlobalState",
      "params": {
        "valueString#0": "bytes",
        "valueBool#0": "uint64",
        "valueAccount#0": "bytes"
      },
      "block": "writeGlobalState",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "367": {
      "op": "bytec_0 // \"globalString\"",
      "defined_out": [
        "\"globalString\""
      ],
      "stack_out": [
        "\"globalString\""
      ]
    },
    "368": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"globalString\"",
        "valueString#0 (copy)"
      ],
      "stack_out": [
        "\"globalString\"",
        "valueString#0 (copy)"
      ]
    },
    "370": {
      "op": "app_global_put",
      "stack_out": []
    },
    "371": {
      "op": "bytec_1 // \"globalBool\"",
      "defined_out": [
        "\"globalBool\""
      ],
      "stack_out": [
        "\"globalBool\""
      ]
    },
    "372": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"globalBool\"",
        "valueBool#0 (copy)"
      ],
      "stack_out": [
        "\"globalBool\"",
        "valueBool#0 (copy)"
      ]
    },
    "374": {
      "op": "app_global_put",
      "stack_out": []
    },
    "375": {
      "op": "bytec_3 // \"globalAccount\"",
      "defined_out": [
        "\"globalAccount\""
      ],
      "stack_out": [
        "\"globalAccount\""
      ]
    },
    "376": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"globalAccount\"",
        "valueAccount#0 (copy)"
      ],
      "stack_out": [
        "\"globalAccount\"",
        "valueAccount#0 (copy)"
      ]
    },
    "378": {
      "op": "app_global_put",
      "stack_out": []
    },
    "379": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "380": {
      "op": "bytec_0 // \"globalString\"",
      "stack_out": [
        "0",
        "\"globalString\""
      ]
    },
    "381": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "382": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "383": {
      "op": "frame_dig -3",
      "stack_out": [
        "maybe_value%0#0",
        "valueString#0 (copy)"
      ]
    },
    "385": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "386": {
      "op": "assert",
      "stack_out": []
    },
    "387": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "388": {
      "op": "bytec_1 // \"globalBool\"",
      "stack_out": [
        "0",
        "\"globalBool\""
      ]
    },
    "389": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "390": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "391": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "valueBool#0 (copy)"
      ]
    },
    "393": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "394": {
      "op": "assert",
      "stack_out": []
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "396": {
      "op": "bytec_3 // \"globalAccount\"",
      "stack_out": [
        "0",
        "\"globalAccount\""
      ]
    },
    "397": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "398": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "399": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%2#0",
        "valueAccount#0 (copy)"
      ]
    },
    "401": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "402": {
      "op": "assert",
      "stack_out": []
    },
    "403": {
      "retsub": true,
      "op": "retsub"
    }
  }
}