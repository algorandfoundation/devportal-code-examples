{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/GlobalStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQE;AAA+C;AAA/C;AAKA;AAAgD;AAAhD;AAKA;;;;;;;;;;;;AAAyC;AAAzC;AAZF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AA4EG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA9DH;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;;AAAA;AA8DG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAvDH;;;AAAA;;;AAuDG;;;AAAA;;AARD;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7BH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AA6BE;;;AAEwB;AA7BxB;AA6BwB;AAAA;AAAtB;AAIF;;;AAE+B;AAnC/B;AAmC+B;AAAA;AACG;AApClC;AAoCkC;AAAA;AAAA;;AAAA;;AAAA;AAE5B;;;AACF;;AAAA;;AAAA;AAGF;;AAAA;;AAAA;AAGF;;;AACwB;AA9CxB;AA8CwB;AAAA;AAAiB;AAAhC;AAAP;AACwB;AA1C1B;AA0C0B;AAAA;AAAgB;AAAjC;AAAP;AAEuB;AAjDzB;AAiDyB;AAAA;AAAwB;AA5CjD;AA4CiD;AAAA;AAA/C;AAIF;;;AAhDA;AAkDE;;AAAA;;AAKF;;;AAtDA;;AAwDE;;AAAA;AACiC;AAzDnC;;AAyDmC;AAAA;AAA1B;;AAAA;AAAP;AApDF;;AAsDE;;AAAA;AACgC;AAvDlC;;AAuDkC;AAAA;AAAhC;AAnDF;;AAqDE;;AAAA;AACwB;AAtD1B;;AAsD0B;AAAA;AAAjB;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 50"
    },
    "6": {
      "op": "bytecblock \"globalInt\" \"globalBytes\" 0x151f7c75 \"Hello\" \"globalBytesNoDefault\" \"globalBoolNoDefault\" \"globalAsset\""
    },
    "94": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "96": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "99": {
      "op": "bytec_0 // \"globalInt\""
    },
    "100": {
      "op": "intc_2 // 50"
    },
    "101": {
      "op": "app_global_put"
    },
    "102": {
      "op": "bytec_1 // \"globalBytes\""
    },
    "103": {
      "op": "bytec_3 // \"Hello\""
    },
    "104": {
      "op": "app_global_put"
    },
    "105": {
      "op": "pushbytes \"globalBool\""
    },
    "117": {
      "op": "intc_1 // 1"
    },
    "118": {
      "op": "app_global_put"
    },
    "119": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "121": {
      "op": "bz main_bare_routing@13",
      "stack_out": []
    },
    "124": {
      "op": "pushbytess 0x77a0e117 0x47b45cd1 0x41c3e123 0xd4c4fbd9 0xf5b1f705 0x6d827efc // method \"getGlobalState()uint64\", method \"hasGlobalState()(uint64,bool)\", method \"getGlobalStateExample()(uint64,byte[])\", method \"setGlobalState(byte[])void\", method \"setGlobalStateExample(byte[],asset,bool)void\", method \"delGlobalState()bool\""
    },
    "156": {
      "op": "txna ApplicationArgs 0"
    },
    "159": {
      "op": "match main_getGlobalState_route@5 main_hasGlobalState_route@6 main_getGlobalStateExample_route@7 main_setGlobalState_route@8 main_setGlobalStateExample_route@9 main_delGlobalState_route@10"
    },
    "173": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "return"
    },
    "175": {
      "block": "main_delGlobalState_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "177": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "178": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "179": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "181": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "182": {
      "op": "pushbytes 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "189": {
      "op": "log",
      "stack_out": []
    },
    "190": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "return"
    },
    "192": {
      "block": "main_setGlobalStateExample_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "194": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "195": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "196": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "198": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "199": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "202": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "205": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "208": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "209": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%29#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%32#0"
      ]
    },
    "211": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%29#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "214": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%32#0",
        "tmp%33#0",
        "0"
      ]
    },
    "215": {
      "op": "getbit",
      "defined_out": [
        "tmp%29#0",
        "tmp%32#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%32#0",
        "tmp%34#0"
      ]
    },
    "216": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalStateExample",
      "op": "callsub setGlobalStateExample",
      "stack_out": []
    },
    "219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "return"
    },
    "221": {
      "block": "main_setGlobalState_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "223": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "224": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "225": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "227": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "228": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "231": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "234": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalState",
      "op": "callsub setGlobalState",
      "stack_out": []
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "238": {
      "op": "return"
    },
    "239": {
      "block": "main_getGlobalStateExample_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "241": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "242": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "243": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "245": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "246": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalStateExample",
      "op": "callsub getGlobalStateExample",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "249": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0"
      ]
    },
    "250": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "251": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%2#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "253": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "length%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%2#0",
        "length%0#0"
      ]
    },
    "254": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%2#0",
        "as_bytes%0#0"
      ]
    },
    "255": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%3#0",
        "length_uint16%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%2#0",
        "length_uint16%0#0"
      ]
    },
    "258": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%2#0",
        "length_uint16%0#0",
        "elements_to_encode%3#0"
      ]
    },
    "260": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_value%0#0"
      ]
    },
    "261": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "262": {
      "op": "pushbytes 0x000a",
      "defined_out": [
        "0x000a",
        "encoded_value%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "0x000a"
      ]
    },
    "266": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "269": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "270": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "271": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "272": {
      "op": "log",
      "stack_out": []
    },
    "273": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "return"
    },
    "275": {
      "block": "main_hasGlobalState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "277": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "278": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "279": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "281": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "282": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "op": "callsub hasGlobalState",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "285": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "286": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "287": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00",
        "0"
      ]
    },
    "291": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x00",
        "0",
        "elements_to_encode%1#0"
      ]
    },
    "293": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_bool%0#0"
      ]
    },
    "294": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "295": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "298": {
      "op": "log",
      "stack_out": []
    },
    "299": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "300": {
      "op": "return"
    },
    "301": {
      "block": "main_getGlobalState_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "303": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "304": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "305": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "307": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "308": {
      "callsub": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalState",
      "op": "callsub getGlobalState",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "311": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "312": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "313": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "315": {
      "op": "log",
      "stack_out": []
    },
    "316": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "317": {
      "op": "return"
    },
    "318": {
      "block": "main_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "320": {
      "op": "bnz main_after_if_else@17",
      "stack_out": []
    },
    "323": {
      "op": "txn ApplicationID"
    },
    "325": {
      "op": "!"
    },
    "326": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "327": {
      "op": "intc_1 // 1"
    },
    "328": {
      "op": "return"
    },
    "329": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalState",
      "params": {},
      "block": "getGlobalState",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "332": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "333": {
      "op": "bytec_0 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalInt\""
      ]
    },
    "334": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "335": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "336": {
      "retsub": true,
      "op": "retsub"
    },
    "337": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.hasGlobalState",
      "params": {},
      "block": "hasGlobalState",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "340": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "341": {
      "op": "bytec_0 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalInt\""
      ]
    },
    "342": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "maybe_exists%0#0"
      ]
    },
    "343": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "value#0"
      ]
    },
    "344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "value#0",
        "0"
      ]
    },
    "345": {
      "op": "bytec_0 // \"globalInt\"",
      "stack_out": [
        "value#0",
        "0",
        "\"globalInt\""
      ]
    },
    "346": {
      "op": "app_global_get_ex",
      "defined_out": [
        "hasValue#0",
        "maybe_value%1#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "maybe_value%1#0",
        "hasValue#0"
      ]
    },
    "347": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "maybe_value%1#0",
        "hasValue#0",
        "hasValue#0 (copy)"
      ]
    },
    "348": {
      "op": "cover 2",
      "stack_out": [
        "value#0",
        "hasValue#0",
        "maybe_value%1#0",
        "hasValue#0"
      ]
    },
    "350": {
      "op": "cover 3",
      "defined_out": [
        "hasValue#0",
        "maybe_value%1#0",
        "value#0"
      ],
      "stack_out": [
        "hasValue#0",
        "value#0",
        "hasValue#0",
        "maybe_value%1#0"
      ]
    },
    "352": {
      "op": "pop",
      "stack_out": [
        "hasValue#0",
        "value#0",
        "hasValue#0"
      ]
    },
    "353": {
      "op": "bnz hasGlobalState_after_if_else@2",
      "stack_out": [
        "hasValue#0",
        "value#0"
      ]
    },
    "356": {
      "op": "frame_dig 0"
    },
    "358": {
      "op": "uncover 2"
    },
    "360": {
      "retsub": true,
      "op": "retsub"
    },
    "361": {
      "block": "hasGlobalState_after_if_else@2",
      "stack_in": [
        "hasValue#0",
        "value#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "hasValue#0",
        "value#0"
      ],
      "stack_out": [
        "hasValue#0",
        "value#0",
        "hasValue#0"
      ]
    },
    "363": {
      "op": "uncover 2"
    },
    "365": {
      "retsub": true,
      "op": "retsub"
    },
    "366": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.getGlobalStateExample",
      "params": {},
      "block": "getGlobalStateExample",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "369": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "370": {
      "op": "bytec_0 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalInt\""
      ]
    },
    "371": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "372": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "373": {
      "op": "intc_2 // 50",
      "defined_out": [
        "50",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "50"
      ]
    },
    "374": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "375": {
      "op": "assert",
      "stack_out": []
    },
    "376": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "377": {
      "op": "bytec_1 // \"globalBytes\"",
      "defined_out": [
        "\"globalBytes\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalBytes\""
      ]
    },
    "378": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "379": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "380": {
      "op": "bytec_3 // \"Hello\"",
      "defined_out": [
        "\"Hello\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"Hello\""
      ]
    },
    "381": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "382": {
      "op": "assert",
      "stack_out": []
    },
    "383": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "384": {
      "op": "bytec_0 // \"globalInt\"",
      "stack_out": [
        "0",
        "\"globalInt\""
      ]
    },
    "385": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "386": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "387": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "388": {
      "op": "bytec_1 // \"globalBytes\"",
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"globalBytes\""
      ]
    },
    "389": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "390": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "391": {
      "retsub": true,
      "op": "retsub"
    },
    "392": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalState",
      "params": {
        "value#0": "bytes"
      },
      "block": "setGlobalState",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "395": {
      "op": "bytec_1 // \"globalBytes\"",
      "defined_out": [
        "\"globalBytes\""
      ],
      "stack_out": [
        "\"globalBytes\""
      ]
    },
    "396": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"globalBytes\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"globalBytes\"",
        "value#0 (copy)"
      ]
    },
    "398": {
      "op": "app_global_put",
      "stack_out": []
    },
    "399": {
      "retsub": true,
      "op": "retsub"
    },
    "400": {
      "subroutine": "contracts/GlobalStorage/contract.algo.ts::GlobalStorage.setGlobalStateExample",
      "params": {
        "valueBytes#0": "bytes",
        "valueAsset#0": "uint64",
        "valueBool#0": "uint64"
      },
      "block": "setGlobalStateExample",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "403": {
      "op": "bytec 4 // \"globalBytesNoDefault\"",
      "defined_out": [
        "\"globalBytesNoDefault\""
      ],
      "stack_out": [
        "\"globalBytesNoDefault\""
      ]
    },
    "405": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"globalBytesNoDefault\"",
        "valueBytes#0 (copy)"
      ],
      "stack_out": [
        "\"globalBytesNoDefault\"",
        "valueBytes#0 (copy)"
      ]
    },
    "407": {
      "op": "app_global_put",
      "stack_out": []
    },
    "408": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "409": {
      "op": "bytec 4 // \"globalBytesNoDefault\"",
      "stack_out": [
        "0",
        "\"globalBytesNoDefault\""
      ]
    },
    "411": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "412": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "413": {
      "op": "frame_dig -3",
      "stack_out": [
        "maybe_value%0#0",
        "valueBytes#0 (copy)"
      ]
    },
    "415": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "416": {
      "op": "assert",
      "stack_out": []
    },
    "417": {
      "op": "bytec 5 // \"globalBoolNoDefault\"",
      "defined_out": [
        "\"globalBoolNoDefault\""
      ],
      "stack_out": [
        "\"globalBoolNoDefault\""
      ]
    },
    "419": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"globalBoolNoDefault\"",
        "valueBool#0 (copy)"
      ],
      "stack_out": [
        "\"globalBoolNoDefault\"",
        "valueBool#0 (copy)"
      ]
    },
    "421": {
      "op": "app_global_put",
      "stack_out": []
    },
    "422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "423": {
      "op": "bytec 5 // \"globalBoolNoDefault\"",
      "stack_out": [
        "0",
        "\"globalBoolNoDefault\""
      ]
    },
    "425": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "426": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "427": {
      "op": "assert",
      "stack_out": []
    },
    "428": {
      "op": "bytec 6 // \"globalAsset\"",
      "defined_out": [
        "\"globalAsset\""
      ],
      "stack_out": [
        "\"globalAsset\""
      ]
    },
    "430": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"globalAsset\"",
        "valueAsset#0 (copy)"
      ],
      "stack_out": [
        "\"globalAsset\"",
        "valueAsset#0 (copy)"
      ]
    },
    "432": {
      "op": "app_global_put",
      "stack_out": []
    },
    "433": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "434": {
      "op": "bytec 6 // \"globalAsset\"",
      "stack_out": [
        "0",
        "\"globalAsset\""
      ]
    },
    "436": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "437": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "438": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%2#0",
        "valueAsset#0 (copy)"
      ]
    },
    "440": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "441": {
      "op": "assert",
      "stack_out": []
    },
    "442": {
      "retsub": true,
      "op": "retsub"
    }
  }
}