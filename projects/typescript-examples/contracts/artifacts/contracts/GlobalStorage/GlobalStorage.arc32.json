{
    "hints": {
        "getGlobalState()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hasGlobalState()(uint64,bool)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getGlobalStateExample()(uint64,byte[])": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setGlobalState(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setGlobalStateExample(byte[],asset,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delGlobalState()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "globalAccount": {
                    "type": "bytes",
                    "key": "globalAccount"
                },
                "globalApplication": {
                    "type": "uint64",
                    "key": "globalApplication"
                },
                "globalAsset": {
                    "type": "uint64",
                    "key": "globalAsset"
                },
                "globalBool": {
                    "type": "uint64",
                    "key": "globalBool"
                },
                "globalBoolNoDefault": {
                    "type": "uint64",
                    "key": "globalBoolNoDefault"
                },
                "globalBytes": {
                    "type": "bytes",
                    "key": "globalBytes"
                },
                "globalBytesNoDefault": {
                    "type": "bytes",
                    "key": "globalBytesNoDefault"
                },
                "globalInt": {
                    "type": "uint64",
                    "key": "globalInt"
                },
                "globalIntNoDefault": {
                    "type": "uint64",
                    "key": "globalIntNoDefault"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "GlobalStorage",
        "desc": "A contract demonstrating global storage functionality",
        "methods": [
            {
                "name": "getGlobalState",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "hasGlobalState",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,bool)"
                }
            },
            {
                "name": "getGlobalStateExample",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[])"
                }
            },
            {
                "name": "setGlobalState",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setGlobalStateExample",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "valueBytes"
                    },
                    {
                        "type": "asset",
                        "name": "valueAsset"
                    },
                    {
                        "type": "bool",
                        "name": "valueBool"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delGlobalState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}