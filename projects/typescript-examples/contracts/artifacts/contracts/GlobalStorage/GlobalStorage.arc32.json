{
    "hints": {
        "readGlobalState()(uint64,uint64,byte[],string,bool,address)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hasGlobalState()(uint64,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "writeGlobalState(string,bool,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "writeDynamicGlobalState(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "globalAccount": {
                    "type": "bytes",
                    "key": "globalAccount"
                },
                "globalBool": {
                    "type": "uint64",
                    "key": "globalBool"
                },
                "globalBytes": {
                    "type": "bytes",
                    "key": "globalBytes"
                },
                "globalInt": {
                    "type": "uint64",
                    "key": "globalInt"
                },
                "globalIntNoDefault": {
                    "type": "uint64",
                    "key": "globalIntNoDefault"
                },
                "globalString": {
                    "type": "bytes",
                    "key": "globalString"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "GlobalStorage",
        "desc": "A contract demonstrating global storage functionality",
        "methods": [
            {
                "name": "readGlobalState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,byte[],string,bool,address)",
                    "desc": "A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]\nwhere each value corresponds to the current state of the respective global variable"
                },
                "desc": "Reads and returns all global state values from the contract"
            },
            {
                "name": "hasGlobalState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,bool)",
                    "desc": "A tuple containing [value, hasValue] where value is the current globalIntNoDefault value\nand hasValue indicates if the value has been initialized"
                },
                "desc": "Checks if a global state value exists and returns it"
            },
            {
                "name": "writeGlobalState",
                "args": [
                    {
                        "type": "string",
                        "name": "valueString"
                    },
                    {
                        "type": "bool",
                        "name": "valueBool",
                        "desc": "New value for globalBool"
                    },
                    {
                        "type": "account",
                        "name": "valueAccount",
                        "desc": "New value for globalAccount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates multiple global state values"
            },
            {
                "name": "writeDynamicGlobalState",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "The key to store the value under in global state"
                    },
                    {
                        "type": "string",
                        "name": "value",
                        "desc": "The string value to store in global state"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string",
                    "desc": "The stored string value, confirming successful storage"
                },
                "desc": "Writes a value to global state using a dynamic key and returns the stored value"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}