{
    "name": "GlobalStorage",
    "structs": {},
    "methods": [
        {
            "name": "readGlobalState",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,byte[],string,bool,address)",
                "desc": "A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]\nwhere each value corresponds to the current state of the respective global variable"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Reads and returns all global state values from the contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "hasGlobalState",
            "args": [],
            "returns": {
                "type": "(uint64,bool)",
                "desc": "A tuple containing [value, hasValue] where value is the current globalIntNoDefault value\nand hasValue indicates if the value has been initialized"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Checks if a global state value exists and returns it",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "writeGlobalState",
            "args": [
                {
                    "type": "string",
                    "name": "valueString"
                },
                {
                    "type": "bool",
                    "name": "valueBool",
                    "desc": "New value for globalBool"
                },
                {
                    "type": "account",
                    "name": "valueAccount",
                    "desc": "New value for globalAccount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Updates multiple global state values",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "A contract demonstrating global storage functionality",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "globalInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsSW50"
                },
                "globalIntNoDefault": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsSW50Tm9EZWZhdWx0"
                },
                "globalBytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsQnl0ZXM="
                },
                "globalString": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Z2xvYmFsU3RyaW5n"
                },
                "globalBool": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsQm9vbA=="
                },
                "globalAccount": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsQWNjb3VudA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        361
                    ],
                    "errorMessage": "Global state not set."
                },
                {
                    "pc": [
                        170,
                        199,
                        226
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        312
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        173,
                        202,
                        229
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        321,
                        326,
                        330,
                        335,
                        339,
                        343,
                        358,
                        382,
                        390,
                        398
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBwxnbG9iYWxTdHJpbmcKZ2xvYmFsQm9vbBJnbG9iYWxJbnROb0RlZmF1bHQNZ2xvYmFsQWNjb3VudAlnbG9iYWxJbnQLZ2xvYmFsQnl0ZXMEFR98dTEYQAAkJwSBMmcnBYAGU2lsdmlvZyiABk1pY2FsaWcpI2cqImcrMQBnMRtBAKeCAwTTj2ByBEe0XNEE96BO3jYaAI4DADoAHwACIkMxGRREMRhENhoBVwIANhoCIlM2GgMXwByIAKojQzEZFEQxGESIAI1MFoABACJPA1RQJwZMULAjQzEZFEQxGESIAFJPBRZPBRZLBRUWVwYCTwZQSwUVFlcGAk8GUIABACJPB1RPBE8EUIACADVQSwMVgTUIFlcGAlBMUE8DUE8CUExQJwZMULAjQzEZQP9wMRgURCNDigAGIitlRCInBGVEIiplRCInBWVEIihlRCIpZURPBYmKAAIiKmVFASIqZURLAURMiYoDACiL/Wcpi/5nK4v/ZyIoZUSL/RJEIillRIv+EkQiK2VEi/8SRIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}