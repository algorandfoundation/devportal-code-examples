{
    "name": "GlobalStorage",
    "structs": {},
    "methods": [
        {
            "name": "readGlobalState",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,byte[],string,bool,address)",
                "desc": "A tuple containing [globalInt, globalIntNoDefault, globalBytes, globalString, globalBool, globalAccount]\nwhere each value corresponds to the current state of the respective global variable"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Reads and returns all global state values from the contract",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "hasGlobalState",
            "args": [],
            "returns": {
                "type": "(uint64,bool)",
                "desc": "A tuple containing [value, hasValue] where value is the current globalIntNoDefault value\nand hasValue indicates if the value has been initialized"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Checks if a global state value exists and returns it",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "writeGlobalState",
            "args": [
                {
                    "type": "string",
                    "name": "valueString"
                },
                {
                    "type": "bool",
                    "name": "valueBool",
                    "desc": "New value for globalBool"
                },
                {
                    "type": "account",
                    "name": "valueAccount",
                    "desc": "New value for globalAccount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Updates multiple global state values",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "writeDynamicGlobalState",
            "args": [
                {
                    "type": "string",
                    "name": "key",
                    "desc": "The key to store the value under in global state"
                },
                {
                    "type": "string",
                    "name": "value",
                    "desc": "The string value to store in global state"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "The stored string value, confirming successful storage"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Writes a value to global state using a dynamic key and returns the stored value",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "A contract demonstrating global storage functionality",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "globalInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsSW50"
                },
                "globalIntNoDefault": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsSW50Tm9EZWZhdWx0"
                },
                "globalBytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsQnl0ZXM="
                },
                "globalString": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Z2xvYmFsU3RyaW5n"
                },
                "globalBool": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsQm9vbA=="
                },
                "globalAccount": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsQWNjb3VudA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        399
                    ],
                    "errorMessage": "Global state not set."
                },
                {
                    "pc": [
                        177,
                        214,
                        243,
                        270
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        356
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        180,
                        217,
                        246,
                        273
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        362,
                        367,
                        371,
                        376,
                        380,
                        384,
                        396,
                        420,
                        428,
                        436,
                        454,
                        463
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmBwxnbG9iYWxTdHJpbmcKZ2xvYmFsQm9vbBJnbG9iYWxJbnROb0RlZmF1bHQNZ2xvYmFsQWNjb3VudAQVH3x1CWdsb2JhbEludAtnbG9iYWxCeXRlczEYQAAkJwWBMmcnBoAGU2lsdmlvZyiABk1pY2FsaWcpI2cqImcrMQBnMRtBANOCBATTj2ByBEe0XNEE96BO3gRKTGv2NhoAjgQAXwBEACcAAiJDMRkURDEYRDYaAVcCADYaAlcCAIgA9kkVFlcGAkxQJwRMULAjQzEZFEQxGEQ2GgFXAgA2GgIiUzYaAxfAHIgApCNDMRkURDEYRIgAikwWgAEAIk8DVFAnBExQsCNDMRkURDEYRIgAUk8FFk8FFksFFRZXBgJPBlBLBRUWVwYCTwZQgAEAIk8HVE8ETwRQgAIANVBLAxWBNQgWVwYCUExQTwNQTwJQTFAnBExQsCNDMRlA/0sxGBREI0MiK2VEIicFZUQiKmVEIicGZUQiKGVEIillRE8FiSIqZUUBIiplREsBREyJigMAKIv9ZymL/mcri/9nIihlRIv9EkQiKWVEi/4SRCIrZUSL/xJEiYoCAYv+i/9nIov+ZUSL/xJEIov+ZUSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}