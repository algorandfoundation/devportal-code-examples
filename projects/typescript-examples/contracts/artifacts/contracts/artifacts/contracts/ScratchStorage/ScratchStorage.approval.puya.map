{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/artifacts/contracts/ScratchStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAyEG;;AAAA;AAAA;AAAA;;AAAA;AAzEH;;;AAAA;AAAA;;;AAAA;AAyEG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA7DH;;;AAAA;AAAA;;;AAAA;AA6DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5CH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AA4CE;;;AApC0B;AAAxB;;AAGuB;AAAvB;;AAGwB;AAAxB;;AAGyB;;;AAAzB;;AAUe;;AACA;;AAGI;;AALJ;;AAQG;AAAX;AAAP;AAC4B;AAArB;AAAP;AACO;AAAW;AAAX;AAAP;AACkB;;;AAAX;AAAP;AAeO;AAAP;AASF;;;AAGS;;AAAA;;AAAA;AAAP;AASF;;;AAGS;;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 42 100"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"Hello, Algorand!\""
    },
    "31": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "33": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "36": {
      "op": "pushbytess 0x01168c5c 0x0eec0bd9 0x10fb4a66 // method \"demonstrateScratchStorage()bool\", method \"readFromGroupTransaction(uint64,uint64)uint64\", method \"readBytesFromGroupTransaction(uint64,uint64)byte[]\""
    },
    "53": {
      "op": "txna ApplicationArgs 0"
    },
    "56": {
      "op": "match main_demonstrateScratchStorage_route@3 main_readFromGroupTransaction_route@4 main_readBytesFromGroupTransaction_route@5"
    },
    "64": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "65": {
      "op": "return"
    },
    "66": {
      "block": "main_readBytesFromGroupTransaction_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "68": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "69": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "70": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "72": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "73": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "76": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "77": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "80": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "81": {
      "callsub": "contracts/artifacts/contracts/ScratchStorage/contract.algo.ts::ScratchStorage.readBytesFromGroupTransaction",
      "op": "callsub readBytesFromGroupTransaction",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "84": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "85": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%0#0"
      ]
    },
    "86": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%0#0"
      ]
    },
    "87": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%0#0"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%2#0"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "92": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "94": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "95": {
      "op": "log",
      "stack_out": []
    },
    "96": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "return"
    },
    "98": {
      "block": "main_readFromGroupTransaction_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "100": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "101": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "102": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "104": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "105": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "108": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "112": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "113": {
      "callsub": "contracts/artifacts/contracts/ScratchStorage/contract.algo.ts::ScratchStorage.readFromGroupTransaction",
      "op": "callsub readFromGroupTransaction",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "116": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "117": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "119": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "120": {
      "op": "log",
      "stack_out": []
    },
    "121": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "return"
    },
    "123": {
      "block": "main_demonstrateScratchStorage_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "125": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "126": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "129": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "130": {
      "callsub": "contracts/artifacts/contracts/ScratchStorage/contract.algo.ts::ScratchStorage.demonstrateScratchStorage",
      "op": "callsub demonstrateScratchStorage",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "133": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "136": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "137": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "139": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "140": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "141": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "142": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "143": {
      "op": "log",
      "stack_out": []
    },
    "144": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "return"
    },
    "146": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "148": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "151": {
      "op": "txn ApplicationID"
    },
    "153": {
      "op": "!"
    },
    "154": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "155": {
      "op": "intc_0 // 1"
    },
    "156": {
      "op": "return"
    },
    "157": {
      "subroutine": "contracts/artifacts/contracts/ScratchStorage/contract.algo.ts::ScratchStorage.demonstrateScratchStorage",
      "params": {},
      "block": "demonstrateScratchStorage",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "160": {
      "op": "intc_2 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "161": {
      "op": "store 0",
      "stack_out": []
    },
    "163": {
      "op": "bytec_1 // \"Hello, Algorand!\"",
      "defined_out": [
        "\"Hello, Algorand!\""
      ],
      "stack_out": [
        "\"Hello, Algorand!\""
      ]
    },
    "164": {
      "op": "store 1",
      "stack_out": []
    },
    "166": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100"
      ],
      "stack_out": [
        "100"
      ]
    },
    "167": {
      "op": "store 2",
      "stack_out": []
    },
    "169": {
      "op": "pushint 999 // 999",
      "defined_out": [
        "999"
      ],
      "stack_out": [
        "999"
      ]
    },
    "172": {
      "op": "store 15",
      "stack_out": []
    },
    "174": {
      "op": "load 2"
    },
    "176": {
      "op": "load 15"
    },
    "178": {
      "op": "load 1"
    },
    "180": {
      "op": "load 0"
    },
    "182": {
      "op": "intc_2 // 42",
      "defined_out": [
        "42",
        "bytesValue#0",
        "value1#0",
        "value2#0",
        "value3#0"
      ],
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0",
        "value1#0",
        "42"
      ]
    },
    "183": {
      "op": "==",
      "defined_out": [
        "bytesValue#0",
        "tmp%0#0",
        "value2#0",
        "value3#0"
      ],
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0",
        "tmp%0#0"
      ]
    },
    "184": {
      "error": "Value in slot 0 should be 42",
      "op": "assert // Value in slot 0 should be 42",
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0"
      ]
    },
    "185": {
      "op": "bytec_1 // \"Hello, Algorand!\"",
      "stack_out": [
        "value2#0",
        "value3#0",
        "bytesValue#0",
        "\"Hello, Algorand!\""
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "value2#0",
        "value3#0"
      ],
      "stack_out": [
        "value2#0",
        "value3#0",
        "tmp%1#0"
      ]
    },
    "187": {
      "error": "Value in slot 1 should be \"Hello, Algorand!\"",
      "op": "assert // Value in slot 1 should be \"Hello, Algorand!\"",
      "stack_out": [
        "value2#0",
        "value3#0"
      ]
    },
    "188": {
      "op": "swap",
      "stack_out": [
        "value3#0",
        "value2#0"
      ]
    },
    "189": {
      "op": "intc_3 // 100",
      "stack_out": [
        "value3#0",
        "value2#0",
        "100"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "value3#0"
      ],
      "stack_out": [
        "value3#0",
        "tmp%2#0"
      ]
    },
    "191": {
      "error": "Value in slot 2 should be 100",
      "op": "assert // Value in slot 2 should be 100",
      "stack_out": [
        "value3#0"
      ]
    },
    "192": {
      "op": "pushint 999 // 999",
      "stack_out": [
        "value3#0",
        "999"
      ]
    },
    "195": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "196": {
      "error": "Value in slot 15 should be 999",
      "op": "assert // Value in slot 15 should be 999",
      "stack_out": []
    },
    "197": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "198": {
      "retsub": true,
      "op": "retsub"
    },
    "199": {
      "subroutine": "contracts/artifacts/contracts/ScratchStorage/contract.algo.ts::ScratchStorage.readFromGroupTransaction",
      "params": {
        "groupIndex#0": "uint64",
        "scratchSlot#0": "uint64"
      },
      "block": "readFromGroupTransaction",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "202": {
      "op": "frame_dig -2",
      "defined_out": [
        "groupIndex#0 (copy)"
      ],
      "stack_out": [
        "groupIndex#0 (copy)"
      ]
    },
    "204": {
      "op": "frame_dig -1",
      "defined_out": [
        "groupIndex#0 (copy)",
        "scratchSlot#0 (copy)"
      ],
      "stack_out": [
        "groupIndex#0 (copy)",
        "scratchSlot#0 (copy)"
      ]
    },
    "206": {
      "op": "gloadss",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "retsub": true,
      "op": "retsub"
    },
    "208": {
      "subroutine": "contracts/artifacts/contracts/ScratchStorage/contract.algo.ts::ScratchStorage.readBytesFromGroupTransaction",
      "params": {
        "groupIndex#0": "uint64",
        "scratchSlot#0": "uint64"
      },
      "block": "readBytesFromGroupTransaction",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "211": {
      "op": "frame_dig -2",
      "defined_out": [
        "groupIndex#0 (copy)"
      ],
      "stack_out": [
        "groupIndex#0 (copy)"
      ]
    },
    "213": {
      "op": "frame_dig -1",
      "defined_out": [
        "groupIndex#0 (copy)",
        "scratchSlot#0 (copy)"
      ],
      "stack_out": [
        "groupIndex#0 (copy)",
        "scratchSlot#0 (copy)"
      ]
    },
    "215": {
      "op": "gloadss",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "216": {
      "retsub": true,
      "op": "retsub"
    }
  }
}