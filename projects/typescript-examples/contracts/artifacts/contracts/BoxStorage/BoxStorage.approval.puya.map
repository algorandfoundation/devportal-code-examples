{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/BoxStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAsXG;;AAAA;AAAA;AAAA;;AAAA;AAtXH;;;AAAA;;;AAsXG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA3WH;;;AAAA;;;AA2WG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAhWH;;;AAgWG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA1UH;;;AAAA;AA0UG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA9TH;;;AAAA;AA8TG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;AApSH;;;AAAA;;;AAoSG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA/PH;;;AAAA;;;AA+PG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAzOH;;;AAAA;AAyOG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA3NH;;;AAAA;;;AA2NG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AA3MH;;;AAAA;AA2MG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AA7LH;;;AAAA;;;AA6LG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAlLH;;;AAAA;AAkLG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AA7IH;;;AAAA;AAAA;;;AA6IG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAjIH;;;AAAA;AAAA;;;AAAA;;;AAiIG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AArHH;;;AAAA;AAqHG;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAxGH;;;AAAA;;;AAwGG;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA5FH;;;AAAA;AA4FG;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AApEH;;;AAAA;AAoEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAxCH;;;AAAA;AAwCG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA5BH;;;AAAA;AA4BG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAgBE;;;AAbmC;AAed;AAAA;AAAA;AAAA;AAAA;AAAnB;AAUF;;;AAEqB;;AAAA;AAvB+B;AAuB/B;AAAA;AAAA;AAAA;AAAnB;AAUF;;;AAEqB;;AAAA;AAnC+B;AAmC/B;AAAA;AAAZ;AAAgC;;;;;;;;;AAAhC;;AAAA;AAAP;AASF;;;AA7C8B;;AA+CD;AAA3B;;AACwB;;AAhDI;;AAiD5B;;AAAA;AAjD4B;;AAkDd;AAAR;;AAAA;;AAAQ;AACP;AAAA;;AAAA;AAAP;AACA;AAUF;;;AAE2B;;AAAA;AA9DmC;;AA8DnC;AAAA;AAAA;AAAA;AAAzB;AASF;;;AA5EmC;AA8EG;AAAA;AAAA;AACpC;AAAA;AAUF;;;AAEsC;;AAAA;AAvFc;AAuFd;AAAA;AAAZ;AAAA;AAAA;;AAAA;AAChB;;;;;AAAR;;AAAA;;AAAA;;AAAA;AAAyB;;;;;AAS3B;;;AAG0B;;AAAA;AACxB;AASF;;;AAEE;;AAAA;AApHiC;AAoHjC;AAAA;;AAUF;;;AAEc;;AAAA;AA5HsC;AA4HtC;AAAA;AAAZ;AAAA;;AAAA;;AAAA;;AAUF;;;AAEoB;;AAAA;AAvI0C;;AAuI1C;AAAA;AAAA;;AAAlB;;AAAA;AAAA;;AAAA;AAEoB;AAAA;AADpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAGgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAHhB;AAAA;;;AACoB;;AAAA;AAAA;AADpB;;;AAIc;;AAAA;;;AAJd;AAAA;;;AACoB;;AAAA;AAAA;AADpB;;;AAKiB;;AAAA;;;AALjB;AAAA;;;;AAAA;AASO;AAAP;AAAA;;;;;AAQF;;;AA9JmC;AAgKrB;;AA9JyC;;AA+JhC;;AAlKe;;AAmKrB;;AAlKkB;AAoK1B;AAAA;AAAA;AAAkC;AAAlC;AAAA;;AAAA;AAA6C;AAA7C;AAAP;AAlKqD;;AAmK9C;AAAoC;;;;;;AAApC;;AAAA;AAAmE;;;AAAiB;;AAApF;AAAP;AAtKoC;;AAuK7B;AAA8B;;AAA9B;;AAAA;AAA0C;;AAA1C;AAAP;;AASF;;;AAEc;;AAAA;AA7KsC;AA6KtC;AAAA;AAAZ;;;AASF;;;AAGE;;AAAA;;AACY;;AAAA;AAAA;AAAuB;;AAAnC;AAAA;;;AAAY;;AAAA;AAAA;;AAAZ;;;;AAAA;;;;;;AAUF;;;AAEmB;;AAAA;AAtMiC;AAsMjC;AAAA;AAAA;AAAZ;AAAA;;AAAD;;;AACY;AAAd;AAAA;AAGK;;AAAA;AAAA;AAAP;AAAA;AAUF;;;AAGS;;AAAsB;AAAtB;AAAP;AACc;;AAAA;AAAA;AAAd;AAUF;;;AAQoB;;AAAA;AAzO0C;;AAyO1C;AAAA;AAAlB;AAAA;;AAAA;AANc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMd;AAEyB;AAAA;AAAA;AAAe;AAAuB;;AAAxD;AAAP;AACO;AAAA;AAA8C;;AAA9C;AAAP;AAEO;AAAP;AASF;;;AAE0B;;AACE;;AAEU;AAAA;AAAqB;;AAAA;AAAhC;AAGlB;;AAAA;AAAA;AAAP;AAEA;;AAAe;AAAf;;AAAA;AACA;;AAAc;AAAG;AAAjB;;AAAA;AAEM;;AAAuB;AAAG;AAAlB;AACR;;AAAuB;AAAI;AAAnB;AAEP;AAAA;;AAAA;AAAP;AACO;AAAP;;AAQF;;;AArRmC;AAuRd;AAAA;AAAA;AAAA;AAAA;AAAnB;AAUF;;;AAIE;;AAAqB;;;;;;AAArB;AAOoB;;AAAA;AAAA;AAAb;;;AAAsB;AAAtB;AAAP;AACoB;;AAAA;AAAA;AAAb;;;AAAsB;AAAW;AAAjC;AAAP;AACoB;;AAAA;AAAA;AAAb;;;AAAsB;AAAW;;AAAjC;AAAP;AACoB;;AAAA;AAAA;AAAb;;;AAAsB;AAAW;;AAAjC;AAAP;AAEoB;;AAAA;AAAA;AAApB;AAUF;;;AAEqB;;AAAA;AAzT+B;AAyT/B;AAAA;AAAZ;AAAA;;AAAP;AAUF;;;AAE2B;;AAAA;AApUmC;;AAoUnC;AAAA;AAAlB;AAAA;;AAAP;AAoBF;;;AA3VuD;;AA6VrD;;AA7VqD;;AA6VrD;;AAAA;;AASF;;;AAzWsC;;AA2WpC;;AA3WoC;;AA2WpC;;AAAA;;AASF;;;AAGE;;AAAsB;AAAtB;;AAEA;;AADwB;;AACxB;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 32 42"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x00 \"boxMap\" \"boxInt\" \"users\" \"boxDynamicBytes\" \"boxString\" \"boxRef\" \"42\" 0x0003"
    },
    "75": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "77": {
      "op": "bz main_bare_routing@31",
      "stack_out": []
    },
    "80": {
      "op": "pushbytess 0xb7491344 0x26ca648a 0x28cc7139 0x03e8c77e 0x53c28820 0x6ab3e9bc 0x644a3994 0x8c22bfd5 0xfa1562f7 0x9e11fd7a 0xd5dd922c 0x9101a7de 0xa4552eb5 0x38acf53e 0xf53418c4 0x39e9b226 0x595b87bb 0x8600e0eb 0x49cf4105 0x547f0a74 0xd829d2a3 0xf183207a 0xb1f5a9b6 0xf4f9cbad 0xc497bc6f 0x5e6ceac0 // method \"getBox()uint64\", method \"getBoxMap(uint64)string\", method \"getBoxMapWithDefault(uint64)string\", method \"getBoxRef()address\", method \"getBoxMapStruct(uint64)(string,uint64,uint64)\", method \"maybeBox()(uint64,bool)\", method \"maybeBoxMap(uint64)(string,bool)\", method \"maybeBoxRef(string)(byte[],bool)\", method \"setBox(uint64)void\", method \"setBoxMap(uint64,string)void\", method \"setBoxMapStruct(uint64,(string,uint64,uint64))bool\", method \"deleteBox()void\", method \"deleteBoxMap(uint64)void\", method \"deleteBoxRef(string)void\", method \"boxMapLength(uint64)uint64\", method \"lengthBoxRef(string)uint64\", method \"boxMapStructLength(uint64)bool\", method \"extractBoxRef(string)void\", method \"valueBox()uint64\", method \"arc4Box(string)uint8[4]\", method \"boxMapExists(uint64)bool\", method \"boxMapStructExists(uint64)bool\", method \"keyPrefixBoxMap()byte[]\", method \"setBoxDynamicBytes(byte[])void\", method \"setBoxString(string)void\", method \"setBoxRef(string)void\""
    },
    "212": {
      "op": "txna ApplicationArgs 0"
    },
    "215": {
      "op": "match main_getBox_route@3 main_getBoxMap_route@4 main_getBoxMapWithDefault_route@5 main_getBoxRef_route@6 main_getBoxMapStruct_route@7 main_maybeBox_route@8 main_maybeBoxMap_route@9 main_maybeBoxRef_route@10 main_setBox_route@11 main_setBoxMap_route@12 main_setBoxMapStruct_route@13 main_deleteBox_route@14 main_deleteBoxMap_route@15 main_deleteBoxRef_route@16 main_boxMapLength_route@17 main_lengthBoxRef_route@18 main_boxMapStructLength_route@19 main_extractBoxRef_route@20 main_valueBox_route@21 main_arc4Box_route@22 main_boxMapExists_route@23 main_boxMapStructExists_route@24 main_keyPrefixBoxMap_route@25 main_setBoxDynamicBytes_route@26 main_setBoxString_route@27 main_setBoxRef_route@28"
    },
    "269": {
      "block": "main_after_if_else@35",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "270": {
      "op": "return"
    },
    "271": {
      "block": "main_setBoxRef_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "273": {
      "op": "!",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "274": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "275": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "277": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "278": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "281": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "284": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxRef",
      "op": "callsub setBoxRef",
      "stack_out": []
    },
    "287": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "return"
    },
    "289": {
      "block": "main_setBoxString_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "291": {
      "op": "!",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "292": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "293": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "295": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "296": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "299": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "302": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxString",
      "op": "callsub setBoxString",
      "stack_out": []
    },
    "305": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "306": {
      "op": "return"
    },
    "307": {
      "block": "main_setBoxDynamicBytes_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "309": {
      "op": "!",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "310": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "311": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "313": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "314": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "317": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxDynamicBytes",
      "op": "callsub setBoxDynamicBytes",
      "stack_out": []
    },
    "320": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "321": {
      "op": "return"
    },
    "322": {
      "block": "main_keyPrefixBoxMap_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "324": {
      "op": "!",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "325": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "326": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "328": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "329": {
      "op": "pushbytes 0x151f7c750006626f784d6170",
      "defined_out": [
        "0x151f7c750006626f784d6170"
      ],
      "stack_out": [
        "0x151f7c750006626f784d6170"
      ]
    },
    "343": {
      "op": "log",
      "stack_out": []
    },
    "344": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "345": {
      "op": "return"
    },
    "346": {
      "block": "main_boxMapStructExists_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "348": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "349": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "350": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "352": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "353": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "356": {
      "op": "btoi",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "357": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapStructExists",
      "op": "callsub boxMapStructExists",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "360": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "0x00"
      ]
    },
    "361": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "0x00",
        "0"
      ]
    },
    "362": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%9#0"
      ]
    },
    "364": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0"
      ]
    },
    "365": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0",
        "0x151f7c75"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "368": {
      "op": "log",
      "stack_out": []
    },
    "369": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "370": {
      "op": "return"
    },
    "371": {
      "block": "main_boxMapExists_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "373": {
      "op": "!",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "374": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "375": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "377": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "378": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "381": {
      "op": "btoi",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "382": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapExists",
      "op": "callsub boxMapExists",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "385": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00"
      ]
    },
    "386": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00",
        "0"
      ]
    },
    "387": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%8#0"
      ]
    },
    "389": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0"
      ]
    },
    "390": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0",
        "0x151f7c75"
      ]
    },
    "391": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ]
    },
    "392": {
      "op": "concat",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "393": {
      "op": "log",
      "stack_out": []
    },
    "394": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "395": {
      "op": "return"
    },
    "396": {
      "block": "main_arc4Box_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "398": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "399": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "400": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "402": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "403": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "406": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "409": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.arc4Box",
      "op": "callsub arc4Box",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "412": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0",
        "0x151f7c75"
      ]
    },
    "413": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%131#0"
      ]
    },
    "414": {
      "op": "concat",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "415": {
      "op": "log",
      "stack_out": []
    },
    "416": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "417": {
      "op": "return"
    },
    "418": {
      "block": "main_valueBox_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "420": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "421": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "422": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "424": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "425": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.valueBox",
      "op": "callsub valueBox",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "428": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "429": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "430": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "431": {
      "op": "concat",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "432": {
      "op": "log",
      "stack_out": []
    },
    "433": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "434": {
      "op": "return"
    },
    "435": {
      "block": "main_extractBoxRef_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "437": {
      "op": "!",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "438": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "439": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "441": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "442": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "445": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "448": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.extractBoxRef",
      "op": "callsub extractBoxRef",
      "stack_out": []
    },
    "451": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "op": "return"
    },
    "453": {
      "block": "main_boxMapStructLength_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "455": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "456": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "457": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "459": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "460": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "463": {
      "op": "btoi",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "464": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapStructLength",
      "op": "callsub boxMapStructLength",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "467": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "0x00"
      ]
    },
    "468": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "0x00",
        "0"
      ]
    },
    "469": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%6#0"
      ]
    },
    "471": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "472": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "474": {
      "op": "concat",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "475": {
      "op": "log",
      "stack_out": []
    },
    "476": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "477": {
      "op": "return"
    },
    "478": {
      "block": "main_lengthBoxRef_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "480": {
      "op": "!",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "481": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "482": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "484": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "485": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "488": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "491": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.lengthBoxRef",
      "op": "callsub lengthBoxRef",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "494": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "495": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "496": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "497": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "498": {
      "op": "log",
      "stack_out": []
    },
    "499": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "500": {
      "op": "return"
    },
    "501": {
      "block": "main_boxMapLength_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "503": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "504": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "505": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "507": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "508": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "511": {
      "op": "btoi",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "512": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength",
      "op": "callsub boxMapLength",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "515": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "516": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "517": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "518": {
      "op": "concat",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "519": {
      "op": "log",
      "stack_out": []
    },
    "520": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "521": {
      "op": "return"
    },
    "522": {
      "block": "main_deleteBoxRef_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "524": {
      "op": "!",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "525": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "526": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "528": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "529": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "532": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "535": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxRef",
      "op": "callsub deleteBoxRef",
      "stack_out": []
    },
    "538": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "539": {
      "op": "return"
    },
    "540": {
      "block": "main_deleteBoxMap_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "542": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "543": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "544": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "546": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "547": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "550": {
      "op": "btoi",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "551": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxMap",
      "op": "callsub deleteBoxMap",
      "stack_out": []
    },
    "554": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "555": {
      "op": "return"
    },
    "556": {
      "block": "main_deleteBox_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "558": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "559": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "560": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "562": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "563": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBox",
      "op": "callsub deleteBox"
    },
    "566": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "567": {
      "op": "return"
    },
    "568": {
      "block": "main_setBoxMapStruct_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "570": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "571": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "572": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "574": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "575": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "578": {
      "op": "btoi",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "579": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "582": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMapStruct",
      "op": "callsub setBoxMapStruct",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "585": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "586": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "587": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "589": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "590": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "591": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "592": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "593": {
      "op": "log",
      "stack_out": []
    },
    "594": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "595": {
      "op": "return"
    },
    "596": {
      "block": "main_setBoxMap_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "598": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "599": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "600": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "602": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "603": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "606": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "607": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "610": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%66#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%68#0"
      ]
    },
    "613": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMap",
      "op": "callsub setBoxMap",
      "stack_out": []
    },
    "616": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "617": {
      "op": "return"
    },
    "618": {
      "block": "main_setBox_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "620": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "621": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "622": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "624": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "625": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "628": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "629": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBox",
      "op": "callsub setBox",
      "stack_out": []
    },
    "632": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "633": {
      "op": "return"
    },
    "634": {
      "block": "main_maybeBoxRef_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "636": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "637": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "638": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "640": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "641": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "644": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "647": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxRef",
      "op": "callsub maybeBoxRef",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "650": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "652": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%3#0"
      ]
    },
    "653": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "as_bytes%4#0"
      ]
    },
    "654": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%3#0"
      ]
    },
    "657": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "length_uint16%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ]
    },
    "660": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0",
        "0x00"
      ]
    },
    "661": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0",
        "0x00",
        "0"
      ]
    },
    "662": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%3#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "664": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_bool%2#0"
      ]
    },
    "665": {
      "op": "bytec 9 // 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_bool%2#0",
        "0x0003"
      ]
    },
    "667": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "0x0003",
        "encoded_bool%2#0"
      ]
    },
    "668": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "669": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%3#0"
      ]
    },
    "670": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "671": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x151f7c75"
      ]
    },
    "672": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "673": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "674": {
      "op": "log",
      "stack_out": []
    },
    "675": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "676": {
      "op": "return"
    },
    "677": {
      "block": "main_maybeBoxMap_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "679": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "680": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "681": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "683": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "684": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "687": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "688": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxMap",
      "op": "callsub maybeBoxMap",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "691": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "693": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%2#0"
      ]
    },
    "694": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "as_bytes%2#0"
      ]
    },
    "695": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%2#0"
      ]
    },
    "698": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "length_uint16%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ]
    },
    "701": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "0x00"
      ]
    },
    "702": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "0x00",
        "0"
      ]
    },
    "703": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%2#0",
        "0x00",
        "0",
        "elements_to_encode%3#0"
      ]
    },
    "705": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_bool%1#0"
      ]
    },
    "706": {
      "op": "bytec 9 // 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_bool%1#0",
        "0x0003"
      ]
    },
    "708": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "0x0003",
        "encoded_bool%1#0"
      ]
    },
    "709": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "710": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%2#0"
      ]
    },
    "711": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "712": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "713": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "714": {
      "op": "concat",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "715": {
      "op": "log",
      "stack_out": []
    },
    "716": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "717": {
      "op": "return"
    },
    "718": {
      "block": "main_maybeBox_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "720": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "721": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "722": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "724": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "725": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBox",
      "op": "callsub maybeBox",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "728": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "729": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "730": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "731": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00",
        "0"
      ]
    },
    "732": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x00",
        "0",
        "elements_to_encode%1#0"
      ]
    },
    "734": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_bool%0#0"
      ]
    },
    "735": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "736": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "737": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "738": {
      "op": "concat",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "739": {
      "op": "log",
      "stack_out": []
    },
    "740": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "741": {
      "op": "return"
    },
    "742": {
      "block": "main_getBoxMapStruct_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "744": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "745": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "746": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "748": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "749": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "752": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "753": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapStruct",
      "op": "callsub getBoxMapStruct",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "756": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "757": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%34#0"
      ]
    },
    "758": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "759": {
      "op": "log",
      "stack_out": []
    },
    "760": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "761": {
      "op": "return"
    },
    "762": {
      "block": "main_getBoxRef_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "764": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "765": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "766": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "768": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "769": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxRef",
      "op": "callsub getBoxRef",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "772": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "773": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%26#0"
      ]
    },
    "774": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "775": {
      "op": "log",
      "stack_out": []
    },
    "776": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "777": {
      "op": "return"
    },
    "778": {
      "block": "main_getBoxMapWithDefault_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "780": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "781": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "782": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "784": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "785": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "788": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "789": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapWithDefault",
      "op": "callsub getBoxMapWithDefault",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "792": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "793": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "794": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "795": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "798": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "799": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "800": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "801": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "802": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "803": {
      "op": "log",
      "stack_out": []
    },
    "804": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "805": {
      "op": "return"
    },
    "806": {
      "block": "main_getBoxMap_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "808": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "809": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "810": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "812": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "813": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "816": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "817": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMap",
      "op": "callsub getBoxMap",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "820": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "821": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "822": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "823": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "826": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "827": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "828": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "829": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "830": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "831": {
      "op": "log",
      "stack_out": []
    },
    "832": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "833": {
      "op": "return"
    },
    "834": {
      "block": "main_getBox_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "836": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "837": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "838": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "840": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "841": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBox",
      "op": "callsub getBox",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "844": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "845": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "846": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "847": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "848": {
      "op": "log",
      "stack_out": []
    },
    "849": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "850": {
      "op": "return"
    },
    "851": {
      "block": "main_bare_routing@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "853": {
      "op": "bnz main_after_if_else@35",
      "stack_out": []
    },
    "856": {
      "op": "txn ApplicationID"
    },
    "858": {
      "op": "!"
    },
    "859": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "860": {
      "op": "intc_0 // 1"
    },
    "861": {
      "op": "return"
    },
    "862": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBox",
      "params": {},
      "block": "getBox",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "865": {
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "866": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "867": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "868": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "869": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "870": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "871": {
      "retsub": true,
      "op": "retsub"
    },
    "872": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMap",
      "params": {
        "key#0": "uint64"
      },
      "block": "getBoxMap",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "875": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "877": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "878": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "879": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "880": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "881": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "882": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "883": {
      "retsub": true,
      "op": "retsub"
    },
    "884": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapWithDefault",
      "params": {
        "key#0": "uint64"
      },
      "block": "getBoxMapWithDefault",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "887": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "889": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "890": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "891": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "892": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "893": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "894": {
      "op": "pushbytes \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "903": {
      "op": "cover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "905": {
      "op": "select",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "906": {
      "retsub": true,
      "op": "retsub"
    },
    "907": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxRef",
      "params": {},
      "block": "getBoxRef",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "910": {
      "op": "bytec 7 // \"boxRef\"",
      "defined_out": [
        "\"boxRef\""
      ],
      "stack_out": [
        "\"boxRef\""
      ]
    },
    "912": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"boxRef\"",
        "32"
      ],
      "stack_out": [
        "\"boxRef\"",
        "32"
      ]
    },
    "913": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "914": {
      "op": "pop",
      "stack_out": []
    },
    "915": {
      "op": "txn Sender",
      "defined_out": [
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0"
      ]
    },
    "917": {
      "op": "bytec 7 // \"boxRef\"",
      "stack_out": [
        "senderBytes#0",
        "\"boxRef\""
      ]
    },
    "919": {
      "op": "dig 1",
      "defined_out": [
        "\"boxRef\"",
        "senderBytes#0",
        "senderBytes#0 (copy)"
      ],
      "stack_out": [
        "senderBytes#0",
        "\"boxRef\"",
        "senderBytes#0 (copy)"
      ]
    },
    "921": {
      "op": "box_put",
      "stack_out": [
        "senderBytes#0"
      ]
    },
    "922": {
      "op": "bytec 7 // \"boxRef\"",
      "stack_out": [
        "senderBytes#0",
        "\"boxRef\""
      ]
    },
    "924": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "925": {
      "op": "dig 2",
      "stack_out": [
        "senderBytes#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "senderBytes#0 (copy)"
      ]
    },
    "927": {
      "op": "cover 2",
      "stack_out": [
        "senderBytes#0",
        "senderBytes#0 (copy)",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "929": {
      "op": "select",
      "defined_out": [
        "senderBytes#0",
        "value#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "value#0"
      ]
    },
    "930": {
      "op": "dup",
      "defined_out": [
        "senderBytes#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "senderBytes#0",
        "value#0",
        "value#0 (copy)"
      ]
    },
    "931": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "senderBytes#0"
      ]
    },
    "933": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0"
      ]
    },
    "934": {
      "error": "boxRef value mismatch",
      "op": "assert // boxRef value mismatch",
      "stack_out": [
        "value#0"
      ]
    },
    "935": {
      "retsub": true,
      "op": "retsub"
    },
    "936": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapStruct",
      "params": {
        "key#0": "uint64"
      },
      "block": "getBoxMapStruct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "939": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "941": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "942": {
      "op": "bytec 4 // \"users\"",
      "defined_out": [
        "\"users\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"users\""
      ]
    },
    "944": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "tmp%0#0"
      ]
    },
    "945": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "946": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "947": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "948": {
      "retsub": true,
      "op": "retsub"
    },
    "949": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBox",
      "params": {},
      "block": "maybeBox",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "952": {
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "953": {
      "op": "box_get",
      "defined_out": [
        "boxIntExists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "boxIntExists#0"
      ]
    },
    "954": {
      "op": "swap",
      "stack_out": [
        "boxIntExists#0",
        "maybe_value%0#0"
      ]
    },
    "955": {
      "op": "btoi",
      "defined_out": [
        "boxIntExists#0",
        "boxIntValue#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "boxIntValue#0"
      ]
    },
    "956": {
      "op": "swap",
      "stack_out": [
        "boxIntValue#0",
        "boxIntExists#0"
      ]
    },
    "957": {
      "retsub": true,
      "op": "retsub"
    },
    "958": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxMap",
      "params": {
        "key#0": "uint64"
      },
      "block": "maybeBoxMap",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "961": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "963": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "964": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "965": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "966": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "967": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "968": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "969": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "value#0"
      ]
    },
    "971": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "exists#0"
      ]
    },
    "972": {
      "op": "bz maybeBoxMap_ternary_false@2",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "975": {
      "op": "frame_dig 1"
    },
    "977": {
      "block": "maybeBoxMap_ternary_merge@3",
      "stack_in": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "exists#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "exists#0"
      ]
    },
    "979": {
      "op": "uncover 3"
    },
    "981": {
      "op": "uncover 3"
    },
    "983": {
      "retsub": true,
      "op": "retsub"
    },
    "984": {
      "block": "maybeBoxMap_ternary_false@2",
      "stack_in": [
        "exists#0",
        "value#0"
      ],
      "op": "pushbytes \"\"",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ]
    },
    "986": {
      "op": "b maybeBoxMap_ternary_merge@3"
    },
    "989": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "maybeBoxRef",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "992": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "994": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "995": {
      "retsub": true,
      "op": "retsub"
    },
    "996": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBox",
      "params": {
        "valueInt#0": "uint64"
      },
      "block": "setBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "999": {
      "op": "frame_dig -1",
      "defined_out": [
        "valueInt#0 (copy)"
      ],
      "stack_out": [
        "valueInt#0 (copy)"
      ]
    },
    "1001": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "1002": {
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"boxInt\""
      ]
    },
    "1003": {
      "op": "swap",
      "stack_out": [
        "\"boxInt\"",
        "new_box_value%0#0"
      ]
    },
    "1004": {
      "op": "box_put",
      "stack_out": []
    },
    "1005": {
      "retsub": true,
      "op": "retsub"
    },
    "1006": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMap",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "setBoxMap",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1009": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1011": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1012": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "1013": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "1014": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1015": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1016": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "1017": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1018": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value#0 (copy)"
      ]
    },
    "1020": {
      "op": "box_put",
      "stack_out": []
    },
    "1021": {
      "retsub": true,
      "op": "retsub"
    },
    "1022": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMapStruct",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "setBoxMapStruct",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1025": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1027": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1028": {
      "op": "bytec 4 // \"users\"",
      "defined_out": [
        "\"users\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"users\""
      ]
    },
    "1030": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "tmp%0#0"
      ]
    },
    "1031": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1032": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1034": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "1035": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1036": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1037": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1039": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1040": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1041": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0"
      ]
    },
    "1042": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1043": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "1044": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "item_start_offset%0#0"
      ]
    },
    "1045": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1047": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1048": {
      "op": "substring3",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1049": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "value#0 (copy)"
      ]
    },
    "1051": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "1052": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%1#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "item_start_offset%1#0"
      ]
    },
    "1053": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "item_start_offset%1#0",
        "value#0 (copy)"
      ]
    },
    "1055": {
      "op": "len",
      "defined_out": [
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "1056": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "value#0 (copy)"
      ]
    },
    "1058": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "value#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "1060": {
      "op": "substring3",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1061": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1062": {
      "op": "bz setBoxMapStruct_bool_false@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1065": {
      "op": "frame_dig 0"
    },
    "1067": {
      "op": "box_get"
    },
    "1068": {
      "error": "Box must have value",
      "op": "assert // Box must have value"
    },
    "1069": {
      "error": "Index access is out of bounds",
      "op": "extract 2 8 // on error: Index access is out of bounds"
    },
    "1072": {
      "op": "frame_dig -1"
    },
    "1074": {
      "error": "Index access is out of bounds",
      "op": "extract 2 8 // on error: Index access is out of bounds"
    },
    "1077": {
      "op": "=="
    },
    "1078": {
      "op": "bz setBoxMapStruct_bool_false@4"
    },
    "1081": {
      "op": "frame_dig 0"
    },
    "1083": {
      "op": "box_get"
    },
    "1084": {
      "error": "Box must have value",
      "op": "assert // Box must have value"
    },
    "1085": {
      "error": "Index access is out of bounds",
      "op": "extract 10 8 // on error: Index access is out of bounds"
    },
    "1088": {
      "op": "frame_dig -1"
    },
    "1090": {
      "error": "Index access is out of bounds",
      "op": "extract 10 8 // on error: Index access is out of bounds"
    },
    "1093": {
      "op": "=="
    },
    "1094": {
      "op": "bz setBoxMapStruct_bool_false@4"
    },
    "1097": {
      "op": "intc_0 // 1"
    },
    "1098": {
      "block": "setBoxMapStruct_bool_merge@5",
      "stack_in": [
        "tmp%1#0",
        "and_result%0#0"
      ],
      "error": "boxMapStruct value mismatch",
      "op": "assert // boxMapStruct value mismatch",
      "defined_out": [],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1099": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "1100": {
      "op": "swap"
    },
    "1101": {
      "retsub": true,
      "op": "retsub"
    },
    "1102": {
      "block": "setBoxMapStruct_bool_false@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "1103": {
      "op": "b setBoxMapStruct_bool_merge@5"
    },
    "1106": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBox",
      "params": {},
      "block": "deleteBox",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1109": {
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "1110": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1111": {
      "op": "pop",
      "stack_out": []
    },
    "1112": {
      "op": "bytec 5 // \"boxDynamicBytes\"",
      "defined_out": [
        "\"boxDynamicBytes\""
      ],
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "1114": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1115": {
      "op": "pop",
      "stack_out": []
    },
    "1116": {
      "op": "bytec 6 // \"boxString\"",
      "defined_out": [
        "\"boxString\""
      ],
      "stack_out": [
        "\"boxString\""
      ]
    },
    "1118": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1119": {
      "op": "pop",
      "stack_out": []
    },
    "1120": {
      "op": "bytec_3 // \"boxInt\"",
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "1121": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1122": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1123": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1124": {
      "op": "intc_3 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "1125": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "1126": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1128": {
      "op": "select",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1129": {
      "op": "intc_3 // 42",
      "stack_out": [
        "tmp%0#0",
        "42"
      ]
    },
    "1130": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1131": {
      "op": "assert",
      "stack_out": []
    },
    "1132": {
      "op": "bytec 5 // \"boxDynamicBytes\"",
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "1134": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1135": {
      "op": "pushbytes 0x00023432",
      "defined_out": [
        "0x00023432",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "1141": {
      "op": "cover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1143": {
      "op": "select",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1144": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1147": {
      "op": "bytec 8 // \"42\"",
      "defined_out": [
        "\"42\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"42\""
      ]
    },
    "1149": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1150": {
      "op": "assert",
      "stack_out": []
    },
    "1151": {
      "op": "bytec 6 // \"boxString\"",
      "stack_out": [
        "\"boxString\""
      ]
    },
    "1153": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1154": {
      "op": "bytec 8 // \"42\"",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "\"42\""
      ]
    },
    "1156": {
      "op": "cover 2",
      "stack_out": [
        "\"42\"",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1158": {
      "op": "select",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1159": {
      "op": "bytec 8 // \"42\"",
      "stack_out": [
        "tmp%5#0",
        "\"42\""
      ]
    },
    "1161": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1162": {
      "op": "assert",
      "stack_out": []
    },
    "1163": {
      "retsub": true,
      "op": "retsub"
    },
    "1164": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxMap",
      "params": {
        "key#0": "uint64"
      },
      "block": "deleteBoxMap",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1167": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1169": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1170": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "1171": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "1172": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1173": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1174": {
      "op": "pop",
      "stack_out": []
    },
    "1175": {
      "retsub": true,
      "op": "retsub"
    },
    "1176": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "deleteBoxRef",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1179": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1181": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1182": {
      "op": "pop",
      "stack_out": []
    },
    "1183": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1185": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1186": {
      "op": "pop",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1187": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "\"\""
      ]
    },
    "1189": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1190": {
      "op": "bz deleteBoxRef_bool_false@4",
      "stack_out": []
    },
    "1193": {
      "op": "frame_dig -1"
    },
    "1195": {
      "op": "box_get"
    },
    "1196": {
      "op": "bury 1"
    },
    "1198": {
      "op": "bnz deleteBoxRef_bool_false@4"
    },
    "1201": {
      "op": "intc_0 // 1"
    },
    "1202": {
      "block": "deleteBoxRef_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1203": {
      "retsub": true,
      "op": "retsub"
    },
    "1204": {
      "block": "deleteBoxRef_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1205": {
      "op": "b deleteBoxRef_bool_merge@5"
    },
    "1208": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapLength",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1211": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1213": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1214": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "1215": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "1216": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1217": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1218": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1219": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1221": {
      "op": "bnz boxMapLength_after_if_else@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1224": {
      "op": "intc_1 // 0"
    },
    "1225": {
      "op": "swap"
    },
    "1226": {
      "retsub": true,
      "op": "retsub"
    },
    "1227": {
      "block": "boxMapLength_after_if_else@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1229": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "tmp%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1230": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "value%0#0"
      ]
    },
    "1231": {
      "op": "swap"
    },
    "1232": {
      "retsub": true,
      "op": "retsub"
    },
    "1233": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.lengthBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "lengthBoxRef",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1236": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1238": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "32"
      ]
    },
    "1239": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1240": {
      "error": "boxRef creation failed",
      "op": "assert // boxRef creation failed",
      "stack_out": []
    },
    "1241": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1243": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1244": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1245": {
      "retsub": true,
      "op": "retsub"
    },
    "1246": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapStructLength",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapStructLength",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1249": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1251": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1252": {
      "op": "bytec 4 // \"users\"",
      "defined_out": [
        "\"users\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"users\""
      ]
    },
    "1254": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "tmp%0#0"
      ]
    },
    "1255": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1256": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1257": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "1258": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1259": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1260": {
      "op": "pushbytes 0x0012000000000000004600000000000004d20008746573744e616d65",
      "defined_out": [
        "0x0012000000000000004600000000000004d20008746573744e616d65",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0x0012000000000000004600000000000004d20008746573744e616d65"
      ]
    },
    "1290": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1291": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1292": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1293": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0"
      ]
    },
    "1294": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1295": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "28"
      ]
    },
    "1297": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "1298": {
      "error": "boxMapStruct bytes length mismatch",
      "op": "assert // boxMapStruct bytes length mismatch",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1299": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1300": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1301": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "value%0#0",
        "28"
      ]
    },
    "1303": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1304": {
      "error": "boxMapStruct length mismatch",
      "op": "assert // boxMapStruct length mismatch",
      "stack_out": []
    },
    "1305": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1306": {
      "retsub": true,
      "op": "retsub"
    },
    "1307": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.extractBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "extractBoxRef",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1310": {
      "op": "txn Sender"
    },
    "1312": {
      "op": "global CurrentApplicationAddress"
    },
    "1314": {
      "op": "dup",
      "defined_out": [
        "appAddress#0",
        "appAddress#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "appAddress#0 (copy)"
      ]
    },
    "1315": {
      "op": "len",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%0#0"
      ]
    },
    "1316": {
      "op": "dig 2",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "senderBytes#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%0#0",
        "senderBytes#0 (copy)"
      ]
    },
    "1318": {
      "op": "len",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1319": {
      "op": "+",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "totalSize#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "totalSize#0"
      ]
    },
    "1320": {
      "op": "frame_dig -1",
      "defined_out": [
        "appAddress#0",
        "key#0 (copy)",
        "senderBytes#0",
        "totalSize#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "totalSize#0",
        "key#0 (copy)"
      ]
    },
    "1322": {
      "op": "swap",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "totalSize#0"
      ]
    },
    "1323": {
      "op": "box_create",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%2#0"
      ]
    },
    "1324": {
      "error": "boxRef creation failed",
      "op": "assert // boxRef creation failed",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1325": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "1327": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "appAddress#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "1328": {
      "op": "dig 3",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "senderBytes#0 (copy)"
      ]
    },
    "1330": {
      "op": "box_replace",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1331": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "1333": {
      "op": "intc_1 // 0",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "1334": {
      "op": "dup",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "0"
      ]
    },
    "1335": {
      "op": "dig 3",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "0",
        "appAddress#0 (copy)"
      ]
    },
    "1337": {
      "op": "box_splice",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1338": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "1340": {
      "op": "intc_1 // 0",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "1341": {
      "op": "intc_2 // 32",
      "defined_out": [
        "0",
        "32",
        "appAddress#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "32"
      ]
    },
    "1342": {
      "op": "box_extract",
      "defined_out": [
        "appAddress#0",
        "part1#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0"
      ]
    },
    "1343": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0 (copy)"
      ]
    },
    "1345": {
      "op": "intc_2 // 32",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0 (copy)",
        "32"
      ]
    },
    "1346": {
      "op": "dup",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0 (copy)",
        "32",
        "32"
      ]
    },
    "1347": {
      "op": "box_extract",
      "defined_out": [
        "appAddress#0",
        "part1#0",
        "part2#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "part2#0"
      ]
    },
    "1348": {
      "op": "swap",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part2#0",
        "part1#0"
      ]
    },
    "1349": {
      "op": "uncover 2",
      "stack_out": [
        "senderBytes#0",
        "part2#0",
        "part1#0",
        "appAddress#0"
      ]
    },
    "1351": {
      "op": "==",
      "defined_out": [
        "part2#0",
        "senderBytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "part2#0",
        "tmp%3#0"
      ]
    },
    "1352": {
      "error": "First part should match app address",
      "op": "assert // First part should match app address",
      "stack_out": [
        "senderBytes#0",
        "part2#0"
      ]
    },
    "1353": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1354": {
      "error": "Second part should match sender bytes",
      "op": "assert // Second part should match sender bytes",
      "stack_out": []
    },
    "1355": {
      "retsub": true,
      "op": "retsub"
    },
    "1356": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.valueBox",
      "params": {},
      "block": "valueBox",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1359": {
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "1360": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1361": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1362": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1363": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1364": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1365": {
      "retsub": true,
      "op": "retsub"
    },
    "1366": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.arc4Box",
      "params": {
        "key#0": "bytes"
      },
      "block": "arc4Box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1369": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1371": {
      "op": "pushbytes 0x00010203",
      "defined_out": [
        "0x00010203",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "0x00010203"
      ]
    },
    "1377": {
      "op": "box_put",
      "stack_out": []
    },
    "1378": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1380": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1381": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1382": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1385": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1386": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1387": {
      "op": "assert",
      "stack_out": []
    },
    "1388": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1390": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1391": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1392": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1395": {
      "op": "btoi",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1396": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "1"
      ]
    },
    "1397": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1398": {
      "op": "assert",
      "stack_out": []
    },
    "1399": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1401": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1402": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1403": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1406": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1407": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "2"
      ]
    },
    "1409": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1410": {
      "op": "assert",
      "stack_out": []
    },
    "1411": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1413": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1414": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1415": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1418": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1419": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "3"
      ]
    },
    "1421": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1422": {
      "op": "assert",
      "stack_out": []
    },
    "1423": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1425": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1426": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1427": {
      "retsub": true,
      "op": "retsub"
    },
    "1428": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapExists",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapExists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1431": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1433": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1434": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "1435": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "1436": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1437": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1438": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1440": {
      "retsub": true,
      "op": "retsub"
    },
    "1441": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapStructExists",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapStructExists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1444": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1446": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1447": {
      "op": "bytec 4 // \"users\"",
      "defined_out": [
        "\"users\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"users\""
      ]
    },
    "1449": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "tmp%0#0"
      ]
    },
    "1450": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1451": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1452": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1454": {
      "retsub": true,
      "op": "retsub"
    },
    "1455": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxDynamicBytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "setBoxDynamicBytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1458": {
      "op": "bytec 5 // \"boxDynamicBytes\"",
      "defined_out": [
        "\"boxDynamicBytes\""
      ],
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "1460": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1461": {
      "op": "pop",
      "stack_out": []
    },
    "1462": {
      "op": "bytec 5 // \"boxDynamicBytes\"",
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "1464": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"boxDynamicBytes\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"boxDynamicBytes\"",
        "value#0 (copy)"
      ]
    },
    "1466": {
      "op": "box_put",
      "stack_out": []
    },
    "1467": {
      "retsub": true,
      "op": "retsub"
    },
    "1468": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxString",
      "params": {
        "value#0": "bytes"
      },
      "block": "setBoxString",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1471": {
      "op": "bytec 6 // \"boxString\"",
      "defined_out": [
        "\"boxString\""
      ],
      "stack_out": [
        "\"boxString\""
      ]
    },
    "1473": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1474": {
      "op": "pop",
      "stack_out": []
    },
    "1475": {
      "op": "bytec 6 // \"boxString\"",
      "stack_out": [
        "\"boxString\""
      ]
    },
    "1477": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"boxString\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"boxString\"",
        "value#0 (copy)"
      ]
    },
    "1479": {
      "op": "box_put",
      "stack_out": []
    },
    "1480": {
      "retsub": true,
      "op": "retsub"
    },
    "1481": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "setBoxRef",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1484": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1486": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "32"
      ]
    },
    "1487": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "1488": {
      "op": "pop",
      "stack_out": []
    },
    "1489": {
      "op": "frame_dig -1"
    },
    "1491": {
      "op": "txn Sender",
      "defined_out": [
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0 (copy)",
        "senderBytes#0"
      ]
    },
    "1493": {
      "op": "box_put",
      "stack_out": []
    },
    "1494": {
      "retsub": true,
      "op": "retsub"
    }
  }
}