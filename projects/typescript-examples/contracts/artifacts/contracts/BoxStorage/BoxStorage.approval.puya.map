{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/BoxStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAmBG;;AAAA;AAAA;AAAA;;AAAA;AAnBH;;;AAAA;AAmBG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AARH;;;AAAA;;;AAQG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAQE;;;AANoC;AAQlC;;AARkC;AAQlC;;AAAA;AAEO;AAAP;AAOF;;;AAEE;;AAAA;AApBiC;;;;;;;;AAoBjC;AAAA;AAEO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x00 0x151f7c75 \"boxBytes\""
    },
    "23": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "28": {
      "op": "pushbytess 0xf1e681cb 0x82111678 // method \"setBoxBytes(string)bool\", method \"setBoxInt(uint64)bool\""
    },
    "40": {
      "op": "txna ApplicationArgs 0"
    },
    "43": {
      "op": "match main_setBoxBytes_route@3 main_setBoxInt_route@4"
    },
    "49": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "50": {
      "op": "return"
    },
    "51": {
      "block": "main_setBoxInt_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "54": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "57": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "58": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "61": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "62": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxInt",
      "op": "callsub setBoxInt",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "65": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "66": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "67": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "69": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "70": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "71": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "72": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "73": {
      "op": "log",
      "stack_out": []
    },
    "74": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "75": {
      "op": "return"
    },
    "76": {
      "block": "main_setBoxBytes_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "78": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "79": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "80": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "82": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "83": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "86": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "89": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxBytes",
      "op": "callsub setBoxBytes",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "92": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "93": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "94": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "96": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "97": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "98": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "99": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "100": {
      "op": "log",
      "stack_out": []
    },
    "101": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "return"
    },
    "103": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "105": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "108": {
      "op": "txn ApplicationID"
    },
    "110": {
      "op": "!"
    },
    "111": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "112": {
      "op": "intc_0 // 1"
    },
    "113": {
      "op": "return"
    },
    "114": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxBytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "setBoxBytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "117": {
      "op": "bytec_2 // \"boxBytes\"",
      "defined_out": [
        "\"boxBytes\""
      ],
      "stack_out": [
        "\"boxBytes\""
      ]
    },
    "118": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "119": {
      "op": "pop",
      "stack_out": []
    },
    "120": {
      "op": "bytec_2 // \"boxBytes\"",
      "stack_out": [
        "\"boxBytes\""
      ]
    },
    "121": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"boxBytes\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"boxBytes\"",
        "value#0 (copy)"
      ]
    },
    "123": {
      "op": "box_put",
      "stack_out": []
    },
    "124": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "125": {
      "retsub": true,
      "op": "retsub"
    },
    "126": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxInt",
      "params": {
        "value#0": "uint64"
      },
      "block": "setBoxInt",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "129": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "131": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "132": {
      "op": "pushbytes \"boxInt\"",
      "defined_out": [
        "\"boxInt\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"boxInt\""
      ]
    },
    "140": {
      "op": "swap",
      "stack_out": [
        "\"boxInt\"",
        "new_box_value%0#0"
      ]
    },
    "141": {
      "op": "box_put",
      "stack_out": []
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "143": {
      "retsub": true,
      "op": "retsub"
    }
  }
}