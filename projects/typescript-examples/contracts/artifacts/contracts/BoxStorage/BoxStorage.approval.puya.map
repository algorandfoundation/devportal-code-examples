{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/BoxStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqTE;;AAAA;AAAA;AAAA;;AAAA;AArTF;;;AAAA;;;AAqTE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAlSF;;;AAAA;AAkSE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AA/QF;;;AAAA;AAAA;;;AA+QE;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVC;;AAAA;AAAA;AAAA;;AAAA;AArQH;;;AAAA;AAqQG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA3PH;;;AAAA;AA2PG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BD;;AAAA;AAAA;AAAA;;AAAA;AAjOF;;;AAAA;;;AAiOE;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AArNF;;;AAAA;;;AAqNE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA7MF;;;AAAA;AA6ME;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AApLF;;;AAAA;;;AAoLE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdC;;AAAA;AAAA;AAAA;;AAAA;AAtKH;;;AAAA;AAsKG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdD;;AAAA;AAAA;AAAA;;AAAA;AAxJF;;;AAAA;;;AAwJE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAhJF;;;AAAA;AAAA;;;AAAA;;;AAgJE;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAvIF;;;AAuIE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA/HF;;;AAAA;;;AA+HE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAvHF;;;AAAA;AAuHE;;;AAAA;;AAbC;;AAAA;AAAA;AAAA;;AAAA;AA1GH;;;AAAA;;;AA0GG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAjGH;;;AAAA;AAiGG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdD;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAhEH;;;AAAA;AAgEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAtDH;;;AAAA;AAsDG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA5CH;;;AAAA;AA4CG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAGkB;AAeK;AAAA;AAAA;AAAnB;AAfc;AAuBK;AAAA;AAAA;AAAnB;AAvBc;AAgCkC;AAAZ;AAAA;AAC7B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAQF;;;AAEqB;;AAAA;AAvCL;AAAA;AAAA;AAuCU;AAAA;AAAxB;AAQF;;;AAEqB;;AAAA;AAjDL;AAAA;AAAA;AAiDU;AAAe;;;;;;;;;AAAhC;;AAAA;AAAP;AAQF;;;AAEsC;;AAAA;AA3DtB;AAAA;AAAA;AA2D2B;AAAA;AAAA;;AAAA;AACjC;;;;;AAAD;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;;AAAA;AAAyB;;;;;AA7DX;;AA8Ea;AAA3B;;AACwB;;AACJ;AAhFN;;AAgFd;;AAAA;AAEO;AAAA;;AAAA;AAAP;AACA;AAQF;;;AAEqB;;AAAA;AA5FL;AAAA;AAAA;AA4FU;AAAA;;AAAxB;AAOF;;;AAGiC;;AAAA;AACxB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AASF;;;AACc;;AAAA;AArHE;AAqHd;AAAA;;AAOF;;;AA7HmB;;AA8HjB;;AA9HiB;;AA8HjB;;AAAA;;AAOF;;;AAlIyB;;AAmIvB;;AAnIuB;;AAmIvB;;AAAA;;AAQF;;;AACc;;AAAA;AA1IE;AAAA;AAAA;AA0Id;AAAA;;AAAA;;AAAA;;AAOF;;;AAEE;;AAAsB;AAAtB;;AAEA;;AADwB;;AACxB;;AAUF;;;AAEmB;;AAAA;AAjKH;AAAA;AAAA;AAAA;AAiKQ;AAAA;;AAAlB;;;AACY;AAAd;AAAA;AAGsB;;AAAA;AAAA;AAAxB;AAAA;AAQF;;;AAES;;AAAsB;AAAtB;AAAP;AACc;;AAAA;AAAA;AAAd;AApLc;AA6Ld;;AA3LuB;;AA4LvB;;AA/LiB;;AAgMjB;;AA/Lc;AAiMK;AAAZ;AAAA;AAAkC;;AAAlC;AAAA;;AAAA;AAA6C;;AAA7C;AAAP;AA/LuB;;AAgMK;AAAe;;;;;;AAApC;;AAAA;AAAmE;;;AAAiB;;AAApF;AAAP;AAnMiB;;AAoMK;AAAe;;AAA9B;;AAAA;AAA0C;;AAA1C;AAAP;;AAOF;;;AACc;;AAAA;AAvME;AAAA;AAAA;AAuMd;;;AAOF;;;AAEE;;AAAA;;AACmB;;AAAA;AAAA;AAAgB;;AAAnC;AAAA;AAAA;AAAmB;;AAAA;AAAA;;AAAnB;AAAA;AAAA;;AASF;;;AAC0B;;AACE;;AAKnB;;AAHkB;;AAGlB;AAAP;AAEA;;AAAe;AAAf;;AAAA;AACA;;AAAc;AAAG;AAAjB;;AAAA;AAEc;;AAAe;AAAG;AAAlB;AACA;;AAAe;AAAI;AAAnB;AAEP;AAAA;;AAAA;AAAP;AACO;AAAP;;AAUF;;;AAE2B;;AAAA;AArPL;;AAAA;AAAA;AAqPU;AAAA;AAA9B;AAQF;;;AAE2B;;AAAA;AA/PL;;AAAA;AAAA;AA+PU;AAAA;;AAA9B;AAQF;;;AACoB;;AAAA;AAxQE;;AAAA;AAAA;AAwQpB;AAAA;;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAIc;;AAAA;AAAA;AAJd;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAKiB;;AAAA;;AAAA;AALjB;AAAA;AAAA;AASO;AAAP;AAQF;;;AAOoB;;AAAA;AAjSE;;AAAA;AAAA;AAiSpB;AAAA;;AAAA;AAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA/B;AAE8B;AAAA;AAA9B;AAUF;;;AAGE;;AAAqB;;AAArB;AAAqB;;AAEK;AAAG;AAAtB;AAAP;AAFqB;;AAGd;AAAsB;AAAW;AAAjC;AAAP;AAHqB;;AAIK;AAAG;AAAW;AAAjC;AAAP;AAJqB;;AAKK;;AAAG;AAAW;;AAAjC;AAAP;AALqB;;AAOrB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 32 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"boxMap\" 0x00 \"boxInt\" 0x00010203 \"boxString\" \"boxDynamicBytes\" \"users\" \"42\" 0x0003 \"boxRef\""
    },
    "80": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "82": {
      "op": "bz main_bare_routing@31",
      "stack_out": []
    },
    "85": {
      "op": "pushbytess 0xb7491344 0x49cf4105 0x6ab3e9bc 0x26ca648a 0x28cc7139 0x644a3994 0xb1f5a9b6 0x03e8c77e 0xd829d2a3 0x8c22bfd5 0xfa1562f7 0xc497bc6f 0xf4f9cbad 0x9e11fd7a 0x5e6ceac0 0xf53418c4 0x39e9b226 0x9101a7de 0xa4552eb5 0x38acf53e 0x8600e0eb 0x799689d5 0x156ef28d 0xb2d39fea 0x0a4036cd 0x547f0a74 // method \"getBox()uint64\", method \"valueBox()uint64\", method \"maybeBox()(uint64,bool)\", method \"getBoxMap(uint64)string\", method \"getBoxMapWithDefault(uint64)string\", method \"maybeBoxMap(uint64)(string,bool)\", method \"keyPrefixBoxMap()byte[]\", method \"getBoxRef()address\", method \"boxMapExists(uint64)bool\", method \"maybeBoxRef(string)(byte[],bool)\", method \"setBox(uint64)void\", method \"setBoxString(string)void\", method \"setBoxDynamicBytes(byte[])void\", method \"setBoxMap(uint64,string)void\", method \"setBoxRef(string)void\", method \"boxMapLength(uint64)uint64\", method \"lengthBoxRef(string)uint64\", method \"deleteBox()void\", method \"deleteBoxMap(uint64)void\", method \"deleteBoxRef(string)void\", method \"extractBoxRef(string)void\", method \"getBoxMapObject(uint64)(string,uint64,uint64)\", method \"boxMapObjectExists(uint64)bool\", method \"setBoxMapObject(uint64,(string,uint64,uint64))bool\", method \"boxMapObjectLength(uint64)uint64\", method \"arc4Box(string)uint8[4]\"",
      "defined_out": [
        "Method(arc4Box(string)uint8[4])",
        "Method(boxMapExists(uint64)bool)",
        "Method(boxMapLength(uint64)uint64)",
        "Method(boxMapObjectExists(uint64)bool)",
        "Method(boxMapObjectLength(uint64)uint64)",
        "Method(deleteBox()void)",
        "Method(deleteBoxMap(uint64)void)",
        "Method(deleteBoxRef(string)void)",
        "Method(extractBoxRef(string)void)",
        "Method(getBox()uint64)",
        "Method(getBoxMap(uint64)string)",
        "Method(getBoxMapObject(uint64)(string,uint64,uint64))",
        "Method(getBoxMapWithDefault(uint64)string)",
        "Method(getBoxRef()address)",
        "Method(keyPrefixBoxMap()byte[])",
        "Method(lengthBoxRef(string)uint64)",
        "Method(maybeBox()(uint64,bool))",
        "Method(maybeBoxMap(uint64)(string,bool))",
        "Method(maybeBoxRef(string)(byte[],bool))",
        "Method(setBox(uint64)void)",
        "Method(setBoxDynamicBytes(byte[])void)",
        "Method(setBoxMap(uint64,string)void)",
        "Method(setBoxMapObject(uint64,(string,uint64,uint64))bool)",
        "Method(setBoxRef(string)void)",
        "Method(setBoxString(string)void)",
        "Method(valueBox()uint64)"
      ],
      "stack_out": [
        "Method(getBox()uint64)",
        "Method(valueBox()uint64)",
        "Method(maybeBox()(uint64,bool))",
        "Method(getBoxMap(uint64)string)",
        "Method(getBoxMapWithDefault(uint64)string)",
        "Method(maybeBoxMap(uint64)(string,bool))",
        "Method(keyPrefixBoxMap()byte[])",
        "Method(getBoxRef()address)",
        "Method(boxMapExists(uint64)bool)",
        "Method(maybeBoxRef(string)(byte[],bool))",
        "Method(setBox(uint64)void)",
        "Method(setBoxString(string)void)",
        "Method(setBoxDynamicBytes(byte[])void)",
        "Method(setBoxMap(uint64,string)void)",
        "Method(setBoxRef(string)void)",
        "Method(boxMapLength(uint64)uint64)",
        "Method(lengthBoxRef(string)uint64)",
        "Method(deleteBox()void)",
        "Method(deleteBoxMap(uint64)void)",
        "Method(deleteBoxRef(string)void)",
        "Method(extractBoxRef(string)void)",
        "Method(getBoxMapObject(uint64)(string,uint64,uint64))",
        "Method(boxMapObjectExists(uint64)bool)",
        "Method(setBoxMapObject(uint64,(string,uint64,uint64))bool)",
        "Method(boxMapObjectLength(uint64)uint64)",
        "Method(arc4Box(string)uint8[4])"
      ]
    },
    "217": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc4Box(string)uint8[4])",
        "Method(boxMapExists(uint64)bool)",
        "Method(boxMapLength(uint64)uint64)",
        "Method(boxMapObjectExists(uint64)bool)",
        "Method(boxMapObjectLength(uint64)uint64)",
        "Method(deleteBox()void)",
        "Method(deleteBoxMap(uint64)void)",
        "Method(deleteBoxRef(string)void)",
        "Method(extractBoxRef(string)void)",
        "Method(getBox()uint64)",
        "Method(getBoxMap(uint64)string)",
        "Method(getBoxMapObject(uint64)(string,uint64,uint64))",
        "Method(getBoxMapWithDefault(uint64)string)",
        "Method(getBoxRef()address)",
        "Method(keyPrefixBoxMap()byte[])",
        "Method(lengthBoxRef(string)uint64)",
        "Method(maybeBox()(uint64,bool))",
        "Method(maybeBoxMap(uint64)(string,bool))",
        "Method(maybeBoxRef(string)(byte[],bool))",
        "Method(setBox(uint64)void)",
        "Method(setBoxDynamicBytes(byte[])void)",
        "Method(setBoxMap(uint64,string)void)",
        "Method(setBoxMapObject(uint64,(string,uint64,uint64))bool)",
        "Method(setBoxRef(string)void)",
        "Method(setBoxString(string)void)",
        "Method(valueBox()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getBox()uint64)",
        "Method(valueBox()uint64)",
        "Method(maybeBox()(uint64,bool))",
        "Method(getBoxMap(uint64)string)",
        "Method(getBoxMapWithDefault(uint64)string)",
        "Method(maybeBoxMap(uint64)(string,bool))",
        "Method(keyPrefixBoxMap()byte[])",
        "Method(getBoxRef()address)",
        "Method(boxMapExists(uint64)bool)",
        "Method(maybeBoxRef(string)(byte[],bool))",
        "Method(setBox(uint64)void)",
        "Method(setBoxString(string)void)",
        "Method(setBoxDynamicBytes(byte[])void)",
        "Method(setBoxMap(uint64,string)void)",
        "Method(setBoxRef(string)void)",
        "Method(boxMapLength(uint64)uint64)",
        "Method(lengthBoxRef(string)uint64)",
        "Method(deleteBox()void)",
        "Method(deleteBoxMap(uint64)void)",
        "Method(deleteBoxRef(string)void)",
        "Method(extractBoxRef(string)void)",
        "Method(getBoxMapObject(uint64)(string,uint64,uint64))",
        "Method(boxMapObjectExists(uint64)bool)",
        "Method(setBoxMapObject(uint64,(string,uint64,uint64))bool)",
        "Method(boxMapObjectLength(uint64)uint64)",
        "Method(arc4Box(string)uint8[4])",
        "tmp%2#0"
      ]
    },
    "220": {
      "op": "match main_getBox_route@3 main_valueBox_route@4 main_maybeBox_route@5 main_getBoxMap_route@6 main_getBoxMapWithDefault_route@7 main_maybeBoxMap_route@8 main_keyPrefixBoxMap_route@9 main_getBoxRef_route@10 main_boxMapExists_route@11 main_maybeBoxRef_route@12 main_setBox_route@13 main_setBoxString_route@14 main_setBoxDynamicBytes_route@15 main_setBoxMap_route@16 main_setBoxRef_route@17 main_boxMapLength_route@18 main_lengthBoxRef_route@19 main_deleteBox_route@20 main_deleteBoxMap_route@21 main_deleteBoxRef_route@22 main_extractBoxRef_route@23 main_getBoxMapObject_route@24 main_boxMapObjectExists_route@25 main_setBoxMapObject_route@26 main_boxMapObjectLength_route@27 main_arc4Box_route@28",
      "stack_out": []
    },
    "274": {
      "block": "main_after_if_else@35",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "275": {
      "block": "main_arc4Box_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "277": {
      "op": "!",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "278": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "279": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "281": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "282": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%7#0"
      ]
    },
    "285": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "288": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.arc4Box",
      "op": "callsub arc4Box",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "291": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0",
        "0x151f7c75"
      ]
    },
    "292": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%171#0"
      ]
    },
    "293": {
      "op": "concat",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "294": {
      "op": "log",
      "stack_out": []
    },
    "295": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "296": {
      "op": "return",
      "stack_out": []
    },
    "297": {
      "block": "main_boxMapObjectLength_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "299": {
      "op": "!",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "300": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "301": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "303": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "304": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "307": {
      "op": "btoi",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "308": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapObjectLength",
      "op": "callsub boxMapObjectLength",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "311": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "312": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "313": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "315": {
      "op": "log",
      "stack_out": []
    },
    "316": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "317": {
      "op": "return",
      "stack_out": []
    },
    "318": {
      "block": "main_setBoxMapObject_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "320": {
      "op": "!",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "321": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "322": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "324": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "325": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "328": {
      "op": "btoi",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "329": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ]
    },
    "332": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMapObject",
      "op": "callsub setBoxMapObject",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "335": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0",
        "0x00"
      ]
    },
    "336": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0",
        "0x00",
        "0"
      ]
    },
    "337": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%155#0"
      ]
    },
    "339": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%2#0"
      ]
    },
    "340": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "341": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%2#0"
      ]
    },
    "342": {
      "op": "concat",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "343": {
      "op": "log",
      "stack_out": []
    },
    "344": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "345": {
      "op": "return",
      "stack_out": []
    },
    "346": {
      "block": "main_boxMapObjectExists_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "348": {
      "op": "!",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "349": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "350": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "352": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "353": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "356": {
      "op": "btoi",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "357": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapObjectExists",
      "op": "callsub boxMapObjectExists",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "360": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0",
        "0x00"
      ]
    },
    "361": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0",
        "0x00",
        "0"
      ]
    },
    "362": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%147#0"
      ]
    },
    "364": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%1#0"
      ]
    },
    "365": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%1#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "368": {
      "op": "log",
      "stack_out": []
    },
    "369": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "370": {
      "op": "return",
      "stack_out": []
    },
    "371": {
      "block": "main_getBoxMapObject_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "373": {
      "op": "!",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "374": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "375": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "377": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "378": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "381": {
      "op": "btoi",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "382": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapObject",
      "op": "callsub getBoxMapObject",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "385": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0",
        "0x151f7c75"
      ]
    },
    "386": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%140#0"
      ]
    },
    "387": {
      "op": "concat",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "388": {
      "op": "log",
      "stack_out": []
    },
    "389": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "390": {
      "op": "return",
      "stack_out": []
    },
    "391": {
      "block": "main_extractBoxRef_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "393": {
      "op": "!",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "394": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "395": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "397": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "398": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%6#0"
      ]
    },
    "401": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "404": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.extractBoxRef",
      "op": "callsub extractBoxRef",
      "stack_out": []
    },
    "407": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "return",
      "stack_out": []
    },
    "409": {
      "block": "main_deleteBoxRef_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "411": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "412": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "413": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "415": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "416": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%5#0"
      ]
    },
    "419": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "422": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxRef",
      "op": "callsub deleteBoxRef",
      "stack_out": []
    },
    "425": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "426": {
      "op": "return",
      "stack_out": []
    },
    "427": {
      "block": "main_deleteBoxMap_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "429": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "430": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "431": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "433": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "434": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "437": {
      "op": "btoi",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "438": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxMap",
      "op": "callsub deleteBoxMap",
      "stack_out": []
    },
    "441": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "442": {
      "op": "return",
      "stack_out": []
    },
    "443": {
      "block": "main_deleteBox_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "445": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "446": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "447": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "449": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "450": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBox",
      "op": "callsub deleteBox"
    },
    "453": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "454": {
      "op": "return",
      "stack_out": []
    },
    "455": {
      "block": "main_lengthBoxRef_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "457": {
      "op": "!",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "458": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "459": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "461": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "462": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%4#0"
      ]
    },
    "465": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "468": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.lengthBoxRef",
      "op": "callsub lengthBoxRef",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "471": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "472": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "474": {
      "op": "concat",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "475": {
      "op": "log",
      "stack_out": []
    },
    "476": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "477": {
      "op": "return",
      "stack_out": []
    },
    "478": {
      "block": "main_boxMapLength_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "480": {
      "op": "!",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "481": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "482": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "484": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "485": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "488": {
      "op": "btoi",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "489": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength",
      "op": "callsub boxMapLength",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "492": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "493": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "494": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "495": {
      "op": "concat",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "496": {
      "op": "log",
      "stack_out": []
    },
    "497": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "498": {
      "op": "return",
      "stack_out": []
    },
    "499": {
      "block": "main_setBoxRef_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "501": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "502": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "503": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "505": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "506": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%3#0"
      ]
    },
    "509": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "512": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxRef",
      "op": "callsub setBoxRef",
      "stack_out": []
    },
    "515": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "516": {
      "op": "return",
      "stack_out": []
    },
    "517": {
      "block": "main_setBoxMap_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "519": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "520": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "521": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "523": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "524": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "527": {
      "op": "btoi",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "528": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%2#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "reinterpret_Encoded(len+utf8[])%2#0"
      ]
    },
    "531": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "tmp%94#0"
      ]
    },
    "534": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMap",
      "op": "callsub setBoxMap",
      "stack_out": []
    },
    "537": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "538": {
      "op": "return",
      "stack_out": []
    },
    "539": {
      "block": "main_setBoxDynamicBytes_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "541": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "542": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "543": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "545": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "546": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "549": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxDynamicBytes",
      "op": "callsub setBoxDynamicBytes",
      "stack_out": []
    },
    "552": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "553": {
      "op": "return",
      "stack_out": []
    },
    "554": {
      "block": "main_setBoxString_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "556": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "557": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "558": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "560": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "561": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "564": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "567": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxString",
      "op": "callsub setBoxString",
      "stack_out": []
    },
    "570": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "571": {
      "op": "return",
      "stack_out": []
    },
    "572": {
      "block": "main_setBox_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "574": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "575": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "576": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "578": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "579": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "582": {
      "op": "btoi",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "583": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBox",
      "op": "callsub setBox",
      "stack_out": []
    },
    "586": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "587": {
      "op": "return",
      "stack_out": []
    },
    "588": {
      "block": "main_maybeBoxRef_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "590": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "591": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "592": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "594": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "595": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "598": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "601": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxRef",
      "op": "callsub maybeBoxRef",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "604": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "0x151f7c75"
      ]
    },
    "605": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%73#0"
      ]
    },
    "606": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "607": {
      "op": "log",
      "stack_out": []
    },
    "608": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "609": {
      "op": "return",
      "stack_out": []
    },
    "610": {
      "block": "main_boxMapExists_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "612": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "613": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "614": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "616": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "617": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "620": {
      "op": "btoi",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "621": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapExists",
      "op": "callsub boxMapExists",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "624": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "0x00"
      ]
    },
    "625": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "0x00",
        "0"
      ]
    },
    "626": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%65#0"
      ]
    },
    "628": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "629": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "630": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "631": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "632": {
      "op": "log",
      "stack_out": []
    },
    "633": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "634": {
      "op": "return",
      "stack_out": []
    },
    "635": {
      "block": "main_getBoxRef_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "637": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "638": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "639": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "641": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "642": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxRef",
      "op": "callsub getBoxRef",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "645": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "0x151f7c75"
      ]
    },
    "646": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%57#0"
      ]
    },
    "647": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "648": {
      "op": "log",
      "stack_out": []
    },
    "649": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "650": {
      "op": "return",
      "stack_out": []
    },
    "651": {
      "block": "main_keyPrefixBoxMap_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "653": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "654": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "655": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "657": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "658": {
      "op": "pushbytes 0x151f7c750006626f784d6170",
      "defined_out": [
        "0x151f7c750006626f784d6170"
      ],
      "stack_out": [
        "0x151f7c750006626f784d6170"
      ]
    },
    "672": {
      "op": "log",
      "stack_out": []
    },
    "673": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "674": {
      "op": "return",
      "stack_out": []
    },
    "675": {
      "block": "main_maybeBoxMap_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "677": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "678": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "679": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "681": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "682": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "685": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "686": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxMap",
      "op": "callsub maybeBoxMap",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "689": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "0x151f7c75"
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%44#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "692": {
      "op": "log",
      "stack_out": []
    },
    "693": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "694": {
      "op": "return",
      "stack_out": []
    },
    "695": {
      "block": "main_getBoxMapWithDefault_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "697": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "698": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "699": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "701": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "702": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "705": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "706": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapWithDefault",
      "op": "callsub getBoxMapWithDefault",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "709": {
      "op": "dup",
      "defined_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%36#0 (copy)"
      ]
    },
    "710": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "aggregate%length%1#0"
      ]
    },
    "711": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "712": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%36#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "717": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "718": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ]
    },
    "719": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "720": {
      "op": "log",
      "stack_out": []
    },
    "721": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "722": {
      "op": "return",
      "stack_out": []
    },
    "723": {
      "block": "main_getBoxMap_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "725": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "726": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "727": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "729": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "730": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "733": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "734": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMap",
      "op": "callsub getBoxMap",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "737": {
      "op": "dup",
      "defined_out": [
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "738": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "aggregate%length%0#0"
      ]
    },
    "739": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "740": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "743": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%28#0"
      ]
    },
    "744": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "745": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "746": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "747": {
      "op": "concat",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "748": {
      "op": "log",
      "stack_out": []
    },
    "749": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "750": {
      "op": "return",
      "stack_out": []
    },
    "751": {
      "block": "main_maybeBox_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "753": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "754": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "755": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "757": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "758": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBox",
      "op": "callsub maybeBox",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "761": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "762": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "763": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "764": {
      "op": "log",
      "stack_out": []
    },
    "765": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "766": {
      "op": "return",
      "stack_out": []
    },
    "767": {
      "block": "main_valueBox_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "769": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "770": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "771": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "773": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "774": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.valueBox",
      "op": "callsub valueBox",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "777": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "778": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "779": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "780": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "781": {
      "op": "log",
      "stack_out": []
    },
    "782": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "783": {
      "op": "return",
      "stack_out": []
    },
    "784": {
      "block": "main_getBox_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "786": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "787": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "788": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "790": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "791": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBox",
      "op": "callsub getBox",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "794": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "795": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "796": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "797": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "798": {
      "op": "log",
      "stack_out": []
    },
    "799": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "800": {
      "op": "return",
      "stack_out": []
    },
    "801": {
      "block": "main_bare_routing@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "803": {
      "op": "bnz main_after_if_else@35",
      "stack_out": []
    },
    "806": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "808": {
      "op": "!",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "809": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "810": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "811": {
      "op": "return",
      "stack_out": []
    },
    "812": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBox",
      "params": {},
      "block": "getBox",
      "stack_in": [],
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "813": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "814": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "815": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "816": {
      "retsub": true,
      "op": "retsub"
    },
    "817": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.valueBox",
      "params": {},
      "block": "valueBox",
      "stack_in": [],
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "818": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "819": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "820": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "821": {
      "retsub": true,
      "op": "retsub"
    },
    "822": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBox",
      "params": {},
      "block": "maybeBox",
      "stack_in": [],
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "823": {
      "op": "box_get",
      "defined_out": [
        "boxIntExists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "boxIntExists#0"
      ]
    },
    "824": {
      "op": "swap",
      "stack_out": [
        "boxIntExists#0",
        "maybe_value%0#0"
      ]
    },
    "825": {
      "op": "btoi",
      "defined_out": [
        "boxIntExists#0",
        "boxIntValue#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "boxIntValue#0"
      ]
    },
    "826": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "boxIntExists#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "827": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "boxIntExists#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "aggregate%val_as_bytes%0#0",
        "0x00"
      ]
    },
    "828": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "boxIntExists#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0"
      ]
    },
    "829": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0",
        "boxIntExists#0"
      ]
    },
    "831": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "832": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "833": {
      "retsub": true,
      "op": "retsub"
    },
    "834": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMap",
      "params": {
        "key#0": "uint64"
      },
      "block": "getBoxMap",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "837": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "839": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "840": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "841": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "842": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "843": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "844": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "845": {
      "retsub": true,
      "op": "retsub"
    },
    "846": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapWithDefault",
      "params": {
        "key#0": "uint64"
      },
      "block": "getBoxMapWithDefault",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "849": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "851": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "852": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "853": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "854": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "855": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "856": {
      "op": "pushbytes \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "865": {
      "op": "cover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "867": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "868": {
      "retsub": true,
      "op": "retsub"
    },
    "869": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxMap",
      "params": {
        "key#0": "uint64"
      },
      "block": "maybeBoxMap",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "872": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "874": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "875": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "876": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "877": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "878": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "879": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "880": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "value#0"
      ]
    },
    "882": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "exists#0"
      ]
    },
    "883": {
      "op": "bz maybeBoxMap_ternary_false@2",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "886": {
      "op": "frame_dig 1",
      "defined_out": [
        "exists#0",
        "ternary_result%0#1",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ]
    },
    "888": {
      "block": "maybeBoxMap_ternary_merge@3",
      "stack_in": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ],
      "op": "dup",
      "defined_out": [
        "ternary_result%0#1",
        "ternary_result%0#1 (copy)"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "ternary_result%0#1 (copy)"
      ]
    },
    "889": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "aggregate%length%0#0"
      ]
    },
    "890": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "891": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "894": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%length_uint16%0#0",
        "ternary_result%0#1"
      ]
    },
    "895": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "896": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00"
      ]
    },
    "897": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "898": {
      "op": "frame_dig 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0",
        "exists#0"
      ]
    },
    "900": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "901": {
      "op": "bytec 9 // 0x0003",
      "defined_out": [
        "0x0003",
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0",
        "0x0003"
      ]
    },
    "903": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x0003",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "904": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "905": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "906": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%concat%0#0"
      ]
    },
    "907": {
      "op": "frame_bury 0"
    },
    "909": {
      "retsub": true,
      "op": "retsub"
    },
    "910": {
      "block": "maybeBoxMap_ternary_false@2",
      "stack_in": [
        "exists#0",
        "value#0"
      ],
      "op": "pushbytes \"\"",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ]
    },
    "912": {
      "op": "b maybeBoxMap_ternary_merge@3"
    },
    "915": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxRef",
      "params": {},
      "block": "getBoxRef",
      "stack_in": [],
      "op": "bytec 10 // \"boxRef\"",
      "defined_out": [
        "\"boxRef\""
      ],
      "stack_out": [
        "\"boxRef\""
      ]
    },
    "917": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"boxRef\"",
        "32"
      ],
      "stack_out": [
        "\"boxRef\"",
        "32"
      ]
    },
    "918": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "919": {
      "op": "pop",
      "stack_out": []
    },
    "920": {
      "op": "txn Sender",
      "defined_out": [
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0"
      ]
    },
    "922": {
      "op": "dup",
      "defined_out": [
        "senderBytes#0",
        "value#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "value#0"
      ]
    },
    "923": {
      "op": "bytec 10 // \"boxRef\"",
      "stack_out": [
        "senderBytes#0",
        "value#0",
        "\"boxRef\""
      ]
    },
    "925": {
      "op": "dig 1",
      "defined_out": [
        "\"boxRef\"",
        "senderBytes#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "senderBytes#0",
        "value#0",
        "\"boxRef\"",
        "value#0 (copy)"
      ]
    },
    "927": {
      "op": "box_put",
      "stack_out": [
        "senderBytes#0",
        "value#0"
      ]
    },
    "928": {
      "op": "dup",
      "stack_out": [
        "senderBytes#0",
        "value#0",
        "value#0 (copy)"
      ]
    },
    "929": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "value#0 (copy)",
        "senderBytes#0"
      ]
    },
    "931": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0"
      ]
    },
    "932": {
      "error": "boxRef value mismatch",
      "op": "assert // boxRef value mismatch",
      "stack_out": [
        "value#0"
      ]
    },
    "933": {
      "retsub": true,
      "op": "retsub"
    },
    "934": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapExists",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapExists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "937": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "939": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "940": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "941": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "942": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "943": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "944": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "946": {
      "retsub": true,
      "op": "retsub"
    },
    "947": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "maybeBoxRef",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "950": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "952": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "953": {
      "op": "dig 1",
      "defined_out": [
        "exists#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "exists#0",
        "value#0 (copy)"
      ]
    },
    "955": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0",
        "aggregate%length%0#0"
      ]
    },
    "956": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "957": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "960": {
      "op": "uncover 2",
      "stack_out": [
        "exists#0",
        "aggregate%length_uint16%0#0",
        "value#0"
      ]
    },
    "962": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "963": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "aggregate%encoded_value%0#0",
        "0x00"
      ]
    },
    "964": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "965": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x00",
        "0",
        "exists#0"
      ]
    },
    "967": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "968": {
      "op": "bytec 9 // 0x0003",
      "defined_out": [
        "0x0003",
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0",
        "0x0003"
      ]
    },
    "970": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x0003",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "971": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "972": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "973": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%concat%0#0"
      ]
    },
    "974": {
      "retsub": true,
      "op": "retsub"
    },
    "975": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBox",
      "params": {
        "valueInt#0": "uint64"
      },
      "block": "setBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "978": {
      "op": "frame_dig -1",
      "defined_out": [
        "valueInt#0 (copy)"
      ],
      "stack_out": [
        "valueInt#0 (copy)"
      ]
    },
    "980": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "981": {
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxInt\""
      ]
    },
    "982": {
      "op": "swap",
      "stack_out": [
        "\"boxInt\"",
        "encoded_value%0#0"
      ]
    },
    "983": {
      "op": "box_put",
      "stack_out": []
    },
    "984": {
      "retsub": true,
      "op": "retsub"
    },
    "985": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxString",
      "params": {
        "value#0": "bytes"
      },
      "block": "setBoxString",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "988": {
      "op": "bytec 5 // \"boxString\"",
      "defined_out": [
        "\"boxString\""
      ],
      "stack_out": [
        "\"boxString\""
      ]
    },
    "990": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "991": {
      "op": "pop",
      "stack_out": []
    },
    "992": {
      "op": "bytec 5 // \"boxString\"",
      "stack_out": [
        "\"boxString\""
      ]
    },
    "994": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"boxString\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"boxString\"",
        "value#0 (copy)"
      ]
    },
    "996": {
      "op": "box_put",
      "stack_out": []
    },
    "997": {
      "retsub": true,
      "op": "retsub"
    },
    "998": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxDynamicBytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "setBoxDynamicBytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1001": {
      "op": "bytec 6 // \"boxDynamicBytes\"",
      "defined_out": [
        "\"boxDynamicBytes\""
      ],
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "1003": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1004": {
      "op": "pop",
      "stack_out": []
    },
    "1005": {
      "op": "bytec 6 // \"boxDynamicBytes\"",
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "1007": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"boxDynamicBytes\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"boxDynamicBytes\"",
        "value#0 (copy)"
      ]
    },
    "1009": {
      "op": "box_put",
      "stack_out": []
    },
    "1010": {
      "retsub": true,
      "op": "retsub"
    },
    "1011": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMap",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "setBoxMap",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1014": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1016": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1017": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "1018": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "1019": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1020": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1021": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "1022": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1023": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "value#0 (copy)"
      ]
    },
    "1025": {
      "op": "box_put",
      "stack_out": []
    },
    "1026": {
      "retsub": true,
      "op": "retsub"
    },
    "1027": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "setBoxRef",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1030": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1032": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "32"
      ]
    },
    "1033": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "1034": {
      "op": "pop",
      "stack_out": []
    },
    "1035": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1037": {
      "op": "txn Sender",
      "defined_out": [
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0 (copy)",
        "senderBytes#0"
      ]
    },
    "1039": {
      "op": "box_put",
      "stack_out": []
    },
    "1040": {
      "retsub": true,
      "op": "retsub"
    },
    "1041": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapLength",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1044": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1046": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1047": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "1048": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "1049": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1050": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1051": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1052": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1054": {
      "op": "bnz boxMapLength_after_if_else@2",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1057": {
      "op": "intc_1 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "1058": {
      "op": "swap"
    },
    "1059": {
      "retsub": true,
      "op": "retsub"
    },
    "1060": {
      "block": "boxMapLength_after_if_else@2",
      "stack_in": [
        "box_prefixed_key%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1062": {
      "op": "box_len",
      "defined_out": [
        "box_prefixed_key%0#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1063": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "box_prefixed_key%0#0",
        "value%0#0"
      ]
    },
    "1064": {
      "op": "swap"
    },
    "1065": {
      "retsub": true,
      "op": "retsub"
    },
    "1066": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.lengthBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "lengthBoxRef",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1069": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1071": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "32"
      ]
    },
    "1072": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1073": {
      "error": "boxRef creation failed",
      "op": "assert // boxRef creation failed",
      "stack_out": []
    },
    "1074": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1076": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1077": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1078": {
      "retsub": true,
      "op": "retsub"
    },
    "1079": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBox",
      "params": {},
      "block": "deleteBox",
      "stack_in": [],
      "op": "bytec_3 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "1080": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1081": {
      "op": "pop",
      "stack_out": []
    },
    "1082": {
      "op": "bytec 6 // \"boxDynamicBytes\"",
      "defined_out": [
        "\"boxDynamicBytes\""
      ],
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "1084": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1085": {
      "op": "pop",
      "stack_out": []
    },
    "1086": {
      "op": "bytec 5 // \"boxString\"",
      "defined_out": [
        "\"boxString\""
      ],
      "stack_out": [
        "\"boxString\""
      ]
    },
    "1088": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1089": {
      "op": "pop",
      "stack_out": []
    },
    "1090": {
      "op": "bytec_3 // \"boxInt\"",
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "1091": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1092": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1093": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1094": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "1096": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "1097": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1099": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "1100": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "state_get%0#0",
        "42"
      ]
    },
    "1102": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1103": {
      "op": "assert",
      "stack_out": []
    },
    "1104": {
      "op": "bytec 6 // \"boxDynamicBytes\"",
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "1106": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1107": {
      "op": "pushbytes 0x00023432",
      "defined_out": [
        "0x00023432",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "1113": {
      "op": "cover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1115": {
      "op": "select",
      "defined_out": [
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%1#0"
      ]
    },
    "1116": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1119": {
      "op": "bytec 8 // \"42\"",
      "defined_out": [
        "\"42\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"42\""
      ]
    },
    "1121": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1122": {
      "op": "assert",
      "stack_out": []
    },
    "1123": {
      "op": "bytec 5 // \"boxString\"",
      "stack_out": [
        "\"boxString\""
      ]
    },
    "1125": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1126": {
      "op": "bytec 8 // \"42\"",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "\"42\""
      ]
    },
    "1128": {
      "op": "cover 2",
      "stack_out": [
        "\"42\"",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1130": {
      "op": "select",
      "defined_out": [
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0"
      ]
    },
    "1131": {
      "op": "bytec 8 // \"42\"",
      "stack_out": [
        "state_get%2#0",
        "\"42\""
      ]
    },
    "1133": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1134": {
      "op": "assert",
      "stack_out": []
    },
    "1135": {
      "retsub": true,
      "op": "retsub"
    },
    "1136": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxMap",
      "params": {
        "key#0": "uint64"
      },
      "block": "deleteBoxMap",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1139": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1141": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1142": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "1143": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "1144": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1145": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1146": {
      "op": "pop",
      "stack_out": []
    },
    "1147": {
      "retsub": true,
      "op": "retsub"
    },
    "1148": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "deleteBoxRef",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1151": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1153": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1154": {
      "op": "pop",
      "stack_out": []
    },
    "1155": {
      "op": "frame_dig -1",
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1157": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1158": {
      "op": "pop",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1159": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "\"\""
      ]
    },
    "1161": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1162": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "1163": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1164": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "key#0 (copy)"
      ]
    },
    "1166": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1167": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "1169": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1170": {
      "op": "&&",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1171": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "1172": {
      "retsub": true,
      "op": "retsub"
    },
    "1173": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.extractBoxRef",
      "params": {
        "key#0": "bytes"
      },
      "block": "extractBoxRef",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1176": {
      "op": "txn Sender",
      "defined_out": [
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0"
      ]
    },
    "1178": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1180": {
      "op": "frame_dig -1",
      "defined_out": [
        "appAddress#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "1182": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "appAddress#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "64"
      ]
    },
    "1184": {
      "op": "box_create",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%3#0"
      ]
    },
    "1185": {
      "error": "boxRef creation failed",
      "op": "assert // boxRef creation failed",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1186": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "1188": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "appAddress#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "1189": {
      "op": "dig 3",
      "defined_out": [
        "0",
        "appAddress#0",
        "key#0 (copy)",
        "senderBytes#0",
        "senderBytes#0 (copy)"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "senderBytes#0 (copy)"
      ]
    },
    "1191": {
      "op": "box_replace",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1192": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "1194": {
      "op": "intc_1 // 0",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "1195": {
      "op": "dup",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "0"
      ]
    },
    "1196": {
      "op": "dig 3",
      "defined_out": [
        "0",
        "appAddress#0",
        "appAddress#0 (copy)",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "0",
        "appAddress#0 (copy)"
      ]
    },
    "1198": {
      "op": "box_splice",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1199": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "1201": {
      "op": "intc_1 // 0",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "1202": {
      "op": "intc_2 // 32",
      "defined_out": [
        "0",
        "32",
        "appAddress#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "32"
      ]
    },
    "1203": {
      "op": "box_extract",
      "defined_out": [
        "appAddress#0",
        "part1#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0"
      ]
    },
    "1204": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0 (copy)"
      ]
    },
    "1206": {
      "op": "intc_2 // 32",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0 (copy)",
        "32"
      ]
    },
    "1207": {
      "op": "dup",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0 (copy)",
        "32",
        "32"
      ]
    },
    "1208": {
      "op": "box_extract",
      "defined_out": [
        "appAddress#0",
        "part1#0",
        "part2#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "part2#0"
      ]
    },
    "1209": {
      "op": "swap",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part2#0",
        "part1#0"
      ]
    },
    "1210": {
      "op": "uncover 2",
      "stack_out": [
        "senderBytes#0",
        "part2#0",
        "part1#0",
        "appAddress#0"
      ]
    },
    "1212": {
      "op": "==",
      "defined_out": [
        "part2#0",
        "senderBytes#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "part2#0",
        "tmp%6#0"
      ]
    },
    "1213": {
      "error": "First part should match app address",
      "op": "assert // First part should match app address",
      "stack_out": [
        "senderBytes#0",
        "part2#0"
      ]
    },
    "1214": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1215": {
      "error": "Second part should match sender bytes",
      "op": "assert // Second part should match sender bytes",
      "stack_out": []
    },
    "1216": {
      "retsub": true,
      "op": "retsub"
    },
    "1217": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapObject",
      "params": {
        "key#0": "uint64"
      },
      "block": "getBoxMapObject",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1220": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1222": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1223": {
      "op": "bytec 7 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "1225": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "1226": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1227": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1228": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1229": {
      "retsub": true,
      "op": "retsub"
    },
    "1230": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapObjectExists",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapObjectExists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1233": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1235": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1236": {
      "op": "bytec 7 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "1238": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "1239": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1240": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1241": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1243": {
      "retsub": true,
      "op": "retsub"
    },
    "1244": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMapObject",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "setBoxMapObject",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1247": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1249": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1250": {
      "op": "bytec 7 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "1252": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "1253": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1254": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1255": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "1256": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1257": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1258": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1260": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1261": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1262": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "2"
      ]
    },
    "1263": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "2",
        "8"
      ]
    },
    "1265": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box%box_extract%0#0"
      ]
    },
    "1266": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%0#0",
        "values%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "values%2#0"
      ]
    },
    "1267": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "values%2#0",
        "value#0 (copy)"
      ]
    },
    "1269": {
      "op": "intc_3 // 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "values%2#0",
        "value#0 (copy)",
        "2"
      ]
    },
    "1270": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "values%2#0",
        "values%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "values%2#0",
        "values%3#0"
      ]
    },
    "1271": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ]
    },
    "1272": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "1273": {
      "op": "&&",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "1274": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1275": {
      "op": "pushints 10 8 // 10, 8",
      "defined_out": [
        "10",
        "8",
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "box_prefixed_key%0#0",
        "10",
        "8"
      ]
    },
    "1279": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "box%box_extract%1#0"
      ]
    },
    "1280": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "values%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "values%4#0"
      ]
    },
    "1281": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "values%4#0",
        "value#0 (copy)"
      ]
    },
    "1283": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%2#0",
        "values%4#0",
        "value#0 (copy)",
        "10"
      ]
    },
    "1285": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "values%4#0",
        "values%5#0"
      ]
    },
    "1286": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1287": {
      "op": "&&",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1288": {
      "error": "boxMapObject value mismatch",
      "op": "assert // boxMapObject value mismatch",
      "stack_out": []
    },
    "1289": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1290": {
      "retsub": true,
      "op": "retsub"
    },
    "1291": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapObjectLength",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapObjectLength",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1294": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1296": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1297": {
      "op": "bytec 7 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "1299": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "1300": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1301": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1302": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "1303": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1304": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1305": {
      "op": "pushbytes 0x0012000000000000004600000000000004d20008746573744e616d65",
      "defined_out": [
        "0x0012000000000000004600000000000004d20008746573744e616d65",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "0x0012000000000000004600000000000004d20008746573744e616d65"
      ]
    },
    "1335": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1336": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1337": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1338": {
      "retsub": true,
      "op": "retsub"
    },
    "1339": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.arc4Box",
      "params": {
        "key#0": "bytes"
      },
      "block": "arc4Box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1342": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1344": {
      "op": "bytec 4 // 0x00010203",
      "defined_out": [
        "0x00010203",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "0x00010203"
      ]
    },
    "1346": {
      "op": "box_put",
      "stack_out": []
    },
    "1347": {
      "op": "bytec 4 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "1349": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00010203"
      ],
      "stack_out": [
        "0x00010203",
        "0"
      ]
    },
    "1350": {
      "op": "getbyte",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1351": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1352": {
      "op": "assert",
      "stack_out": []
    },
    "1353": {
      "op": "bytec 4 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "1355": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x00010203",
        "1"
      ],
      "stack_out": [
        "0x00010203",
        "1"
      ]
    },
    "1356": {
      "op": "getbyte",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1357": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "1358": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1359": {
      "op": "assert",
      "stack_out": []
    },
    "1360": {
      "op": "bytec 4 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "1362": {
      "op": "intc_3 // 2",
      "defined_out": [
        "0x00010203",
        "2"
      ],
      "stack_out": [
        "0x00010203",
        "2"
      ]
    },
    "1363": {
      "op": "getbyte",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1364": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%4#0",
        "2"
      ]
    },
    "1365": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1366": {
      "op": "assert",
      "stack_out": []
    },
    "1367": {
      "op": "bytec 4 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "1369": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0x00010203",
        "3"
      ],
      "stack_out": [
        "0x00010203",
        "3"
      ]
    },
    "1371": {
      "op": "getbyte",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1372": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "tmp%6#0",
        "3"
      ]
    },
    "1374": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1375": {
      "op": "assert",
      "stack_out": []
    },
    "1376": {
      "op": "bytec 4 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "1378": {
      "retsub": true,
      "op": "retsub"
    }
  }
}