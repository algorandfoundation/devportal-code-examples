{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/BoxStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAgYG;;AAAA;AAAA;AAAA;;AAAA;AAhYH;;;AAAA;AAgYG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AApXH;;;AAAA;AAoXG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA/MH;;;AAAA;AA+MG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAlKH;;;AAAA;AAAA;;;AAkKG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAtJH;;;AAAA;AAAA;;;AAAA;;;AAsJG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA1IH;;;AAAA;AA0IG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA/HH;;;AAAA;AA+HG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA5BH;;;AAAA;AA4BG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAgBE;;;AAdmC;AAgBd;AAAA;AAAA;AAAA;AAAA;AAAnB;AAUF;;;AAEqB;;AAAA;AAxB+B;;AAwB/B;AAAA;AAAA;AAAA;AAAnB;AASF;;;AAGqB;;AAAZ;AAAiC;;;;;;;;;AAAjC;;AAAA;AAAP;AAiCF;;;AAzEmC;AA2EG;AAAA;AAAA;AACpC;AAAA;AASF;;;AAMsC;;AAAZ;AAAA;AAAA;;AAAA;AAEhB;;;;;AAAR;;AAAA;;AAAA;;AAAA;AAAyB;;;;;AAS3B;;;AAKoD;;AAGrB;AAAtB;AAAP;AAHkD;;AAM1B;AAEO;;AAAvB;;AAAA;;AAAA;AAAR;AAAA;AAUF;;;AAE2B;;AAAA;AAzHmC;;AAyHnC;AAAA;AAAA;AAAA;AAAzB;AASF;;;AAEE;;AAAA;AA1IiC;AA0IjC;AAAA;;AAUF;;;AAEc;;AAAA;AAlJsC;;AAkJtC;AAAA;AAAZ;AAAA;;AAAA;;AAAA;;AAUF;;;AAGoB;;AAAA;AA7J0C;;AA6J1C;AAAA;AAAA;;AAAlB;;AAAA;AAAA;;AAAA;AAGoB;AAAA;AADpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAGgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAHhB;AAAA;;;AACoB;;AAAA;AAAA;AADpB;;;AAIc;;AAAA;;;AAJd;AAAA;;;AACoB;;AAAA;AAAA;AADpB;;;AAKiB;;AAAA;;;AALjB;AAAA;;;;AAAA;AAUO;AAAP;AAAA;;;;;AAQF;;;AAvLmC;AA0LrB;;AAxLyC;;AA0LhC;;AAzLe;;AA2LrB;;AA9LkB;AAiM1B;AAAA;AAAA;AAAkC;AAAlC;AAAA;;AAAA;AAA6C;AAA7C;AAAP;AA/LqD;;AAiM9C;AAAoC;;;;;;AAApC;;AAAA;AAAmE;;;AAAiB;;AAApF;AAAP;AAhMoC;;AAkM7B;AAA8B;;AAA9B;;AAAA;AAA0C;;AAA1C;AAAP;;AAQF;;;AAEc;;AAAA;AA3MsC;;AA2MtC;AAAA;AAAZ;;;AA6BF;;;AAImB;;AAAZ;AAAA;;AAAD;;;AACY;AAAd;AAGiB;;AAAZ;AAAA;AAAP;AASF;;;AAE+B;;AAEA;AAAtB;AAAP;AAF6B;;AAIf;AAAA;AAAd;AASF;;;AAYoB;;AAAlB;;AAAkB;;AAPJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOd;AAGyB;;AAAA;AAAA;AAAgB;AAAuB;;AAAzD;AAAP;AACyB;;AAAlB;AAAA;AAA+C;;AAA/C;AAAP;AAGO;AAAP;AAQF;;;AAG0B;;AACE;;AAGU;AAAA;AAAqB;;AAAA;AAAhC;AAEI;;AAEtB;AAAA;AAAP;AAF6B;;AAKd;AAAf;;AAAA;AAL6B;;AASf;AAAG;AAAjB;;AAAA;AAT6B;;AAYA;AAAG;AAAlB;AAZe;;AAaA;AAAI;AAAnB;AAGP;AAAA;;AAAA;AAAP;AACO;AAAP;;AAQF;;;AAzUmC;AA2Ud;AAAA;AAAA;AAAA;AAAA;AAAnB;AASF;;;AAGoD;AAG7B;;;;;;AAArB;AAHkD;AAW9B;AAAA;AAAb;;;AAAsB;AAAtB;AAAP;AAXkD;AAY9B;AAAA;AAAb;;;AAAsB;AAAW;AAAjC;AAAP;AAZkD;AAa9B;AAAA;AAAb;;;AAAsB;AAAW;;AAAjC;AAAP;AAbkD;AAc9B;AAAA;AAAb;;;AAAsB;AAAW;;AAAjC;AAAP;AAdkD;AAiB9B;AAAA;AAApB;AAUF;;;AAEqB;;AAAA;AAhX+B;;AAgX/B;AAAA;AAAZ;AAAA;;AAAP;AAUF;;;AAE2B;;AAAA;AA1XmC;;AA0XnC;AAAA;AAAlB;AAAA;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 32 42"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x00 \"boxInt\" \"static_ints\" \"blog\" \"boxMap\" 0x626c6f62 0x75736572730000000000000000 \"users\" \"42\" 0x0003 0x626f784d61700000000000000001 \"boxDynamicBytes\" \"boxString\" 0x626f784d61700000000000000000"
    },
    "134": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "136": {
      "op": "bz main_bare_routing@25",
      "stack_out": []
    },
    "139": {
      "op": "pushbytess 0xb7491344 0xbe42351f 0xa2364d0b 0x6ab3e9bc 0xfb1c74f6 0x8a00d372 0x53c28820 0xfa1562f7 0x9e11fd7a 0xd5dd922c 0x9101a7de 0xa4552eb5 0x5a1eefbe 0x69af4d6a 0x4b6b8d3c 0x8e078676 0x49cf4105 0xa74adc74 0xd829d2a3 0xf183207a // method \"getBox()uint64\", method \"getItemBoxMap(uint64)string\", method \"getBoxMap()string\", method \"maybeBox()(uint64,bool)\", method \"maybeBoxMap()(string,bool)\", method \"maybeBoxRef()(byte[],bool)\", method \"getBoxMapStruct(uint64)(string,uint64,uint64)\", method \"setBox(uint64)void\", method \"setBoxMap(uint64,string)void\", method \"setBoxMapStruct(uint64,(string,uint64,uint64))bool\", method \"deleteBox()void\", method \"deleteBoxMap(uint64)void\", method \"boxMapLength()uint64\", method \"lengthBoxRef()uint64\", method \"boxMapStructLength()bool\", method \"extractBoxRef()void\", method \"valueBox()uint64\", method \"arc4Box()uint8[4]\", method \"boxMapExists(uint64)bool\", method \"boxMapStructExists(uint64)bool\""
    },
    "241": {
      "op": "txna ApplicationArgs 0"
    },
    "244": {
      "op": "match main_getBox_route@3 main_getItemBoxMap_route@4 main_getBoxMap_route@5 main_maybeBox_route@6 main_maybeBoxMap_route@7 main_maybeBoxRef_route@8 main_getBoxMapStruct_route@9 main_setBox_route@10 main_setBoxMap_route@11 main_setBoxMapStruct_route@12 main_deleteBox_route@13 main_deleteBoxMap_route@14 main_boxMapLength_route@15 main_lengthBoxRef_route@16 main_boxMapStructLength_route@17 main_extractBoxRef_route@18 main_valueBox_route@19 main_arc4Box_route@20 main_boxMapExists_route@21 main_boxMapStructExists_route@22"
    },
    "286": {
      "block": "main_after_if_else@29",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "287": {
      "op": "return"
    },
    "288": {
      "block": "main_boxMapStructExists_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "290": {
      "op": "!",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "291": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "292": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "294": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "295": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "298": {
      "op": "btoi",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "299": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapStructExists",
      "op": "callsub boxMapStructExists",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "302": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "0x00"
      ]
    },
    "303": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0",
        "0x00",
        "0"
      ]
    },
    "304": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%9#0"
      ]
    },
    "306": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0"
      ]
    },
    "307": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0",
        "0x151f7c75"
      ]
    },
    "308": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ]
    },
    "309": {
      "op": "concat",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "310": {
      "op": "log",
      "stack_out": []
    },
    "311": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "return"
    },
    "313": {
      "block": "main_boxMapExists_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "315": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "316": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "317": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "319": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "320": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "323": {
      "op": "btoi",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "324": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapExists",
      "op": "callsub boxMapExists",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "327": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00"
      ]
    },
    "328": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00",
        "0"
      ]
    },
    "329": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%8#0"
      ]
    },
    "331": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0"
      ]
    },
    "332": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0",
        "0x151f7c75"
      ]
    },
    "333": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ]
    },
    "334": {
      "op": "concat",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "335": {
      "op": "log",
      "stack_out": []
    },
    "336": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "337": {
      "op": "return"
    },
    "338": {
      "block": "main_arc4Box_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "340": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "341": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "342": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "344": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "345": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.arc4Box",
      "op": "callsub arc4Box",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "348": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0",
        "0x151f7c75"
      ]
    },
    "349": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%103#0"
      ]
    },
    "350": {
      "op": "concat",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "351": {
      "op": "log",
      "stack_out": []
    },
    "352": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "353": {
      "op": "return"
    },
    "354": {
      "block": "main_valueBox_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "356": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "357": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "358": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "360": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "361": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.valueBox",
      "op": "callsub valueBox",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "364": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "365": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "366": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "367": {
      "op": "concat",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "368": {
      "op": "log",
      "stack_out": []
    },
    "369": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "370": {
      "op": "return"
    },
    "371": {
      "block": "main_extractBoxRef_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "373": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "374": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "375": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "377": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "378": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.extractBoxRef",
      "op": "callsub extractBoxRef"
    },
    "381": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "return"
    },
    "383": {
      "block": "main_boxMapStructLength_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "385": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "386": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "387": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "389": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "390": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapStructLength",
      "op": "callsub boxMapStructLength",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "393": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "0x00"
      ]
    },
    "394": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "0x00",
        "0"
      ]
    },
    "395": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%6#0"
      ]
    },
    "397": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "398": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "399": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "400": {
      "op": "concat",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "401": {
      "op": "log",
      "stack_out": []
    },
    "402": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "return"
    },
    "404": {
      "block": "main_lengthBoxRef_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "406": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "407": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "408": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "410": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "411": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.lengthBoxRef",
      "op": "callsub lengthBoxRef",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "414": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "415": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "416": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "417": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "418": {
      "op": "log",
      "stack_out": []
    },
    "419": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "return"
    },
    "421": {
      "block": "main_boxMapLength_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "423": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "424": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "425": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "427": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "428": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength",
      "op": "callsub boxMapLength",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "431": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "432": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "433": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "434": {
      "op": "concat",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "435": {
      "op": "log",
      "stack_out": []
    },
    "436": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "437": {
      "op": "return"
    },
    "438": {
      "block": "main_deleteBoxMap_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "440": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "441": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "442": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "444": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "445": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "448": {
      "op": "btoi",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "449": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxMap",
      "op": "callsub deleteBoxMap",
      "stack_out": []
    },
    "452": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "453": {
      "op": "return"
    },
    "454": {
      "block": "main_deleteBox_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "456": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "457": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "458": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "460": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "461": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBox",
      "op": "callsub deleteBox"
    },
    "464": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "465": {
      "op": "return"
    },
    "466": {
      "block": "main_setBoxMapStruct_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "468": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "469": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "470": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "472": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "473": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "476": {
      "op": "btoi",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "477": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "tmp%63#0"
      ]
    },
    "480": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMapStruct",
      "op": "callsub setBoxMapStruct",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "483": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "484": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "485": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "487": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "488": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "489": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "490": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "491": {
      "op": "log",
      "stack_out": []
    },
    "492": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "493": {
      "op": "return"
    },
    "494": {
      "block": "main_setBoxMap_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "496": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "497": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "498": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "500": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "501": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "504": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "505": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%54#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%55#0"
      ]
    },
    "508": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%54#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%56#0"
      ]
    },
    "511": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMap",
      "op": "callsub setBoxMap",
      "stack_out": []
    },
    "514": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "515": {
      "op": "return"
    },
    "516": {
      "block": "main_setBox_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "518": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "519": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "520": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "522": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "523": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "526": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "527": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBox",
      "op": "callsub setBox",
      "stack_out": []
    },
    "530": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "531": {
      "op": "return"
    },
    "532": {
      "block": "main_getBoxMapStruct_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "534": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "535": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "536": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "538": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "539": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "542": {
      "op": "btoi",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "543": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapStruct",
      "op": "callsub getBoxMapStruct",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "546": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "0x151f7c75"
      ]
    },
    "547": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%41#0"
      ]
    },
    "548": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "549": {
      "op": "log",
      "stack_out": []
    },
    "550": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "551": {
      "op": "return"
    },
    "552": {
      "block": "main_maybeBoxRef_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "554": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "555": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "556": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "558": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "559": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxRef",
      "op": "callsub maybeBoxRef",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "562": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "564": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%3#0"
      ]
    },
    "565": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "as_bytes%4#0"
      ]
    },
    "566": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%3#0"
      ]
    },
    "569": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "length_uint16%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "571": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ]
    },
    "572": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0",
        "0x00"
      ]
    },
    "573": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0",
        "0x00",
        "0"
      ]
    },
    "574": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%3#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "576": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_bool%2#0"
      ]
    },
    "577": {
      "op": "bytec 10 // 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_bool%2#0",
        "0x0003"
      ]
    },
    "579": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "0x0003",
        "encoded_bool%2#0"
      ]
    },
    "580": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "581": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%3#0"
      ]
    },
    "582": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "583": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x151f7c75"
      ]
    },
    "584": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "585": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "586": {
      "op": "log",
      "stack_out": []
    },
    "587": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "588": {
      "op": "return"
    },
    "589": {
      "block": "main_maybeBoxMap_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "591": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "592": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "593": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "595": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "596": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxMap",
      "op": "callsub maybeBoxMap",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "599": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "601": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%2#0"
      ]
    },
    "602": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "as_bytes%2#0"
      ]
    },
    "603": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%2#0"
      ]
    },
    "606": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "length_uint16%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "608": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ]
    },
    "609": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "0x00"
      ]
    },
    "610": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "0x00",
        "0"
      ]
    },
    "611": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%2#0",
        "0x00",
        "0",
        "elements_to_encode%3#0"
      ]
    },
    "613": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_bool%1#0"
      ]
    },
    "614": {
      "op": "bytec 10 // 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_bool%1#0",
        "0x0003"
      ]
    },
    "616": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "0x0003",
        "encoded_bool%1#0"
      ]
    },
    "617": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "618": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%2#0"
      ]
    },
    "619": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "620": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "621": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "622": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "623": {
      "op": "log",
      "stack_out": []
    },
    "624": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "625": {
      "op": "return"
    },
    "626": {
      "block": "main_maybeBox_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "628": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "629": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "630": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "632": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "633": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBox",
      "op": "callsub maybeBox",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "636": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "637": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "638": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "639": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00",
        "0"
      ]
    },
    "640": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x00",
        "0",
        "elements_to_encode%1#0"
      ]
    },
    "642": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_bool%0#0"
      ]
    },
    "643": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "644": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "645": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "646": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "647": {
      "op": "log",
      "stack_out": []
    },
    "648": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "649": {
      "op": "return"
    },
    "650": {
      "block": "main_getBoxMap_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "652": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "653": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "654": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "656": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "657": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMap",
      "op": "callsub getBoxMap",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "660": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "661": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "662": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "663": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "666": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "667": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "668": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "669": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "670": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "671": {
      "op": "log",
      "stack_out": []
    },
    "672": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "673": {
      "op": "return"
    },
    "674": {
      "block": "main_getItemBoxMap_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "676": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "677": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "678": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "680": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "681": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "684": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "685": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getItemBoxMap",
      "op": "callsub getItemBoxMap",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "688": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "689": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "690": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "691": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "694": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "695": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "696": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "697": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "698": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "699": {
      "op": "log",
      "stack_out": []
    },
    "700": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "701": {
      "op": "return"
    },
    "702": {
      "block": "main_getBox_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "704": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "705": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "706": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "708": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "709": {
      "callsub": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBox",
      "op": "callsub getBox",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "712": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "713": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "714": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "715": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "716": {
      "op": "log",
      "stack_out": []
    },
    "717": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "718": {
      "op": "return"
    },
    "719": {
      "block": "main_bare_routing@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "721": {
      "op": "bnz main_after_if_else@29",
      "stack_out": []
    },
    "724": {
      "op": "txn ApplicationID"
    },
    "726": {
      "op": "!"
    },
    "727": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "728": {
      "op": "intc_0 // 1"
    },
    "729": {
      "op": "return"
    },
    "730": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBox",
      "params": {},
      "block": "getBox",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "733": {
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "734": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "735": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "736": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "737": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "738": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "739": {
      "retsub": true,
      "op": "retsub"
    },
    "740": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getItemBoxMap",
      "params": {
        "key#0": "uint64"
      },
      "block": "getItemBoxMap",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "743": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "745": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "746": {
      "op": "bytec 5 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "748": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "749": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "750": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "751": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "752": {
      "retsub": true,
      "op": "retsub"
    },
    "753": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMap",
      "params": {},
      "block": "getBoxMap",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "756": {
      "op": "bytec 11 // 0x626f784d61700000000000000001",
      "defined_out": [
        "0x626f784d61700000000000000001"
      ],
      "stack_out": [
        "0x626f784d61700000000000000001"
      ]
    },
    "758": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "759": {
      "op": "pushbytes \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "768": {
      "op": "cover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "770": {
      "op": "select",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "771": {
      "retsub": true,
      "op": "retsub"
    },
    "772": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBox",
      "params": {},
      "block": "maybeBox",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "775": {
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "776": {
      "op": "box_get",
      "defined_out": [
        "boxIntExists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "boxIntExists#0"
      ]
    },
    "777": {
      "op": "swap",
      "stack_out": [
        "boxIntExists#0",
        "maybe_value%0#0"
      ]
    },
    "778": {
      "op": "btoi",
      "defined_out": [
        "boxIntExists#0",
        "boxIntValue#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "boxIntValue#0"
      ]
    },
    "779": {
      "op": "swap",
      "stack_out": [
        "boxIntValue#0",
        "boxIntExists#0"
      ]
    },
    "780": {
      "retsub": true,
      "op": "retsub"
    },
    "781": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxMap",
      "params": {},
      "block": "maybeBoxMap",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "784": {
      "op": "bytec 11 // 0x626f784d61700000000000000001",
      "defined_out": [
        "0x626f784d61700000000000000001"
      ],
      "stack_out": [
        "0x626f784d61700000000000000001"
      ]
    },
    "786": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "787": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "788": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "value#0"
      ]
    },
    "790": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "exists#0"
      ]
    },
    "791": {
      "op": "bz maybeBoxMap_ternary_false@2",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "794": {
      "op": "frame_dig 1"
    },
    "796": {
      "block": "maybeBoxMap_ternary_merge@3",
      "stack_in": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "exists#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "exists#0"
      ]
    },
    "798": {
      "op": "uncover 3"
    },
    "800": {
      "op": "uncover 3"
    },
    "802": {
      "retsub": true,
      "op": "retsub"
    },
    "803": {
      "block": "maybeBoxMap_ternary_false@2",
      "stack_in": [
        "exists#0",
        "value#0"
      ],
      "op": "pushbytes \"\"",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ]
    },
    "805": {
      "op": "b maybeBoxMap_ternary_merge@3"
    },
    "808": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxRef",
      "params": {},
      "block": "maybeBoxRef",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "811": {
      "op": "bytec 6 // 0x626c6f62",
      "defined_out": [
        "0x626c6f62"
      ],
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "813": {
      "op": "intc_2 // 32",
      "defined_out": [
        "0x626c6f62",
        "32"
      ],
      "stack_out": [
        "0x626c6f62",
        "32"
      ]
    },
    "814": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "815": {
      "op": "assert",
      "stack_out": []
    },
    "816": {
      "op": "bytec 6 // 0x626c6f62",
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "818": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "819": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0",
        "\"\""
      ]
    },
    "821": {
      "op": "uncover 2",
      "stack_out": [
        "exists#0",
        "\"\"",
        "value#0"
      ]
    },
    "823": {
      "op": "dig 2",
      "defined_out": [
        "\"\"",
        "exists#0",
        "exists#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "\"\"",
        "value#0",
        "exists#0 (copy)"
      ]
    },
    "825": {
      "op": "select",
      "defined_out": [
        "exists#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "exists#0",
        "tmp%1#0"
      ]
    },
    "826": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "exists#0"
      ]
    },
    "827": {
      "retsub": true,
      "op": "retsub"
    },
    "828": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapStruct",
      "params": {
        "key#0": "uint64"
      },
      "block": "getBoxMapStruct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "831": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "833": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "834": {
      "op": "bytec 8 // \"users\"",
      "defined_out": [
        "\"users\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"users\""
      ]
    },
    "836": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "tmp%0#0"
      ]
    },
    "837": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "838": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "839": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "840": {
      "retsub": true,
      "op": "retsub"
    },
    "841": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBox",
      "params": {
        "valueInt#0": "uint64"
      },
      "block": "setBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "844": {
      "op": "frame_dig -1",
      "defined_out": [
        "valueInt#0 (copy)"
      ],
      "stack_out": [
        "valueInt#0 (copy)"
      ]
    },
    "846": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "847": {
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"boxInt\""
      ]
    },
    "848": {
      "op": "swap",
      "stack_out": [
        "\"boxInt\"",
        "new_box_value%0#0"
      ]
    },
    "849": {
      "op": "box_put",
      "stack_out": []
    },
    "850": {
      "retsub": true,
      "op": "retsub"
    },
    "851": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMap",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "setBoxMap",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "854": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "856": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "857": {
      "op": "bytec 5 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "859": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "860": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "861": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "862": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "863": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "864": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value#0 (copy)"
      ]
    },
    "866": {
      "op": "box_put",
      "stack_out": []
    },
    "867": {
      "retsub": true,
      "op": "retsub"
    },
    "868": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMapStruct",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "setBoxMapStruct",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "871": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "873": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "874": {
      "op": "bytec 8 // \"users\"",
      "defined_out": [
        "\"users\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"users\""
      ]
    },
    "876": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "tmp%0#0"
      ]
    },
    "877": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "878": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "880": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "881": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "882": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "883": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "885": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "886": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "887": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0"
      ]
    },
    "888": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "889": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "0"
      ]
    },
    "890": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "item_start_offset%0#0"
      ]
    },
    "891": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "893": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "894": {
      "op": "substring3",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "895": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "value#0 (copy)"
      ]
    },
    "897": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "value#0 (copy)",
        "0"
      ]
    },
    "898": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%1#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "item_start_offset%1#0"
      ]
    },
    "899": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "item_start_offset%1#0",
        "value#0 (copy)"
      ]
    },
    "901": {
      "op": "len",
      "defined_out": [
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "902": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "value#0 (copy)"
      ]
    },
    "904": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "value#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "906": {
      "op": "substring3",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "907": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "908": {
      "op": "bz setBoxMapStruct_bool_false@4",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "911": {
      "op": "frame_dig 0"
    },
    "913": {
      "op": "box_get"
    },
    "914": {
      "error": "Box must have value",
      "op": "assert // Box must have value"
    },
    "915": {
      "error": "Index access is out of bounds",
      "op": "extract 2 8 // on error: Index access is out of bounds"
    },
    "918": {
      "op": "frame_dig -1"
    },
    "920": {
      "error": "Index access is out of bounds",
      "op": "extract 2 8 // on error: Index access is out of bounds"
    },
    "923": {
      "op": "=="
    },
    "924": {
      "op": "bz setBoxMapStruct_bool_false@4"
    },
    "927": {
      "op": "frame_dig 0"
    },
    "929": {
      "op": "box_get"
    },
    "930": {
      "error": "Box must have value",
      "op": "assert // Box must have value"
    },
    "931": {
      "error": "Index access is out of bounds",
      "op": "extract 10 8 // on error: Index access is out of bounds"
    },
    "934": {
      "op": "frame_dig -1"
    },
    "936": {
      "error": "Index access is out of bounds",
      "op": "extract 10 8 // on error: Index access is out of bounds"
    },
    "939": {
      "op": "=="
    },
    "940": {
      "op": "bz setBoxMapStruct_bool_false@4"
    },
    "943": {
      "op": "intc_0 // 1"
    },
    "944": {
      "block": "setBoxMapStruct_bool_merge@5",
      "stack_in": [
        "tmp%1#0",
        "and_result%0#0"
      ],
      "error": "boxMapStruct value mismatch",
      "op": "assert // boxMapStruct value mismatch",
      "defined_out": [],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "945": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "946": {
      "op": "swap"
    },
    "947": {
      "retsub": true,
      "op": "retsub"
    },
    "948": {
      "block": "setBoxMapStruct_bool_false@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "and_result%0#0"
      ]
    },
    "949": {
      "op": "b setBoxMapStruct_bool_merge@5"
    },
    "952": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBox",
      "params": {},
      "block": "deleteBox",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "955": {
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "956": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "957": {
      "op": "pop",
      "stack_out": []
    },
    "958": {
      "op": "bytec 12 // \"boxDynamicBytes\"",
      "defined_out": [
        "\"boxDynamicBytes\""
      ],
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "960": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "961": {
      "op": "pop",
      "stack_out": []
    },
    "962": {
      "op": "bytec 13 // \"boxString\"",
      "defined_out": [
        "\"boxString\""
      ],
      "stack_out": [
        "\"boxString\""
      ]
    },
    "964": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "965": {
      "op": "pop",
      "stack_out": []
    },
    "966": {
      "op": "bytec_2 // \"boxInt\"",
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "967": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "968": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "969": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "970": {
      "op": "intc_3 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "971": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "972": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "974": {
      "op": "select",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "975": {
      "op": "intc_3 // 42",
      "stack_out": [
        "tmp%0#0",
        "42"
      ]
    },
    "976": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "977": {
      "op": "assert",
      "stack_out": []
    },
    "978": {
      "op": "bytec 12 // \"boxDynamicBytes\"",
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "980": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "981": {
      "op": "pushbytes 0x00023432",
      "defined_out": [
        "0x00023432",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "987": {
      "op": "cover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "989": {
      "op": "select",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "990": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "993": {
      "op": "bytec 9 // \"42\"",
      "defined_out": [
        "\"42\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"42\""
      ]
    },
    "995": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "996": {
      "op": "assert",
      "stack_out": []
    },
    "997": {
      "op": "bytec 13 // \"boxString\"",
      "stack_out": [
        "\"boxString\""
      ]
    },
    "999": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1000": {
      "op": "bytec 9 // \"42\"",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "\"42\""
      ]
    },
    "1002": {
      "op": "cover 2",
      "stack_out": [
        "\"42\"",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1004": {
      "op": "select",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1005": {
      "op": "bytec 9 // \"42\"",
      "stack_out": [
        "tmp%5#0",
        "\"42\""
      ]
    },
    "1007": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1008": {
      "op": "assert",
      "stack_out": []
    },
    "1009": {
      "retsub": true,
      "op": "retsub"
    },
    "1010": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxMap",
      "params": {
        "key#0": "uint64"
      },
      "block": "deleteBoxMap",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1013": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1015": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1016": {
      "op": "bytec 5 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "1018": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "1019": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1020": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1021": {
      "op": "pop",
      "stack_out": []
    },
    "1022": {
      "retsub": true,
      "op": "retsub"
    },
    "1023": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength",
      "params": {},
      "block": "boxMapLength",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1026": {
      "op": "bytec 14 // 0x626f784d61700000000000000000",
      "defined_out": [
        "0x626f784d61700000000000000000"
      ],
      "stack_out": [
        "0x626f784d61700000000000000000"
      ]
    },
    "1028": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1029": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1031": {
      "op": "bnz boxMapLength_after_if_else@2",
      "stack_out": []
    },
    "1034": {
      "op": "intc_1 // 0"
    },
    "1035": {
      "retsub": true,
      "op": "retsub"
    },
    "1036": {
      "block": "boxMapLength_after_if_else@2",
      "stack_in": [],
      "op": "bytec 14 // 0x626f784d61700000000000000000",
      "defined_out": [
        "0x626f784d61700000000000000000"
      ],
      "stack_out": [
        "0x626f784d61700000000000000000"
      ]
    },
    "1038": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1039": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1040": {
      "retsub": true,
      "op": "retsub"
    },
    "1041": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.lengthBoxRef",
      "params": {},
      "block": "lengthBoxRef",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1044": {
      "op": "bytec 6 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1046": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1047": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1048": {
      "error": "boxRef creation failed",
      "op": "assert // boxRef creation failed",
      "stack_out": []
    },
    "1049": {
      "op": "bytec 6 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1051": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1052": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1053": {
      "retsub": true,
      "op": "retsub"
    },
    "1054": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapStructLength",
      "params": {},
      "block": "boxMapStructLength",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1057": {
      "op": "bytec 7 // 0x75736572730000000000000000",
      "defined_out": [
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "1059": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1060": {
      "op": "pop",
      "stack_out": []
    },
    "1061": {
      "op": "bytec 7 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "1063": {
      "op": "pushbytes 0x0012000000000000004600000000000004d20008746573744e616d65",
      "defined_out": [
        "0x0012000000000000004600000000000004d20008746573744e616d65",
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000",
        "0x0012000000000000004600000000000004d20008746573744e616d65"
      ]
    },
    "1093": {
      "op": "box_put",
      "stack_out": []
    },
    "1094": {
      "op": "bytec 7 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "1096": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1097": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1098": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1099": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "28"
      ]
    },
    "1101": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1102": {
      "error": "boxMapStruct bytes length mismatch",
      "op": "assert // boxMapStruct bytes length mismatch",
      "stack_out": []
    },
    "1103": {
      "op": "bytec 7 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "1105": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1106": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1107": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "value%0#0",
        "28"
      ]
    },
    "1109": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1110": {
      "error": "boxMapStruct length mismatch",
      "op": "assert // boxMapStruct length mismatch",
      "stack_out": []
    },
    "1111": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1112": {
      "retsub": true,
      "op": "retsub"
    },
    "1113": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.extractBoxRef",
      "params": {},
      "block": "extractBoxRef",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1116": {
      "op": "txn Sender"
    },
    "1118": {
      "op": "global CurrentApplicationAddress"
    },
    "1120": {
      "op": "dup",
      "defined_out": [
        "appAddress#0",
        "appAddress#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "appAddress#0 (copy)"
      ]
    },
    "1121": {
      "op": "len",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%0#0"
      ]
    },
    "1122": {
      "op": "dig 2",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "senderBytes#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%0#0",
        "senderBytes#0 (copy)"
      ]
    },
    "1124": {
      "op": "len",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1125": {
      "op": "+",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "totalSize#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "totalSize#0"
      ]
    },
    "1126": {
      "op": "bytec 4 // \"blog\"",
      "defined_out": [
        "\"blog\"",
        "appAddress#0",
        "senderBytes#0",
        "totalSize#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "totalSize#0",
        "\"blog\""
      ]
    },
    "1128": {
      "op": "swap",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\"",
        "totalSize#0"
      ]
    },
    "1129": {
      "op": "box_create",
      "defined_out": [
        "appAddress#0",
        "senderBytes#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "tmp%2#0"
      ]
    },
    "1130": {
      "error": "boxRef creation failed",
      "op": "assert // boxRef creation failed",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1131": {
      "op": "bytec 4 // \"blog\"",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\""
      ]
    },
    "1133": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"blog\"",
        "0",
        "appAddress#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\"",
        "0"
      ]
    },
    "1134": {
      "op": "dig 3",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\"",
        "0",
        "senderBytes#0 (copy)"
      ]
    },
    "1136": {
      "op": "box_replace",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1137": {
      "op": "bytec 4 // \"blog\"",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\""
      ]
    },
    "1139": {
      "op": "intc_1 // 0",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\"",
        "0"
      ]
    },
    "1140": {
      "op": "dup",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\"",
        "0",
        "0"
      ]
    },
    "1141": {
      "op": "dig 3",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\"",
        "0",
        "0",
        "appAddress#0 (copy)"
      ]
    },
    "1143": {
      "op": "box_splice",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "1144": {
      "op": "bytec 4 // \"blog\"",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\""
      ]
    },
    "1146": {
      "op": "intc_1 // 0",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\"",
        "0"
      ]
    },
    "1147": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"blog\"",
        "0",
        "32",
        "appAddress#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "\"blog\"",
        "0",
        "32"
      ]
    },
    "1148": {
      "op": "box_extract",
      "defined_out": [
        "appAddress#0",
        "part1#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0"
      ]
    },
    "1149": {
      "op": "bytec 4 // \"blog\"",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "\"blog\""
      ]
    },
    "1151": {
      "op": "intc_2 // 32",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "\"blog\"",
        "32"
      ]
    },
    "1152": {
      "op": "dup",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "\"blog\"",
        "32",
        "32"
      ]
    },
    "1153": {
      "op": "box_extract",
      "defined_out": [
        "appAddress#0",
        "part1#0",
        "part2#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "part2#0"
      ]
    },
    "1154": {
      "op": "swap",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part2#0",
        "part1#0"
      ]
    },
    "1155": {
      "op": "uncover 2",
      "stack_out": [
        "senderBytes#0",
        "part2#0",
        "part1#0",
        "appAddress#0"
      ]
    },
    "1157": {
      "op": "==",
      "defined_out": [
        "part2#0",
        "senderBytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "part2#0",
        "tmp%3#0"
      ]
    },
    "1158": {
      "error": "First part should match app address",
      "op": "assert // First part should match app address",
      "stack_out": [
        "senderBytes#0",
        "part2#0"
      ]
    },
    "1159": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1160": {
      "error": "Second part should match sender bytes",
      "op": "assert // Second part should match sender bytes",
      "stack_out": []
    },
    "1161": {
      "retsub": true,
      "op": "retsub"
    },
    "1162": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.valueBox",
      "params": {},
      "block": "valueBox",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1165": {
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "1166": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1167": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1168": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1169": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1170": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1171": {
      "retsub": true,
      "op": "retsub"
    },
    "1172": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.arc4Box",
      "params": {},
      "block": "arc4Box",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1175": {
      "op": "bytec_3 // \"static_ints\"",
      "defined_out": [
        "\"static_ints\""
      ],
      "stack_out": [
        "\"static_ints\""
      ]
    },
    "1176": {
      "op": "pushbytes 0x00010203",
      "defined_out": [
        "\"static_ints\"",
        "0x00010203"
      ],
      "stack_out": [
        "\"static_ints\"",
        "0x00010203"
      ]
    },
    "1182": {
      "op": "box_put",
      "stack_out": []
    },
    "1183": {
      "op": "bytec_3 // \"static_ints\"",
      "stack_out": [
        "\"static_ints\""
      ]
    },
    "1184": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1185": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1186": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1189": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1190": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1191": {
      "op": "assert",
      "stack_out": []
    },
    "1192": {
      "op": "bytec_3 // \"static_ints\"",
      "stack_out": [
        "\"static_ints\""
      ]
    },
    "1193": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1194": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1195": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1198": {
      "op": "btoi",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1199": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "1"
      ]
    },
    "1200": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1201": {
      "op": "assert",
      "stack_out": []
    },
    "1202": {
      "op": "bytec_3 // \"static_ints\"",
      "stack_out": [
        "\"static_ints\""
      ]
    },
    "1203": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1204": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1205": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1208": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1209": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "2"
      ]
    },
    "1211": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1212": {
      "op": "assert",
      "stack_out": []
    },
    "1213": {
      "op": "bytec_3 // \"static_ints\"",
      "stack_out": [
        "\"static_ints\""
      ]
    },
    "1214": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1215": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1216": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1219": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1220": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "3"
      ]
    },
    "1222": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1223": {
      "op": "assert",
      "stack_out": []
    },
    "1224": {
      "op": "bytec_3 // \"static_ints\"",
      "stack_out": [
        "\"static_ints\""
      ]
    },
    "1225": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1226": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1227": {
      "retsub": true,
      "op": "retsub"
    },
    "1228": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapExists",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapExists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1231": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1233": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1234": {
      "op": "bytec 5 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"boxMap\""
      ]
    },
    "1236": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "1237": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1238": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1239": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1241": {
      "retsub": true,
      "op": "retsub"
    },
    "1242": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapStructExists",
      "params": {
        "key#0": "uint64"
      },
      "block": "boxMapStructExists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1245": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1247": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1248": {
      "op": "bytec 8 // \"users\"",
      "defined_out": [
        "\"users\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"users\""
      ]
    },
    "1250": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "tmp%0#0"
      ]
    },
    "1251": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1252": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1253": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1255": {
      "retsub": true,
      "op": "retsub"
    }
  }
}