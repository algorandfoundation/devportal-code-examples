{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/BoxStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAyEE;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAzEF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGkB;AAcK;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZgB;AAsBK;AAAA;AAAA;AAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBgB;AA+BkC;AAAZ;AAAA;AAC7B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;AAAA;AAEqB;AAvCL;AAAA;AAAA;AAuCU;AAAA;AAF1B;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAAA;AAEqB;AAjDL;AAAA;AAAA;AAiDU;AAAe;;;;;;;;;AAAhC;;AAAA;AAFT;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAAA;AAEsC;AA3DtB;AAAA;AAAA;AA2D2B;AAAA;AAAA;;AAAA;AACjC;;;;AAAD;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAG2B;;;;;AAiB3B;;;AAAA;AAEqB;AA/EL;AAAA;AAAA;AA+EU;AAAA;;AAF1B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;AAAA;AACc;AA5FE;AA4Fd;AAAA;AADF;AAAA;AAQA;;;AAAA;;;AApGmB;;AAqGjB;;AArGiB;;AAqGjB;AAAA;AADF;AAAA;AAQA;;;AAzGyB;;AA0GvB;;AA1GuB;;AA0GvB;AAAA;AADF;AAAA;AASA;;;AAAA;AAAA;;;AAAA;;;AACc;AAAA;AAlHE;AAAA;AAAA;AAkHd;AAAA;;AAAA;AAAA;AADF;AAAA;AAWA;;;AAAA;AAEmB;AA9HH;AAAA;AAAA;AAAA;AA8HQ;AAAA;;AAAlB;;;AACY;AAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM0B;AAAA;AAAA;AAN1B;;;AA/HgB;AA8Id;;AA5IuB;;AA6IvB;;AAhJiB;;AAiJjB;;AAhJc;AAkJK;AAAZ;AAAA;AAAkC;AAAlC;AAAA;;AAAA;AAA6C;AAA7C;AAAP;AAhJuB;;AAiJK;AAAe;;;;;;AAApC;;AAAA;AAAmE;;;AAAiB;;AAApF;AAAP;AApJiB;;AAqJK;AAAe;;AAA9B;;AAAA;AAA0C;;AAA1C;AAPT;AAcA;;;AAAA;AACc;AAzJE;AAAA;AAAA;AAyJd;;AADF;AAAA;AAUA;;;AAAA;;;AAC0B;;AACE;;AAInB;;AAHkB;;AAGlB;AAAP;AAEA;;AAAY;AAAZ;;AAAA;AACA;;AAAW;AAAG;AAAd;;AAAA;AAEc;;AAAY;AAAG;;AAAf;AACA;;AAAY;;AAAI;AAAhB;AAEP;AAAA;;AAAA;AAAP;AACO;AAfT;AAyBA;;;AAAA;AAE2B;AA5LL;;AAAA;AAAA;AA4LU;AAAA;AAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAAA;AAE2B;AAtML;;AAAA;AAAA;AAsMU;AAAA;;AAFhC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAAA;AAAA;;;AACoB;AAAA;AA/ME;;AAAA;AAAA;AA+MpB;AAAA;;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;;AAAA;AAAA;AAIc;;AAAA;AAAA;AAJd;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAKiB;;AAAA;;AAAA;AALjB;AAAA;AAAA;AAFF;;;;;;;AAAA;AAAA;AAAA;AAmBA;;;AAAA;AAOoB;AAxOE;;AAAA;AAAA;AAwOpB;AAAA;;AAAA;AAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA/B;AAE8B;AAAA;AAThC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;;;AAAA;;;AAGuB;AAArB;AAAqB;AAEK;AAAnB;AAAA;AAAP;AAFqB;AAGd;AAAA;AAAqC;AAArC;AAAP;AAHqB;AAIK;AAAnB;AAAqC;AAArC;AAAP;AAJqB;AAKK;;AAAnB;AAAqC;;AAArC;AAAP;AARF;;;;;;;;;;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 42"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"boxMap\" \"boxInt\" 0x00010203 0x00 \"boxString\" \"boxDynamicBytes\" \"users\" \"42\""
    },
    "70": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "72": {
      "op": "bz main___algots__.defaultCreate@28",
      "stack_out": []
    },
    "75": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "78": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "79": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "81": {
      "op": "assert",
      "stack_out": []
    },
    "82": {
      "op": "pushbytess 0xb7491344 0x49cf4105 0x6ab3e9bc 0x26ca648a 0x28cc7139 0x644a3994 0xb1f5a9b6 0xd829d2a3 0xfa1562f7 0xc497bc6f 0xf4f9cbad 0x9e11fd7a 0xf53418c4 0x9101a7de 0xa4552eb5 0xcb31fa33 0x799689d5 0x156ef28d 0xb2d39fea 0x0a4036cd 0x547f0a74 // method \"getBox()uint64\", method \"valueBox()uint64\", method \"maybeBox()(uint64,bool)\", method \"getBoxMap(uint64)string\", method \"getBoxMapWithDefault(uint64)string\", method \"maybeBoxMap(uint64)(string,bool)\", method \"keyPrefixBoxMap()byte[]\", method \"boxMapExists(uint64)bool\", method \"setBox(uint64)void\", method \"setBoxString(string)void\", method \"setBoxDynamicBytes(byte[])void\", method \"setBoxMap(uint64,string)void\", method \"boxMapLength(uint64)uint64\", method \"deleteBox()void\", method \"deleteBoxMap(uint64)void\", method \"extractBox(string)void\", method \"getBoxMapObject(uint64)(string,uint64,uint64)\", method \"boxMapObjectExists(uint64)bool\", method \"setBoxMapObject(uint64,(string,uint64,uint64))bool\", method \"boxMapObjectLength(uint64)uint64\", method \"arc4Box(string)uint8[4]\"",
      "defined_out": [
        "Method(arc4Box(string)uint8[4])",
        "Method(boxMapExists(uint64)bool)",
        "Method(boxMapLength(uint64)uint64)",
        "Method(boxMapObjectExists(uint64)bool)",
        "Method(boxMapObjectLength(uint64)uint64)",
        "Method(deleteBox()void)",
        "Method(deleteBoxMap(uint64)void)",
        "Method(extractBox(string)void)",
        "Method(getBox()uint64)",
        "Method(getBoxMap(uint64)string)",
        "Method(getBoxMapObject(uint64)(string,uint64,uint64))",
        "Method(getBoxMapWithDefault(uint64)string)",
        "Method(keyPrefixBoxMap()byte[])",
        "Method(maybeBox()(uint64,bool))",
        "Method(maybeBoxMap(uint64)(string,bool))",
        "Method(setBox(uint64)void)",
        "Method(setBoxDynamicBytes(byte[])void)",
        "Method(setBoxMap(uint64,string)void)",
        "Method(setBoxMapObject(uint64,(string,uint64,uint64))bool)",
        "Method(setBoxString(string)void)",
        "Method(valueBox()uint64)"
      ],
      "stack_out": [
        "Method(getBox()uint64)",
        "Method(valueBox()uint64)",
        "Method(maybeBox()(uint64,bool))",
        "Method(getBoxMap(uint64)string)",
        "Method(getBoxMapWithDefault(uint64)string)",
        "Method(maybeBoxMap(uint64)(string,bool))",
        "Method(keyPrefixBoxMap()byte[])",
        "Method(boxMapExists(uint64)bool)",
        "Method(setBox(uint64)void)",
        "Method(setBoxString(string)void)",
        "Method(setBoxDynamicBytes(byte[])void)",
        "Method(setBoxMap(uint64,string)void)",
        "Method(boxMapLength(uint64)uint64)",
        "Method(deleteBox()void)",
        "Method(deleteBoxMap(uint64)void)",
        "Method(extractBox(string)void)",
        "Method(getBoxMapObject(uint64)(string,uint64,uint64))",
        "Method(boxMapObjectExists(uint64)bool)",
        "Method(setBoxMapObject(uint64,(string,uint64,uint64))bool)",
        "Method(boxMapObjectLength(uint64)uint64)",
        "Method(arc4Box(string)uint8[4])"
      ]
    },
    "189": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc4Box(string)uint8[4])",
        "Method(boxMapExists(uint64)bool)",
        "Method(boxMapLength(uint64)uint64)",
        "Method(boxMapObjectExists(uint64)bool)",
        "Method(boxMapObjectLength(uint64)uint64)",
        "Method(deleteBox()void)",
        "Method(deleteBoxMap(uint64)void)",
        "Method(extractBox(string)void)",
        "Method(getBox()uint64)",
        "Method(getBoxMap(uint64)string)",
        "Method(getBoxMapObject(uint64)(string,uint64,uint64))",
        "Method(getBoxMapWithDefault(uint64)string)",
        "Method(keyPrefixBoxMap()byte[])",
        "Method(maybeBox()(uint64,bool))",
        "Method(maybeBoxMap(uint64)(string,bool))",
        "Method(setBox(uint64)void)",
        "Method(setBoxDynamicBytes(byte[])void)",
        "Method(setBoxMap(uint64,string)void)",
        "Method(setBoxMapObject(uint64,(string,uint64,uint64))bool)",
        "Method(setBoxString(string)void)",
        "Method(valueBox()uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(getBox()uint64)",
        "Method(valueBox()uint64)",
        "Method(maybeBox()(uint64,bool))",
        "Method(getBoxMap(uint64)string)",
        "Method(getBoxMapWithDefault(uint64)string)",
        "Method(maybeBoxMap(uint64)(string,bool))",
        "Method(keyPrefixBoxMap()byte[])",
        "Method(boxMapExists(uint64)bool)",
        "Method(setBox(uint64)void)",
        "Method(setBoxString(string)void)",
        "Method(setBoxDynamicBytes(byte[])void)",
        "Method(setBoxMap(uint64,string)void)",
        "Method(boxMapLength(uint64)uint64)",
        "Method(deleteBox()void)",
        "Method(deleteBoxMap(uint64)void)",
        "Method(extractBox(string)void)",
        "Method(getBoxMapObject(uint64)(string,uint64,uint64))",
        "Method(boxMapObjectExists(uint64)bool)",
        "Method(setBoxMapObject(uint64,(string,uint64,uint64))bool)",
        "Method(boxMapObjectLength(uint64)uint64)",
        "Method(arc4Box(string)uint8[4])",
        "tmp%6#0"
      ]
    },
    "192": {
      "op": "match getBox valueBox maybeBox getBoxMap getBoxMapWithDefault maybeBoxMap main_keyPrefixBoxMap_route@10 boxMapExists setBox setBoxString setBoxDynamicBytes setBoxMap boxMapLength deleteBox deleteBoxMap extractBox getBoxMapObject boxMapObjectExists setBoxMapObject boxMapObjectLength arc4Box",
      "stack_out": []
    },
    "236": {
      "op": "err"
    },
    "237": {
      "block": "main_keyPrefixBoxMap_route@10",
      "stack_in": [],
      "op": "pushbytes 0x151f7c750006626f784d6170",
      "defined_out": [
        "0x151f7c750006626f784d6170"
      ],
      "stack_out": [
        "0x151f7c750006626f784d6170"
      ]
    },
    "251": {
      "op": "log",
      "stack_out": []
    },
    "252": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "253": {
      "op": "return",
      "stack_out": []
    },
    "254": {
      "block": "main___algots__.defaultCreate@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "256": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "257": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "259": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "260": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "261": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "262": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBox[routing]",
      "params": {},
      "block": "getBox",
      "stack_in": [],
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "263": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "264": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "265": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "266": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "267": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "268": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "270": {
      "op": "log",
      "stack_out": []
    },
    "271": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "272": {
      "op": "return",
      "stack_out": []
    },
    "273": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.valueBox[routing]",
      "params": {},
      "block": "valueBox",
      "stack_in": [],
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "274": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "275": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "276": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "277": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "278": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "279": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "280": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "281": {
      "op": "log",
      "stack_out": []
    },
    "282": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "283": {
      "op": "return",
      "stack_out": []
    },
    "284": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBox[routing]",
      "params": {},
      "block": "maybeBox",
      "stack_in": [],
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "285": {
      "op": "box_get",
      "defined_out": [
        "boxIntExists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "boxIntExists#0"
      ]
    },
    "286": {
      "op": "swap",
      "stack_out": [
        "boxIntExists#0",
        "maybe_value%0#0"
      ]
    },
    "287": {
      "op": "btoi",
      "defined_out": [
        "boxIntExists#0",
        "boxIntValue#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "boxIntValue#0"
      ]
    },
    "288": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "boxIntExists#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "289": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "boxIntExists#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "aggregate%val_as_bytes%0#0",
        "0x00"
      ]
    },
    "291": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "boxIntExists#0"
      ],
      "stack_out": [
        "boxIntExists#0",
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0"
      ]
    },
    "292": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0",
        "boxIntExists#0"
      ]
    },
    "294": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "295": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "296": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x151f7c75"
      ]
    },
    "297": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ]
    },
    "298": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "299": {
      "op": "log",
      "stack_out": []
    },
    "300": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "301": {
      "op": "return",
      "stack_out": []
    },
    "302": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMap[routing]",
      "params": {},
      "block": "getBoxMap",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "305": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "306": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "307": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "308": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "309": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "310": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "311": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "312": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "313": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%length%0#0"
      ]
    },
    "314": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "315": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "318": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "319": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "320": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "323": {
      "op": "log",
      "stack_out": []
    },
    "324": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapWithDefault[routing]",
      "params": {},
      "block": "getBoxMapWithDefault",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "329": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "330": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "331": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "332": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "333": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "334": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "335": {
      "op": "pushbytes \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "344": {
      "op": "cover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "346": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "347": {
      "op": "dup",
      "defined_out": [
        "state_get%0#0",
        "state_get%0#0 (copy)"
      ],
      "stack_out": [
        "state_get%0#0",
        "state_get%0#0 (copy)"
      ]
    },
    "348": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%length%0#0"
      ]
    },
    "349": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "350": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "353": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "state_get%0#0"
      ]
    },
    "354": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "355": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "356": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "357": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "358": {
      "op": "log",
      "stack_out": []
    },
    "359": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "360": {
      "op": "return",
      "stack_out": []
    },
    "361": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.maybeBoxMap[routing]",
      "params": {},
      "block": "maybeBoxMap",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "364": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "365": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "366": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "367": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "368": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "369": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "370": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "371": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "value#0"
      ]
    },
    "373": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "exists#0"
      ]
    },
    "374": {
      "op": "bz maybeBoxMap_ternary_false@3",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "377": {
      "op": "dup",
      "defined_out": [
        "exists#0",
        "ternary_result%0#1",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ]
    },
    "378": {
      "block": "maybeBoxMap_ternary_merge@4",
      "stack_in": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ],
      "op": "dup",
      "defined_out": [
        "ternary_result%0#1",
        "ternary_result%0#1 (copy)"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "ternary_result%0#1 (copy)"
      ]
    },
    "379": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "aggregate%length%0#0"
      ]
    },
    "380": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "aggregate%as_bytes%0#0"
      ]
    },
    "381": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1",
        "aggregate%length_uint16%0#0"
      ]
    },
    "384": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%length_uint16%0#0",
        "ternary_result%0#1"
      ]
    },
    "385": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "386": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00"
      ]
    },
    "388": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "389": {
      "op": "dig 4",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0",
        "exists#0"
      ]
    },
    "391": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "392": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0",
        "0x0003"
      ]
    },
    "396": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x0003",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "397": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%concat%0#0"
      ]
    },
    "400": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%0#0",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%concat%0#0",
        "0x151f7c75"
      ]
    },
    "401": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "0x151f7c75",
        "aggregate%concat%0#0"
      ]
    },
    "402": {
      "op": "concat",
      "defined_out": [
        "exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "tmp%2#0"
      ]
    },
    "403": {
      "op": "log",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "404": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "exists#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "1"
      ]
    },
    "405": {
      "op": "return",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "406": {
      "block": "maybeBoxMap_ternary_false@3",
      "stack_in": [
        "exists#0",
        "value#0"
      ],
      "op": "pushbytes \"\"",
      "defined_out": [
        "ternary_result%0#1"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "ternary_result%0#1"
      ]
    },
    "408": {
      "op": "b maybeBoxMap_ternary_merge@4"
    },
    "411": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapExists[routing]",
      "params": {},
      "block": "boxMapExists",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "414": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "415": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "416": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "417": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "418": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "419": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "420": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "422": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "424": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "425": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "427": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "428": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "429": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "430": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "431": {
      "op": "log",
      "stack_out": []
    },
    "432": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "433": {
      "op": "return",
      "stack_out": []
    },
    "434": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBox[routing]",
      "params": {},
      "block": "setBox",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "437": {
      "op": "btoi",
      "defined_out": [
        "valueInt#0"
      ],
      "stack_out": [
        "valueInt#0"
      ]
    },
    "438": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "439": {
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxInt\""
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "\"boxInt\"",
        "encoded_value%0#0"
      ]
    },
    "441": {
      "op": "box_put",
      "stack_out": []
    },
    "442": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "443": {
      "op": "return",
      "stack_out": []
    },
    "444": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxString[routing]",
      "params": {},
      "block": "setBoxString",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "447": {
      "op": "extract 2 0",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "450": {
      "op": "bytec 5 // \"boxString\"",
      "defined_out": [
        "\"boxString\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"boxString\""
      ]
    },
    "452": {
      "op": "box_del",
      "defined_out": [
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "{box_del}"
      ]
    },
    "453": {
      "op": "pop",
      "stack_out": [
        "value#0"
      ]
    },
    "454": {
      "op": "bytec 5 // \"boxString\"",
      "stack_out": [
        "value#0",
        "\"boxString\""
      ]
    },
    "456": {
      "op": "swap",
      "stack_out": [
        "\"boxString\"",
        "value#0"
      ]
    },
    "457": {
      "op": "box_put",
      "stack_out": []
    },
    "458": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "459": {
      "op": "return",
      "stack_out": []
    },
    "460": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxDynamicBytes[routing]",
      "params": {},
      "block": "setBoxDynamicBytes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "463": {
      "op": "bytec 6 // \"boxDynamicBytes\"",
      "defined_out": [
        "\"boxDynamicBytes\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"boxDynamicBytes\""
      ]
    },
    "465": {
      "op": "box_del",
      "defined_out": [
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "{box_del}"
      ]
    },
    "466": {
      "op": "pop",
      "stack_out": [
        "value#0"
      ]
    },
    "467": {
      "op": "bytec 6 // \"boxDynamicBytes\"",
      "stack_out": [
        "value#0",
        "\"boxDynamicBytes\""
      ]
    },
    "469": {
      "op": "swap",
      "stack_out": [
        "\"boxDynamicBytes\"",
        "value#0"
      ]
    },
    "470": {
      "op": "box_put",
      "stack_out": []
    },
    "471": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "472": {
      "op": "return",
      "stack_out": []
    },
    "473": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMap[routing]",
      "params": {},
      "block": "setBoxMap",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "476": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "477": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "480": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0"
      ]
    },
    "483": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "key#0"
      ]
    },
    "484": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "485": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "486": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "487": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "488": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "489": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "490": {
      "op": "pop",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "491": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "value#0"
      ]
    },
    "492": {
      "op": "box_put",
      "stack_out": []
    },
    "493": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "494": {
      "op": "return",
      "stack_out": []
    },
    "495": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength[routing]",
      "params": {},
      "block": "boxMapLength",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "498": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "499": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "500": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "501": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "502": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "503": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "504": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "505": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "507": {
      "op": "bnz boxMapLength_after_if_else@3",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "510": {
      "op": "intc_1 // 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ]
    },
    "511": {
      "block": "boxMapLength_after_inlined_contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength@4",
      "stack_in": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "512": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "513": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "514": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ]
    },
    "515": {
      "op": "log",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "516": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "1"
      ]
    },
    "517": {
      "op": "return",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "518": {
      "block": "boxMapLength_after_if_else@3",
      "stack_in": [
        "box_prefixed_key%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "519": {
      "op": "box_len",
      "defined_out": [
        "box_prefixed_key%0#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "520": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0"
      ]
    },
    "521": {
      "op": "b boxMapLength_after_inlined_contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapLength@4"
    },
    "524": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBox[routing]",
      "params": {},
      "block": "deleteBox",
      "stack_in": [],
      "op": "bytec_2 // \"boxInt\"",
      "defined_out": [
        "\"boxInt\""
      ],
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "525": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "526": {
      "op": "pop",
      "stack_out": []
    },
    "527": {
      "op": "bytec 6 // \"boxDynamicBytes\"",
      "defined_out": [
        "\"boxDynamicBytes\""
      ],
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "529": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "530": {
      "op": "pop",
      "stack_out": []
    },
    "531": {
      "op": "bytec 5 // \"boxString\"",
      "defined_out": [
        "\"boxString\""
      ],
      "stack_out": [
        "\"boxString\""
      ]
    },
    "533": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "534": {
      "op": "pop",
      "stack_out": []
    },
    "535": {
      "op": "bytec_2 // \"boxInt\"",
      "stack_out": [
        "\"boxInt\""
      ]
    },
    "536": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "538": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "539": {
      "op": "intc_3 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "540": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "541": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "543": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "544": {
      "op": "intc_3 // 42",
      "stack_out": [
        "state_get%0#0",
        "42"
      ]
    },
    "545": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "op": "assert",
      "stack_out": []
    },
    "547": {
      "op": "bytec 6 // \"boxDynamicBytes\"",
      "stack_out": [
        "\"boxDynamicBytes\""
      ]
    },
    "549": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "550": {
      "op": "pushbytes 0x00023432",
      "defined_out": [
        "0x00023432",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "556": {
      "op": "cover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "558": {
      "op": "select",
      "defined_out": [
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%1#0"
      ]
    },
    "559": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "562": {
      "op": "bytec 8 // \"42\"",
      "defined_out": [
        "\"42\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"42\""
      ]
    },
    "564": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "565": {
      "op": "assert",
      "stack_out": []
    },
    "566": {
      "op": "bytec 5 // \"boxString\"",
      "stack_out": [
        "\"boxString\""
      ]
    },
    "568": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "569": {
      "op": "bytec 8 // \"42\"",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "\"42\""
      ]
    },
    "571": {
      "op": "cover 2",
      "stack_out": [
        "\"42\"",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "573": {
      "op": "select",
      "defined_out": [
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0"
      ]
    },
    "574": {
      "op": "bytec 8 // \"42\"",
      "stack_out": [
        "state_get%2#0",
        "\"42\""
      ]
    },
    "576": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "577": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "578": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.deleteBoxMap[routing]",
      "params": {},
      "block": "deleteBoxMap",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "581": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "582": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "583": {
      "op": "bytec_1 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"boxMap\""
      ]
    },
    "584": {
      "op": "swap",
      "stack_out": [
        "\"boxMap\"",
        "encoded_value%0#0"
      ]
    },
    "585": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "586": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "587": {
      "op": "pop",
      "stack_out": []
    },
    "588": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "589": {
      "op": "return",
      "stack_out": []
    },
    "590": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.extractBox[routing]",
      "params": {},
      "block": "extractBox",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "593": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "596": {
      "op": "txn Sender",
      "defined_out": [
        "key#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0"
      ]
    },
    "598": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "appAddress#0",
        "key#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "600": {
      "op": "dig 2",
      "defined_out": [
        "appAddress#0",
        "key#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "602": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "appAddress#0",
        "key#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "64"
      ]
    },
    "604": {
      "op": "box_create",
      "defined_out": [
        "appAddress#0",
        "key#0",
        "senderBytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "tmp%3#0"
      ]
    },
    "605": {
      "error": "box creation failed",
      "op": "assert // box creation failed",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "606": {
      "op": "dig 2",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "608": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "appAddress#0",
        "key#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "609": {
      "op": "dig 3",
      "defined_out": [
        "0",
        "appAddress#0",
        "key#0",
        "key#0 (copy)",
        "senderBytes#0",
        "senderBytes#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "senderBytes#0 (copy)"
      ]
    },
    "611": {
      "op": "box_replace",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "612": {
      "op": "dig 2",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "614": {
      "op": "intc_1 // 0",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "615": {
      "op": "dup",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "0"
      ]
    },
    "616": {
      "op": "dig 3",
      "defined_out": [
        "0",
        "appAddress#0",
        "appAddress#0 (copy)",
        "key#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "0",
        "appAddress#0 (copy)"
      ]
    },
    "618": {
      "op": "box_splice",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0"
      ]
    },
    "619": {
      "op": "dig 2",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)"
      ]
    },
    "621": {
      "op": "intc_1 // 0",
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "622": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "0",
        "32",
        "appAddress#0",
        "key#0",
        "key#0 (copy)",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "key#0 (copy)",
        "0",
        "32"
      ]
    },
    "624": {
      "op": "box_extract",
      "defined_out": [
        "appAddress#0",
        "key#0",
        "part1#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "key#0",
        "senderBytes#0",
        "appAddress#0",
        "part1#0"
      ]
    },
    "625": {
      "op": "uncover 3",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0"
      ]
    },
    "627": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0",
        "32"
      ]
    },
    "629": {
      "op": "dup",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "key#0",
        "32",
        "32"
      ]
    },
    "630": {
      "op": "box_extract",
      "defined_out": [
        "appAddress#0",
        "part1#0",
        "part2#0",
        "senderBytes#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part1#0",
        "part2#0"
      ]
    },
    "631": {
      "op": "swap",
      "stack_out": [
        "senderBytes#0",
        "appAddress#0",
        "part2#0",
        "part1#0"
      ]
    },
    "632": {
      "op": "uncover 2",
      "stack_out": [
        "senderBytes#0",
        "part2#0",
        "part1#0",
        "appAddress#0"
      ]
    },
    "634": {
      "op": "==",
      "defined_out": [
        "part2#0",
        "senderBytes#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderBytes#0",
        "part2#0",
        "tmp%6#0"
      ]
    },
    "635": {
      "error": "First part should match app address",
      "op": "assert // First part should match app address",
      "stack_out": [
        "senderBytes#0",
        "part2#0"
      ]
    },
    "636": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "637": {
      "error": "Second part should match sender bytes",
      "op": "return // on error: Second part should match sender bytes",
      "defined_out": [],
      "stack_out": []
    },
    "638": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.getBoxMapObject[routing]",
      "params": {},
      "block": "getBoxMapObject",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "641": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "642": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "643": {
      "op": "bytec 7 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "645": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "646": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "647": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "648": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "649": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0x151f7c75"
      ]
    },
    "650": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ]
    },
    "651": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "652": {
      "op": "log",
      "stack_out": []
    },
    "653": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "654": {
      "op": "return",
      "stack_out": []
    },
    "655": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapObjectExists[routing]",
      "params": {},
      "block": "boxMapObjectExists",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "658": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "659": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "660": {
      "op": "bytec 7 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "662": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "663": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "664": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "665": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "667": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "669": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "670": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "672": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "673": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "674": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "675": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "676": {
      "op": "log",
      "stack_out": []
    },
    "677": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "678": {
      "op": "return",
      "stack_out": []
    },
    "679": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.setBoxMapObject[routing]",
      "params": {},
      "block": "setBoxMapObject",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "682": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "683": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0"
      ]
    },
    "686": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "key#0"
      ]
    },
    "687": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "688": {
      "op": "bytec 7 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "692": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "693": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "694": {
      "op": "pop",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "695": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "696": {
      "op": "dig 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "698": {
      "op": "box_put",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "699": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "700": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "2"
      ]
    },
    "701": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "2",
        "8",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "2",
        "8"
      ]
    },
    "703": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "box_prefixed_key%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box%box_extract%0#0"
      ]
    },
    "704": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "values%2#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "values%2#0"
      ]
    },
    "705": {
      "op": "dig 2",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "values%2#0",
        "value#0 (copy)"
      ]
    },
    "707": {
      "op": "intc_2 // 2",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "values%2#0",
        "value#0 (copy)",
        "2"
      ]
    },
    "708": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "values%2#0",
        "values%3#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "values%2#0",
        "values%3#0"
      ]
    },
    "709": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%1#1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "tmp%1#1"
      ]
    },
    "710": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%0#0",
        "tmp%1#1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "tmp%1#1",
        "1"
      ]
    },
    "711": {
      "op": "&&",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%2#1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "tmp%2#1"
      ]
    },
    "712": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "tmp%2#1",
        "box_prefixed_key%0#0"
      ]
    },
    "713": {
      "op": "pushints 10 8 // 10, 8",
      "defined_out": [
        "10",
        "8",
        "box_prefixed_key%0#0",
        "tmp%2#1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%2#1",
        "box_prefixed_key%0#0",
        "10",
        "8"
      ]
    },
    "717": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "tmp%2#1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%2#1",
        "box%box_extract%1#0"
      ]
    },
    "718": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#1",
        "value#0",
        "values%4#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%2#1",
        "values%4#0"
      ]
    },
    "719": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#1",
        "values%4#0",
        "value#0"
      ]
    },
    "721": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%2#1",
        "values%4#0",
        "value#0",
        "10"
      ]
    },
    "723": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#1",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "values%4#0",
        "values%5#0"
      ]
    },
    "724": {
      "op": "==",
      "defined_out": [
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "725": {
      "op": "&&",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "726": {
      "error": "boxMapObject value mismatch",
      "op": "assert // boxMapObject value mismatch",
      "stack_out": []
    },
    "727": {
      "op": "pushbytes 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "734": {
      "op": "log",
      "stack_out": []
    },
    "735": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "736": {
      "op": "return",
      "stack_out": []
    },
    "737": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.boxMapObjectLength[routing]",
      "params": {},
      "block": "boxMapObjectLength",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "740": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "741": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "742": {
      "op": "bytec 7 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "744": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "745": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "746": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "747": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "748": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "749": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "750": {
      "op": "pushbytes 0x0012000000000000004600000000000004d20008746573744e616d65",
      "defined_out": [
        "0x0012000000000000004600000000000004d20008746573744e616d65",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "0x0012000000000000004600000000000004d20008746573744e616d65"
      ]
    },
    "780": {
      "op": "box_put",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "781": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "782": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "783": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "784": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "785": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "786": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "787": {
      "op": "log",
      "stack_out": []
    },
    "788": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "789": {
      "op": "return",
      "stack_out": []
    },
    "790": {
      "subroutine": "contracts/BoxStorage/contract.algo.ts::BoxStorage.arc4Box[routing]",
      "params": {},
      "block": "arc4Box",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "793": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "796": {
      "op": "bytec_3 // 0x00010203",
      "defined_out": [
        "0x00010203",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "0x00010203"
      ]
    },
    "797": {
      "op": "box_put",
      "stack_out": []
    },
    "798": {
      "op": "bytec_3 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "799": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00010203"
      ],
      "stack_out": [
        "0x00010203",
        "0"
      ]
    },
    "800": {
      "op": "getbyte",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "801": {
      "op": "!",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "802": {
      "op": "assert",
      "stack_out": []
    },
    "803": {
      "op": "bytec_3 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "804": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0x00010203",
        "1"
      ],
      "stack_out": [
        "0x00010203",
        "1"
      ]
    },
    "805": {
      "op": "getbyte",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "806": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%2#1",
        "1"
      ]
    },
    "807": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "808": {
      "op": "assert",
      "stack_out": []
    },
    "809": {
      "op": "bytec_3 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "810": {
      "op": "intc_2 // 2",
      "defined_out": [
        "0x00010203",
        "2"
      ],
      "stack_out": [
        "0x00010203",
        "2"
      ]
    },
    "811": {
      "op": "getbyte",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "812": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%4#0",
        "2"
      ]
    },
    "813": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "814": {
      "op": "assert",
      "stack_out": []
    },
    "815": {
      "op": "bytec_3 // 0x00010203",
      "stack_out": [
        "0x00010203"
      ]
    },
    "816": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0x00010203",
        "3"
      ],
      "stack_out": [
        "0x00010203",
        "3"
      ]
    },
    "818": {
      "op": "getbyte",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "819": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "tmp%6#0",
        "3"
      ]
    },
    "821": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "822": {
      "op": "assert",
      "stack_out": []
    },
    "823": {
      "op": "pushbytes 0x151f7c7500010203",
      "defined_out": [
        "0x151f7c7500010203"
      ],
      "stack_out": [
        "0x151f7c7500010203"
      ]
    },
    "833": {
      "op": "log",
      "stack_out": []
    },
    "834": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "835": {
      "op": "return",
      "stack_out": []
    }
  }
}