{
    "name": "BoxStorage",
    "structs": {
        "UserStruct": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getBox",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The uint64 value stored in boxInt"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxInt box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxMap",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key of the boxMap to retrieve the value from"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "The value stored in the boxMap box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxMapWithDefault",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key of the boxMap to retrieve the value from"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "The value stored in the boxMap box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxMap box with a default value if the key does not exist",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxRef",
            "args": [],
            "returns": {
                "type": "address",
                "desc": "The value stored in the boxRef box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves the value stored in the boxRef box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxMapStruct",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to retrieve the value from"
                }
            ],
            "returns": {
                "type": "(string,uint64,uint64)",
                "struct": "UserStruct",
                "desc": "The value stored in the boxMapStruct box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxMapStruct box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybeBox",
            "args": [],
            "returns": {
                "type": "(uint64,bool)",
                "desc": "A tuple containing the value and a boolean indicating if the box exists"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxInt box and checks if it exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybeBoxMap",
            "args": [],
            "returns": {
                "type": "(string,bool)",
                "desc": "A tuple containing the value and a boolean indicating if the box exists"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxMap box and checks if it exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybeBoxRef",
            "args": [
                {
                    "type": "string",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(byte[],bool)",
                "desc": "A tuple containing the value and a boolean indicating if the box exists"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves the value stored in the boxRef box and checks if it exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBox",
            "args": [
                {
                    "type": "uint64",
                    "name": "valueInt",
                    "desc": "The uint64 value to set in the boxInt box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxInt box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxMap",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to set the value for"
                },
                {
                    "type": "string",
                    "name": "value",
                    "desc": "The value to set in the boxMap box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxMapStruct",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to set the value for"
                },
                {
                    "type": "(string,uint64,uint64)",
                    "struct": "UserStruct",
                    "name": "value",
                    "desc": "The value to set in the boxMapStruct box"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxMapStruct box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteBox",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes the value of the boxInt box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteBoxMap",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to delete the value from"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes the value of the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteBoxRef",
            "args": [
                {
                    "type": "string",
                    "name": "key",
                    "desc": "The key to delete the value from"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes the value of the boxRef box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapLength",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The length of the boxMap box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the length of the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "lengthBoxRef",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The length of the boxRef box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves the length of the boxRef box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapStructLength",
            "args": [],
            "returns": {
                "type": "bool",
                "desc": "The length of the boxMapStruct box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves the length of the boxMapStruct box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "extractBoxRef",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Extracts a value from the boxRef box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "valueBox",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value of the boxInt box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Box",
            "args": [],
            "returns": {
                "type": "uint8[4]",
                "desc": "The static array stored in the box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates and manipulates a box containing a static array of 8-bit unsigned integers",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to check for"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "true if the box exists, false otherwise"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Checks if the boxMap box exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapStructExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to check for"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "true if the box exists, false otherwise"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Checks if the boxMapStruct box exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keyPrefixBoxMap",
            "args": [],
            "returns": {
                "type": "byte[]",
                "desc": "The key prefix of the boxMap box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the key prefix of the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxDynamicBytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value",
                    "desc": "The dynamic bytes value to set in the boxDynamicBytes box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxDynamicBytes box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxString",
            "args": [
                {
                    "type": "string",
                    "name": "value",
                    "desc": "The string value to set in the boxString box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxString box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxRef",
            "args": [
                {
                    "type": "string",
                    "name": "key",
                    "desc": "The key to use for the box ref"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates a box ref with the given key and sets its value to the sender's address",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "BoxStorage Contract\n\nThis contract demonstrates various box storage operations in Algorand smart contracts.\nIt shows how to:\n- Create and manage different types of boxes (int, bytes, dynamic bytes, string)\n- Use BoxMap for key-value storage\n- Work with BoxRef for direct box manipulation\n- Perform operations like get, set, delete, and length calculations\n- Handle complex data structures in boxes\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/box_storage/contract.py",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "boxInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym94SW50"
                },
                "boxBytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94Qnl0ZXM="
                },
                "boxDynamicBytes": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Ym94RHluYW1pY0J5dGVz"
                },
                "boxString": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Ym94U3RyaW5n"
                },
                "boxMap": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Ym94TWFw"
                },
                "boxRef": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94UmVm"
                },
                "boxMapStruct": {
                    "keyType": "AVMString",
                    "valueType": "UserStruct",
                    "key": "dXNlcnM="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        886,
                        899,
                        965,
                        1070,
                        1097,
                        1113,
                        1254,
                        1265,
                        1310,
                        1319,
                        1378,
                        1395,
                        1405,
                        1416,
                        1428,
                        1440
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1366
                    ],
                    "errorMessage": "First part should match app address"
                },
                {
                    "pc": [
                        1098,
                        1103,
                        1114,
                        1119,
                        1396,
                        1406,
                        1417,
                        1429
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        320,
                        338,
                        356,
                        371,
                        395,
                        420,
                        445,
                        461,
                        478,
                        490,
                        511,
                        528,
                        545,
                        563,
                        579,
                        591,
                        619,
                        641,
                        657,
                        700,
                        737,
                        761,
                        781,
                        797,
                        825,
                        853
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1368
                    ],
                    "errorMessage": "Second part should match sender bytes"
                },
                {
                    "pc": [
                        1232
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        1315
                    ],
                    "errorMessage": "boxMapStruct bytes length mismatch"
                },
                {
                    "pc": [
                        1323
                    ],
                    "errorMessage": "boxMapStruct length mismatch"
                },
                {
                    "pc": [
                        1127
                    ],
                    "errorMessage": "boxMapStruct value mismatch"
                },
                {
                    "pc": [
                        1262,
                        1342
                    ],
                    "errorMessage": "boxRef creation failed"
                },
                {
                    "pc": [
                        952
                    ],
                    "errorMessage": "boxRef value mismatch"
                },
                {
                    "pc": [
                        875
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        323,
                        341,
                        359,
                        374,
                        398,
                        423,
                        448,
                        464,
                        481,
                        493,
                        514,
                        531,
                        548,
                        566,
                        582,
                        594,
                        622,
                        644,
                        660,
                        703,
                        740,
                        764,
                        784,
                        800,
                        828,
                        856
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAgKiYOBBUffHUBAARibG9iBmJveEludAtzdGF0aWNfaW50cwZib3hNYXAPYm94RHluYW1pY0J5dGVzCWJveFN0cmluZw11c2VycwAAAAAAAAAABmJveFJlZgV1c2VycwI0MgIAAw5ib3hNYXAAAAAAAAAAADEbQQLlghoEt0kTRAQmymSKBCjMcTkEA+jHfgRTwoggBGqz6bwE+xx09gSMIr/VBPoVYvcEnhH9egTV3ZIsBJEBp94EpFUutQQ4rPU+BFoe774Eaa9NagRLa408BI4HhnYESc9BBQSnStx0BNgp0qME8YMgegSx9am2BPT5y60ExJe8bwRebOrANhoAjhoCFwH7Ad8BzwG7AaMBfgFTAUMBLQERAQUA9QDjANIAwQCsAKAAjwB/AGYATQA1ACYAFAACI0MxGRREMRhENhoBVwIAiASLIkMxGRREMRhENhoBVwIAiARsIkMxGRREMRhENhoBiARQIkMxGRREMRhEgAwVH3x1AAZib3hNYXCwIkMxGRREMRhENhoBF4gEGikjTwJUKExQsCJDMRkURDEYRDYaAReIA/MpI08CVChMULAiQzEZFEQxGESIA6AoTFCwIkMxGRREMRhEiAOGFihMULAiQzEZFEQxGESIA0kiQzEZFEQxGESIAwIpI08CVChMULAiQzEZFEQxGESIAuIWKExQsCJDMRkURDEYRIgCvxYoTFCwIkMxGRREMRhENhoBVwIAiAKIIkMxGRREMRhENhoBF4gCayJDMRkURDEYRIgCJSJDMRkURDEYRDYaARc2GgKIAb4pI08CVChMULAiQzEZFEQxGEQ2GgEXNhoCVwIAiAGOIkMxGRREMRhENhoBF4gBdCJDMRkURDEYRDYaAVcCAIgBW0sBFRZXBgJPAlApI08DVCcMTFBMUChMULAiQzEZFEQxGESIAQ1LARUWVwYCTwJQKSNPA1QnDExQTFAoTFCwIkMxGRREMRhEiADfTBYpI08DVFAoTFCwIkMxGRREMRhENhoBF4gAtihMULAiQzEZFEQxGESIAIkoTFCwIkMxGRREMRhENhoBF4gAXUkVFlcGAkxQKExQsCJDMRkURDEYRDYaAReIADRJFRZXBgJMUChMULAiQzEZFEQxGESIABIWKExQsCJDMRlA/dMxGBREIkOKAAErvkwXTESJigEBi/8WJwVMUL5EiYoBAYv/FicFTFC+gAdkZWZhdWx0TgJNiYoAAScJJLlIMQAnCUsBvycJvksCTgJNSU8CEkSJigEBi/8WJwpMUL5EiYoAAiu+TBdMiYoAAoAOYm94TWFwAAAAAAAAAAG+SU8CTEEACYsBiwBPA08DiYAAQv/0igECi/++iYoBAIv/FitMv4mKAgCL/hYnBUxQSbxIi/+/iYoCAYv+FicKTFBHArxISYv/v75ESSNZSwEVUov/I1mL/xWL/04CUhJBACWLAL5EVwIIi/9XAggSQQAViwC+RFcKCIv/VwoIEkEABSJEIkyJI0L/+IoAACu8SCcGvEgnB7xIK75MFyVMTwJNJRJEJwa+gAQAAjQyTgJNVwIAJwsSRCcHvicLTgJNJwsSRImKAQCL/xYnBUxQvEiJigEAi/+8SIv/vkiAABJBAAuL/75FAUAAAyJEiSNC//qKAAEnDb1FAUAAAiOJJw29RImKAAEqJLlEKr1EiYoAAScIvEgnCIAcABIAAAAAAAAARgAAAAAAAATSAAh0ZXN0TmFtZb8nCL5EFYEcEkQnCL1EgRwSRCKJigAAMQAyCkkVSwIVCCpMuUQqI0sDuyojSUsD0iojJLoqJEm6TE8CEkQSRImKAAErvkwXTESJigABJwSABAABAgO/JwS+RFcAARcURCcEvkRXAQEXIhJEJwS+RFcCAReBAhJEJwS+RFcDAReBAxJEJwS+RImKAQGL/xYnBUxQvUUBiYoBAYv/FicKTFC9RQGJigEAJwa8SCcGi/+/iYoBACcHvEgnB4v/v4mKAQCL/yS5SIv/MQC/iQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}