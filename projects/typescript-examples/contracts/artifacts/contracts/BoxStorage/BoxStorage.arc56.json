{
    "name": "BoxStorage",
    "structs": {
        "User": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getBox",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The uint64 value stored in boxInt"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxInt box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "valueBox",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value of the boxInt box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybeBox",
            "args": [],
            "returns": {
                "type": "(uint64,bool)",
                "desc": "A tuple containing the value and a boolean indicating if the box exists"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxInt box and checks if it exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxMap",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key of the boxMap to retrieve the value from"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "The value stored in the boxMap box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxMapWithDefault",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key of the boxMap to retrieve the value from"
                }
            ],
            "returns": {
                "type": "string",
                "desc": "The value stored in the boxMap box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxMap box with a default value if the key does not exist",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybeBoxMap",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to check in the boxMap"
                }
            ],
            "returns": {
                "type": "(string,bool)",
                "desc": "A tuple containing the value and a boolean indicating if the box exists"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxMap box and checks if it exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "keyPrefixBoxMap",
            "args": [],
            "returns": {
                "type": "byte[]",
                "desc": "The key prefix of the boxMap box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the key prefix of the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to check for"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "true if the box exists, false otherwise"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Checks if the boxMap box exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBox",
            "args": [
                {
                    "type": "uint64",
                    "name": "valueInt",
                    "desc": "The uint64 value to set in the boxInt box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxInt box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxString",
            "args": [
                {
                    "type": "string",
                    "name": "value",
                    "desc": "The string value to set in the boxString box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxString box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxDynamicBytes",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value",
                    "desc": "The dynamic bytes value to set in the boxDynamicBytes box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxDynamicBytes box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxMap",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to set the value for"
                },
                {
                    "type": "string",
                    "name": "value",
                    "desc": "The value to set in the boxMap box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapLength",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to get the length for"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The length of the boxMap box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the length of the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteBox",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes the value of the boxInt box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteBoxMap",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to delete the value from"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes the value of the boxMap box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "extractBox",
            "args": [
                {
                    "type": "string",
                    "name": "key",
                    "desc": "The key to extract from"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Extracts a value from the boxRef box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getBoxMapObject",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to retrieve the value from"
                }
            ],
            "returns": {
                "type": "(string,uint64,uint64)",
                "struct": "User",
                "desc": "The value stored in the boxMapObject box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Retrieves the value stored in the boxMapObject box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapObjectExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to check for"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "true if the box exists, false otherwise"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Checks if the boxMapObject box exists",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setBoxMapObject",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to set the value for"
                },
                {
                    "type": "(string,uint64,uint64)",
                    "struct": "User",
                    "name": "value",
                    "desc": "The value to set in the boxMapObject box"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets the value of the boxMapObject box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapObjectLength",
            "args": [
                {
                    "type": "uint64",
                    "name": "key",
                    "desc": "The key to get the length for"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The length of the boxMapObject box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves the length of the boxMapObject box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4Box",
            "args": [
                {
                    "type": "string",
                    "name": "key",
                    "desc": "The key for the static array box"
                }
            ],
            "returns": {
                "type": "uint8[4]",
                "desc": "The static array stored in the box"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates and manipulates a box containing a fixed array of 8-bit unsigned integers",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "BoxStorage Contract\n\nThis contract demonstrates various box storage operations in Algorand smart contracts.\nIt shows how to:\n- Create and manage different types of boxes (int, bytes, dynamic bytes, string)\n- Use BoxMap for key-value storage\n- Work with BoxRef for direct box manipulation\n- Perform operations like get, set, delete, and length calculations\n- Handle complex data structures in boxes\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/box_storage/contract.py",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "boxString": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Ym94U3RyaW5n"
                },
                "boxInt": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Ym94SW50"
                },
                "boxBytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94Qnl0ZXM="
                },
                "boxDynamicBytes": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Ym94RHluYW1pY0J5dGVz"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": "Ym94TWFw"
                },
                "boxMapObject": {
                    "keyType": "uint64",
                    "valueType": "User",
                    "prefix": "dXNlcnM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        264,
                        275,
                        311,
                        520,
                        648
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        635
                    ],
                    "errorMessage": "First part should match app address"
                },
                {
                    "pc": [
                        78
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        637
                    ],
                    "errorMessage": "Second part should match sender bytes"
                },
                {
                    "pc": [
                        605
                    ],
                    "errorMessage": "box creation failed"
                },
                {
                    "pc": [
                        726
                    ],
                    "errorMessage": "boxMapObject value mismatch"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQACKiYJBBUffHUGYm94TWFwBmJveEludAQAAQIDAQAJYm94U3RyaW5nD2JveER5bmFtaWNCeXRlcwV1c2VycwI0MjEbQQCzMRkURDEYRIIVBLdJE0QESc9BBQRqs+m8BCbKZIoEKMxxOQRkSjmUBLH1qbYE2CnSowT6FWL3BMSXvG8E9PnLrQSeEf16BPU0GMQEkQGn3gSkVS61BMsx+jMEeZaJ1QQVbvKNBLLTn+oECkA2zQRUfwp0NhoAjhUAGgAlADAAQgBaAH0AAQCvAMYA0ADgAO0BAwEgAVYBYgGSAaMBuwH1AioAgAwVH3x1AAZib3hNYXCwIkMxGRQxGBQQQyq+RBcWKExQsCJDKr5EFxYoTFCwIkMqvkwXFicEI08DVFAoTFCwIkM2GgEXFilMUL5ESRUWVwYCTFAoTFCwIkM2GgEXFilMUL6AB2RlZmF1bHROAk1JFRZXBgJMUChMULAiQzYaARcWKUxQvklPAkxBAB1JSRUWVwYCTFAnBCNLBFSAAgADTFBMUChMULAiQ4AAQv/fNhoBFxYpTFC9RQEnBCNPAlQoTFCwIkM2GgEXFipMvyJDNhoBVwIAJwW8SCcFTL8iQzYaAScGvEgnBky/IkM2GgEXNhoCVwIATBYpTFBJvEhMvyJDNhoBFxYpTFBJvUUBQAAIIxYoTFCwIkNJvURC//MqvEgnBrxIJwW8SCq+TBclTE8CTSUSRCcGvoAEAAI0Mk4CTVcCACcIEkQnBb4nCE4CTScIEkM2GgEXFilMULxIIkM2GgFXAgAxADIKSwKBQLlESwIjSwO7SwIjSUsD0ksCI4Eguk8DgSBJukxPAhJEEkM2GgEXFicHTFC+RChMULAiQzYaARcWJwdMUL1FAScEI08CVChMULAiQzYaARc2GgJMFicHTFBJvEhJSwK/SSSBCLoXSwIkWxIiEEyDAgoIuhdPAoEKWxIQRIAFFR98dYCwIkM2GgEXFicHTFBJvEhJgBwAEgAAAAAAAABGAAAAAAAABNIACHRlc3ROYW1lv71IFihMULAiQzYaAVcCACu/KyNVFEQrIlUiEkQrJFUkEkQrgQNVgQMSRIAIFR98dQABAgOwIkM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}