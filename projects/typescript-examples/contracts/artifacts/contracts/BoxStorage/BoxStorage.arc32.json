{
    "hints": {
        "getBox()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBoxMap(uint64)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBoxMapWithDefault(uint64)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBoxRef()address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getBoxMapStruct(uint64)(string,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "UserStruct",
                    "elements": [
                        [
                            "name",
                            "string"
                        ],
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "asset",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "maybeBox()(uint64,bool)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "maybeBoxMap(uint64)(string,bool)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "maybeBoxRef(string)(byte[],bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setBox(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setBoxMap(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setBoxMapStruct(uint64,(string,uint64,uint64))bool": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "value": {
                    "name": "UserStruct",
                    "elements": [
                        [
                            "name",
                            "string"
                        ],
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "asset",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "deleteBox()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteBoxMap(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteBoxRef(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxMapLength(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "lengthBoxRef(string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxMapStructLength(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "extractBoxRef(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "valueBox()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4Box(string)uint8[4]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxMapExists(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxMapStructExists(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keyPrefixBoxMap()byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setBoxDynamicBytes(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setBoxString(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setBoxRef(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BoxStorage",
        "desc": "BoxStorage Contract\n\nThis contract demonstrates various box storage operations in Algorand smart contracts.\nIt shows how to:\n- Create and manage different types of boxes (int, bytes, dynamic bytes, string)\n- Use BoxMap for key-value storage\n- Work with BoxRef for direct box manipulation\n- Perform operations like get, set, delete, and length calculations\n- Handle complex data structures in boxes\n\nThe contract implements the same functionality as its Python counterpart\nin python-examples/smart_contracts/box_storage/contract.py",
        "methods": [
            {
                "name": "getBox",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The uint64 value stored in boxInt"
                },
                "desc": "Retrieves the value stored in the boxInt box"
            },
            {
                "name": "getBoxMap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key of the boxMap to retrieve the value from"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string",
                    "desc": "The value stored in the boxMap box"
                },
                "desc": "Retrieves the value stored in the boxMap box"
            },
            {
                "name": "getBoxMapWithDefault",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key of the boxMap to retrieve the value from"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string",
                    "desc": "The value stored in the boxMap box"
                },
                "desc": "Retrieves the value stored in the boxMap box with a default value if the key does not exist"
            },
            {
                "name": "getBoxRef",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "address",
                    "desc": "The value stored in the boxRef box"
                },
                "desc": "Retrieves the value stored in the boxRef box"
            },
            {
                "name": "getBoxMapStruct",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to retrieve the value from"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(string,uint64,uint64)",
                    "desc": "The value stored in the boxMapStruct box"
                },
                "desc": "Retrieves the value stored in the boxMapStruct box"
            },
            {
                "name": "maybeBox",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,bool)",
                    "desc": "A tuple containing the value and a boolean indicating if the box exists"
                },
                "desc": "Retrieves the value stored in the boxInt box and checks if it exists"
            },
            {
                "name": "maybeBoxMap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to check in the boxMap"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(string,bool)",
                    "desc": "A tuple containing the value and a boolean indicating if the box exists"
                },
                "desc": "Retrieves the value stored in the boxMap box and checks if it exists"
            },
            {
                "name": "maybeBoxRef",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],bool)",
                    "desc": "A tuple containing the value and a boolean indicating if the box exists"
                },
                "desc": "Retrieves the value stored in the boxRef box and checks if it exists"
            },
            {
                "name": "setBox",
                "args": [
                    {
                        "type": "uint64",
                        "name": "valueInt",
                        "desc": "The uint64 value to set in the boxInt box"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the value of the boxInt box"
            },
            {
                "name": "setBoxMap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to set the value for"
                    },
                    {
                        "type": "string",
                        "name": "value",
                        "desc": "The value to set in the boxMap box"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the value of the boxMap box"
            },
            {
                "name": "setBoxMapStruct",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to set the value for"
                    },
                    {
                        "type": "(string,uint64,uint64)",
                        "name": "value",
                        "desc": "The value to set in the boxMapStruct box"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Sets the value of the boxMapStruct box"
            },
            {
                "name": "deleteBox",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deletes the value of the boxInt box"
            },
            {
                "name": "deleteBoxMap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to delete the value from"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deletes the value of the boxMap box"
            },
            {
                "name": "deleteBoxRef",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "The key to delete the value from"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deletes the value of the boxRef box"
            },
            {
                "name": "boxMapLength",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to get the length for"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The length of the boxMap box"
                },
                "desc": "Retrieves the length of the boxMap box"
            },
            {
                "name": "lengthBoxRef",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "The key to get the length for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The length of the boxRef box"
                },
                "desc": "Retrieves the length of the boxRef box"
            },
            {
                "name": "boxMapStructLength",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to get the length for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "The length of the boxMapStruct box"
                },
                "desc": "Retrieves the length of the boxMapStruct box"
            },
            {
                "name": "extractBoxRef",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "The key to extract from"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Extracts a value from the boxRef box"
            },
            {
                "name": "valueBox",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Retrieves the value of the boxInt box"
            },
            {
                "name": "arc4Box",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "The key for the static array box"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint8[4]",
                    "desc": "The static array stored in the box"
                },
                "desc": "Creates and manipulates a box containing a static array of 8-bit unsigned integers"
            },
            {
                "name": "boxMapExists",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to check for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "true if the box exists, false otherwise"
                },
                "desc": "Checks if the boxMap box exists"
            },
            {
                "name": "boxMapStructExists",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key",
                        "desc": "The key to check for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool",
                    "desc": "true if the box exists, false otherwise"
                },
                "desc": "Checks if the boxMapStruct box exists"
            },
            {
                "name": "keyPrefixBoxMap",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[]",
                    "desc": "The key prefix of the boxMap box"
                },
                "desc": "Retrieves the key prefix of the boxMap box"
            },
            {
                "name": "setBoxDynamicBytes",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "value",
                        "desc": "The dynamic bytes value to set in the boxDynamicBytes box"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the value of the boxDynamicBytes box"
            },
            {
                "name": "setBoxString",
                "args": [
                    {
                        "type": "string",
                        "name": "value",
                        "desc": "The string value to set in the boxString box"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the value of the boxString box"
            },
            {
                "name": "setBoxRef",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "The key to use for the box ref"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Creates a box ref with the given key and sets its value to the sender's address"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}