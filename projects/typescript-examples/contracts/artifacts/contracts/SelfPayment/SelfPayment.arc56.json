{
    "name": "SelfPayment",
    "structs": {},
    "methods": [
        {
            "name": "selfPayment",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "SelfPayment Contract\n\nThis contract implements a delegated logic signature that authorizes\na single empty self payment in a block known ahead of time.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        23
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        56
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        26
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIFRNUExfTEFTVF9ST1VORAogICAgYnl0ZWNibG9jayBUTVBMX1RBUkdFVF9ORVRXT1JLX0dFTkVTSVMKICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxmUGF5bWVudCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A2CiAgICBwdXNoYnl0ZXMgMHgxZjg5YWM1MCAvLyBtZXRob2QgInNlbGZQYXltZW50KClib29sIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9zZWxmUGF5bWVudF9yb3V0ZUAzCgptYWluX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBjb250cmFjdHMvU2VsZlBheW1lbnQvY29udHJhY3QuYWxnby50czoyMAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZlBheW1lbnQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX3NlbGZQYXltZW50X3JvdXRlQDM6CiAgICAvLyBjb250cmFjdHMvU2VsZlBheW1lbnQvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgc2VsZlBheW1lbnQKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzEgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANjoKICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWxmUGF5bWVudCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTAKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6OlNlbGZQYXltZW50LnNlbGZQYXltZW50KCkgLT4gdWludDY0OgpzZWxmUGF5bWVudDoKICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBUeG4udHlwZUVudW0gPT09IFRyYW5zYWN0aW9uVHlwZS5QYXltZW50ICYmCiAgICB0eG4gVHlwZUVudW0KICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MjUtMjYKICAgIC8vIFR4bi50eXBlRW51bSA9PT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQgJiYKICAgIC8vIFR4bi5yZWNlaXZlciA9PT0gVHhuLnNlbmRlciAmJgogICAgYnogc2VsZlBheW1lbnRfYm9vbF9mYWxzZUAxMAogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIFR4bi5yZWNlaXZlciA9PT0gVHhuLnNlbmRlciAmJgogICAgdHhuIFJlY2VpdmVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MjUtMjYKICAgIC8vIFR4bi50eXBlRW51bSA9PT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQgJiYKICAgIC8vIFR4bi5yZWNlaXZlciA9PT0gVHhuLnNlbmRlciAmJgogICAgYnogc2VsZlBheW1lbnRfYm9vbF9mYWxzZUAxMAogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIFR4bi5hbW91bnQgPT09IDAgJiYKICAgIHR4biBBbW91bnQKICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjI1LTI3CiAgICAvLyBUeG4udHlwZUVudW0gPT09IFRyYW5zYWN0aW9uVHlwZS5QYXltZW50ICYmCiAgICAvLyBUeG4ucmVjZWl2ZXIgPT09IFR4bi5zZW5kZXIgJiYKICAgIC8vIFR4bi5hbW91bnQgPT09IDAgJiYKICAgIGJueiBzZWxmUGF5bWVudF9ib29sX2ZhbHNlQDEwCiAgICAvLyBjb250cmFjdHMvU2VsZlBheW1lbnQvY29udHJhY3QuYWxnby50czoyOAogICAgLy8gVHhuLnJla2V5VG8gPT09IEdsb2JhbC56ZXJvQWRkcmVzcyAmJgogICAgdHhuIFJla2V5VG8KICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjI1LTI4CiAgICAvLyBUeG4udHlwZUVudW0gPT09IFRyYW5zYWN0aW9uVHlwZS5QYXltZW50ICYmCiAgICAvLyBUeG4ucmVjZWl2ZXIgPT09IFR4bi5zZW5kZXIgJiYKICAgIC8vIFR4bi5hbW91bnQgPT09IDAgJiYKICAgIC8vIFR4bi5yZWtleVRvID09PSBHbG9iYWwuemVyb0FkZHJlc3MgJiYKICAgIGJ6IHNlbGZQYXltZW50X2Jvb2xfZmFsc2VAMTAKICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBUeG4uY2xvc2VSZW1haW5kZXJUbyA9PT0gR2xvYmFsLnplcm9BZGRyZXNzICYmCiAgICB0eG4gQ2xvc2VSZW1haW5kZXJUbwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MjUtMjkKICAgIC8vIFR4bi50eXBlRW51bSA9PT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQgJiYKICAgIC8vIFR4bi5yZWNlaXZlciA9PT0gVHhuLnNlbmRlciAmJgogICAgLy8gVHhuLmFtb3VudCA9PT0gMCAmJgogICAgLy8gVHhuLnJla2V5VG8gPT09IEdsb2JhbC56ZXJvQWRkcmVzcyAmJgogICAgLy8gVHhuLmNsb3NlUmVtYWluZGVyVG8gPT09IEdsb2JhbC56ZXJvQWRkcmVzcyAmJgogICAgYnogc2VsZlBheW1lbnRfYm9vbF9mYWxzZUAxMAogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MzAKICAgIC8vIFR4bi5mZWUgPT09IEdsb2JhbC5taW5UeG5GZWUgJiYKICAgIHR4biBGZWUKICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgID09CiAgICAvLyBjb250cmFjdHMvU2VsZlBheW1lbnQvY29udHJhY3QuYWxnby50czoyNS0zMAogICAgLy8gVHhuLnR5cGVFbnVtID09PSBUcmFuc2FjdGlvblR5cGUuUGF5bWVudCAmJgogICAgLy8gVHhuLnJlY2VpdmVyID09PSBUeG4uc2VuZGVyICYmCiAgICAvLyBUeG4uYW1vdW50ID09PSAwICYmCiAgICAvLyBUeG4ucmVrZXlUbyA9PT0gR2xvYmFsLnplcm9BZGRyZXNzICYmCiAgICAvLyBUeG4uY2xvc2VSZW1haW5kZXJUbyA9PT0gR2xvYmFsLnplcm9BZGRyZXNzICYmCiAgICAvLyBUeG4uZmVlID09PSBHbG9iYWwubWluVHhuRmVlICYmCiAgICBieiBzZWxmUGF5bWVudF9ib29sX2ZhbHNlQDEwCiAgICAvLyBjb250cmFjdHMvU2VsZlBheW1lbnQvY29udHJhY3QuYWxnby50czozMQogICAgLy8gR2xvYmFsLmdlbmVzaXNIYXNoID09PSBUZW1wbGF0ZVZhcjxieXRlcz4oJ1RBUkdFVF9ORVRXT1JLX0dFTkVTSVMnKSAmJgogICAgZ2xvYmFsIEdlbmVzaXNIYXNoCiAgICBieXRlY18wIC8vIFRNUExfVEFSR0VUX05FVFdPUktfR0VORVNJUwogICAgPT0KICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjI1LTMxCiAgICAvLyBUeG4udHlwZUVudW0gPT09IFRyYW5zYWN0aW9uVHlwZS5QYXltZW50ICYmCiAgICAvLyBUeG4ucmVjZWl2ZXIgPT09IFR4bi5zZW5kZXIgJiYKICAgIC8vIFR4bi5hbW91bnQgPT09IDAgJiYKICAgIC8vIFR4bi5yZWtleVRvID09PSBHbG9iYWwuemVyb0FkZHJlc3MgJiYKICAgIC8vIFR4bi5jbG9zZVJlbWFpbmRlclRvID09PSBHbG9iYWwuemVyb0FkZHJlc3MgJiYKICAgIC8vIFR4bi5mZWUgPT09IEdsb2JhbC5taW5UeG5GZWUgJiYKICAgIC8vIEdsb2JhbC5nZW5lc2lzSGFzaCA9PT0gVGVtcGxhdGVWYXI8Ynl0ZXM+KCdUQVJHRVRfTkVUV09SS19HRU5FU0lTJykgJiYKICAgIGJ6IHNlbGZQYXltZW50X2Jvb2xfZmFsc2VAMTAKICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBUeG4ubGFzdFZhbGlkID09PSBUZW1wbGF0ZVZhcjx1aW50NjQ+KCdMQVNUX1JPVU5EJykgJiYKICAgIHR4biBMYXN0VmFsaWQKICAgIGludGNfMiAvLyBUTVBMX0xBU1RfUk9VTkQKICAgID09CiAgICAvLyBjb250cmFjdHMvU2VsZlBheW1lbnQvY29udHJhY3QuYWxnby50czoyNS0zMwogICAgLy8gVHhuLnR5cGVFbnVtID09PSBUcmFuc2FjdGlvblR5cGUuUGF5bWVudCAmJgogICAgLy8gVHhuLnJlY2VpdmVyID09PSBUeG4uc2VuZGVyICYmCiAgICAvLyBUeG4uYW1vdW50ID09PSAwICYmCiAgICAvLyBUeG4ucmVrZXlUbyA9PT0gR2xvYmFsLnplcm9BZGRyZXNzICYmCiAgICAvLyBUeG4uY2xvc2VSZW1haW5kZXJUbyA9PT0gR2xvYmFsLnplcm9BZGRyZXNzICYmCiAgICAvLyBUeG4uZmVlID09PSBHbG9iYWwubWluVHhuRmVlICYmCiAgICAvLyBHbG9iYWwuZ2VuZXNpc0hhc2ggPT09IFRlbXBsYXRlVmFyPGJ5dGVzPignVEFSR0VUX05FVFdPUktfR0VORVNJUycpICYmCiAgICAvLyAvLyBBY3F1aXJpbmcgYSBsZWFzZSB3aXRoIGxhc3Rfcm91bmQgYW5kIGEgbm9uLWVtcHR5IGxlYXNlIGZpZWxkIHByZXZlbnRzIHJlcGxheSBhdHRhY2tzCiAgICAvLyBUeG4ubGFzdFZhbGlkID09PSBUZW1wbGF0ZVZhcjx1aW50NjQ+KCdMQVNUX1JPVU5EJykgJiYKICAgIGJ6IHNlbGZQYXltZW50X2Jvb2xfZmFsc2VAMTAKICAgIC8vIGNvbnRyYWN0cy9TZWxmUGF5bWVudC9jb250cmFjdC5hbGdvLnRzOjM0CiAgICAvLyBUeG4ubGVhc2UgPT09IG9wLnNoYTI1NihCeXRlcygnc2VsZi1wYXltZW50JykpCiAgICB0eG4gTGVhc2UKICAgIHB1c2hieXRlcyAic2VsZi1wYXltZW50IgogICAgc2hhMjU2CiAgICA9PQogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MjUtMzQKICAgIC8vIFR4bi50eXBlRW51bSA9PT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQgJiYKICAgIC8vIFR4bi5yZWNlaXZlciA9PT0gVHhuLnNlbmRlciAmJgogICAgLy8gVHhuLmFtb3VudCA9PT0gMCAmJgogICAgLy8gVHhuLnJla2V5VG8gPT09IEdsb2JhbC56ZXJvQWRkcmVzcyAmJgogICAgLy8gVHhuLmNsb3NlUmVtYWluZGVyVG8gPT09IEdsb2JhbC56ZXJvQWRkcmVzcyAmJgogICAgLy8gVHhuLmZlZSA9PT0gR2xvYmFsLm1pblR4bkZlZSAmJgogICAgLy8gR2xvYmFsLmdlbmVzaXNIYXNoID09PSBUZW1wbGF0ZVZhcjxieXRlcz4oJ1RBUkdFVF9ORVRXT1JLX0dFTkVTSVMnKSAmJgogICAgLy8gLy8gQWNxdWlyaW5nIGEgbGVhc2Ugd2l0aCBsYXN0X3JvdW5kIGFuZCBhIG5vbi1lbXB0eSBsZWFzZSBmaWVsZCBwcmV2ZW50cyByZXBsYXkgYXR0YWNrcwogICAgLy8gVHhuLmxhc3RWYWxpZCA9PT0gVGVtcGxhdGVWYXI8dWludDY0PignTEFTVF9ST1VORCcpICYmCiAgICAvLyBUeG4ubGVhc2UgPT09IG9wLnNoYTI1NihCeXRlcygnc2VsZi1wYXltZW50JykpCiAgICBieiBzZWxmUGF5bWVudF9ib29sX2ZhbHNlQDEwCiAgICBpbnRjXzAgLy8gMQogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MjQtMzUKICAgIC8vIHJldHVybiAoCiAgICAvLyAgIFR4bi50eXBlRW51bSA9PT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQgJiYKICAgIC8vICAgVHhuLnJlY2VpdmVyID09PSBUeG4uc2VuZGVyICYmCiAgICAvLyAgIFR4bi5hbW91bnQgPT09IDAgJiYKICAgIC8vICAgVHhuLnJla2V5VG8gPT09IEdsb2JhbC56ZXJvQWRkcmVzcyAmJgogICAgLy8gICBUeG4uY2xvc2VSZW1haW5kZXJUbyA9PT0gR2xvYmFsLnplcm9BZGRyZXNzICYmCiAgICAvLyAgIFR4bi5mZWUgPT09IEdsb2JhbC5taW5UeG5GZWUgJiYKICAgIC8vICAgR2xvYmFsLmdlbmVzaXNIYXNoID09PSBUZW1wbGF0ZVZhcjxieXRlcz4oJ1RBUkdFVF9ORVRXT1JLX0dFTkVTSVMnKSAmJgogICAgLy8gICAvLyBBY3F1aXJpbmcgYSBsZWFzZSB3aXRoIGxhc3Rfcm91bmQgYW5kIGEgbm9uLWVtcHR5IGxlYXNlIGZpZWxkIHByZXZlbnRzIHJlcGxheSBhdHRhY2tzCiAgICAvLyAgIFR4bi5sYXN0VmFsaWQgPT09IFRlbXBsYXRlVmFyPHVpbnQ2ND4oJ0xBU1RfUk9VTkQnKSAmJgogICAgLy8gICBUeG4ubGVhc2UgPT09IG9wLnNoYTI1NihCeXRlcygnc2VsZi1wYXltZW50JykpCiAgICAvLyApCiAgICByZXRzdWIKCnNlbGZQYXltZW50X2Jvb2xfZmFsc2VAMTA6CiAgICBpbnRjXzEgLy8gMAogICAgLy8gY29udHJhY3RzL1NlbGZQYXltZW50L2NvbnRyYWN0LmFsZ28udHM6MjQtMzUKICAgIC8vIHJldHVybiAoCiAgICAvLyAgIFR4bi50eXBlRW51bSA9PT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQgJiYKICAgIC8vICAgVHhuLnJlY2VpdmVyID09PSBUeG4uc2VuZGVyICYmCiAgICAvLyAgIFR4bi5hbW91bnQgPT09IDAgJiYKICAgIC8vICAgVHhuLnJla2V5VG8gPT09IEdsb2JhbC56ZXJvQWRkcmVzcyAmJgogICAgLy8gICBUeG4uY2xvc2VSZW1haW5kZXJUbyA9PT0gR2xvYmFsLnplcm9BZGRyZXNzICYmCiAgICAvLyAgIFR4bi5mZWUgPT09IEdsb2JhbC5taW5UeG5GZWUgJiYKICAgIC8vICAgR2xvYmFsLmdlbmVzaXNIYXNoID09PSBUZW1wbGF0ZVZhcjxieXRlcz4oJ1RBUkdFVF9ORVRXT1JLX0dFTkVTSVMnKSAmJgogICAgLy8gICAvLyBBY3F1aXJpbmcgYSBsZWFzZSB3aXRoIGxhc3Rfcm91bmQgYW5kIGEgbm9uLWVtcHR5IGxlYXNlIGZpZWxkIHByZXZlbnRzIHJlcGxheSBhdHRhY2tzCiAgICAvLyAgIFR4bi5sYXN0VmFsaWQgPT09IFRlbXBsYXRlVmFyPHVpbnQ2ND4oJ0xBU1RfUk9VTkQnKSAmJgogICAgLy8gICBUeG4ubGVhc2UgPT09IG9wLnNoYTI1NihCeXRlcygnc2VsZi1wYXltZW50JykpCiAgICAvLyApCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAQAAJgEAMRtBACuABB+JrFA2GgCOAQACI0MxGRREMRhEiAAdgAEAI08CVIAEFR98dUxQsCJDMRlA/90xGBREIkMxECISQQBKMQcxABJBAEIxCEAAPTEgMgMSQQA1MQkyAxJBAC0xATIAEkEAJTIRKBJBAB4xBCQSQQAXMQaADHNlbGYtcGF5bWVudAESQQACIokjiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {
        "LAST_ROUND": {
            "type": "AVMUint64"
        },
        "TARGET_NETWORK_GENESIS": {
            "type": "AVMBytes"
        }
    }
}