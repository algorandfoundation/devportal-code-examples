#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 TMPL_LAST_ROUND
    bytecblock TMPL_TARGET_NETWORK_GENESIS
    // contracts/SelfPayment/contract.algo.ts:20
    // export default class SelfPayment extends Contract {
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x1f89ac50 // method "selfPayment()bool"
    txna ApplicationArgs 0
    match main_selfPayment_route@3

main_after_if_else@10:
    // contracts/SelfPayment/contract.algo.ts:20
    // export default class SelfPayment extends Contract {
    intc_1 // 0
    return

main_selfPayment_route@3:
    // contracts/SelfPayment/contract.algo.ts:22
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub selfPayment
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@6:
    // contracts/SelfPayment/contract.algo.ts:20
    // export default class SelfPayment extends Contract {
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/SelfPayment/contract.algo.ts::SelfPayment.selfPayment() -> uint64:
selfPayment:
    // contracts/SelfPayment/contract.algo.ts:25
    // Txn.typeEnum === TransactionType.Payment &&
    txn TypeEnum
    intc_0 // 1
    ==
    // contracts/SelfPayment/contract.algo.ts:25-26
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    bz selfPayment_bool_false@10
    // contracts/SelfPayment/contract.algo.ts:26
    // Txn.receiver === Txn.sender &&
    txn Receiver
    txn Sender
    ==
    // contracts/SelfPayment/contract.algo.ts:25-26
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    bz selfPayment_bool_false@10
    // contracts/SelfPayment/contract.algo.ts:27
    // Txn.amount === 0 &&
    txn Amount
    // contracts/SelfPayment/contract.algo.ts:25-27
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    bnz selfPayment_bool_false@10
    // contracts/SelfPayment/contract.algo.ts:28
    // Txn.rekeyTo === Global.zeroAddress &&
    txn RekeyTo
    global ZeroAddress
    ==
    // contracts/SelfPayment/contract.algo.ts:25-28
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    bz selfPayment_bool_false@10
    // contracts/SelfPayment/contract.algo.ts:29
    // Txn.closeRemainderTo === Global.zeroAddress &&
    txn CloseRemainderTo
    global ZeroAddress
    ==
    // contracts/SelfPayment/contract.algo.ts:25-29
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    bz selfPayment_bool_false@10
    // contracts/SelfPayment/contract.algo.ts:30
    // Txn.fee === Global.minTxnFee &&
    txn Fee
    global MinTxnFee
    ==
    // contracts/SelfPayment/contract.algo.ts:25-30
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === Global.minTxnFee &&
    bz selfPayment_bool_false@10
    // contracts/SelfPayment/contract.algo.ts:31
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    global GenesisHash
    bytec_0 // TMPL_TARGET_NETWORK_GENESIS
    ==
    // contracts/SelfPayment/contract.algo.ts:25-31
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === Global.minTxnFee &&
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    bz selfPayment_bool_false@10
    // contracts/SelfPayment/contract.algo.ts:33
    // Txn.lastValid === TemplateVar<uint64>('LAST_ROUND') &&
    txn LastValid
    intc_2 // TMPL_LAST_ROUND
    ==
    // contracts/SelfPayment/contract.algo.ts:25-33
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === Global.minTxnFee &&
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    // // Acquiring a lease with last_round and a non-empty lease field prevents replay attacks
    // Txn.lastValid === TemplateVar<uint64>('LAST_ROUND') &&
    bz selfPayment_bool_false@10
    // contracts/SelfPayment/contract.algo.ts:34
    // Txn.lease === op.sha256(Bytes('self-payment'))
    txn Lease
    pushbytes "self-payment"
    sha256
    ==
    // contracts/SelfPayment/contract.algo.ts:25-34
    // Txn.typeEnum === TransactionType.Payment &&
    // Txn.receiver === Txn.sender &&
    // Txn.amount === 0 &&
    // Txn.rekeyTo === Global.zeroAddress &&
    // Txn.closeRemainderTo === Global.zeroAddress &&
    // Txn.fee === Global.minTxnFee &&
    // Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    // // Acquiring a lease with last_round and a non-empty lease field prevents replay attacks
    // Txn.lastValid === TemplateVar<uint64>('LAST_ROUND') &&
    // Txn.lease === op.sha256(Bytes('self-payment'))
    bz selfPayment_bool_false@10
    intc_0 // 1
    // contracts/SelfPayment/contract.algo.ts:24-35
    // return (
    //   Txn.typeEnum === TransactionType.Payment &&
    //   Txn.receiver === Txn.sender &&
    //   Txn.amount === 0 &&
    //   Txn.rekeyTo === Global.zeroAddress &&
    //   Txn.closeRemainderTo === Global.zeroAddress &&
    //   Txn.fee === Global.minTxnFee &&
    //   Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    //   // Acquiring a lease with last_round and a non-empty lease field prevents replay attacks
    //   Txn.lastValid === TemplateVar<uint64>('LAST_ROUND') &&
    //   Txn.lease === op.sha256(Bytes('self-payment'))
    // )
    retsub

selfPayment_bool_false@10:
    intc_1 // 0
    // contracts/SelfPayment/contract.algo.ts:24-35
    // return (
    //   Txn.typeEnum === TransactionType.Payment &&
    //   Txn.receiver === Txn.sender &&
    //   Txn.amount === 0 &&
    //   Txn.rekeyTo === Global.zeroAddress &&
    //   Txn.closeRemainderTo === Global.zeroAddress &&
    //   Txn.fee === Global.minTxnFee &&
    //   Global.genesisHash === TemplateVar<bytes>('TARGET_NETWORK_GENESIS') &&
    //   // Acquiring a lease with last_round and a non-empty lease field prevents replay attacks
    //   Txn.lastValid === TemplateVar<uint64>('LAST_ROUND') &&
    //   Txn.lease === op.sha256(Bytes('self-payment'))
    // )
    retsub
