{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/CustomCreate/contract.algo.ts"
  ],
  "mappings": ";;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AAQE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;AALC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHH;;;AAAA;AACS;AAIL;AAAA;AAFD;;;AAMiB;;AARX;AAQW;AAAA;AAAhB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock \"age\""
    },
    "7": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "bz main_after_if_else@8",
      "stack_out": []
    },
    "12": {
      "op": "pushbytess 0x483331ee 0xd26ce06c // method \"custom_create(uint64)void\", method \"getAge()uint64\"",
      "defined_out": [
        "Method(custom_create(uint64)void)",
        "Method(getAge()uint64)"
      ],
      "stack_out": [
        "Method(custom_create(uint64)void)",
        "Method(getAge()uint64)"
      ]
    },
    "24": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(custom_create(uint64)void)",
        "Method(getAge()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(custom_create(uint64)void)",
        "Method(getAge()uint64)",
        "tmp%2#0"
      ]
    },
    "27": {
      "op": "match main_custom_create_route@3 main_getAge_route@4",
      "stack_out": []
    },
    "33": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "34": {
      "block": "main_getAge_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "36": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "37": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "38": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "40": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "41": {
      "callsub": "contracts/CustomCreate/contract.algo.ts::CustomCreate.getAge",
      "op": "callsub getAge",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "44": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "45": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "51": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "52": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "53": {
      "op": "log",
      "stack_out": []
    },
    "54": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "return",
      "stack_out": []
    },
    "57": {
      "block": "main_custom_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "60": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "63": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "64": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "65": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "68": {
      "op": "btoi",
      "defined_out": [
        "age#0"
      ],
      "stack_out": [
        "age#0"
      ]
    },
    "69": {
      "op": "bytec_0 // \"age\"",
      "defined_out": [
        "\"age\"",
        "age#0"
      ],
      "stack_out": [
        "age#0",
        "\"age\""
      ]
    },
    "70": {
      "op": "swap",
      "stack_out": [
        "\"age\"",
        "age#0"
      ]
    },
    "71": {
      "op": "app_global_put",
      "stack_out": []
    },
    "72": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "74": {
      "op": "return",
      "stack_out": []
    },
    "75": {
      "subroutine": "contracts/CustomCreate/contract.algo.ts::CustomCreate.getAge",
      "params": {},
      "block": "getAge",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "77": {
      "op": "bytec_0 // \"age\"",
      "defined_out": [
        "\"age\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"age\""
      ]
    },
    "78": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "79": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "80": {
      "retsub": true,
      "op": "retsub"
    }
  }
}