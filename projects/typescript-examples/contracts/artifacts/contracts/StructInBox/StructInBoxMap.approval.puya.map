{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/StructInBox/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGE;;;AAAA;AAAA;;;AACa;AAAA;AAHE;AAAA;AAAA;AAGb;AAAA;;AAAA;AAAA;;AAAA;AAEA;AAAA;AAAA;AAAA;AAEY;AAAA;AAAA;AAFZ;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAWA;;;AAAA;AACoB;AAdL;AAAA;AAAA;AAcS;AAAA;AADxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AACoB;AAlBL;AAAA;AAAA;AAkBS;AAAA;;AADxB;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AACa;;AAAA;AAtBE;AAAA;AAAA;AAsBE;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;AAE2B;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 10 8 0"
    },
    "7": {
      "op": "bytecblock \"users\" 0x151f7c7580 0x151f7c75"
    },
    "26": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "28": {
      "op": "bz main___algots__.defaultCreate@11",
      "stack_out": []
    },
    "31": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "34": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "35": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "37": {
      "op": "assert",
      "stack_out": []
    },
    "38": {
      "op": "pushbytess 0x783dcc70 0x93143bd1 0x2bc4c11f 0x3a3551ce // method \"createNewUser(uint64,(uint64,string,uint64))bool\", method \"getUser(uint64)(uint64,string,uint64)\", method \"checkUserExists(uint64)bool\", method \"updateUserNameAndAge(uint64,string,uint64)bool\"",
      "defined_out": [
        "Method(checkUserExists(uint64)bool)",
        "Method(createNewUser(uint64,(uint64,string,uint64))bool)",
        "Method(getUser(uint64)(uint64,string,uint64))",
        "Method(updateUserNameAndAge(uint64,string,uint64)bool)"
      ],
      "stack_out": [
        "Method(createNewUser(uint64,(uint64,string,uint64))bool)",
        "Method(getUser(uint64)(uint64,string,uint64))",
        "Method(checkUserExists(uint64)bool)",
        "Method(updateUserNameAndAge(uint64,string,uint64)bool)"
      ]
    },
    "60": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(checkUserExists(uint64)bool)",
        "Method(createNewUser(uint64,(uint64,string,uint64))bool)",
        "Method(getUser(uint64)(uint64,string,uint64))",
        "Method(updateUserNameAndAge(uint64,string,uint64)bool)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(createNewUser(uint64,(uint64,string,uint64))bool)",
        "Method(getUser(uint64)(uint64,string,uint64))",
        "Method(checkUserExists(uint64)bool)",
        "Method(updateUserNameAndAge(uint64,string,uint64)bool)",
        "tmp%6#0"
      ]
    },
    "63": {
      "op": "match createNewUser getUser checkUserExists updateUserNameAndAge",
      "stack_out": []
    },
    "73": {
      "op": "err"
    },
    "74": {
      "block": "main___algots__.defaultCreate@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "76": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "77": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "79": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "80": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "81": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "82": {
      "subroutine": "contracts/StructInBox/contract.algo.ts::StructInBoxMap.createNewUser[routing]",
      "params": {},
      "block": "createNewUser",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "85": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "86": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "id#0",
        "user#0"
      ],
      "stack_out": [
        "id#0",
        "user#0"
      ]
    },
    "89": {
      "op": "swap",
      "stack_out": [
        "user#0",
        "id#0"
      ]
    },
    "90": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "encoded_value%0#0"
      ]
    },
    "91": {
      "op": "bytec_0 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "92": {
      "op": "swap",
      "stack_out": [
        "user#0",
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "93": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0"
      ]
    },
    "94": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "95": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "user#0",
        "{box_del}"
      ],
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "96": {
      "op": "pop",
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0"
      ]
    },
    "97": {
      "op": "dup",
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "98": {
      "op": "dig 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "user#0 (copy)"
      ]
    },
    "100": {
      "op": "box_put",
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0"
      ]
    },
    "101": {
      "op": "intc_1 // 10",
      "defined_out": [
        "10",
        "box_prefixed_key%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0",
        "10"
      ]
    },
    "102": {
      "op": "intc_2 // 8",
      "defined_out": [
        "10",
        "8",
        "box_prefixed_key%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "box_prefixed_key%0#0",
        "10",
        "8"
      ]
    },
    "103": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "box%box_extract%0#0"
      ]
    },
    "104": {
      "op": "btoi",
      "defined_out": [
        "user#0",
        "values%2#0"
      ],
      "stack_out": [
        "user#0",
        "values%2#0"
      ]
    },
    "105": {
      "op": "swap",
      "stack_out": [
        "values%2#0",
        "user#0"
      ]
    },
    "106": {
      "op": "intc_1 // 10",
      "stack_out": [
        "values%2#0",
        "user#0",
        "10"
      ]
    },
    "107": {
      "op": "extract_uint64",
      "defined_out": [
        "values%2#0",
        "values%3#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%3#0"
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "109": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "1"
      ]
    },
    "110": {
      "op": "&&",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "111": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "112": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "113": {
      "op": "log",
      "stack_out": []
    },
    "114": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "115": {
      "op": "return",
      "stack_out": []
    },
    "116": {
      "subroutine": "contracts/StructInBox/contract.algo.ts::StructInBoxMap.getUser[routing]",
      "params": {},
      "block": "getUser",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "119": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "120": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "121": {
      "op": "bytec_0 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "124": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "125": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "126": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0x151f7c75"
      ]
    },
    "127": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ]
    },
    "128": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "129": {
      "op": "log",
      "stack_out": []
    },
    "130": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "131": {
      "op": "return",
      "stack_out": []
    },
    "132": {
      "subroutine": "contracts/StructInBox/contract.algo.ts::StructInBoxMap.checkUserExists[routing]",
      "params": {},
      "block": "checkUserExists",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "135": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "136": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "137": {
      "op": "bytec_0 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "138": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "139": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "140": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "141": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "143": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "146": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "147": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "149": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "150": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "151": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "153": {
      "op": "log",
      "stack_out": []
    },
    "154": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "155": {
      "op": "return",
      "stack_out": []
    },
    "156": {
      "subroutine": "contracts/StructInBox/contract.algo.ts::StructInBoxMap.updateUserNameAndAge[routing]",
      "params": {},
      "block": "updateUserNameAndAge",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "159": {
      "op": "btoi",
      "defined_out": [
        "id#0"
      ],
      "stack_out": [
        "id#0"
      ]
    },
    "160": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "id#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "id#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "163": {
      "op": "dup",
      "defined_out": [
        "id#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0 (copy)"
      ],
      "stack_out": [
        "id#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0 (copy)"
      ]
    },
    "164": {
      "op": "extract 2 0",
      "defined_out": [
        "id#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "id#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0"
      ]
    },
    "167": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "id#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "id#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "170": {
      "op": "dup",
      "defined_out": [
        "id#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%1#0 (copy)"
      ],
      "stack_out": [
        "id#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%1#0 (copy)"
      ]
    },
    "171": {
      "op": "btoi",
      "defined_out": [
        "age#0",
        "id#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "id#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0"
      ]
    },
    "172": {
      "op": "uncover 4",
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "id#0"
      ]
    },
    "174": {
      "op": "itob",
      "defined_out": [
        "age#0",
        "encoded_value%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "encoded_value%0#0"
      ]
    },
    "175": {
      "op": "bytec_0 // \"users\"",
      "defined_out": [
        "\"users\"",
        "age#0",
        "encoded_value%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "176": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "177": {
      "op": "concat",
      "defined_out": [
        "age#0",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0"
      ]
    },
    "178": {
      "op": "dup",
      "defined_out": [
        "age#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "179": {
      "op": "box_get",
      "defined_out": [
        "age#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "180": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "181": {
      "op": "dup",
      "defined_out": [
        "age#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "182": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "age#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "8"
      ]
    },
    "183": {
      "op": "extract_uint16",
      "defined_out": [
        "age#0",
        "aggregate%box_get%0#0",
        "aggregate%item_offset%0#0",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%item_offset%0#0"
      ]
    },
    "184": {
      "op": "intc_3 // 0"
    },
    "185": {
      "op": "swap",
      "defined_out": [
        "0",
        "age#0",
        "aggregate%box_get%0#0",
        "aggregate%item_offset%0#0",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0",
        "aggregate%item_offset%0#0"
      ]
    },
    "186": {
      "op": "extract3",
      "defined_out": [
        "age#0",
        "aggregate%data_up_to_item%0#0",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%data_up_to_item%0#0"
      ]
    },
    "187": {
      "op": "uncover 5",
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%data_up_to_item%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "age#0",
        "aggregate%updated_data%0#0",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "190": {
      "op": "dig 1",
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%updated_data%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "192": {
      "op": "box_del",
      "defined_out": [
        "age#0",
        "aggregate%updated_data%0#0",
        "box_prefixed_key%0#0",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%updated_data%0#0",
        "{box_del}"
      ]
    },
    "193": {
      "op": "pop",
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "194": {
      "op": "dig 1",
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%updated_data%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "196": {
      "op": "swap",
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "aggregate%updated_data%0#0"
      ]
    },
    "197": {
      "op": "box_put",
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0"
      ]
    },
    "198": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "199": {
      "op": "intc_1 // 10",
      "defined_out": [
        "10",
        "age#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "name#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%1#0",
        "age#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "10"
      ]
    },
    "200": {
      "op": "uncover 4",
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "10",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "202": {
      "op": "box_replace",
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0"
      ]
    },
    "203": {
      "op": "dup",
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "204": {
      "op": "box_get",
      "defined_out": [
        "age#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "box_prefixed_key%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "205": {
      "op": "pop",
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0"
      ]
    },
    "206": {
      "op": "dup",
      "defined_out": [
        "age#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%2#0 (copy)",
        "box_prefixed_key%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%2#0 (copy)"
      ]
    },
    "207": {
      "op": "intc_2 // 8",
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%2#0 (copy)",
        "8"
      ]
    },
    "208": {
      "op": "extract_uint16",
      "defined_out": [
        "age#0",
        "aggregate%box_get%2#0",
        "aggregate%extract_uint16%1#0",
        "box_prefixed_key%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "209": {
      "op": "dig 1",
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%box_get%2#0 (copy)"
      ]
    },
    "211": {
      "op": "len",
      "defined_out": [
        "age#0",
        "aggregate%box_get%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "box_prefixed_key%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0"
      ]
    },
    "212": {
      "op": "substring3",
      "defined_out": [
        "age#0",
        "aggregate%substring3%1#0",
        "box_prefixed_key%0#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "213": {
      "op": "extract 2 0",
      "defined_out": [
        "age#0",
        "box_prefixed_key%0#0",
        "name#0",
        "values%0#0"
      ],
      "stack_out": [
        "name#0",
        "age#0",
        "box_prefixed_key%0#0",
        "values%0#0"
      ]
    },
    "216": {
      "op": "uncover 3",
      "stack_out": [
        "age#0",
        "box_prefixed_key%0#0",
        "values%0#0",
        "name#0"
      ]
    },
    "218": {
      "op": "==",
      "defined_out": [
        "age#0",
        "box_prefixed_key%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "age#0",
        "box_prefixed_key%0#0",
        "tmp%0#1"
      ]
    },
    "219": {
      "op": "swap",
      "stack_out": [
        "age#0",
        "tmp%0#1",
        "box_prefixed_key%0#0"
      ]
    },
    "220": {
      "op": "intc_1 // 10",
      "stack_out": [
        "age#0",
        "tmp%0#1",
        "box_prefixed_key%0#0",
        "10"
      ]
    },
    "221": {
      "op": "intc_2 // 8",
      "stack_out": [
        "age#0",
        "tmp%0#1",
        "box_prefixed_key%0#0",
        "10",
        "8"
      ]
    },
    "222": {
      "op": "box_extract",
      "defined_out": [
        "age#0",
        "box%box_extract%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "age#0",
        "tmp%0#1",
        "box%box_extract%0#0"
      ]
    },
    "223": {
      "op": "btoi",
      "defined_out": [
        "age#0",
        "tmp%0#1",
        "values%1#0"
      ],
      "stack_out": [
        "age#0",
        "tmp%0#1",
        "values%1#0"
      ]
    },
    "224": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "values%1#0",
        "age#0"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "227": {
      "op": "&&",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "228": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "229": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "232": {
      "op": "return",
      "stack_out": []
    }
  }
}