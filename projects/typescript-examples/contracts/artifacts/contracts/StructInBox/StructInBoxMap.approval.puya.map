{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/StructInBox/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AACmB;AAWf;;AAXe;AAWY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA3B;AATD;AAAA;AAAA;AAAA;AAcA;;;AAAA;AAAA;;;AAEc;AAAA;AAlBE;AAAA;AAAA;AAkBf;AAAA;;AAAA;AAAA;;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;AADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEe;;AAAA;AAAA;AAFf;AAAA;AAAA;AAAA;AAAA;AAJD;AAAA;AAAA;AAAA;AAaA;;;AAAA;AAEqB;AA/BL;AAAA;AAAA;AA+BU;AAAA;AAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAAA;AAEqB;AApCL;AAAA;AAAA;AAoCU;AAAA;;AAF1B;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 2 8 10"
    },
    "7": {
      "op": "bytecblock \"users\" 0x75736572730000000000000000 0x151f7c7580 0x151f7c75"
    },
    "40": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "42": {
      "op": "bz main___algots__.defaultCreate@11",
      "stack_out": []
    },
    "45": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "48": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "49": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "51": {
      "op": "assert",
      "stack_out": []
    },
    "52": {
      "op": "pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3 // method \"boxMapTest()bool\", method \"boxMapSet(uint64,(string,uint64,uint64))bool\", method \"boxMapGet(uint64)(string,uint64,uint64)\", method \"boxMapExists(uint64)bool\"",
      "defined_out": [
        "Method(boxMapExists(uint64)bool)",
        "Method(boxMapGet(uint64)(string,uint64,uint64))",
        "Method(boxMapSet(uint64,(string,uint64,uint64))bool)",
        "Method(boxMapTest()bool)"
      ],
      "stack_out": [
        "Method(boxMapTest()bool)",
        "Method(boxMapSet(uint64,(string,uint64,uint64))bool)",
        "Method(boxMapGet(uint64)(string,uint64,uint64))",
        "Method(boxMapExists(uint64)bool)"
      ]
    },
    "74": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(boxMapExists(uint64)bool)",
        "Method(boxMapGet(uint64)(string,uint64,uint64))",
        "Method(boxMapSet(uint64,(string,uint64,uint64))bool)",
        "Method(boxMapTest()bool)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(boxMapTest()bool)",
        "Method(boxMapSet(uint64,(string,uint64,uint64))bool)",
        "Method(boxMapGet(uint64)(string,uint64,uint64))",
        "Method(boxMapExists(uint64)bool)",
        "tmp%6#0"
      ]
    },
    "77": {
      "op": "match boxMapTest boxMapSet boxMapGet boxMapExists",
      "stack_out": []
    },
    "87": {
      "op": "err"
    },
    "88": {
      "block": "main___algots__.defaultCreate@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "90": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "94": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "95": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "96": {
      "subroutine": "contracts/StructInBox/contract.algo.ts::StructInBoxMap.boxMapTest[routing]",
      "params": {},
      "block": "boxMapTest",
      "stack_in": [],
      "op": "bytec_1 // 0x75736572730000000000000000",
      "defined_out": [
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "97": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "98": {
      "op": "pop",
      "stack_out": []
    },
    "99": {
      "op": "bytec_1 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "100": {
      "op": "pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
      "defined_out": [
        "0x0012000000000000004600000000000000020008746573744e616d65",
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000",
        "0x0012000000000000004600000000000000020008746573744e616d65"
      ]
    },
    "130": {
      "op": "box_put",
      "stack_out": []
    },
    "131": {
      "op": "bytec_2 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "132": {
      "op": "log",
      "stack_out": []
    },
    "133": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "134": {
      "op": "return",
      "stack_out": []
    },
    "135": {
      "subroutine": "contracts/StructInBox/contract.algo.ts::StructInBoxMap.boxMapSet[routing]",
      "params": {},
      "block": "boxMapSet",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "138": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "139": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "key#0"
      ]
    },
    "143": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "144": {
      "op": "bytec_0 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "147": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "148": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "149": {
      "op": "pop",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "150": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "151": {
      "op": "dig 2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "153": {
      "op": "box_put",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "154": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "155": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "2"
      ]
    },
    "156": {
      "op": "intc_2 // 8",
      "defined_out": [
        "2",
        "8",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "2",
        "8"
      ]
    },
    "157": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "box_prefixed_key%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box%box_extract%0#0"
      ]
    },
    "158": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "values%0#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "values%0#0"
      ]
    },
    "159": {
      "op": "dig 2",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "values%0#0",
        "value#0 (copy)"
      ]
    },
    "161": {
      "op": "intc_1 // 2",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "values%0#0",
        "value#0 (copy)",
        "2"
      ]
    },
    "162": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "163": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "tmp%0#1"
      ]
    },
    "164": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "tmp%0#1",
        "box_prefixed_key%0#0"
      ]
    },
    "165": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "box_prefixed_key%0#0",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#1",
        "box_prefixed_key%0#0",
        "10"
      ]
    },
    "166": {
      "op": "intc_2 // 8",
      "stack_out": [
        "value#0",
        "tmp%0#1",
        "box_prefixed_key%0#0",
        "10",
        "8"
      ]
    },
    "167": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#1",
        "box%box_extract%1#0"
      ]
    },
    "168": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1",
        "value#0",
        "values%2#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#1",
        "values%2#0"
      ]
    },
    "169": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "values%2#0",
        "value#0"
      ]
    },
    "171": {
      "op": "intc_3 // 10",
      "stack_out": [
        "tmp%0#1",
        "values%2#0",
        "value#0",
        "10"
      ]
    },
    "172": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#1",
        "values%2#0",
        "values%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "values%2#0",
        "values%3#0"
      ]
    },
    "173": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "174": {
      "op": "&&",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "175": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "1"
      ]
    },
    "176": {
      "op": "&&",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "177": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "178": {
      "op": "bytec_2 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "179": {
      "op": "log",
      "stack_out": []
    },
    "180": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "181": {
      "op": "return",
      "stack_out": []
    },
    "182": {
      "subroutine": "contracts/StructInBox/contract.algo.ts::StructInBoxMap.boxMapGet[routing]",
      "params": {},
      "block": "boxMapGet",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "185": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "186": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "187": {
      "op": "bytec_0 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "188": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "190": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "191": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "192": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0x151f7c75"
      ]
    },
    "193": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "195": {
      "op": "log",
      "stack_out": []
    },
    "196": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": []
    },
    "198": {
      "subroutine": "contracts/StructInBox/contract.algo.ts::StructInBoxMap.boxMapExists[routing]",
      "params": {},
      "block": "boxMapExists",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "201": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "202": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "203": {
      "op": "bytec_0 // \"users\"",
      "defined_out": [
        "\"users\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"users\""
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "\"users\"",
        "encoded_value%0#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "206": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "207": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "209": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "212": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "214": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "216": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "217": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "219": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "220": {
      "op": "log",
      "stack_out": []
    },
    "221": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "222": {
      "op": "return",
      "stack_out": []
    }
  }
}