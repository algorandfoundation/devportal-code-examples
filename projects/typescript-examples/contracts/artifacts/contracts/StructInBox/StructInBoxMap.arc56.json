{
    "name": "StructInBoxMap",
    "structs": {
        "User": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "age",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "createNewUser",
            "args": [
                {
                    "type": "uint64",
                    "name": "id"
                },
                {
                    "type": "(uint64,string,uint64)",
                    "struct": "User",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUser",
            "args": [
                {
                    "type": "uint64",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "(uint64,string,uint64)",
                "struct": "User"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "checkUserExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateUserNameAndAge",
            "args": [
                {
                    "type": "uint64",
                    "name": "id"
                },
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "age"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "users": {
                    "keyType": "uint64",
                    "valueType": "User",
                    "prefix": "dXNlcnM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        125,
                        180
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        34
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        81
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        111,
                        228
                    ],
                    "errorMessage": "assert target is match for conditions"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQoIACYDBXVzZXJzBRUffHWABBUffHUxG0EAKzEZFEQxGESCBAR4PcxwBJMUO9EEK8TBHwQ6NVHONhoAjgQACQArADsAUwAxGRQxGBQQQzYaARc2GgJMFihMUEm8SElLAr8jJLoXTCNbEiIQRCmwIkM2GgEXFihMUL5EKkxQsCJDNhoBFxYoTFC9RQGAAQAlTwJUKkxQsCJDNhoBFzYaAklXAgA2GgNJF08EFihMUEm+REkkWSVMWE8FUEsBvEhLAUy/SSNPBLtJvkhJJFlLARVSVwIATwMSTCMkuhdPAhIQRCmwIkM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}