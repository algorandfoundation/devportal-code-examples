{
    "name": "StructInBoxMap",
    "structs": {
        "User": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "boxMapTest",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapSet",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                },
                {
                    "type": "(string,uint64,uint64)",
                    "struct": "User",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapGet",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(string,uint64,uint64)",
                "struct": "User"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxMapExists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "userMap": {
                    "keyType": "uint64",
                    "valueType": "User",
                    "prefix": "dXNlcnM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        48
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        95
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        177
                    ],
                    "errorMessage": "assert target is match for conditions"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAyIDggMTAKICAgIGJ5dGVjYmxvY2sgInVzZXJzIiAweDc1NzM2NTcyNzMwMDAwMDAwMDAwMDAwMDAwIDB4MTUxZjdjNzU4MCAweDE1MWY3Yzc1CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czoxOAogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RydWN0SW5Cb3hNYXAgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAMTEKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0CiAgICBwdXNoYnl0ZXNzIDB4ZjE2NWNkZDkgMHgwZjA1ZjMzMiAweDY5OWViMGZlIDB4ZDgyOWQyYTMgLy8gbWV0aG9kICJib3hNYXBUZXN0KClib29sIiwgbWV0aG9kICJib3hNYXBTZXQodWludDY0LChzdHJpbmcsdWludDY0LHVpbnQ2NCkpYm9vbCIsIG1ldGhvZCAiYm94TWFwR2V0KHVpbnQ2NCkoc3RyaW5nLHVpbnQ2NCx1aW50NjQpIiwgbWV0aG9kICJib3hNYXBFeGlzdHModWludDY0KWJvb2wiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBib3hNYXBUZXN0IGJveE1hcFNldCBib3hNYXBHZXQgYm94TWFwRXhpc3RzCiAgICBlcnIKCm1haW5fX19hbGdvdHNfXy5kZWZhdWx0Q3JlYXRlQDExOgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MTgKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0cnVjdEluQm94TWFwIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgICYmCiAgICByZXR1cm4gLy8gb24gZXJyb3I6IE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AgJiYgY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCgoKLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6OlN0cnVjdEluQm94TWFwLmJveE1hcFRlc3Rbcm91dGluZ10oKSAtPiB2b2lkOgpib3hNYXBUZXN0OgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyB1c2VyTWFwID0gQm94TWFwPHVpbnQ2NCwgVXNlcj4oeyBrZXlQcmVmaXg6ICd1c2VycycgfSkKICAgIGJ5dGVjXzEgLy8gMHg3NTczNjU3MjczMDAwMDAwMDAwMDAwMDAwMAogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MzAKICAgIC8vIHRoaXMudXNlck1hcChrZXkwKS52YWx1ZSA9IGNsb25lKHZhbHVlKQogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czoxOQogICAgLy8gcHVibGljIHVzZXJNYXAgPSBCb3hNYXA8dWludDY0LCBVc2VyPih7IGtleVByZWZpeDogJ3VzZXJzJyB9KQogICAgYnl0ZWNfMSAvLyAweDc1NzM2NTcyNzMwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czozMAogICAgLy8gdGhpcy51c2VyTWFwKGtleTApLnZhbHVlID0gY2xvbmUodmFsdWUpCiAgICBwdXNoYnl0ZXMgMHgwMDEyMDAwMDAwMDAwMDAwMDA0NjAwMDAwMDAwMDAwMDAwMDIwMDA4NzQ2NTczNzQ0ZTYxNmQ2NQogICAgYm94X3B1dAogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIEBhYmltZXRob2QoKQogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1ODAKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjpTdHJ1Y3RJbkJveE1hcC5ib3hNYXBTZXRbcm91dGluZ10oKSAtPiB2b2lkOgpib3hNYXBTZXQ6CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czozNQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czozNwogICAgLy8gdGhpcy51c2VyTWFwKGtleSkudmFsdWUgPSBjbG9uZSh2YWx1ZSkKICAgIHN3YXAKICAgIGl0b2IKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgdXNlck1hcCA9IEJveE1hcDx1aW50NjQsIFVzZXI+KHsga2V5UHJlZml4OiAndXNlcnMnIH0pCiAgICBieXRlY18wIC8vICJ1c2VycyIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHRoaXMudXNlck1hcChrZXkpLnZhbHVlID0gY2xvbmUodmFsdWUpCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZHVwCiAgICBkaWcgMgogICAgYm94X3B1dAogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MzktNDMKICAgIC8vIGFzc2VydE1hdGNoKHRoaXMudXNlck1hcChrZXkpLnZhbHVlLCB7CiAgICAvLyAgIGlkOiB2YWx1ZS5pZCwKICAgIC8vICAgYXNzZXQ6IHZhbHVlLmFzc2V0LAogICAgLy8gICBuYW1lOiB2YWx1ZS5uYW1lLAogICAgLy8gfSkKICAgIGR1cAogICAgaW50Y18xIC8vIDIKICAgIGludGNfMiAvLyA4CiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6NDAKICAgIC8vIGlkOiB2YWx1ZS5pZCwKICAgIGRpZyAyCiAgICBpbnRjXzEgLy8gMgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjM5LTQzCiAgICAvLyBhc3NlcnRNYXRjaCh0aGlzLnVzZXJNYXAoa2V5KS52YWx1ZSwgewogICAgLy8gICBpZDogdmFsdWUuaWQsCiAgICAvLyAgIGFzc2V0OiB2YWx1ZS5hc3NldCwKICAgIC8vICAgbmFtZTogdmFsdWUubmFtZSwKICAgIC8vIH0pCiAgICA9PQogICAgc3dhcAogICAgaW50Y18zIC8vIDEwCiAgICBpbnRjXzIgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjQxCiAgICAvLyBhc3NldDogdmFsdWUuYXNzZXQsCiAgICB1bmNvdmVyIDIKICAgIGludGNfMyAvLyAxMAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjM5LTQzCiAgICAvLyBhc3NlcnRNYXRjaCh0aGlzLnVzZXJNYXAoa2V5KS52YWx1ZSwgewogICAgLy8gICBpZDogdmFsdWUuaWQsCiAgICAvLyAgIGFzc2V0OiB2YWx1ZS5hc3NldCwKICAgIC8vICAgbmFtZTogdmFsdWUubmFtZSwKICAgIC8vIH0pCiAgICA9PQogICAgJiYKICAgIGludGNfMCAvLyAxCiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NTgwCiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo6U3RydWN0SW5Cb3hNYXAuYm94TWFwR2V0W3JvdXRpbmddKCkgLT4gdm9pZDoKYm94TWFwR2V0OgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6NDgKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6NTAKICAgIC8vIHJldHVybiB0aGlzLnVzZXJNYXAoa2V5KS52YWx1ZQogICAgaXRvYgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyB1c2VyTWFwID0gQm94TWFwPHVpbnQ2NCwgVXNlcj4oeyBrZXlQcmVmaXg6ICd1c2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInVzZXJzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1MAogICAgLy8gcmV0dXJuIHRoaXMudXNlck1hcChrZXkpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6NDgKICAgIC8vIEBhYmltZXRob2QoKQogICAgYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0cy9TdHJ1Y3RJbkJveC9jb250cmFjdC5hbGdvLnRzOjpTdHJ1Y3RJbkJveE1hcC5ib3hNYXBFeGlzdHNbcm91dGluZ10oKSAtPiB2b2lkOgpib3hNYXBFeGlzdHM6CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1NQogICAgLy8gcmV0dXJuIHRoaXMudXNlck1hcChrZXkpLmV4aXN0cwogICAgaXRvYgogICAgLy8gY29udHJhY3RzL1N0cnVjdEluQm94L2NvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyB1c2VyTWFwID0gQm94TWFwPHVpbnQ2NCwgVXNlcj4oeyBrZXlQcmVmaXg6ICd1c2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInVzZXJzIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1NQogICAgLy8gcmV0dXJuIHRoaXMudXNlck1hcChrZXkpLmV4aXN0cwogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBjb250cmFjdHMvU3RydWN0SW5Cb3gvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgcHVzaGludCAwIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlY18zIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyAEAQIICiYEBXVzZXJzDXVzZXJzAAAAAAAAAAAFFR98dYAEFR98dTEbQQArMRkURDEYRIIEBPFlzdkEDwXzMgRpnrD+BNgp0qM2GgCOBAAJADAAXwBvADEZFDEYFBBDKbxIKYAcABIAAAAAAAAARgAAAAAAAAACAAh0ZXN0TmFtZb8qsCJDNhoBFzYaAkwWKExQSbxISUsCv0kjJLoXSwIjWxJMJSS6F08CJVsSECIQRCqwIkM2GgEXFihMUL5EK0xQsCJDNhoBFxYoTFC9RQGAAQCBAE8CVCtMULAiQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}