#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 28
    bytecblock 0x151f7c75 0x75736572730000000000000000 0x00 "users"
    // contracts/StructInBox/contract.algo.ts:11
    // export default class StructInBoxMap extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0xf165cdd9 0x0f05f332 0x699eb0fe 0xd829d2a3 // method "boxMapTest()bool", method "boxMapSet(uint64,(string,uint64,uint64))bool", method "boxMapGet(uint64)(string,uint64,uint64)", method "boxMapExists(uint64)bool"
    txna ApplicationArgs 0
    match main_boxMapTest_route@3 main_boxMapSet_route@4 main_boxMapGet_route@5 main_boxMapExists_route@6

main_after_if_else@13:
    // contracts/StructInBox/contract.algo.ts:11
    // export default class StructInBoxMap extends Contract {
    intc_1 // 0
    return

main_boxMapExists_route@6:
    // contracts/StructInBox/contract.algo.ts:41
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/StructInBox/contract.algo.ts:11
    // export default class StructInBoxMap extends Contract {
    txna ApplicationArgs 1
    btoi
    // contracts/StructInBox/contract.algo.ts:41
    // @abimethod()
    callsub boxMapExists
    bytec_2 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_boxMapGet_route@5:
    // contracts/StructInBox/contract.algo.ts:36
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/StructInBox/contract.algo.ts:11
    // export default class StructInBoxMap extends Contract {
    txna ApplicationArgs 1
    btoi
    // contracts/StructInBox/contract.algo.ts:36
    // @abimethod()
    callsub boxMapGet
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_boxMapSet_route@4:
    // contracts/StructInBox/contract.algo.ts:29
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/StructInBox/contract.algo.ts:11
    // export default class StructInBoxMap extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // contracts/StructInBox/contract.algo.ts:29
    // @abimethod()
    callsub boxMapSet
    bytec_2 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_boxMapTest_route@3:
    // contracts/StructInBox/contract.algo.ts:14
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub boxMapTest
    bytec_2 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@9:
    // contracts/StructInBox/contract.algo.ts:11
    // export default class StructInBoxMap extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/StructInBox/contract.algo.ts::StructInBoxMap.boxMapTest() -> uint64:
boxMapTest:
    // contracts/StructInBox/contract.algo.ts:12
    // public userMap = BoxMap<uint64, UserStruct>({ keyPrefix: 'users' })
    bytec_1 // 0x75736572730000000000000000
    // contracts/StructInBox/contract.algo.ts:23
    // this.userMap(key0).value = value.copy()
    box_del
    pop
    // contracts/StructInBox/contract.algo.ts:12
    // public userMap = BoxMap<uint64, UserStruct>({ keyPrefix: 'users' })
    bytec_1 // 0x75736572730000000000000000
    // contracts/StructInBox/contract.algo.ts:17-21
    // const value = new UserStruct({
    //   name: new arc4.Str('testName'),
    //   id: new arc4.UintN64(70),
    //   asset: new arc4.UintN64(2),
    // })
    pushbytes 0x0012000000000000004600000000000000020008746573744e616d65
    // contracts/StructInBox/contract.algo.ts:23
    // this.userMap(key0).value = value.copy()
    box_put
    // contracts/StructInBox/contract.algo.ts:12
    // public userMap = BoxMap<uint64, UserStruct>({ keyPrefix: 'users' })
    bytec_1 // 0x75736572730000000000000000
    // contracts/StructInBox/contract.algo.ts:24
    // assert(this.userMap(key0).length === value.bytes.length, 'Length mismatch')
    box_len
    assert // Box must have value
    intc_2 // 28
    ==
    assert // Length mismatch
    // contracts/StructInBox/contract.algo.ts:12
    // public userMap = BoxMap<uint64, UserStruct>({ keyPrefix: 'users' })
    bytec_1 // 0x75736572730000000000000000
    // contracts/StructInBox/contract.algo.ts:25
    // assert(this.userMap(key0).length === value.bytes.length, 'Length mismatch')
    box_len
    assert // Box must have value
    intc_2 // 28
    ==
    assert // Length mismatch
    // contracts/StructInBox/contract.algo.ts:26
    // return true
    intc_0 // 1
    retsub


// contracts/StructInBox/contract.algo.ts::StructInBoxMap.boxMapSet(key: uint64, value: bytes) -> uint64:
boxMapSet:
    // contracts/StructInBox/contract.algo.ts:29-30
    // @abimethod()
    // public boxMapSet(key: uint64, value: UserStruct): boolean {
    proto 2 1
    // contracts/StructInBox/contract.algo.ts:31
    // this.userMap(key).value = value.copy()
    frame_dig -2
    itob
    // contracts/StructInBox/contract.algo.ts:12
    // public userMap = BoxMap<uint64, UserStruct>({ keyPrefix: 'users' })
    bytec_3 // "users"
    swap
    concat
    // contracts/StructInBox/contract.algo.ts:31
    // this.userMap(key).value = value.copy()
    dup
    box_del
    pop
    dup
    frame_dig -1
    box_put
    // contracts/StructInBox/contract.algo.ts:32
    // assert(this.userMap(key).value === value.copy(), 'Value mismatch')
    box_get
    assert // Box must have value
    frame_dig -1
    ==
    assert // Value mismatch
    // contracts/StructInBox/contract.algo.ts:33
    // return true
    intc_0 // 1
    retsub


// contracts/StructInBox/contract.algo.ts::StructInBoxMap.boxMapGet(key: uint64) -> bytes:
boxMapGet:
    // contracts/StructInBox/contract.algo.ts:36-37
    // @abimethod()
    // public boxMapGet(key: uint64): UserStruct {
    proto 1 1
    // contracts/StructInBox/contract.algo.ts:38
    // return this.userMap(key).value
    frame_dig -1
    itob
    // contracts/StructInBox/contract.algo.ts:12
    // public userMap = BoxMap<uint64, UserStruct>({ keyPrefix: 'users' })
    bytec_3 // "users"
    swap
    concat
    // contracts/StructInBox/contract.algo.ts:38
    // return this.userMap(key).value
    box_get
    assert // Box must have value
    retsub


// contracts/StructInBox/contract.algo.ts::StructInBoxMap.boxMapExists(key: uint64) -> uint64:
boxMapExists:
    // contracts/StructInBox/contract.algo.ts:41-42
    // @abimethod()
    // public boxMapExists(key: uint64): boolean {
    proto 1 1
    // contracts/StructInBox/contract.algo.ts:43
    // return this.userMap(key).exists
    frame_dig -1
    itob
    // contracts/StructInBox/contract.algo.ts:12
    // public userMap = BoxMap<uint64, UserStruct>({ keyPrefix: 'users' })
    bytec_3 // "users"
    swap
    concat
    // contracts/StructInBox/contract.algo.ts:43
    // return this.userMap(key).exists
    box_len
    bury 1
    retsub
