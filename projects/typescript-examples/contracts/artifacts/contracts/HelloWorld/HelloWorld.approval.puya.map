{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/HelloWorld/contract.algo.ts"
  ],
  "mappings": ";AAkBA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AARE;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAQF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOE;;;AAAA;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AADjB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main___algots__.defaultCreate@9",
      "stack_out": []
    },
    "6": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "8": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "9": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "10": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "12": {
      "op": "assert",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0x3aad6d86 0x3d25ae31 // method \"sayHello(string,string)string\", method \"sayBananas()string\"",
      "defined_out": [
        "Method(sayBananas()string)",
        "Method(sayHello(string,string)string)"
      ],
      "stack_out": [
        "Method(sayHello(string,string)string)",
        "Method(sayBananas()string)"
      ]
    },
    "25": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(sayBananas()string)",
        "Method(sayHello(string,string)string)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(sayHello(string,string)string)",
        "Method(sayBananas()string)",
        "tmp%6#0"
      ]
    },
    "28": {
      "op": "match sayHello main_sayBananas_route@5",
      "stack_out": []
    },
    "34": {
      "op": "err"
    },
    "35": {
      "block": "main_sayBananas_route@5",
      "stack_in": [],
      "op": "pushbytes 0x151f7c75000742616e616e6173",
      "defined_out": [
        "0x151f7c75000742616e616e6173"
      ],
      "stack_out": [
        "0x151f7c75000742616e616e6173"
      ]
    },
    "50": {
      "op": "log",
      "stack_out": []
    },
    "51": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "53": {
      "op": "return",
      "stack_out": []
    },
    "54": {
      "block": "main___algots__.defaultCreate@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "59": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "60": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "61": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "62": {
      "subroutine": "contracts/HelloWorld/contract.algo.ts::HelloWorld.sayHello[routing]",
      "params": {},
      "block": "sayHello",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "65": {
      "op": "extract 2 0",
      "defined_out": [
        "firstName#0"
      ],
      "stack_out": [
        "firstName#0"
      ]
    },
    "68": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "firstName#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "firstName#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "71": {
      "op": "extract 2 0",
      "defined_out": [
        "firstName#0",
        "lastName#0"
      ],
      "stack_out": [
        "firstName#0",
        "lastName#0"
      ]
    },
    "74": {
      "op": "pushbytes \"Hello \"",
      "defined_out": [
        "\"Hello \"",
        "firstName#0",
        "lastName#0"
      ],
      "stack_out": [
        "firstName#0",
        "lastName#0",
        "\"Hello \""
      ]
    },
    "82": {
      "op": "uncover 2",
      "stack_out": [
        "lastName#0",
        "\"Hello \"",
        "firstName#0"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "lastName#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lastName#0",
        "tmp%0#1"
      ]
    },
    "85": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "lastName#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lastName#0",
        "tmp%0#1",
        "\" \""
      ]
    },
    "88": {
      "op": "concat",
      "defined_out": [
        "lastName#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "lastName#0",
        "tmp%1#1"
      ]
    },
    "89": {
      "op": "swap",
      "stack_out": [
        "tmp%1#1",
        "lastName#0"
      ]
    },
    "90": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "91": {
      "op": "dup",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0 (copy)"
      ]
    },
    "92": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length%0#0"
      ]
    },
    "93": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "94": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "97": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "result#0"
      ]
    },
    "98": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "99": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "105": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "106": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "107": {
      "op": "log",
      "stack_out": []
    },
    "108": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "110": {
      "op": "return",
      "stack_out": []
    }
  }
}