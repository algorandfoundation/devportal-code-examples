{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/HelloWorld/contract.algo.ts"
  ],
  "mappings": ";AAkBA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AARE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;AAAA;AAAA;;;AAeA;;AAAA;AAAA;AAAA;;AAAA;AAPF;;;AAAA;;;AAAA;;;AAAA;;;AAOE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;AAPF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAOE;;;AACiB;;;;;;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AACf",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "6": {
      "op": "pushbytess 0x3aad6d86 0x3d25ae31 // method \"sayHello(string,string)string\", method \"sayBananas()string\"",
      "defined_out": [
        "Method(sayBananas()string)",
        "Method(sayHello(string,string)string)"
      ],
      "stack_out": [
        "Method(sayHello(string,string)string)",
        "Method(sayBananas()string)"
      ]
    },
    "18": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(sayBananas()string)",
        "Method(sayHello(string,string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(sayHello(string,string)string)",
        "Method(sayBananas()string)",
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "match main_sayHello_route@3 main_sayBananas_route@4",
      "stack_out": []
    },
    "27": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "28": {
      "block": "main_sayBananas_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "30": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "31": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "32": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "34": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "35": {
      "op": "pushbytes 0x151f7c75000742616e616e6173",
      "defined_out": [
        "0x151f7c75000742616e616e6173"
      ],
      "stack_out": [
        "0x151f7c75000742616e616e6173"
      ]
    },
    "50": {
      "op": "log",
      "stack_out": []
    },
    "51": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "53": {
      "op": "return",
      "stack_out": []
    },
    "54": {
      "block": "main_sayHello_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "56": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "57": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "58": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "60": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "61": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "64": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "67": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "70": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "73": {
      "callsub": "contracts/HelloWorld/contract.algo.ts::HelloWorld.sayHello",
      "op": "callsub sayHello",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "76": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "77": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%length%0#0"
      ]
    },
    "78": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "79": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%9#0"
      ]
    },
    "83": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "84": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "92": {
      "op": "log",
      "stack_out": []
    },
    "93": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "return",
      "stack_out": []
    },
    "96": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "98": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "103": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "104": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "105": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "107": {
      "op": "return",
      "stack_out": []
    },
    "108": {
      "subroutine": "contracts/HelloWorld/contract.algo.ts::HelloWorld.sayHello",
      "params": {
        "firstName#0": "bytes",
        "lastName#0": "bytes"
      },
      "block": "sayHello",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "111": {
      "op": "pushbytes \"Hello \"",
      "defined_out": [
        "\"Hello \""
      ],
      "stack_out": [
        "\"Hello \""
      ]
    },
    "119": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"Hello \"",
        "firstName#0 (copy)"
      ],
      "stack_out": [
        "\"Hello \"",
        "firstName#0 (copy)"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\" \""
      ]
    },
    "125": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "126": {
      "op": "frame_dig -1",
      "defined_out": [
        "lastName#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "lastName#0 (copy)"
      ]
    },
    "128": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "129": {
      "retsub": true,
      "op": "retsub"
    }
  }
}