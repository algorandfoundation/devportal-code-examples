#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 1472
    bytecblock 0x151f7c75 base32(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDA)
    // contracts/ReferenceAccountAsset/contract.algo.ts:7
    // export default class ReferenceAccountAsset extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x6d68e54d 0x8264b405 // method "getAssetBalance()uint64", method "getAssetBalanceWithArg(account,asset)uint64"
    txna ApplicationArgs 0
    match main_getAssetBalance_route@3 main_getAssetBalanceWithArg_route@4

main_after_if_else@11:
    // contracts/ReferenceAccountAsset/contract.algo.ts:7
    // export default class ReferenceAccountAsset extends Contract {
    pushint 0 // 0
    return

main_getAssetBalanceWithArg_route@4:
    // contracts/ReferenceAccountAsset/contract.algo.ts:30
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/ReferenceAccountAsset/contract.algo.ts:7
    // export default class ReferenceAccountAsset extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // contracts/ReferenceAccountAsset/contract.algo.ts:30
    // @abimethod({ readonly: true })
    callsub getAssetBalanceWithArg
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_getAssetBalance_route@3:
    // contracts/ReferenceAccountAsset/contract.algo.ts:12
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getAssetBalance
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@7:
    // contracts/ReferenceAccountAsset/contract.algo.ts:7
    // export default class ReferenceAccountAsset extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/ReferenceAccountAsset/contract.algo.ts::ReferenceAccountAsset.getAssetBalance() -> uint64:
getAssetBalance:
    // contracts/ReferenceAccountAsset/contract.algo.ts:14
    // const address = new Address('R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM') // Replace with your account address
    bytec_1 // addr R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM
    // contracts/ReferenceAccountAsset/contract.algo.ts:17
    // const asset = Asset(1472) // Replace with your asset ID
    intc_1 // 1472
    // contracts/ReferenceAccountAsset/contract.algo.ts:19
    // assert(account.isOptedIn(asset), 'Account is not opted in to the asset')
    asset_holding_get AssetBalance
    bury 1
    assert // Account is not opted in to the asset
    // contracts/ReferenceAccountAsset/contract.algo.ts:14
    // const address = new Address('R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM') // Replace with your account address
    bytec_1 // addr R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM
    // contracts/ReferenceAccountAsset/contract.algo.ts:17
    // const asset = Asset(1472) // Replace with your asset ID
    intc_1 // 1472
    // contracts/ReferenceAccountAsset/contract.algo.ts:21
    // return asset.balance(account)
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// contracts/ReferenceAccountAsset/contract.algo.ts::ReferenceAccountAsset.getAssetBalanceWithArg(account: bytes, asset: uint64) -> uint64:
getAssetBalanceWithArg:
    // contracts/ReferenceAccountAsset/contract.algo.ts:30-31
    // @abimethod({ readonly: true })
    // public getAssetBalanceWithArg(account: Account, asset: Asset) {
    proto 2 1
    // contracts/ReferenceAccountAsset/contract.algo.ts:32
    // assert(account.isOptedIn(asset), 'Account is not opted in to the asset')
    frame_dig -2
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    assert // Account is not opted in to the asset
    // contracts/ReferenceAccountAsset/contract.algo.ts:34
    // return asset.balance(account)
    frame_dig -2
    frame_dig -1
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub
