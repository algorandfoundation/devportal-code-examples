#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1472 1
    bytecblock base32(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDA) 0x151f7c75
    // contracts/ReferenceAccountAsset/contract.algo.ts:9
    // export default class ReferenceAccountAsset extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x6d68e54d 0x6acd0ce2 // method "getAssetBalance()uint64", method "getAssetBalanceWithArg(address,uint64)uint64"
    txna ApplicationArgs 0
    match getAssetBalance getAssetBalanceWithArg
    err

main___algots__.defaultCreate@9:
    // contracts/ReferenceAccountAsset/contract.algo.ts:9
    // export default class ReferenceAccountAsset extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contracts/ReferenceAccountAsset/contract.algo.ts::ReferenceAccountAsset.getAssetBalance[routing]() -> void:
getAssetBalance:
    // contracts/ReferenceAccountAsset/contract.algo.ts:17
    // const addressBytes = address.bytes
    bytec_0 // addr R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM
    // contracts/ReferenceAccountAsset/contract.algo.ts:19
    // const asset = Asset(1472) // Replace with your asset ID
    intc_0 // 1472
    // contracts/ReferenceAccountAsset/contract.algo.ts:21
    // assert(account.isOptedIn(asset), 'Account is not opted in to the asset')
    asset_holding_get AssetBalance
    bury 1
    assert // Account is not opted in to the asset
    // contracts/ReferenceAccountAsset/contract.algo.ts:17
    // const addressBytes = address.bytes
    bytec_0 // addr R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM
    // contracts/ReferenceAccountAsset/contract.algo.ts:19
    // const asset = Asset(1472) // Replace with your asset ID
    intc_0 // 1472
    // contracts/ReferenceAccountAsset/contract.algo.ts:23
    // return asset.balance(account)
    asset_holding_get AssetBalance
    assert // account opted into asset
    // contracts/ReferenceAccountAsset/contract.algo.ts:14
    // @abimethod({ readonly: true })
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// contracts/ReferenceAccountAsset/contract.algo.ts::ReferenceAccountAsset.getAssetBalanceWithArg[routing]() -> void:
getAssetBalanceWithArg:
    // contracts/ReferenceAccountAsset/contract.algo.ts:32
    // @abimethod({ readonly: true })
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // contracts/ReferenceAccountAsset/contract.algo.ts:34
    // assert(account.isOptedIn(asset), 'Account is not opted in to the asset')
    dup2
    asset_holding_get AssetBalance
    bury 1
    assert // Account is not opted in to the asset
    // contracts/ReferenceAccountAsset/contract.algo.ts:36
    // return asset.balance(account)
    asset_holding_get AssetBalance
    assert // account opted into asset
    // contracts/ReferenceAccountAsset/contract.algo.ts:32
    // @abimethod({ readonly: true })
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return
