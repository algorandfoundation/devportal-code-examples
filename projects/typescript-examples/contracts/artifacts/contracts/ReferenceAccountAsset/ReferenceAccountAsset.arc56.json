{
    "name": "ReferenceAccountAsset",
    "structs": {},
    "methods": [
        {
            "name": "getAssetBalance",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The asset balance of the account"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the balance of a specific asset in a hardcoded account",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAssetBalanceWithArg",
            "args": [
                {
                    "type": "account",
                    "name": "account",
                    "desc": "The account to check the asset balance for"
                },
                {
                    "type": "asset",
                    "name": "asset",
                    "desc": "The asset to check the balance of"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The asset balance of the account"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns the balance of a specific asset in a provided account",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "A contract that demonstrates how to reference both accounts and assets in a smart contract",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        138,
                        156
                    ],
                    "errorMessage": "Account is not opted in to the asset"
                },
                {
                    "pc": [
                        78,
                        107
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        143,
                        163
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        129
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        81,
                        110
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAxNDcyCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUgYmFzZTMyKFIzSjc2TURQRVhRRVdCVjJMUTZGTFE0UFlDNFFYTkhIUElMMkJYMktTRlU0V1VOSkpNREEpCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFzc2V0L2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlQWNjb3VudEFzc2V0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDcKICAgIHB1c2hieXRlc3MgMHg2ZDY4ZTU0ZCAweDgyNjRiNDA1IC8vIG1ldGhvZCAiZ2V0QXNzZXRCYWxhbmNlKCl1aW50NjQiLCBtZXRob2QgImdldEFzc2V0QmFsYW5jZVdpdGhBcmcoYWNjb3VudCxhc3NldCl1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2dldEFzc2V0QmFsYW5jZV9yb3V0ZUAzIG1haW5fZ2V0QXNzZXRCYWxhbmNlV2l0aEFyZ19yb3V0ZUA0CgptYWluX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFzc2V0L2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlQWNjb3VudEFzc2V0IGV4dGVuZHMgQ29udHJhY3QgewogICAgcHVzaGludCAwIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRBc3NldEJhbGFuY2VXaXRoQXJnX3JvdXRlQDQ6CiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFzc2V0L2NvbnRyYWN0LmFsZ28udHM6MzAKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFzc2V0L2NvbnRyYWN0LmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlQWNjb3VudEFzc2V0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBc3NldC9jb250cmFjdC5hbGdvLnRzOjMwCiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgZ2V0QXNzZXRCYWxhbmNlV2l0aEFyZwogICAgaXRvYgogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRBc3NldEJhbGFuY2Vfcm91dGVAMzoKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXNzZXQvY29udHJhY3QuYWxnby50czoxMgogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0QXNzZXRCYWxhbmNlCiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0A3OgogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBc3NldC9jb250cmFjdC5hbGdvLnRzOjcKICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZmVyZW5jZUFjY291bnRBc3NldCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBc3NldC9jb250cmFjdC5hbGdvLnRzOjpSZWZlcmVuY2VBY2NvdW50QXNzZXQuZ2V0QXNzZXRCYWxhbmNlKCkgLT4gdWludDY0OgpnZXRBc3NldEJhbGFuY2U6CiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFzc2V0L2NvbnRyYWN0LmFsZ28udHM6MTQKICAgIC8vIGNvbnN0IGFkZHJlc3MgPSBuZXcgQWRkcmVzcygnUjNKNzZNRFBFWFFFV0JWMkxRNkZMUTRQWUM0UVhOSEhQSUwyQlgyS1NGVTRXVU5KSk1EQlRMUk5FTScpIC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGFjY291bnQgYWRkcmVzcwogICAgYnl0ZWNfMSAvLyBhZGRyIFIzSjc2TURQRVhRRVdCVjJMUTZGTFE0UFlDNFFYTkhIUElMMkJYMktTRlU0V1VOSkpNREJUTFJORU0KICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXNzZXQvY29udHJhY3QuYWxnby50czoxNwogICAgLy8gY29uc3QgYXNzZXQgPSBBc3NldCgxNDcyKSAvLyBSZXBsYWNlIHdpdGggeW91ciBhc3NldCBJRAogICAgaW50Y18xIC8vIDE0NzIKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXNzZXQvY29udHJhY3QuYWxnby50czoxOQogICAgLy8gYXNzZXJ0KGFjY291bnQuaXNPcHRlZEluKGFzc2V0KSwgJ0FjY291bnQgaXMgbm90IG9wdGVkIGluIHRvIHRoZSBhc3NldCcpCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IG9wdGVkIGluIHRvIHRoZSBhc3NldAogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBc3NldC9jb250cmFjdC5hbGdvLnRzOjE0CiAgICAvLyBjb25zdCBhZGRyZXNzID0gbmV3IEFkZHJlc3MoJ1IzSjc2TURQRVhRRVdCVjJMUTZGTFE0UFlDNFFYTkhIUElMMkJYMktTRlU0V1VOSkpNREJUTFJORU0nKSAvLyBSZXBsYWNlIHdpdGggeW91ciBhY2NvdW50IGFkZHJlc3MKICAgIGJ5dGVjXzEgLy8gYWRkciBSM0o3Nk1EUEVYUUVXQlYyTFE2RkxRNFBZQzRRWE5ISFBJTDJCWDJLU0ZVNFdVTkpKTURCVExSTkVNCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFzc2V0L2NvbnRyYWN0LmFsZ28udHM6MTcKICAgIC8vIGNvbnN0IGFzc2V0ID0gQXNzZXQoMTQ3MikgLy8gUmVwbGFjZSB3aXRoIHlvdXIgYXNzZXQgSUQKICAgIGludGNfMSAvLyAxNDcyCiAgICAvLyBjb250cmFjdHMvUmVmZXJlbmNlQWNjb3VudEFzc2V0L2NvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIHJldHVybiBhc3NldC5iYWxhbmNlKGFjY291bnQpCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IG9wdGVkIGludG8gYXNzZXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXNzZXQvY29udHJhY3QuYWxnby50czo6UmVmZXJlbmNlQWNjb3VudEFzc2V0LmdldEFzc2V0QmFsYW5jZVdpdGhBcmcoYWNjb3VudDogYnl0ZXMsIGFzc2V0OiB1aW50NjQpIC0+IHVpbnQ2NDoKZ2V0QXNzZXRCYWxhbmNlV2l0aEFyZzoKICAgIC8vIGNvbnRyYWN0cy9SZWZlcmVuY2VBY2NvdW50QXNzZXQvY29udHJhY3QuYWxnby50czozMC0zMQogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgZ2V0QXNzZXRCYWxhbmNlV2l0aEFyZyhhY2NvdW50OiBBY2NvdW50LCBhc3NldDogQXNzZXQpIHsKICAgIHByb3RvIDIgMQogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBc3NldC9jb250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyBhc3NlcnQoYWNjb3VudC5pc09wdGVkSW4oYXNzZXQpLCAnQWNjb3VudCBpcyBub3Qgb3B0ZWQgaW4gdG8gdGhlIGFzc2V0JykKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IG9wdGVkIGluIHRvIHRoZSBhc3NldAogICAgLy8gY29udHJhY3RzL1JlZmVyZW5jZUFjY291bnRBc3NldC9jb250cmFjdC5hbGdvLnRzOjM0CiAgICAvLyByZXR1cm4gYXNzZXQuYmFsYW5jZShhY2NvdW50KQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgb3B0ZWQgaW50byBhc3NldAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAcALJgIEFR98dSCO0/8wbyXgSwa6XDxVw4/AuQu053oXoN9KkWnLUalLBjEbQQBGggIEbWjlTQSCZLQFNhoAjgIAIAADgQBDMRkURDEYRDYaARfAHDYaAhfAMIgAMBYoTFCwIkMxGRREMRhEiAASFihMULAiQzEZQP/KMRgURCJDKSNwAEUBRCkjcABEiYoCAYv+i/9wAEUBRIv+i/9wAESJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}