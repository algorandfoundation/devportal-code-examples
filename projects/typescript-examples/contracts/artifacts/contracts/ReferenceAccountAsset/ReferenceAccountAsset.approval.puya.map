{
  "version": 3,
  "sources": [
    "/Users/gabe.algo/Code/devportal-code-examples/projects/typescript-examples/contracts/ReferenceAccountAsset/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AAuBG;;AAAA;AAAA;AAAA;;AAAA;AAvBH;;;AAAA;;;AAAA;AAuBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAQyB;AAED;AAEb;;AAAA;;AAAP;AAJqB;AAED;AAIb;;AAAA;AAAP;AASF;;;AAES;;AAAA;;AAAA;;AAAA;;AAAP;AAEO;;AAAA;;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 1472"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 base32(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDA)"
    },
    "46": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "48": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "51": {
      "op": "pushbytess 0x6d68e54d 0x6acd0ce2 // method \"getAssetBalance()uint64\", method \"getAssetBalanceWithArg(address,uint64)uint64\"",
      "defined_out": [
        "Method(getAssetBalance()uint64)",
        "Method(getAssetBalanceWithArg(address,uint64)uint64)"
      ],
      "stack_out": [
        "Method(getAssetBalance()uint64)",
        "Method(getAssetBalanceWithArg(address,uint64)uint64)"
      ]
    },
    "63": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getAssetBalance()uint64)",
        "Method(getAssetBalanceWithArg(address,uint64)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getAssetBalance()uint64)",
        "Method(getAssetBalanceWithArg(address,uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "66": {
      "op": "match main_getAssetBalance_route@3 main_getAssetBalanceWithArg_route@4",
      "stack_out": []
    },
    "72": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "73": {
      "block": "main_getAssetBalanceWithArg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "75": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "76": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "77": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "79": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "80": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "86": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%15#0"
      ]
    },
    "87": {
      "callsub": "contracts/ReferenceAccountAsset/contract.algo.ts::ReferenceAccountAsset.getAssetBalanceWithArg",
      "op": "callsub getAssetBalanceWithArg",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "90": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "91": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "92": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "93": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "94": {
      "op": "log",
      "stack_out": []
    },
    "95": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "block": "main_getAssetBalance_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "99": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "100": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "103": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "104": {
      "callsub": "contracts/ReferenceAccountAsset/contract.algo.ts::ReferenceAccountAsset.getAssetBalance",
      "op": "callsub getAssetBalance",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "108": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "109": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "110": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "111": {
      "op": "log",
      "stack_out": []
    },
    "112": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "113": {
      "op": "return",
      "stack_out": []
    },
    "114": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "116": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "119": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "121": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "122": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "123": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "124": {
      "op": "return",
      "stack_out": []
    },
    "125": {
      "subroutine": "contracts/ReferenceAccountAsset/contract.algo.ts::ReferenceAccountAsset.getAssetBalance",
      "params": {},
      "block": "getAssetBalance",
      "stack_in": [],
      "op": "bytec_1 // addr R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM",
      "defined_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)"
      ],
      "stack_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)"
      ]
    },
    "126": {
      "op": "intc_1 // 1472",
      "defined_out": [
        "1472",
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)"
      ],
      "stack_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)",
        "1472"
      ]
    },
    "127": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "129": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "131": {
      "error": "Account is not opted in to the asset",
      "op": "assert // Account is not opted in to the asset",
      "stack_out": []
    },
    "132": {
      "op": "bytec_1 // addr R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM",
      "stack_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)"
      ]
    },
    "133": {
      "op": "intc_1 // 1472",
      "stack_out": [
        "Address(R3J76MDPEXQEWBV2LQ6FLQ4PYC4QXNHHPIL2BX2KSFU4WUNJJMDBTLRNEM)",
        "1472"
      ]
    },
    "134": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "136": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "137": {
      "retsub": true,
      "op": "retsub"
    },
    "138": {
      "subroutine": "contracts/ReferenceAccountAsset/contract.algo.ts::ReferenceAccountAsset.getAssetBalanceWithArg",
      "params": {
        "account#0": "bytes",
        "asset#0": "uint64"
      },
      "block": "getAssetBalanceWithArg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "141": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "143": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "asset#0 (copy)"
      ]
    },
    "145": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "147": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "149": {
      "error": "Account is not opted in to the asset",
      "op": "assert // Account is not opted in to the asset",
      "stack_out": []
    },
    "150": {
      "op": "frame_dig -2",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "152": {
      "op": "frame_dig -1",
      "stack_out": [
        "account#0 (copy)",
        "asset#0 (copy)"
      ]
    },
    "154": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "156": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "157": {
      "retsub": true,
      "op": "retsub"
    }
  }
}