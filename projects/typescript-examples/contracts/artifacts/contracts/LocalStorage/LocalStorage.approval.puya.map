{
  "version": 3,
  "sources": [
    "/Users/hyunggunkim/Documents/buidl/new-devportal/code-examples/devportal-code-examples/projects/typescript-examples/contracts/LocalStorage/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAoIE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAlHF;;;AAAA;;;AAkHE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AA7FF;;;AAAA;;;AAAA;;;AAAA;;;AA6FE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AArEF;;;AAAA;;;AAAA;;;;AAAA;AAAA;;;AAAA;AAAA;;AAqEE;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAvBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAyBsB;;AAtBwB;;AAsBR;;AAAlC;AAC2B;;AAtBtB;;AAsBsC;;;AAA3C;AACoB;;AAtBf;;AAsBqC;;;;;;;;AAA1C;AACqB;;AAtBhB;AAsBgC;;;;;;;;AAArC;AACmB;;AAtBd;AAsB8B;AAAnC;AACsB;;AAtBjB;AAsBqC;;AAA1C;;AAgBmB;;AAE+C;AAAA;AAxC7D;AAwC6D;AAAA;AAG1C;;AAAA;AAhDkB;;AAgDlB;AAAA;AACS;;AAAA;AAhD5B;;AAgD4B;AAAA;AACP;;AAAA;AAhDrB;;AAgDqB;AAAA;AACC;;AAAA;AAhDtB;AAgDsB;AAAA;AACF;;AAAA;AAhDpB;AAgDoB;AAAA;AALzB;;AAAA;AAmBF;;;AAEqB;;AAEZ;AAAwB;;AAAxB;AAAP;AAEA;AArEK;AAqEL;;AAAA;AACA;AArEK;AAqEL;;AAAA;AACA;AArEK;AAqEL;;AAAA;AAEgC;AAAA;AAzE3B;AAyE2B;AAAA;AAAzB;;AAAA;AAAP;AAC8B;AAAA;AAzEzB;AAyEyB;AAAA;AAAvB;;AAAA;AAAP;AACiC;AAzE5B;AAyE4B;AAAA;AAA1B;;AAAA;AAAP;;AAYF;;;AACqB;;AAEZ;AAAwB;;AAAxB;AAAP;AAIA;AAAA;;AAAA;;AAAA;AAEkC;AAAA;AAAA;;AAAA;AAAA;AAA3B;;AAAA;AAAP;AAEkC;AAAA;;AAAA;AAAA;AAAlC;AAUF;;;AACqB;;AAEZ;AAAwB;;AAAxB;AAAP;AAIkC;AAA3B;AAA2B;;AAAA;AAAA;;AAAlC;AAEkC;AAAA;;AAAA;AAAA;AAAlC;AAUmB;;AAEZ;AAAwB;;AAAxB;AAAP;AAEA;AAtI0C;;AAsI1C;AACA;AAtIK;;AAsIL;AACA;AAtIK;;AAsIL;AACA;AAtIK;AAsIL;AACA;AAtIK;AAsIL;AArIK;AAsIL;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"localString\" \"localBool\" \"localAccount\" 0x151f7c75 \"int\" \"localIntNoDefault\" \"localBytes\""
    },
    "80": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "82": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "85": {
      "op": "pushbytess 0x01a3a3ff 0xd0013fc5 0x02818b4c 0x2793c249 0x213631f5 0x5e58051a // method \"optInToApplication()void\", method \"readLocalState()(uint64,uint64,byte[],string,bool,address)\", method \"writeLocalState(string,bool,account)void\", method \"writeDynamicLocalState(string,string)string\", method \"readDynamicLocalState(string)string\", method \"clearLocalState()void\"",
      "defined_out": [
        "Method(clearLocalState()void)",
        "Method(optInToApplication()void)",
        "Method(readDynamicLocalState(string)string)",
        "Method(readLocalState()(uint64,uint64,byte[],string,bool,address))",
        "Method(writeDynamicLocalState(string,string)string)",
        "Method(writeLocalState(string,bool,account)void)"
      ],
      "stack_out": [
        "Method(optInToApplication()void)",
        "Method(readLocalState()(uint64,uint64,byte[],string,bool,address))",
        "Method(writeLocalState(string,bool,account)void)",
        "Method(writeDynamicLocalState(string,string)string)",
        "Method(readDynamicLocalState(string)string)",
        "Method(clearLocalState()void)"
      ]
    },
    "117": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(clearLocalState()void)",
        "Method(optInToApplication()void)",
        "Method(readDynamicLocalState(string)string)",
        "Method(readLocalState()(uint64,uint64,byte[],string,bool,address))",
        "Method(writeDynamicLocalState(string,string)string)",
        "Method(writeLocalState(string,bool,account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(optInToApplication()void)",
        "Method(readLocalState()(uint64,uint64,byte[],string,bool,address))",
        "Method(writeLocalState(string,bool,account)void)",
        "Method(writeDynamicLocalState(string,string)string)",
        "Method(readDynamicLocalState(string)string)",
        "Method(clearLocalState()void)",
        "tmp%2#0"
      ]
    },
    "120": {
      "op": "match main_optInToApplication_route@3 main_readLocalState_route@4 main_writeLocalState_route@5 main_writeDynamicLocalState_route@6 main_readDynamicLocalState_route@7 main_clearLocalState_route@8",
      "stack_out": []
    },
    "134": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "return",
      "stack_out": []
    },
    "136": {
      "block": "main_clearLocalState_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "138": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "142": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "143": {
      "callsub": "contracts/LocalStorage/contract.algo.ts::LocalStorage.clearLocalState",
      "op": "callsub clearLocalState"
    },
    "146": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "147": {
      "op": "return",
      "stack_out": []
    },
    "148": {
      "block": "main_readDynamicLocalState_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "150": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "151": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "152": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "154": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "155": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "158": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "161": {
      "callsub": "contracts/LocalStorage/contract.algo.ts::LocalStorage.readDynamicLocalState",
      "op": "callsub readDynamicLocalState",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "164": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "165": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%3#0"
      ]
    },
    "166": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%5#0"
      ]
    },
    "167": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%3#0"
      ]
    },
    "170": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%1#0"
      ]
    },
    "171": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "172": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "175": {
      "op": "log",
      "stack_out": []
    },
    "176": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "177": {
      "op": "return",
      "stack_out": []
    },
    "178": {
      "block": "main_writeDynamicLocalState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "180": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "181": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "182": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "184": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "185": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "188": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "191": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "194": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "197": {
      "callsub": "contracts/LocalStorage/contract.algo.ts::LocalStorage.writeDynamicLocalState",
      "op": "callsub writeDynamicLocalState",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "200": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "201": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%2#0"
      ]
    },
    "202": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%4#0"
      ]
    },
    "203": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%2#0"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%0#0"
      ]
    },
    "207": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "208": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "209": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "210": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "211": {
      "op": "log",
      "stack_out": []
    },
    "212": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "return",
      "stack_out": []
    },
    "214": {
      "block": "main_writeLocalState_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "216": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "217": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "218": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "220": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "221": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "224": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "227": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "230": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "231": {
      "op": "getbit",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "232": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "235": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "236": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "238": {
      "callsub": "contracts/LocalStorage/contract.algo.ts::LocalStorage.writeLocalState",
      "op": "callsub writeLocalState",
      "stack_out": []
    },
    "241": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "block": "main_readLocalState_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "245": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "246": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "247": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "249": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "250": {
      "callsub": "contracts/LocalStorage/contract.algo.ts::LocalStorage.readLocalState",
      "op": "callsub readLocalState",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "253": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%0#0"
      ]
    },
    "255": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "256": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "258": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "259": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "261": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length%0#0"
      ]
    },
    "262": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "as_bytes%0#0"
      ]
    },
    "263": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0"
      ]
    },
    "266": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0"
      ]
    },
    "269": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "271": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "272": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "273": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "276": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "elements_to_encode%3#0"
      ]
    },
    "278": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "279": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00"
      ]
    },
    "282": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00",
        "0"
      ]
    },
    "283": {
      "op": "uncover 7",
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x00",
        "0",
        "elements_to_encode%4#0"
      ]
    },
    "285": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0"
      ]
    },
    "286": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "288": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "290": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "291": {
      "op": "pushbytes 0x0035",
      "defined_out": [
        "0x0035",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "0x0035"
      ]
    },
    "295": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "296": {
      "op": "dig 3",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "298": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0"
      ]
    },
    "299": {
      "op": "pushint 53 // 53",
      "defined_out": [
        "53",
        "data_length%0#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0",
        "53"
      ]
    },
    "301": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "302": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "as_bytes%3#0"
      ]
    },
    "303": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "306": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_bool%0#0"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "309": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0",
        "elements_to_encode%5#0"
      ]
    },
    "311": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "312": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ]
    },
    "314": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "315": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%1#0"
      ]
    },
    "316": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0"
      ]
    },
    "317": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "0x151f7c75"
      ]
    },
    "318": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "319": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "320": {
      "op": "log",
      "stack_out": []
    },
    "321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "322": {
      "op": "return",
      "stack_out": []
    },
    "323": {
      "block": "main_optInToApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "325": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "326": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "327": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "328": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "330": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "331": {
      "callsub": "contracts/LocalStorage/contract.algo.ts::LocalStorage.optInToApplication",
      "op": "callsub optInToApplication"
    },
    "334": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "335": {
      "op": "return",
      "stack_out": []
    },
    "336": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "338": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "341": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "343": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "344": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "345": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "346": {
      "op": "return",
      "stack_out": []
    },
    "347": {
      "subroutine": "contracts/LocalStorage/contract.algo.ts::LocalStorage.optInToApplication",
      "params": {},
      "block": "optInToApplication",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "349": {
      "op": "bytec 4 // \"int\"",
      "defined_out": [
        "\"int\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"int\""
      ]
    },
    "351": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "\"int\"",
        "100",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"int\"",
        "100"
      ]
    },
    "353": {
      "op": "app_local_put",
      "stack_out": []
    },
    "354": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "356": {
      "op": "bytec 5 // \"localIntNoDefault\"",
      "defined_out": [
        "\"localIntNoDefault\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"localIntNoDefault\""
      ]
    },
    "358": {
      "op": "pushint 200 // 200",
      "defined_out": [
        "\"localIntNoDefault\"",
        "200",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"localIntNoDefault\"",
        "200"
      ]
    },
    "361": {
      "op": "app_local_put",
      "stack_out": []
    },
    "362": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "364": {
      "op": "bytec 6 // \"localBytes\"",
      "defined_out": [
        "\"localBytes\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"localBytes\""
      ]
    },
    "366": {
      "op": "pushbytes \"Silvio\"",
      "defined_out": [
        "\"Silvio\"",
        "\"localBytes\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"localBytes\"",
        "\"Silvio\""
      ]
    },
    "374": {
      "op": "app_local_put",
      "stack_out": []
    },
    "375": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "377": {
      "op": "bytec_0 // \"localString\"",
      "defined_out": [
        "\"localString\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"localString\""
      ]
    },
    "378": {
      "op": "pushbytes \"Micali\"",
      "defined_out": [
        "\"Micali\"",
        "\"localString\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"localString\"",
        "\"Micali\""
      ]
    },
    "386": {
      "op": "app_local_put",
      "stack_out": []
    },
    "387": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "389": {
      "op": "bytec_1 // \"localBool\"",
      "defined_out": [
        "\"localBool\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"localBool\""
      ]
    },
    "390": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"localBool\"",
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"localBool\"",
        "1"
      ]
    },
    "391": {
      "op": "app_local_put",
      "stack_out": []
    },
    "392": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "394": {
      "op": "bytec_2 // \"localAccount\"",
      "defined_out": [
        "\"localAccount\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "\"localAccount\""
      ]
    },
    "395": {
      "op": "txn Sender",
      "defined_out": [
        "\"localAccount\"",
        "new_state_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "\"localAccount\"",
        "new_state_value%0#0"
      ]
    },
    "397": {
      "op": "app_local_put",
      "stack_out": []
    },
    "398": {
      "retsub": true,
      "op": "retsub"
    },
    "399": {
      "subroutine": "contracts/LocalStorage/contract.algo.ts::LocalStorage.readLocalState",
      "params": {},
      "block": "readLocalState",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "401": {
      "op": "dup",
      "defined_out": [
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "402": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "403": {
      "op": "bytec_2 // \"localAccount\"",
      "defined_out": [
        "\"localAccount\"",
        "0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0",
        "\"localAccount\""
      ]
    },
    "404": {
      "op": "app_local_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_exists%0#0"
      ]
    },
    "405": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "sender#0",
        "accountAddress#0"
      ]
    },
    "406": {
      "op": "dig 1",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "sender#0 (copy)"
      ]
    },
    "408": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "409": {
      "op": "bytec 4 // \"int\"",
      "defined_out": [
        "\"int\"",
        "0",
        "accountAddress#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "sender#0 (copy)",
        "0",
        "\"int\""
      ]
    },
    "411": {
      "op": "app_local_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "412": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0"
      ]
    },
    "413": {
      "op": "dig 2",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "sender#0 (copy)"
      ]
    },
    "415": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "416": {
      "op": "bytec 5 // \"localIntNoDefault\"",
      "defined_out": [
        "\"localIntNoDefault\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "sender#0 (copy)",
        "0",
        "\"localIntNoDefault\""
      ]
    },
    "418": {
      "op": "app_local_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "419": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "420": {
      "op": "dig 3",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "sender#0 (copy)"
      ]
    },
    "422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "423": {
      "op": "bytec 6 // \"localBytes\"",
      "defined_out": [
        "\"localBytes\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "sender#0 (copy)",
        "0",
        "\"localBytes\""
      ]
    },
    "425": {
      "op": "app_local_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "426": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "427": {
      "op": "dig 4",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "sender#0 (copy)"
      ]
    },
    "429": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "430": {
      "op": "bytec_0 // \"localString\"",
      "defined_out": [
        "\"localString\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "sender#0 (copy)",
        "0",
        "\"localString\""
      ]
    },
    "431": {
      "op": "app_local_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "432": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "sender#0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "433": {
      "op": "uncover 5",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "sender#0"
      ]
    },
    "435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "sender#0",
        "0"
      ]
    },
    "436": {
      "op": "bytec_1 // \"localBool\"",
      "defined_out": [
        "\"localBool\"",
        "0",
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "sender#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "sender#0",
        "0",
        "\"localBool\""
      ]
    },
    "437": {
      "op": "app_local_get_ex",
      "defined_out": [
        "accountAddress#0",
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "438": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "accountAddress#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "439": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "accountAddress#0"
      ]
    },
    "441": {
      "retsub": true,
      "op": "retsub"
    },
    "442": {
      "subroutine": "contracts/LocalStorage/contract.algo.ts::LocalStorage.writeLocalState",
      "params": {
        "valueString#0": "bytes",
        "valueBool#0": "uint64",
        "valueAccount#0": "bytes"
      },
      "block": "writeLocalState",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "445": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "447": {
      "op": "dup"
    },
    "448": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "sender#0",
        "sender#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "tmp%0#0"
      ]
    },
    "450": {
      "op": "app_opted_in",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0"
      ]
    },
    "451": {
      "error": "Account must opt in to contract first",
      "op": "assert // Account must opt in to contract first",
      "stack_out": [
        "sender#0"
      ]
    },
    "452": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "453": {
      "op": "bytec_0 // \"localString\"",
      "defined_out": [
        "\"localString\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localString\""
      ]
    },
    "454": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"localString\"",
        "sender#0",
        "sender#0 (copy)",
        "valueString#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localString\"",
        "valueString#0 (copy)"
      ]
    },
    "456": {
      "op": "app_local_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "457": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "458": {
      "op": "bytec_1 // \"localBool\"",
      "defined_out": [
        "\"localBool\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localBool\""
      ]
    },
    "459": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"localBool\"",
        "sender#0",
        "sender#0 (copy)",
        "valueBool#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localBool\"",
        "valueBool#0 (copy)"
      ]
    },
    "461": {
      "op": "app_local_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "462": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "463": {
      "op": "bytec_2 // \"localAccount\"",
      "defined_out": [
        "\"localAccount\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localAccount\""
      ]
    },
    "464": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"localAccount\"",
        "sender#0",
        "sender#0 (copy)",
        "valueAccount#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localAccount\"",
        "valueAccount#0 (copy)"
      ]
    },
    "466": {
      "op": "app_local_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "467": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "468": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "469": {
      "op": "bytec_0 // \"localString\"",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0",
        "\"localString\""
      ]
    },
    "470": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "471": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%0#0"
      ]
    },
    "472": {
      "op": "frame_dig -3",
      "stack_out": [
        "sender#0",
        "maybe_value%0#0",
        "valueString#0 (copy)"
      ]
    },
    "474": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%2#0"
      ]
    },
    "475": {
      "op": "assert",
      "stack_out": [
        "sender#0"
      ]
    },
    "476": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "477": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "478": {
      "op": "bytec_1 // \"localBool\"",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0",
        "\"localBool\""
      ]
    },
    "479": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "480": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%1#0"
      ]
    },
    "481": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender#0",
        "maybe_value%1#0",
        "valueBool#0 (copy)"
      ]
    },
    "483": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%3#0"
      ]
    },
    "484": {
      "op": "assert",
      "stack_out": [
        "sender#0"
      ]
    },
    "485": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "486": {
      "op": "bytec_2 // \"localAccount\"",
      "stack_out": [
        "sender#0",
        "0",
        "\"localAccount\""
      ]
    },
    "487": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "488": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "489": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%2#0",
        "valueAccount#0 (copy)"
      ]
    },
    "491": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "492": {
      "op": "assert",
      "stack_out": []
    },
    "493": {
      "retsub": true,
      "op": "retsub"
    },
    "494": {
      "subroutine": "contracts/LocalStorage/contract.algo.ts::LocalStorage.writeDynamicLocalState",
      "params": {
        "key#0": "bytes",
        "value#0": "bytes"
      },
      "block": "writeDynamicLocalState",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "497": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "499": {
      "op": "dup"
    },
    "500": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "sender#0",
        "sender#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "tmp%0#0"
      ]
    },
    "502": {
      "op": "app_opted_in",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0"
      ]
    },
    "503": {
      "error": "Account must opt in to contract first",
      "op": "assert // Account must opt in to contract first",
      "stack_out": [
        "sender#0"
      ]
    },
    "504": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "505": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "key#0 (copy)"
      ]
    },
    "507": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)",
        "sender#0",
        "sender#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "key#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "509": {
      "op": "app_local_put",
      "stack_out": [
        "sender#0"
      ]
    },
    "510": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "511": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "512": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0",
        "key#0 (copy)"
      ]
    },
    "514": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "515": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "sender#0",
        "maybe_value%0#0"
      ]
    },
    "516": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "maybe_value%0#0",
        "value#0 (copy)"
      ]
    },
    "518": {
      "op": "==",
      "defined_out": [
        "sender#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%2#0"
      ]
    },
    "519": {
      "op": "assert",
      "stack_out": [
        "sender#0"
      ]
    },
    "520": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "521": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender#0",
        "0",
        "key#0 (copy)"
      ]
    },
    "523": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "524": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "525": {
      "retsub": true,
      "op": "retsub"
    },
    "526": {
      "subroutine": "contracts/LocalStorage/contract.algo.ts::LocalStorage.readDynamicLocalState",
      "params": {
        "key#0": "bytes"
      },
      "block": "readDynamicLocalState",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "529": {
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "531": {
      "op": "dup"
    },
    "532": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "sender#0",
        "sender#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "tmp%0#0"
      ]
    },
    "534": {
      "op": "app_opted_in",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0"
      ]
    },
    "535": {
      "error": "Account must opt in to contract first",
      "op": "assert // Account must opt in to contract first",
      "stack_out": [
        "sender#0"
      ]
    },
    "536": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "537": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0"
      ]
    },
    "538": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "key#0 (copy)",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "0",
        "key#0 (copy)"
      ]
    },
    "540": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "541": {
      "op": "bury 1",
      "stack_out": [
        "sender#0",
        "maybe_exists%0#0"
      ]
    },
    "543": {
      "error": "Key not found",
      "op": "assert // Key not found",
      "stack_out": [
        "sender#0"
      ]
    },
    "544": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "0"
      ]
    },
    "545": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "0",
        "key#0 (copy)"
      ]
    },
    "547": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "548": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "549": {
      "retsub": true,
      "op": "retsub"
    },
    "550": {
      "subroutine": "contracts/LocalStorage/contract.algo.ts::LocalStorage.clearLocalState",
      "params": {},
      "block": "clearLocalState",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "552": {
      "op": "dup"
    },
    "553": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "sender#0",
        "sender#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "tmp%0#0"
      ]
    },
    "555": {
      "op": "app_opted_in",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0"
      ]
    },
    "556": {
      "error": "Account must opt in to contract first",
      "op": "assert // Account must opt in to contract first",
      "stack_out": [
        "sender#0"
      ]
    },
    "557": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "558": {
      "op": "bytec 4 // \"int\"",
      "defined_out": [
        "\"int\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"int\""
      ]
    },
    "560": {
      "op": "app_local_del",
      "stack_out": [
        "sender#0"
      ]
    },
    "561": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "562": {
      "op": "bytec 5 // \"localIntNoDefault\"",
      "defined_out": [
        "\"localIntNoDefault\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localIntNoDefault\""
      ]
    },
    "564": {
      "op": "app_local_del",
      "stack_out": [
        "sender#0"
      ]
    },
    "565": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "566": {
      "op": "bytec 6 // \"localBytes\"",
      "defined_out": [
        "\"localBytes\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localBytes\""
      ]
    },
    "568": {
      "op": "app_local_del",
      "stack_out": [
        "sender#0"
      ]
    },
    "569": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "570": {
      "op": "bytec_0 // \"localString\"",
      "defined_out": [
        "\"localString\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localString\""
      ]
    },
    "571": {
      "op": "app_local_del",
      "stack_out": [
        "sender#0"
      ]
    },
    "572": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "sender#0 (copy)"
      ]
    },
    "573": {
      "op": "bytec_1 // \"localBool\"",
      "defined_out": [
        "\"localBool\"",
        "sender#0",
        "sender#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "sender#0 (copy)",
        "\"localBool\""
      ]
    },
    "574": {
      "op": "app_local_del",
      "stack_out": [
        "sender#0"
      ]
    },
    "575": {
      "op": "bytec_2 // \"localAccount\"",
      "defined_out": [
        "\"localAccount\"",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "\"localAccount\""
      ]
    },
    "576": {
      "op": "app_local_del",
      "stack_out": []
    },
    "577": {
      "retsub": true,
      "op": "retsub"
    }
  }
}