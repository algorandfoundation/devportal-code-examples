#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "localString" "localBool" "localAccount" "int" "localIntNoDefault" "localBytes" 0x151f7c75
    // contracts/LocalStorage/contract.algo.ts:23-24
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@14
    pushbytes 0x01a3a3ff // method "optInToApplication()void"
    txna ApplicationArgs 0
    match main_optInToApplication_route@3

main_switch_case_next@4:
    // contracts/LocalStorage/contract.algo.ts:23-24
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xd0013fc5 0xa6b79c3d 0x2793c249 0x213631f5 0x5e58051a // method "readLocalState()(uint64,uint64,byte[],string,bool,address)", method "writeLocalState(string,bool,address)void", method "writeDynamicLocalState(string,string)string", method "readDynamicLocalState(string)string", method "clearLocalState()void"
    txna ApplicationArgs 0
    match readLocalState writeLocalState writeDynamicLocalState readDynamicLocalState clearLocalState
    err

main_optInToApplication_route@3:
    // contracts/LocalStorage/contract.algo.ts:46
    // @arc4.abimethod({ allowActions: 'OptIn' })
    txn OnCompletion
    intc_1 // OptIn
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be OptIn && can only call when not creating
    b optInToApplication

main___algots__.defaultCreate@14:
    // contracts/LocalStorage/contract.algo.ts:23-24
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contracts/LocalStorage/contract.algo.ts::LocalStorage.optInToApplication[routing]() -> void:
optInToApplication:
    // contracts/LocalStorage/contract.algo.ts:48
    // this.localInt(Txn.sender).value = 100
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:26
    // public localInt = LocalState<uint64>({ key: 'int' })
    bytec_3 // "int"
    // contracts/LocalStorage/contract.algo.ts:48
    // this.localInt(Txn.sender).value = 100
    pushint 100 // 100
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:49
    // this.localIntNoDefault(Txn.sender).value = 200
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:27
    // public localIntNoDefault = LocalState<uint64>()
    bytec 4 // "localIntNoDefault"
    // contracts/LocalStorage/contract.algo.ts:49
    // this.localIntNoDefault(Txn.sender).value = 200
    pushint 200 // 200
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:50
    // this.localBytes(Txn.sender).value = Bytes('Silvio')
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:28
    // public localBytes = LocalState<bytes>()
    bytec 5 // "localBytes"
    // contracts/LocalStorage/contract.algo.ts:50
    // this.localBytes(Txn.sender).value = Bytes('Silvio')
    pushbytes "Silvio"
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:51
    // this.localString(Txn.sender).value = 'Micali'
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:29
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:51
    // this.localString(Txn.sender).value = 'Micali'
    pushbytes "Micali"
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:52
    // this.localBool(Txn.sender).value = true
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:30
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:52
    // this.localBool(Txn.sender).value = true
    intc_1 // 1
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:53
    // this.localAccount(Txn.sender).value = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:31
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:53
    // this.localAccount(Txn.sender).value = Txn.sender
    txn Sender
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:46
    // @arc4.abimethod({ allowActions: 'OptIn' })
    intc_1 // 1
    return


// contracts/LocalStorage/contract.algo.ts::LocalStorage.readLocalState[routing]() -> void:
readLocalState:
    // contracts/LocalStorage/contract.algo.ts:69
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:71
    // const accountAddress = new arc4.Address(this.localAccount(sender).value)
    dup
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:31
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:71
    // const accountAddress = new arc4.Address(this.localAccount(sender).value)
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:74
    // this.localInt(sender).value,
    dig 1
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:26
    // public localInt = LocalState<uint64>({ key: 'int' })
    bytec_3 // "int"
    // contracts/LocalStorage/contract.algo.ts:74
    // this.localInt(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:75
    // this.localIntNoDefault(sender).value,
    dig 2
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:27
    // public localIntNoDefault = LocalState<uint64>()
    bytec 4 // "localIntNoDefault"
    // contracts/LocalStorage/contract.algo.ts:75
    // this.localIntNoDefault(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:76
    // this.localBytes(sender).value,
    dig 3
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:28
    // public localBytes = LocalState<bytes>()
    bytec 5 // "localBytes"
    // contracts/LocalStorage/contract.algo.ts:76
    // this.localBytes(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:77
    // this.localString(sender).value,
    dig 4
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:29
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:77
    // this.localString(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:78
    // this.localBool(sender).value,
    uncover 5
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:30
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:78
    // this.localBool(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:73-80
    // return [
    //   this.localInt(sender).value,
    //   this.localIntNoDefault(sender).value,
    //   this.localBytes(sender).value,
    //   this.localString(sender).value,
    //   this.localBool(sender).value,
    //   accountAddress,
    // ]
    uncover 4
    itob
    uncover 4
    itob
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    swap
    pushbytes 0x0035
    concat
    dig 1
    len
    pushint 53 // 53
    +
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    swap
    itob
    extract 6 2
    uncover 2
    swap
    concat
    pushbytes 0x00
    intc_0 // 0
    uncover 5
    setbit
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // contracts/LocalStorage/contract.algo.ts:68
    // public readLocalState(): [uint64, uint64, bytes, string, boolean, arc4.Address] {
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// contracts/LocalStorage/contract.algo.ts::LocalStorage.writeLocalState[routing]() -> void:
writeLocalState:
    // contracts/LocalStorage/contract.algo.ts:92
    // public writeLocalState(valueString: string, valueBool: boolean, valueAccount: Account): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    txna ApplicationArgs 3
    // contracts/LocalStorage/contract.algo.ts:94
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:96
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/LocalStorage/contract.algo.ts:98
    // this.localString(sender).value = valueString
    dup
    // contracts/LocalStorage/contract.algo.ts:29
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:98
    // this.localString(sender).value = valueString
    dig 5
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:99
    // this.localBool(sender).value = valueBool
    dup
    // contracts/LocalStorage/contract.algo.ts:30
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:99
    // this.localBool(sender).value = valueBool
    dig 4
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:100
    // this.localAccount(sender).value = valueAccount
    dup
    // contracts/LocalStorage/contract.algo.ts:31
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:100
    // this.localAccount(sender).value = valueAccount
    uncover 3
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:102
    // assert(this.localString(sender).value === valueString)
    dup
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:29
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:102
    // assert(this.localString(sender).value === valueString)
    app_local_get_ex
    assert // check LocalState exists
    uncover 3
    ==
    assert
    // contracts/LocalStorage/contract.algo.ts:103
    // assert(this.localBool(sender).value === valueBool)
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:30
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:103
    // assert(this.localBool(sender).value === valueBool)
    app_local_get_ex
    assert // check LocalState exists
    ==
    // contracts/LocalStorage/contract.algo.ts:92
    // public writeLocalState(valueString: string, valueBool: boolean, valueAccount: Account): void {
    return


// contracts/LocalStorage/contract.algo.ts::LocalStorage.writeDynamicLocalState[routing]() -> void:
writeDynamicLocalState:
    // contracts/LocalStorage/contract.algo.ts:116
    // public writeDynamicLocalState(key: string, value: string): string {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // contracts/LocalStorage/contract.algo.ts:117
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:119
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/LocalStorage/contract.algo.ts:123
    // localDynamicAccess(sender).value = value
    uncover 2
    dig 2
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:116
    // public writeDynamicLocalState(key: string, value: string): string {
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// contracts/LocalStorage/contract.algo.ts::LocalStorage.readDynamicLocalState[routing]() -> void:
readDynamicLocalState:
    // contracts/LocalStorage/contract.algo.ts:137
    // public readDynamicLocalState(key: string): string {
    txna ApplicationArgs 1
    extract 2 0
    // contracts/LocalStorage/contract.algo.ts:138
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:140
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/LocalStorage/contract.algo.ts:144
    // assert(localDynamicAccess(sender).hasValue, 'Key not found')
    intc_0 // 0
    uncover 2
    app_local_get_ex
    assert // Key not found
    // contracts/LocalStorage/contract.algo.ts:137
    // public readDynamicLocalState(key: string): string {
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// contracts/LocalStorage/contract.algo.ts::LocalStorage.clearLocalState[routing]() -> void:
clearLocalState:
    // contracts/LocalStorage/contract.algo.ts:156
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:158
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/LocalStorage/contract.algo.ts:160
    // this.localInt(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:26
    // public localInt = LocalState<uint64>({ key: 'int' })
    bytec_3 // "int"
    // contracts/LocalStorage/contract.algo.ts:160
    // this.localInt(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:161
    // this.localIntNoDefault(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:27
    // public localIntNoDefault = LocalState<uint64>()
    bytec 4 // "localIntNoDefault"
    // contracts/LocalStorage/contract.algo.ts:161
    // this.localIntNoDefault(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:162
    // this.localBytes(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:28
    // public localBytes = LocalState<bytes>()
    bytec 5 // "localBytes"
    // contracts/LocalStorage/contract.algo.ts:162
    // this.localBytes(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:163
    // this.localString(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:29
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:163
    // this.localString(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:164
    // this.localBool(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:30
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:164
    // this.localBool(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:31
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:165
    // this.localAccount(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:155
    // public clearLocalState(): void {
    intc_1 // 1
    return
