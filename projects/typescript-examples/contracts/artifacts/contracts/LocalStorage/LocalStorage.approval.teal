#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "localString" "localBool" "localAccount" 0x151f7c75 "int" "localIntNoDefault" "localBytes"
    // contracts/LocalStorage/contract.algo.ts:22-23
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0x01a3a3ff 0xd0013fc5 0x02818b4c 0x2793c249 0x213631f5 0x5e58051a // method "optInToApplication()void", method "readLocalState()(uint64,uint64,byte[],string,bool,address)", method "writeLocalState(string,bool,account)void", method "writeDynamicLocalState(string,string)string", method "readDynamicLocalState(string)string", method "clearLocalState()void"
    txna ApplicationArgs 0
    match main_optInToApplication_route@3 main_readLocalState_route@4 main_writeLocalState_route@5 main_writeDynamicLocalState_route@6 main_readDynamicLocalState_route@7 main_clearLocalState_route@8

main_after_if_else@15:
    // contracts/LocalStorage/contract.algo.ts:22-23
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends arc4.Contract {
    intc_0 // 0
    return

main_clearLocalState_route@8:
    // contracts/LocalStorage/contract.algo.ts:158
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub clearLocalState
    intc_1 // 1
    return

main_readDynamicLocalState_route@7:
    // contracts/LocalStorage/contract.algo.ts:139
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/LocalStorage/contract.algo.ts:22-23
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    // contracts/LocalStorage/contract.algo.ts:139
    // @arc4.abimethod()
    callsub readDynamicLocalState
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_writeDynamicLocalState_route@6:
    // contracts/LocalStorage/contract.algo.ts:117
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/LocalStorage/contract.algo.ts:22-23
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // contracts/LocalStorage/contract.algo.ts:117
    // @arc4.abimethod()
    callsub writeDynamicLocalState
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_writeLocalState_route@5:
    // contracts/LocalStorage/contract.algo.ts:92
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/LocalStorage/contract.algo.ts:22-23
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    // contracts/LocalStorage/contract.algo.ts:92
    // @arc4.abimethod()
    callsub writeLocalState
    intc_1 // 1
    return

main_readLocalState_route@4:
    // contracts/LocalStorage/contract.algo.ts:67
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub readLocalState
    uncover 5
    itob
    uncover 5
    itob
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    dig 5
    len
    itob
    extract 6 2
    uncover 6
    concat
    pushbytes 0x00
    intc_0 // 0
    uncover 7
    setbit
    uncover 4
    uncover 4
    concat
    pushbytes 0x0035
    concat
    dig 3
    len
    pushint 53 // 53
    +
    itob
    extract 6 2
    concat
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_optInToApplication_route@3:
    // contracts/LocalStorage/contract.algo.ts:45
    // @arc4.abimethod({ allowActions: 'OptIn' })
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    callsub optInToApplication
    intc_1 // 1
    return

main_bare_routing@11:
    // contracts/LocalStorage/contract.algo.ts:22-23
    // @contract({ stateTotals: { localBytes: 4, localUints: 3 } })
    // export default class LocalStorage extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/LocalStorage/contract.algo.ts::LocalStorage.optInToApplication() -> void:
optInToApplication:
    // contracts/LocalStorage/contract.algo.ts:45-46
    // @arc4.abimethod({ allowActions: 'OptIn' })
    // public optInToApplication(): void {
    proto 0 0
    // contracts/LocalStorage/contract.algo.ts:47
    // this.localInt(Txn.sender).value = 100
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:25
    // public localInt = LocalState<uint64>({ key: 'int' })
    bytec 4 // "int"
    // contracts/LocalStorage/contract.algo.ts:47
    // this.localInt(Txn.sender).value = 100
    pushint 100 // 100
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:48
    // this.localIntNoDefault(Txn.sender).value = 200
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:26
    // public localIntNoDefault = LocalState<uint64>()
    bytec 5 // "localIntNoDefault"
    // contracts/LocalStorage/contract.algo.ts:48
    // this.localIntNoDefault(Txn.sender).value = 200
    pushint 200 // 200
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:49
    // this.localBytes(Txn.sender).value = Bytes('Silvio')
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:27
    // public localBytes = LocalState<bytes>()
    bytec 6 // "localBytes"
    // contracts/LocalStorage/contract.algo.ts:49
    // this.localBytes(Txn.sender).value = Bytes('Silvio')
    pushbytes "Silvio"
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:50
    // this.localString(Txn.sender).value = 'Micali'
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:28
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:50
    // this.localString(Txn.sender).value = 'Micali'
    pushbytes "Micali"
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:51
    // this.localBool(Txn.sender).value = true
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:29
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:51
    // this.localBool(Txn.sender).value = true
    intc_1 // 1
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:52
    // this.localAccount(Txn.sender).value = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:30
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:52
    // this.localAccount(Txn.sender).value = Txn.sender
    txn Sender
    app_local_put
    retsub


// contracts/LocalStorage/contract.algo.ts::LocalStorage.readLocalState() -> uint64, uint64, bytes, bytes, uint64, bytes:
readLocalState:
    // contracts/LocalStorage/contract.algo.ts:67-68
    // @arc4.abimethod({ readonly: true })
    // public readLocalState(): [uint64, uint64, bytes, string, boolean, arc4.Address] {
    proto 0 6
    // contracts/LocalStorage/contract.algo.ts:69
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:71
    // const accountAddress = new arc4.Address(this.localAccount(sender).value)
    dup
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:30
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:71
    // const accountAddress = new arc4.Address(this.localAccount(sender).value)
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:74
    // this.localInt(sender).value,
    dig 1
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:25
    // public localInt = LocalState<uint64>({ key: 'int' })
    bytec 4 // "int"
    // contracts/LocalStorage/contract.algo.ts:74
    // this.localInt(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:75
    // this.localIntNoDefault(sender).value,
    dig 2
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:26
    // public localIntNoDefault = LocalState<uint64>()
    bytec 5 // "localIntNoDefault"
    // contracts/LocalStorage/contract.algo.ts:75
    // this.localIntNoDefault(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:76
    // this.localBytes(sender).value,
    dig 3
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:27
    // public localBytes = LocalState<bytes>()
    bytec 6 // "localBytes"
    // contracts/LocalStorage/contract.algo.ts:76
    // this.localBytes(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:77
    // this.localString(sender).value,
    dig 4
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:28
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:77
    // this.localString(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:78
    // this.localBool(sender).value,
    uncover 5
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:29
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:78
    // this.localBool(sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // contracts/LocalStorage/contract.algo.ts:73-80
    // return [
    //   this.localInt(sender).value,
    //   this.localIntNoDefault(sender).value,
    //   this.localBytes(sender).value,
    //   this.localString(sender).value,
    //   this.localBool(sender).value,
    //   accountAddress,
    // ]
    uncover 5
    retsub


// contracts/LocalStorage/contract.algo.ts::LocalStorage.writeLocalState(valueString: bytes, valueBool: uint64, valueAccount: bytes) -> void:
writeLocalState:
    // contracts/LocalStorage/contract.algo.ts:92-93
    // @arc4.abimethod()
    // public writeLocalState(valueString: string, valueBool: boolean, valueAccount: Account): void {
    proto 3 0
    // contracts/LocalStorage/contract.algo.ts:95
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:97
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/LocalStorage/contract.algo.ts:99
    // this.localString(sender).value = valueString
    dup
    // contracts/LocalStorage/contract.algo.ts:28
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:99
    // this.localString(sender).value = valueString
    frame_dig -3
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:100
    // this.localBool(sender).value = valueBool
    dup
    // contracts/LocalStorage/contract.algo.ts:29
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:100
    // this.localBool(sender).value = valueBool
    frame_dig -2
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:101
    // this.localAccount(sender).value = valueAccount
    dup
    // contracts/LocalStorage/contract.algo.ts:30
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:101
    // this.localAccount(sender).value = valueAccount
    frame_dig -1
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:103
    // assert(this.localString(sender).value === valueString)
    dup
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:28
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:103
    // assert(this.localString(sender).value === valueString)
    app_local_get_ex
    assert // check LocalState exists
    frame_dig -3
    ==
    assert
    // contracts/LocalStorage/contract.algo.ts:104
    // assert(this.localBool(sender).value === valueBool)
    dup
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:29
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:104
    // assert(this.localBool(sender).value === valueBool)
    app_local_get_ex
    assert // check LocalState exists
    frame_dig -2
    ==
    assert
    // contracts/LocalStorage/contract.algo.ts:105
    // assert(this.localAccount(sender).value === valueAccount)
    intc_0 // 0
    // contracts/LocalStorage/contract.algo.ts:30
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:105
    // assert(this.localAccount(sender).value === valueAccount)
    app_local_get_ex
    assert // check LocalState exists
    frame_dig -1
    ==
    assert
    retsub


// contracts/LocalStorage/contract.algo.ts::LocalStorage.writeDynamicLocalState(key: bytes, value: bytes) -> bytes:
writeDynamicLocalState:
    // contracts/LocalStorage/contract.algo.ts:117-118
    // @arc4.abimethod()
    // public writeDynamicLocalState(key: string, value: string): string {
    proto 2 1
    // contracts/LocalStorage/contract.algo.ts:119
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:121
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/LocalStorage/contract.algo.ts:125
    // localDynamicAccess(sender).value = value
    dup
    frame_dig -2
    frame_dig -1
    app_local_put
    // contracts/LocalStorage/contract.algo.ts:127
    // assert(localDynamicAccess(sender).value === value)
    dup
    intc_0 // 0
    frame_dig -2
    app_local_get_ex
    assert // check LocalState exists
    frame_dig -1
    ==
    assert
    // contracts/LocalStorage/contract.algo.ts:129
    // return localDynamicAccess(sender).value
    intc_0 // 0
    frame_dig -2
    app_local_get_ex
    assert // check LocalState exists
    retsub


// contracts/LocalStorage/contract.algo.ts::LocalStorage.readDynamicLocalState(key: bytes) -> bytes:
readDynamicLocalState:
    // contracts/LocalStorage/contract.algo.ts:139-140
    // @arc4.abimethod()
    // public readDynamicLocalState(key: string): string {
    proto 1 1
    // contracts/LocalStorage/contract.algo.ts:141
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:143
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/LocalStorage/contract.algo.ts:147
    // assert(localDynamicAccess(sender).hasValue, 'Key not found')
    dup
    intc_0 // 0
    frame_dig -1
    app_local_get_ex
    bury 1
    assert // Key not found
    // contracts/LocalStorage/contract.algo.ts:149
    // return localDynamicAccess(sender).value
    intc_0 // 0
    frame_dig -1
    app_local_get_ex
    assert // check LocalState exists
    retsub


// contracts/LocalStorage/contract.algo.ts::LocalStorage.clearLocalState() -> void:
clearLocalState:
    // contracts/LocalStorage/contract.algo.ts:158-159
    // @arc4.abimethod()
    // public clearLocalState(): void {
    proto 0 0
    // contracts/LocalStorage/contract.algo.ts:160
    // const sender = Txn.sender
    txn Sender
    // contracts/LocalStorage/contract.algo.ts:162
    // assert(sender.isOptedIn(Global.currentApplicationId), 'Account must opt in to contract first')
    dup
    global CurrentApplicationID
    app_opted_in
    assert // Account must opt in to contract first
    // contracts/LocalStorage/contract.algo.ts:164
    // this.localInt(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:25
    // public localInt = LocalState<uint64>({ key: 'int' })
    bytec 4 // "int"
    // contracts/LocalStorage/contract.algo.ts:164
    // this.localInt(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:165
    // this.localIntNoDefault(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:26
    // public localIntNoDefault = LocalState<uint64>()
    bytec 5 // "localIntNoDefault"
    // contracts/LocalStorage/contract.algo.ts:165
    // this.localIntNoDefault(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:166
    // this.localBytes(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:27
    // public localBytes = LocalState<bytes>()
    bytec 6 // "localBytes"
    // contracts/LocalStorage/contract.algo.ts:166
    // this.localBytes(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:167
    // this.localString(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:28
    // public localString = LocalState<string>()
    bytec_0 // "localString"
    // contracts/LocalStorage/contract.algo.ts:167
    // this.localString(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:168
    // this.localBool(sender).delete()
    dup
    // contracts/LocalStorage/contract.algo.ts:29
    // public localBool = LocalState<boolean>()
    bytec_1 // "localBool"
    // contracts/LocalStorage/contract.algo.ts:168
    // this.localBool(sender).delete()
    app_local_del
    // contracts/LocalStorage/contract.algo.ts:30
    // public localAccount = LocalState<Account>()
    bytec_2 // "localAccount"
    // contracts/LocalStorage/contract.algo.ts:169
    // this.localAccount(sender).delete()
    app_local_del
    retsub
