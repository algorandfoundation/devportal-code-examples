{
    "hints": {
        "optInToApplication()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "readLocalState()(uint64,uint64,byte[],string,bool,address)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "writeLocalState(string,bool,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "writeDynamicLocalState(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "readDynamicLocalState(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "clearLocalState()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 4,
            "num_uints": 3
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {
                "localAccount": {
                    "type": "bytes",
                    "key": "localAccount"
                },
                "localBool": {
                    "type": "uint64",
                    "key": "localBool"
                },
                "localBytes": {
                    "type": "bytes",
                    "key": "localBytes"
                },
                "localInt": {
                    "type": "uint64",
                    "key": "int"
                },
                "localIntNoDefault": {
                    "type": "uint64",
                    "key": "localIntNoDefault"
                },
                "localString": {
                    "type": "bytes",
                    "key": "localString"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "LocalStorage",
        "desc": "A contract demonstrating local storage functionality.\nThis contract shows how to use local state storage in an Algorand smart contract,\nincluding initialization, reading, writing, and clearing of local state values.\nLocal state is per-account storage that requires accounts to opt-in before use.",
        "methods": [
            {
                "name": "optInToApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initializes local state values when an account opts into the application.\nThis method can only be called during an OptIn transaction.\nSets initial values for all local state variables:\n- localInt: 100\n- localIntNoDefault: 200\n- localBytes: 'Silvio'\n- localString: 'Micali'\n- localBool: true\n- localAccount: sender's address"
            },
            {
                "name": "readLocalState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,byte[],string,bool,address)",
                    "desc": "A tuple containing:\n- [0] uint64: The value of localInt\n- [1] uint64: The value of localIntNoDefault\n- [2] bytes: The value of localBytes\n- [3] string: The value of localString\n- [4] boolean: The value of localBool\n- [5] Address: The value of localAccount converted to Address type"
                },
                "desc": "Reads and returns all local state values for the transaction sender."
            },
            {
                "name": "writeLocalState",
                "args": [
                    {
                        "type": "string",
                        "name": "valueString",
                        "desc": "- New string value to store"
                    },
                    {
                        "type": "bool",
                        "name": "valueBool",
                        "desc": "- New boolean value to store"
                    },
                    {
                        "type": "account",
                        "name": "valueAccount",
                        "desc": "- New account address to store"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates multiple local state values for the transaction sender.\nRequires the account to be opted into the application."
            },
            {
                "name": "writeDynamicLocalState",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "- The dynamic key to store the value under"
                    },
                    {
                        "type": "string",
                        "name": "value",
                        "desc": "- The string value to store"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string",
                    "desc": "The stored string value"
                },
                "desc": "Writes a value to local state using a dynamic key.\nDemonstrates dynamic key-value storage in local state."
            },
            {
                "name": "readDynamicLocalState",
                "args": [
                    {
                        "type": "string",
                        "name": "key",
                        "desc": "- The dynamic key to read the value from"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string",
                    "desc": "The stored string value for the given key"
                },
                "desc": "Reads a value from local state using a dynamic key."
            },
            {
                "name": "clearLocalState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Clears all local state values for the transaction sender.\nAfter calling this method, all local state values will be deleted."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}