{
    "hints": {
        "optInToApplication()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "readLocalState()(uint64,uint64,byte[],string,bool,address)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "writeLocalState(string,bool,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "writeDynamicLocalState(string,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "readDynamicLocalState(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "clearLocalState()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 4,
            "num_uints": 3
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {
                "localAccount": {
                    "type": "bytes",
                    "key": "localAccount"
                },
                "localBool": {
                    "type": "uint64",
                    "key": "localBool"
                },
                "localBytes": {
                    "type": "bytes",
                    "key": "localBytes"
                },
                "localInt": {
                    "type": "uint64",
                    "key": "int"
                },
                "localIntNoDefault": {
                    "type": "uint64",
                    "key": "localIntNoDefault"
                },
                "localString": {
                    "type": "bytes",
                    "key": "localString"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "LocalStorage",
        "desc": "A contract demonstrating local storage functionality",
        "methods": [
            {
                "name": "optInToApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "readLocalState",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,byte[],string,bool,address)"
                },
                "desc": "Reads and returns all local state values for the sender"
            },
            {
                "name": "writeLocalState",
                "args": [
                    {
                        "type": "string",
                        "name": "valueString"
                    },
                    {
                        "type": "bool",
                        "name": "valueBool"
                    },
                    {
                        "type": "account",
                        "name": "valueAccount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates multiple local state values for the sender"
            },
            {
                "name": "writeDynamicLocalState",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Writes a value to local state using a dynamic key"
            },
            {
                "name": "readDynamicLocalState",
                "args": [
                    {
                        "type": "string",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Reads a value from local state using a dynamic key"
            },
            {
                "name": "clearLocalState",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Clears all local state for the sender"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}