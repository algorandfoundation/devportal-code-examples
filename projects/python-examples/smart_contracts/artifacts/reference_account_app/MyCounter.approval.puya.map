{
  "version": 3,
  "sources": [
    "../../reference_account_app/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAmBA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAkBK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAEmB;;AAAhB;AAA8B;AAA9B;AAFH;AAAA;AAWU;;AAAuB;;AAAvB;AAAP;AAEgB;;AAAhB;AAAA;AAAA;AAAA;AAAA;AAA+B;AAA/B;AAAA;AAAA;AAAA;AACuB;;AAAhB;AAAA;AAAA;AAAA;AALV;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"my_counter\""
    },
    "18": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "bz main___algopy_default_create@8",
      "stack_out": []
    },
    "23": {
      "op": "pushbytess 0x30c6d58a 0x856a1202 // method \"opt_in()void\", method \"increment_my_counter()uint64\"",
      "defined_out": [
        "Method(increment_my_counter()uint64)",
        "Method(opt_in()void)"
      ],
      "stack_out": [
        "Method(opt_in()void)",
        "Method(increment_my_counter()uint64)"
      ]
    },
    "35": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(increment_my_counter()uint64)",
        "Method(opt_in()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(opt_in()void)",
        "Method(increment_my_counter()uint64)",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "match main_opt_in_route@5 main_increment_my_counter_route@6",
      "stack_out": []
    },
    "44": {
      "op": "err"
    },
    "45": {
      "block": "main_increment_my_counter_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "48": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "50": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "51": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "52": {
      "op": "b increment_my_counter"
    },
    "55": {
      "block": "main_opt_in_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "57": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "OptIn"
      ]
    },
    "58": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "61": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "62": {
      "error": "OnCompletion must be OptIn && can only call when not creating",
      "op": "assert // OnCompletion must be OptIn && can only call when not creating",
      "stack_out": []
    },
    "63": {
      "op": "b opt_in"
    },
    "66": {
      "block": "main___algopy_default_create@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "68": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "69": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "71": {
      "op": "!",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "72": {
      "op": "&&",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "73": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "74": {
      "subroutine": "smart_contracts.reference_account_app.contract.MyCounter.opt_in[routing]",
      "params": {},
      "block": "opt_in",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "76": {
      "op": "bytec_0 // \"my_counter\"",
      "defined_out": [
        "\"my_counter\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"my_counter\""
      ]
    },
    "77": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"my_counter\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"my_counter\"",
        "0"
      ]
    },
    "78": {
      "op": "app_local_put",
      "stack_out": []
    },
    "79": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "80": {
      "op": "return",
      "stack_out": []
    },
    "81": {
      "subroutine": "smart_contracts.reference_account_app.contract.MyCounter.increment_my_counter[routing]",
      "params": {},
      "block": "increment_my_counter",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "83": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "85": {
      "op": "app_opted_in",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "86": {
      "op": "assert",
      "stack_out": []
    },
    "87": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "89": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "90": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0"
      ]
    },
    "91": {
      "op": "bytec_0 // \"my_counter\"",
      "defined_out": [
        "\"my_counter\"",
        "0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "0",
        "\"my_counter\""
      ]
    },
    "92": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "93": {
      "error": "check self.my_counter exists for account",
      "op": "assert // check self.my_counter exists for account",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "94": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "95": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "96": {
      "op": "bytec_0 // \"my_counter\""
    },
    "97": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "\"my_counter\"",
        "tmp%4#0"
      ]
    },
    "98": {
      "op": "app_local_put",
      "stack_out": []
    },
    "99": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "101": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "102": {
      "op": "bytec_0 // \"my_counter\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"my_counter\""
      ]
    },
    "103": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "104": {
      "error": "check self.my_counter exists for account",
      "op": "assert // check self.my_counter exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "105": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "106": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "113": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "114": {
      "op": "log",
      "stack_out": []
    },
    "115": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "116": {
      "op": "return",
      "stack_out": []
    }
  }
}