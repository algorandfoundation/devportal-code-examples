{
  "version": 3,
  "sources": [
    "../../reference_account_app/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AA0BK;;AAAA;AAAA;AAAA;;AAAA;AA1BL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA0BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANL;;AAAA;;;;;;;;;AAMA;;;AAEe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGD;;;AAGiD;AAArC;AACf;;;AACQ;AAAP;AAAA;AACJ;;AAAA;AAAA;AASR;;;AAG0B;;AAAA;;AAAqC;AAArC;AACf;;;AACQ;AAAP;AAAA;AACJ;;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 0x6d795f636f756e746572"
    },
    "23": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "28": {
      "op": "pushbytess 0x9f5db3a7 0x62240c55 // method \"get_my_counter()uint64\", method \"get_my_counter_with_arg(account,application)uint64\"",
      "defined_out": [
        "Method(get_my_counter()uint64)",
        "Method(get_my_counter_with_arg(account,application)uint64)"
      ],
      "stack_out": [
        "Method(get_my_counter()uint64)",
        "Method(get_my_counter_with_arg(account,application)uint64)"
      ]
    },
    "40": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_my_counter()uint64)",
        "Method(get_my_counter_with_arg(account,application)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(get_my_counter()uint64)",
        "Method(get_my_counter_with_arg(account,application)uint64)",
        "tmp%2#0"
      ]
    },
    "43": {
      "op": "match main_get_my_counter_route@3 main_get_my_counter_with_arg_route@4",
      "stack_out": []
    },
    "49": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "50": {
      "op": "return",
      "stack_out": []
    },
    "51": {
      "block": "main_get_my_counter_with_arg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "54": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "57": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "58": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "61": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "62": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "64": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "67": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "68": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "70": {
      "callsub": "smart_contracts.reference_account_app.contract.ReferenceAccountApp.get_my_counter_with_arg",
      "op": "callsub get_my_counter_with_arg",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "73": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "74": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "75": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "76": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "77": {
      "op": "log",
      "stack_out": []
    },
    "78": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "block": "main_get_my_counter_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "83": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "84": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "86": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "87": {
      "callsub": "smart_contracts.reference_account_app.contract.ReferenceAccountApp.get_my_counter",
      "op": "callsub get_my_counter",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "90": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "91": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "92": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "93": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "94": {
      "op": "log",
      "stack_out": []
    },
    "95": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "99": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "102": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "104": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "105": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "106": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "107": {
      "op": "return",
      "stack_out": []
    },
    "108": {
      "subroutine": "smart_contracts.reference_account_app.contract.ReferenceAccountApp.get_my_counter",
      "params": {},
      "block": "get_my_counter",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "111": {
      "op": "pushbytes base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M",
      "defined_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ]
    },
    "145": {
      "op": "pushint 1717 // 1717",
      "defined_out": [
        "1717",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1717"
      ]
    },
    "148": {
      "op": "bytec_1 // 0x6d795f636f756e746572",
      "defined_out": [
        "0x6d795f636f756e746572",
        "1717",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1717",
        "0x6d795f636f756e746572"
      ]
    },
    "149": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exist#0",
        "my_count#0"
      ],
      "stack_out": [
        "my_count#0",
        "exist#0"
      ]
    },
    "150": {
      "op": "bnz get_my_counter_after_if_else@2",
      "stack_out": [
        "my_count#0"
      ]
    },
    "153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_count#0",
        "0"
      ]
    },
    "154": {
      "op": "swap"
    },
    "155": {
      "retsub": true,
      "op": "retsub"
    },
    "156": {
      "block": "get_my_counter_after_if_else@2",
      "stack_in": [
        "my_count#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "my_count#0"
      ],
      "stack_out": [
        "my_count#0",
        "my_count#0"
      ]
    },
    "158": {
      "op": "swap"
    },
    "159": {
      "retsub": true,
      "op": "retsub"
    },
    "160": {
      "subroutine": "smart_contracts.reference_account_app.contract.ReferenceAccountApp.get_my_counter_with_arg",
      "params": {
        "acct#0": "bytes",
        "app#0": "uint64"
      },
      "block": "get_my_counter_with_arg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "163": {
      "op": "frame_dig -2",
      "defined_out": [
        "acct#0 (copy)"
      ],
      "stack_out": [
        "acct#0 (copy)"
      ]
    },
    "165": {
      "op": "frame_dig -1",
      "defined_out": [
        "acct#0 (copy)",
        "app#0 (copy)"
      ],
      "stack_out": [
        "acct#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "167": {
      "op": "bytec_1 // 0x6d795f636f756e746572",
      "defined_out": [
        "0x6d795f636f756e746572",
        "acct#0 (copy)",
        "app#0 (copy)"
      ],
      "stack_out": [
        "acct#0 (copy)",
        "app#0 (copy)",
        "0x6d795f636f756e746572"
      ]
    },
    "168": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exist#0",
        "my_count#0"
      ],
      "stack_out": [
        "my_count#0",
        "exist#0"
      ]
    },
    "169": {
      "op": "bnz get_my_counter_with_arg_after_if_else@2",
      "stack_out": [
        "my_count#0"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "stack_out": [
        "my_count#0",
        "0"
      ]
    },
    "173": {
      "op": "swap"
    },
    "174": {
      "retsub": true,
      "op": "retsub"
    },
    "175": {
      "block": "get_my_counter_with_arg_after_if_else@2",
      "stack_in": [
        "my_count#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "my_count#0"
      ],
      "stack_out": [
        "my_count#0",
        "my_count#0"
      ]
    },
    "177": {
      "op": "swap"
    },
    "178": {
      "retsub": true,
      "op": "retsub"
    }
  }
}