{
  "version": 3,
  "sources": [
    "../../reference_account_asset/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;AAQe;AAGC;AAED;;AAAA;;AAAP;AALO;AAGC;AAID;;AAAA;AATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;;;AAAA;;;AAAA;AAEU;AAAA;;AAAA;;AAAP;AAEO;;AAAA;AAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1185 1"
    },
    "6": {
      "op": "bytecblock base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) 0x151f7c75"
    },
    "46": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "48": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "51": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "54": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "57": {
      "op": "assert",
      "stack_out": []
    },
    "58": {
      "op": "pushbytess 0xa65e7b96 0x0b6cfe5d // method \"get_asset_balance()uint64\", method \"get_asset_balance_with_arg(address,uint64)uint64\"",
      "defined_out": [
        "Method(get_asset_balance()uint64)",
        "Method(get_asset_balance_with_arg(address,uint64)uint64)"
      ],
      "stack_out": [
        "Method(get_asset_balance()uint64)",
        "Method(get_asset_balance_with_arg(address,uint64)uint64)"
      ]
    },
    "70": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_asset_balance()uint64)",
        "Method(get_asset_balance_with_arg(address,uint64)uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(get_asset_balance()uint64)",
        "Method(get_asset_balance_with_arg(address,uint64)uint64)",
        "tmp%6#0"
      ]
    },
    "73": {
      "op": "match get_asset_balance get_asset_balance_with_arg",
      "stack_out": []
    },
    "79": {
      "op": "err"
    },
    "80": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "85": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "86": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "87": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "88": {
      "subroutine": "smart_contracts.reference_account_asset.contract.ReferenceAccountAsset.get_asset_balance[routing]",
      "params": {},
      "block": "get_asset_balance",
      "stack_in": [],
      "op": "bytec_0 // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M",
      "defined_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ]
    },
    "89": {
      "op": "intc_0 // 1185",
      "defined_out": [
        "1185",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1185"
      ]
    },
    "90": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "92": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "94": {
      "error": "Account is not opted in to the asset",
      "op": "assert // Account is not opted in to the asset",
      "stack_out": []
    },
    "95": {
      "op": "bytec_0 // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M",
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ]
    },
    "96": {
      "op": "intc_0 // 1185",
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1185"
      ]
    },
    "97": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "99": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "100": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "101": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "102": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "103": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "104": {
      "op": "log",
      "stack_out": []
    },
    "105": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "106": {
      "op": "return",
      "stack_out": []
    },
    "107": {
      "subroutine": "smart_contracts.reference_account_asset.contract.ReferenceAccountAsset.get_asset_balance_with_arg[routing]",
      "params": {},
      "block": "get_asset_balance_with_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "acct#0"
      ],
      "stack_out": [
        "acct#0"
      ]
    },
    "110": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "acct#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "acct#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "113": {
      "op": "btoi",
      "defined_out": [
        "acct#0",
        "asset#0"
      ],
      "stack_out": [
        "acct#0",
        "asset#0"
      ]
    },
    "114": {
      "op": "dup2",
      "defined_out": [
        "acct#0",
        "acct#0 (copy)",
        "asset#0",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "acct#0",
        "asset#0",
        "acct#0 (copy)",
        "asset#0 (copy)"
      ]
    },
    "115": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "acct#0",
        "asset#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "acct#0",
        "asset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "117": {
      "op": "bury 1",
      "stack_out": [
        "acct#0",
        "asset#0",
        "tmp%1#1"
      ]
    },
    "119": {
      "error": "Account is not opted in to the asset",
      "op": "assert // Account is not opted in to the asset",
      "stack_out": [
        "acct#0",
        "asset#0"
      ]
    },
    "120": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "122": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "123": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "124": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "125": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "126": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "127": {
      "op": "log",
      "stack_out": []
    },
    "128": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    }
  }
}