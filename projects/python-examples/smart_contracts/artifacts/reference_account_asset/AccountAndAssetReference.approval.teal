#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75
    // smart_contracts/reference_account_asset/contract.py:5
    // class AccountAndAssetReference(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xa65e7b96 0x3313495a // method "get_asset_balance()uint64", method "get_asset_balance_with_arg(account,asset)uint64"
    txna ApplicationArgs 0
    match main_get_asset_balance_route@3 main_get_asset_balance_with_arg_route@4

main_after_if_else@11:
    // smart_contracts/reference_account_asset/contract.py:5
    // class AccountAndAssetReference(ARC4Contract):
    intc_0 // 0
    return

main_get_asset_balance_with_arg_route@4:
    // smart_contracts/reference_account_asset/contract.py:19
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/reference_account_asset/contract.py:5
    // class AccountAndAssetReference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // smart_contracts/reference_account_asset/contract.py:19
    // @abimethod
    callsub get_asset_balance_with_arg
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_asset_balance_route@3:
    // smart_contracts/reference_account_asset/contract.py:7
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_asset_balance
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@7:
    // smart_contracts/reference_account_asset/contract.py:5
    // class AccountAndAssetReference(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.reference_account_asset.contract.AccountAndAssetReference.get_asset_balance() -> uint64:
get_asset_balance:
    // smart_contracts/reference_account_asset/contract.py:7-8
    // @abimethod
    // def get_asset_balance(self) -> UInt64:
    proto 0 1
    // smart_contracts/reference_account_asset/contract.py:9-11
    // acct = Account(
    //     "WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M"
    // )  # Replace with your account address
    pushbytes base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M
    // smart_contracts/reference_account_asset/contract.py:12
    // asset = Asset(1185)  # Replace with your asset id
    pushint 1185 // 1185
    // smart_contracts/reference_account_asset/contract.py:13
    // balance, has_value = op.AssetHoldingGet.asset_balance(acct, asset)
    asset_holding_get AssetBalance
    // smart_contracts/reference_account_asset/contract.py:15
    // if has_value:
    bz get_asset_balance_after_if_else@2
    // smart_contracts/reference_account_asset/contract.py:16
    // return balance
    frame_dig 0
    swap
    retsub

get_asset_balance_after_if_else@2:
    // smart_contracts/reference_account_asset/contract.py:17
    // return UInt64(0)
    intc_0 // 0
    swap
    retsub


// smart_contracts.reference_account_asset.contract.AccountAndAssetReference.get_asset_balance_with_arg(acct: bytes, asset: uint64) -> uint64:
get_asset_balance_with_arg:
    // smart_contracts/reference_account_asset/contract.py:19-20
    // @abimethod
    // def get_asset_balance_with_arg(self, acct: Account, asset: Asset) -> UInt64:
    proto 2 1
    // smart_contracts/reference_account_asset/contract.py:21
    // balance, has_value = op.AssetHoldingGet.asset_balance(acct, asset)
    frame_dig -2
    frame_dig -1
    asset_holding_get AssetBalance
    // smart_contracts/reference_account_asset/contract.py:23
    // if has_value:
    bz get_asset_balance_with_arg_after_if_else@2
    // smart_contracts/reference_account_asset/contract.py:24
    // return balance
    frame_dig 0
    swap
    retsub

get_asset_balance_with_arg_after_if_else@2:
    // smart_contracts/reference_account_asset/contract.py:25
    // return UInt64(0)
    intc_0 // 0
    swap
    retsub
