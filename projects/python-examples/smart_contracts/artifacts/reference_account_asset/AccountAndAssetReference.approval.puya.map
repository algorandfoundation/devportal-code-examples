{
  "version": 3,
  "sources": [
    "../../reference_account_asset/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAcK;;AAAA;AAAA;AAAA;;AAAA;AAdL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAcK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFL;;AAAA;;;;;;;;;AAEA;;;AAEe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGC;;;AACa;;AAE7B;;;AACY;;AAAA;AAAA;AACG;AAAP;AAAA;AAER;;;AAE6B;;AAAA;;AAAA;;AAE7B;;;AACY;;AAAA;AAAA;AACG;AAAP;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "17": {
      "op": "pushbytess 0xa65e7b96 0x3313495a // method \"get_asset_balance()uint64\", method \"get_asset_balance_with_arg(account,asset)uint64\"",
      "defined_out": [
        "Method(get_asset_balance()uint64)",
        "Method(get_asset_balance_with_arg(account,asset)uint64)"
      ],
      "stack_out": [
        "Method(get_asset_balance()uint64)",
        "Method(get_asset_balance_with_arg(account,asset)uint64)"
      ]
    },
    "29": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_asset_balance()uint64)",
        "Method(get_asset_balance_with_arg(account,asset)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(get_asset_balance()uint64)",
        "Method(get_asset_balance_with_arg(account,asset)uint64)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match main_get_asset_balance_route@3 main_get_asset_balance_with_arg_route@4",
      "stack_out": []
    },
    "38": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "op": "return",
      "stack_out": []
    },
    "40": {
      "block": "main_get_asset_balance_with_arg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "46": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "47": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "50": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "51": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "53": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "56": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "57": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "59": {
      "callsub": "smart_contracts.reference_account_asset.contract.AccountAndAssetReference.get_asset_balance_with_arg",
      "op": "callsub get_asset_balance_with_arg",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "62": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "63": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "64": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "65": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "66": {
      "op": "log",
      "stack_out": []
    },
    "67": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "68": {
      "op": "return",
      "stack_out": []
    },
    "69": {
      "block": "main_get_asset_balance_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "71": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "72": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "73": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "75": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "76": {
      "callsub": "smart_contracts.reference_account_asset.contract.AccountAndAssetReference.get_asset_balance",
      "op": "callsub get_asset_balance",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "79": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "80": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "81": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "82": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "83": {
      "op": "log",
      "stack_out": []
    },
    "84": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "85": {
      "op": "return",
      "stack_out": []
    },
    "86": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "88": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "94": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "95": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "subroutine": "smart_contracts.reference_account_asset.contract.AccountAndAssetReference.get_asset_balance",
      "params": {},
      "block": "get_asset_balance",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "100": {
      "op": "pushbytes base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M",
      "defined_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ]
    },
    "134": {
      "op": "pushint 1185 // 1185",
      "defined_out": [
        "1185",
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)",
        "1185"
      ]
    },
    "137": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "balance#0",
        "has_value#0"
      ],
      "stack_out": [
        "balance#0",
        "has_value#0"
      ]
    },
    "139": {
      "op": "bz get_asset_balance_after_if_else@2",
      "stack_out": [
        "balance#0"
      ]
    },
    "142": {
      "op": "frame_dig 0",
      "stack_out": [
        "balance#0",
        "balance#0"
      ]
    },
    "144": {
      "op": "swap"
    },
    "145": {
      "retsub": true,
      "op": "retsub"
    },
    "146": {
      "block": "get_asset_balance_after_if_else@2",
      "stack_in": [
        "balance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "balance#0",
        "0"
      ]
    },
    "147": {
      "op": "swap"
    },
    "148": {
      "retsub": true,
      "op": "retsub"
    },
    "149": {
      "subroutine": "smart_contracts.reference_account_asset.contract.AccountAndAssetReference.get_asset_balance_with_arg",
      "params": {
        "acct#0": "bytes",
        "asset#0": "uint64"
      },
      "block": "get_asset_balance_with_arg",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "152": {
      "op": "frame_dig -2",
      "defined_out": [
        "acct#0 (copy)"
      ],
      "stack_out": [
        "acct#0 (copy)"
      ]
    },
    "154": {
      "op": "frame_dig -1",
      "defined_out": [
        "acct#0 (copy)",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "acct#0 (copy)",
        "asset#0 (copy)"
      ]
    },
    "156": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "balance#0",
        "has_value#0"
      ],
      "stack_out": [
        "balance#0",
        "has_value#0"
      ]
    },
    "158": {
      "op": "bz get_asset_balance_with_arg_after_if_else@2",
      "stack_out": [
        "balance#0"
      ]
    },
    "161": {
      "op": "frame_dig 0",
      "stack_out": [
        "balance#0",
        "balance#0"
      ]
    },
    "163": {
      "op": "swap"
    },
    "164": {
      "retsub": true,
      "op": "retsub"
    },
    "165": {
      "block": "get_asset_balance_with_arg_after_if_else@2",
      "stack_in": [
        "balance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "balance#0",
        "0"
      ]
    },
    "166": {
      "op": "swap"
    },
    "167": {
      "retsub": true,
      "op": "retsub"
    }
  }
}