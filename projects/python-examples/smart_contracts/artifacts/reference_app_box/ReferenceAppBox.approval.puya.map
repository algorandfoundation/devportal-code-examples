{
  "version": 3,
  "sources": [
    "../../reference_app_box/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBQ;AACI;;AADJ;AAGA;;AACI;;AADJ;AANR;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAiB8B;AAAA;AAAA;AAAA;AAAwB;AAAA;;AAAA;AAAA;AAAxB;AAAtB;;AAAA;;AAAA;AAC2D;AAAtB;AAAhB;AAAA;AAArB;AAAA;AAAA;AAHH;AAAA;AAcA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAGU;AAAA;;AAAkB;AAAA;AAAA;AAAA;AAAlB;AAAP;AAEI;;AAAoB;;AAApB;AADJ;AAIuB;AAA+B;;AAA/B;AAAA;AAAA;;AAE/B;;;AACY;AAAyB;;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAwC;AAAxC;AAAA;AAAA;AACO;AAAyB;;AAAzB;AAAA;AAAA;AAAA;AAZd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcO;AAAyB;;AAAzB;AAAuC;AAAvC;AAAA;AACO;AAfd;;;AAwB0B;AAA+B;;AAA/B;AAAA;AAAA;AAAA;AAAA;AAC/B;;;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKU;AALV;;;AAe0B;AAF1B;;;AAE0B;AAAA;AAAA;AAAA;AAAA;AAC/B;;;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKU;AALV;;;AAcU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AANP;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;AAAA;AAAA;;;AAAA;AAIG;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAGsB;AAAA;AAAA;AAAA;AAAA;AAAtB;;AAAA;;AAAA;AAC2D;AAAtB;AAAhB;AAAA;AAArB;AAAA;AAAA;AATH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 400 2500"
    },
    "9": {
      "op": "bytecblock \"counter\" \"key_length\" \"box_mbr\" 0x151f7c75 \"value_length\" \"box_size\""
    },
    "65": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "70": {
      "op": "bytec_1 // \"key_length\"",
      "defined_out": [
        "\"key_length\""
      ],
      "stack_out": [
        "\"key_length\""
      ]
    },
    "71": {
      "op": "pushint 51 // 51",
      "defined_out": [
        "\"key_length\"",
        "51"
      ],
      "stack_out": [
        "\"key_length\"",
        "51"
      ]
    },
    "73": {
      "op": "app_global_put",
      "stack_out": []
    },
    "74": {
      "op": "bytec 4 // \"value_length\"",
      "defined_out": [
        "\"value_length\""
      ],
      "stack_out": [
        "\"value_length\""
      ]
    },
    "76": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "\"value_length\"",
        "8"
      ],
      "stack_out": [
        "\"value_length\"",
        "8"
      ]
    },
    "78": {
      "op": "app_global_put",
      "stack_out": []
    },
    "79": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "81": {
      "op": "!",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "82": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "85": {
      "op": "bz main_create_NoOp@12",
      "stack_out": []
    },
    "88": {
      "op": "pushbytess 0x035c8f99 0xc415992d 0xe0778501 0x3356861d 0x1a3ea0e9 0x059b2740 // method \"increment_box_counter(pay)uint64\", method \"get_box_counter()uint64\", method \"get_box_counter_for_account(address)uint64\", method \"get_box_mbr()uint64\", method \"get_box_configuration()(uint64,uint64,uint64,uint64)\", method \"update_box_configuration(uint64,uint64)void\"",
      "defined_out": [
        "Method(get_box_configuration()(uint64,uint64,uint64,uint64))",
        "Method(get_box_counter()uint64)",
        "Method(get_box_counter_for_account(address)uint64)",
        "Method(get_box_mbr()uint64)",
        "Method(increment_box_counter(pay)uint64)",
        "Method(update_box_configuration(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(increment_box_counter(pay)uint64)",
        "Method(get_box_counter()uint64)",
        "Method(get_box_counter_for_account(address)uint64)",
        "Method(get_box_mbr()uint64)",
        "Method(get_box_configuration()(uint64,uint64,uint64,uint64))",
        "Method(update_box_configuration(uint64,uint64)void)"
      ]
    },
    "120": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_box_configuration()(uint64,uint64,uint64,uint64))",
        "Method(get_box_counter()uint64)",
        "Method(get_box_counter_for_account(address)uint64)",
        "Method(get_box_mbr()uint64)",
        "Method(increment_box_counter(pay)uint64)",
        "Method(update_box_configuration(uint64,uint64)void)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(increment_box_counter(pay)uint64)",
        "Method(get_box_counter()uint64)",
        "Method(get_box_counter_for_account(address)uint64)",
        "Method(get_box_mbr()uint64)",
        "Method(get_box_configuration()(uint64,uint64,uint64,uint64))",
        "Method(update_box_configuration(uint64,uint64)void)",
        "tmp%4#0"
      ]
    },
    "123": {
      "op": "match increment_box_counter get_box_counter get_box_counter_for_account get_box_mbr get_box_configuration update_box_configuration",
      "stack_out": []
    },
    "137": {
      "op": "err"
    },
    "138": {
      "block": "main_create_NoOp@12",
      "stack_in": [],
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)"
      ],
      "stack_out": [
        "Method(create()void)"
      ]
    },
    "144": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create()void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(create()void)",
        "tmp%5#0"
      ]
    },
    "147": {
      "op": "match create",
      "stack_out": []
    },
    "151": {
      "op": "err"
    },
    "152": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "153": {
      "op": "bytec_1 // \"key_length\"",
      "defined_out": [
        "\"key_length\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"key_length\""
      ]
    },
    "154": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "155": {
      "error": "check self.key_length exists",
      "op": "assert // check self.key_length exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "156": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "157": {
      "op": "bytec 4 // \"value_length\"",
      "defined_out": [
        "\"value_length\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"value_length\""
      ]
    },
    "159": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "160": {
      "error": "check self.value_length exists",
      "op": "assert // check self.value_length exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "161": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "bytec 5 // \"box_size\"",
      "defined_out": [
        "\"box_size\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_size\""
      ]
    },
    "164": {
      "op": "dig 1",
      "defined_out": [
        "\"box_size\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_size\"",
        "tmp%0#0 (copy)"
      ]
    },
    "166": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "167": {
      "op": "intc_2 // 400",
      "defined_out": [
        "400",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "400"
      ]
    },
    "168": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "169": {
      "op": "intc_3 // 2500",
      "defined_out": [
        "2500",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "2500"
      ]
    },
    "170": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "171": {
      "op": "bytec_2 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"box_mbr\""
      ]
    },
    "172": {
      "op": "swap",
      "stack_out": [
        "\"box_mbr\"",
        "tmp%2#0"
      ]
    },
    "173": {
      "op": "app_global_put",
      "stack_out": []
    },
    "174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "175": {
      "op": "return",
      "stack_out": []
    },
    "176": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.increment_box_counter[routing]",
      "params": {},
      "block": "increment_box_counter",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "178": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "179": {
      "op": "-",
      "defined_out": [
        "pay_mbr#0"
      ],
      "stack_out": [
        "pay_mbr#0"
      ]
    },
    "180": {
      "op": "dup",
      "defined_out": [
        "pay_mbr#0",
        "pay_mbr#0 (copy)"
      ],
      "stack_out": [
        "pay_mbr#0",
        "pay_mbr#0 (copy)"
      ]
    },
    "181": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "pay_mbr#0"
      ],
      "stack_out": [
        "pay_mbr#0",
        "gtxn_type%0#0"
      ]
    },
    "183": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay",
        "pay_mbr#0"
      ],
      "stack_out": [
        "pay_mbr#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "184": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "pay_mbr#0"
      ],
      "stack_out": [
        "pay_mbr#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "185": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "pay_mbr#0"
      ]
    },
    "186": {
      "op": "dup",
      "stack_out": [
        "pay_mbr#0",
        "pay_mbr#0 (copy)"
      ]
    },
    "187": {
      "op": "gtxns Amount",
      "stack_out": [
        "pay_mbr#0",
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "pay_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "pay_mbr#0",
        "tmp%0#0",
        "0"
      ]
    },
    "190": {
      "op": "bytec_2 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "0",
        "pay_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "pay_mbr#0",
        "tmp%0#0",
        "0",
        "\"box_mbr\""
      ]
    },
    "191": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pay_mbr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "pay_mbr#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "192": {
      "error": "check self.box_mbr exists",
      "op": "assert // check self.box_mbr exists",
      "stack_out": [
        "pay_mbr#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "193": {
      "op": "==",
      "defined_out": [
        "pay_mbr#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "pay_mbr#0",
        "tmp%1#1"
      ]
    },
    "194": {
      "error": "Payment must cover the box MBR",
      "op": "assert // Payment must cover the box MBR",
      "stack_out": [
        "pay_mbr#0"
      ]
    },
    "195": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "197": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#1"
      ]
    },
    "199": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "200": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": []
    },
    "201": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "202": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ]
    },
    "204": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "205": {
      "op": "box_len",
      "defined_out": [
        "has_counter#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "has_counter#0"
      ]
    },
    "206": {
      "op": "bury 1",
      "stack_out": [
        "has_counter#0"
      ]
    },
    "208": {
      "op": "bz increment_box_counter_else_body@3",
      "stack_out": []
    },
    "211": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "\"counter\""
      ]
    },
    "212": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "\"counter\"",
        "materialized_values%1#0"
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0"
      ]
    },
    "215": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "box_prefixed_key%1#0 (copy)"
      ]
    },
    "216": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "217": {
      "error": "check self.account_box_counter entry exists",
      "op": "assert // check self.account_box_counter entry exists",
      "stack_out": [
        "box_prefixed_key%1#0",
        "aggregate%box_get%0#0"
      ]
    },
    "218": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%1#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "219": {
      "op": "intc_0 // 1",
      "stack_out": [
        "box_prefixed_key%1#0",
        "maybe_value_converted%1#0",
        "1"
      ]
    },
    "220": {
      "op": "+",
      "defined_out": [
        "box_prefixed_key%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "tmp%5#0"
      ]
    },
    "221": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ]
    },
    "222": {
      "op": "box_put",
      "stack_out": []
    },
    "223": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "\"counter\""
      ]
    },
    "224": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "\"counter\"",
        "materialized_values%2#0"
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0"
      ]
    },
    "227": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "228": {
      "error": "check self.account_box_counter entry exists",
      "op": "assert // check self.account_box_counter entry exists",
      "stack_out": [
        "aggregate%box_get%2#0"
      ]
    },
    "229": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "230": {
      "block": "increment_box_counter_after_inlined_smart_contracts.reference_app_box.contract.ReferenceAppBox.increment_box_counter@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "231": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "234": {
      "op": "log",
      "stack_out": []
    },
    "235": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "236": {
      "op": "return",
      "stack_out": []
    },
    "237": {
      "block": "increment_box_counter_else_body@3",
      "stack_in": [],
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "238": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "materialized_values%3#0"
      ],
      "stack_out": [
        "\"counter\"",
        "materialized_values%3#0"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0"
      ]
    },
    "241": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box_prefixed_key%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "1"
      ]
    },
    "242": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%3#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%3#0",
        "encoded_value%1#0"
      ]
    },
    "243": {
      "op": "box_put",
      "stack_out": []
    },
    "244": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "245": {
      "op": "b increment_box_counter_after_inlined_smart_contracts.reference_app_box.contract.ReferenceAppBox.increment_box_counter@4"
    },
    "248": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter[routing]",
      "params": {},
      "block": "get_box_counter",
      "stack_in": [],
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "249": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"counter\"",
        "materialized_values%0#0"
      ]
    },
    "251": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "252": {
      "op": "box_get",
      "defined_out": [
        "has_counter#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "has_counter#0"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "has_counter#0",
        "maybe_value%0#0"
      ]
    },
    "254": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "has_counter#0"
      ],
      "stack_out": [
        "has_counter#0",
        "counter#0"
      ]
    },
    "255": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "has_counter#0"
      ],
      "stack_out": [
        "counter#0",
        "has_counter#0"
      ]
    },
    "256": {
      "op": "bz get_box_counter_after_if_else@3",
      "stack_out": [
        "counter#0"
      ]
    },
    "259": {
      "op": "dup",
      "defined_out": [
        "counter#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%0#0"
      ]
    },
    "260": {
      "block": "get_box_counter_after_inlined_smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter@4",
      "stack_in": [
        "counter#0",
        "tmp%0#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "261": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "262": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%2#0"
      ]
    },
    "264": {
      "op": "log",
      "stack_out": [
        "counter#0"
      ]
    },
    "265": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "counter#0",
        "1"
      ]
    },
    "266": {
      "op": "return",
      "stack_out": [
        "counter#0"
      ]
    },
    "267": {
      "block": "get_box_counter_after_if_else@3",
      "stack_in": [
        "counter#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%0#0"
      ]
    },
    "268": {
      "op": "b get_box_counter_after_inlined_smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter@4"
    },
    "271": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter_for_account[routing]",
      "params": {},
      "block": "get_box_counter_for_account",
      "stack_in": [],
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "272": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"counter\"",
        "account#0"
      ],
      "stack_out": [
        "\"counter\"",
        "account#0"
      ]
    },
    "275": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "276": {
      "op": "box_get",
      "defined_out": [
        "has_counter#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "has_counter#0"
      ]
    },
    "277": {
      "op": "swap",
      "stack_out": [
        "has_counter#0",
        "maybe_value%0#0"
      ]
    },
    "278": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "has_counter#0"
      ],
      "stack_out": [
        "has_counter#0",
        "counter#0"
      ]
    },
    "279": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "has_counter#0"
      ],
      "stack_out": [
        "counter#0",
        "has_counter#0"
      ]
    },
    "280": {
      "op": "bz get_box_counter_for_account_after_if_else@3",
      "stack_out": [
        "counter#0"
      ]
    },
    "283": {
      "op": "dup",
      "defined_out": [
        "counter#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%1#0"
      ]
    },
    "284": {
      "block": "get_box_counter_for_account_after_inlined_smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter_for_account@4",
      "stack_in": [
        "counter#0",
        "tmp%1#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "285": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "counter#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "286": {
      "op": "swap",
      "stack_out": [
        "counter#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "287": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%3#0"
      ]
    },
    "288": {
      "op": "log",
      "stack_out": [
        "counter#0"
      ]
    },
    "289": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "counter#0",
        "1"
      ]
    },
    "290": {
      "op": "return",
      "stack_out": [
        "counter#0"
      ]
    },
    "291": {
      "block": "get_box_counter_for_account_after_if_else@3",
      "stack_in": [
        "counter#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "counter#0",
        "tmp%1#0"
      ]
    },
    "292": {
      "op": "b get_box_counter_for_account_after_inlined_smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter_for_account@4"
    },
    "295": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_mbr[routing]",
      "params": {},
      "block": "get_box_mbr",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "296": {
      "op": "bytec_2 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"box_mbr\""
      ]
    },
    "297": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "298": {
      "error": "check self.box_mbr exists",
      "op": "assert // check self.box_mbr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "299": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "300": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "301": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "302": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "303": {
      "op": "log",
      "stack_out": []
    },
    "304": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "305": {
      "op": "return",
      "stack_out": []
    },
    "306": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_configuration[routing]",
      "params": {},
      "block": "get_box_configuration",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "307": {
      "op": "bytec_1 // \"key_length\"",
      "defined_out": [
        "\"key_length\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"key_length\""
      ]
    },
    "308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "309": {
      "error": "check self.key_length exists",
      "op": "assert // check self.key_length exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "310": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "311": {
      "op": "bytec 4 // \"value_length\"",
      "defined_out": [
        "\"value_length\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"value_length\""
      ]
    },
    "313": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "314": {
      "error": "check self.value_length exists",
      "op": "assert // check self.value_length exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "315": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "316": {
      "op": "bytec 5 // \"box_size\"",
      "defined_out": [
        "\"box_size\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"box_size\""
      ]
    },
    "318": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "319": {
      "error": "check self.box_size exists",
      "op": "assert // check self.box_size exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "320": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "321": {
      "op": "bytec_2 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"box_mbr\""
      ]
    },
    "322": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "323": {
      "error": "check self.box_mbr exists",
      "op": "assert // check self.box_mbr exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "324": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%0#0"
      ]
    },
    "326": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "327": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "aggregate%head%1#0"
      ]
    },
    "331": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%3#0",
        "aggregate%head%1#0",
        "maybe_value%2#0"
      ]
    },
    "333": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "334": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "aggregate%head%2#0"
      ]
    },
    "335": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "maybe_value%3#0"
      ]
    },
    "336": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "337": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%3#0"
      ]
    },
    "338": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%3#0",
        "0x151f7c75"
      ]
    },
    "339": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%3#0"
      ]
    },
    "340": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "341": {
      "op": "log",
      "stack_out": []
    },
    "342": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "343": {
      "op": "return",
      "stack_out": []
    },
    "344": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.update_box_configuration[routing]",
      "params": {},
      "block": "update_box_configuration",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "347": {
      "op": "btoi",
      "defined_out": [
        "new_key_length#0"
      ],
      "stack_out": [
        "new_key_length#0"
      ]
    },
    "348": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "new_key_length#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "new_key_length#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "351": {
      "op": "btoi",
      "defined_out": [
        "new_key_length#0",
        "new_value_length#0"
      ],
      "stack_out": [
        "new_key_length#0",
        "new_value_length#0"
      ]
    },
    "352": {
      "op": "bytec_1 // \"key_length\"",
      "defined_out": [
        "\"key_length\"",
        "new_key_length#0",
        "new_value_length#0"
      ],
      "stack_out": [
        "new_key_length#0",
        "new_value_length#0",
        "\"key_length\""
      ]
    },
    "353": {
      "op": "uncover 2",
      "stack_out": [
        "new_value_length#0",
        "\"key_length\"",
        "new_key_length#0"
      ]
    },
    "355": {
      "op": "app_global_put",
      "stack_out": [
        "new_value_length#0"
      ]
    },
    "356": {
      "op": "bytec 4 // \"value_length\"",
      "defined_out": [
        "\"value_length\"",
        "new_value_length#0"
      ],
      "stack_out": [
        "new_value_length#0",
        "\"value_length\""
      ]
    },
    "358": {
      "op": "dig 1",
      "defined_out": [
        "\"value_length\"",
        "new_value_length#0",
        "new_value_length#0 (copy)"
      ],
      "stack_out": [
        "new_value_length#0",
        "\"value_length\"",
        "new_value_length#0 (copy)"
      ]
    },
    "360": {
      "op": "app_global_put",
      "stack_out": [
        "new_value_length#0"
      ]
    },
    "361": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "new_value_length#0"
      ],
      "stack_out": [
        "new_value_length#0",
        "0"
      ]
    },
    "362": {
      "op": "bytec_1 // \"key_length\"",
      "stack_out": [
        "new_value_length#0",
        "0",
        "\"key_length\""
      ]
    },
    "363": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "new_value_length#0"
      ],
      "stack_out": [
        "new_value_length#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "364": {
      "error": "check self.key_length exists",
      "op": "assert // check self.key_length exists",
      "stack_out": [
        "new_value_length#0",
        "maybe_value%0#0"
      ]
    },
    "365": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "366": {
      "op": "bytec 5 // \"box_size\"",
      "defined_out": [
        "\"box_size\"",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "\"box_size\""
      ]
    },
    "368": {
      "op": "dig 1",
      "defined_out": [
        "\"box_size\"",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "\"box_size\"",
        "tmp%0#1 (copy)"
      ]
    },
    "370": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "371": {
      "op": "intc_2 // 400",
      "defined_out": [
        "400",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "400"
      ]
    },
    "372": {
      "op": "*",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "373": {
      "op": "intc_3 // 2500",
      "defined_out": [
        "2500",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "2500"
      ]
    },
    "374": {
      "op": "+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "375": {
      "op": "bytec_2 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"box_mbr\""
      ]
    },
    "376": {
      "op": "swap",
      "stack_out": [
        "\"box_mbr\"",
        "tmp%2#0"
      ]
    },
    "377": {
      "op": "app_global_put",
      "stack_out": []
    },
    "378": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "379": {
      "op": "return",
      "stack_out": []
    }
  }
}