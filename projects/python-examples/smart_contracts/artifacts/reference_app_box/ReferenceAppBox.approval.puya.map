{
  "version": 3,
  "sources": [
    "../../reference_app_box/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBQ;AACI;;AADJ;AAGA;AACI;;AADJ;AAPR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAqGK;;AAAA;AAAA;AAAA;;AAAA;AArGL;;;AAAA;AAAA;;;AAAA;AAqGK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAjEL;;;AAAA;AAAA;;AAiEK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AA9BL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8BK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAEyB;AAAA;AAAA;AAAA;AAAwB;AAAA;AAAA;AAAA;AAAxB;AAAtB;;AAAA;AAAA;AACqC;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAhB;AAAA;AAArB;;AAAA;AAAA;;AAWR;;;AAGe;;AAAA;;AAAkB;AAAA;;AAAA;AAAA;AAAlB;AAAP;AAEI;;AAAA;;AAAoB;;AAApB;AADJ;AAIuB;AAA+B;;AAA/B;AAAA;AAAA;;AAE/B;;;AACY;AAAyB;;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AAAxC;AAAA;AAAA;AACO;AAAyB;;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAEA;AAAyB;;AAAzB;AAAuC;AAAvC;AAAA;AACO;AAAP;AAOZ;;;AAE+B;AAA+B;;AAA/B;AAAA;AAAA;AAAA;AAAA;AAC/B;;;AACY;;AAAA;AAAA;AACG;AAAP;AAAA;AAQR;;;AAE+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/B;;;AACY;;AAAA;AAAA;AACG;AAAP;AAAA;AASO;AAAA;;AAAA;AAAA;AAAP;AAUI;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAJJ;AAaR;;;AAIQ;AAAA;;AAAA;AACA;AAAA;;AAAA;AAGsB;AAAA;AAAA;AAAA;AAAwB;AAAA;AAAA;AAAA;AAAxB;AAAtB;;AAAA;AAAA;AACqC;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAhB;AAAA;AAArB;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 400 2500"
    },
    "9": {
      "op": "bytecblock \"counter\" \"key_length\" \"value_length\" 0x151f7c75 \"box_size\" \"box_mbr\""
    },
    "65": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "70": {
      "op": "bytec_1 // \"key_length\"",
      "defined_out": [
        "\"key_length\""
      ],
      "stack_out": [
        "\"key_length\""
      ]
    },
    "71": {
      "op": "pushint 51 // 51",
      "defined_out": [
        "\"key_length\"",
        "51"
      ],
      "stack_out": [
        "\"key_length\"",
        "51"
      ]
    },
    "73": {
      "op": "app_global_put",
      "stack_out": []
    },
    "74": {
      "op": "bytec_2 // \"value_length\"",
      "defined_out": [
        "\"value_length\""
      ],
      "stack_out": [
        "\"value_length\""
      ]
    },
    "75": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "\"value_length\"",
        "8"
      ],
      "stack_out": [
        "\"value_length\"",
        "8"
      ]
    },
    "77": {
      "op": "app_global_put",
      "stack_out": []
    },
    "78": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "80": {
      "op": "bz main_after_if_else@12",
      "stack_out": []
    },
    "83": {
      "op": "pushbytess 0x4c5c61ba 0x035c8f99 0xc415992d 0xb7051dd7 0x3356861d 0x1a3ea0e9 0x059b2740 // method \"create()void\", method \"increment_box_counter(pay)uint64\", method \"get_box_counter()uint64\", method \"get_box_counter_for_account(account)uint64\", method \"get_box_mbr()uint64\", method \"get_box_configuration()(uint64,uint64,uint64,uint64)\", method \"update_box_configuration(uint64,uint64)void\"",
      "defined_out": [
        "Method(create()void)",
        "Method(get_box_configuration()(uint64,uint64,uint64,uint64))",
        "Method(get_box_counter()uint64)",
        "Method(get_box_counter_for_account(account)uint64)",
        "Method(get_box_mbr()uint64)",
        "Method(increment_box_counter(pay)uint64)",
        "Method(update_box_configuration(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(increment_box_counter(pay)uint64)",
        "Method(get_box_counter()uint64)",
        "Method(get_box_counter_for_account(account)uint64)",
        "Method(get_box_mbr()uint64)",
        "Method(get_box_configuration()(uint64,uint64,uint64,uint64))",
        "Method(update_box_configuration(uint64,uint64)void)"
      ]
    },
    "120": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create()void)",
        "Method(get_box_configuration()(uint64,uint64,uint64,uint64))",
        "Method(get_box_counter()uint64)",
        "Method(get_box_counter_for_account(account)uint64)",
        "Method(get_box_mbr()uint64)",
        "Method(increment_box_counter(pay)uint64)",
        "Method(update_box_configuration(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(increment_box_counter(pay)uint64)",
        "Method(get_box_counter()uint64)",
        "Method(get_box_counter_for_account(account)uint64)",
        "Method(get_box_mbr()uint64)",
        "Method(get_box_configuration()(uint64,uint64,uint64,uint64))",
        "Method(update_box_configuration(uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "123": {
      "op": "match main_create_route@5 main_increment_box_counter_route@6 main_get_box_counter_route@7 main_get_box_counter_for_account_route@8 main_get_box_mbr_route@9 main_get_box_configuration_route@10 main_update_box_configuration_route@11",
      "stack_out": []
    },
    "139": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "return",
      "stack_out": []
    },
    "141": {
      "block": "main_update_box_configuration_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "143": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "144": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "145": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "147": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "148": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "151": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "152": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "155": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "156": {
      "callsub": "smart_contracts.reference_app_box.contract.ReferenceAppBox.update_box_configuration",
      "op": "callsub update_box_configuration",
      "stack_out": []
    },
    "159": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "160": {
      "op": "return",
      "stack_out": []
    },
    "161": {
      "block": "main_get_box_configuration_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "163": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "164": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "165": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "167": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "168": {
      "callsub": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_configuration",
      "op": "callsub get_box_configuration",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "171": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0"
      ]
    },
    "173": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "174": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "elements_to_encode%1#0"
      ]
    },
    "176": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "177": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%2#0"
      ]
    },
    "179": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "180": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "elements_to_encode%3#0"
      ]
    },
    "182": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "183": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%4#0"
      ]
    },
    "185": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "188": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%7#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "191": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%7#0"
      ]
    },
    "192": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "193": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "0x151f7c75"
      ]
    },
    "194": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "195": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "196": {
      "op": "log",
      "stack_out": []
    },
    "197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return",
      "stack_out": []
    },
    "199": {
      "block": "main_get_box_mbr_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "201": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "202": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "203": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "205": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "206": {
      "callsub": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_mbr",
      "op": "callsub get_box_mbr",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "209": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "210": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "211": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "213": {
      "op": "log",
      "stack_out": []
    },
    "214": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    },
    "216": {
      "block": "main_get_box_counter_for_account_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "218": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "219": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "220": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "222": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "223": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "226": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "227": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "229": {
      "callsub": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter_for_account",
      "op": "callsub get_box_counter_for_account",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "232": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "233": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "236": {
      "op": "log",
      "stack_out": []
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "238": {
      "op": "return",
      "stack_out": []
    },
    "239": {
      "block": "main_get_box_counter_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "241": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "242": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "243": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "245": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "246": {
      "callsub": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter",
      "op": "callsub get_box_counter",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "249": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "250": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "251": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "252": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "253": {
      "op": "log",
      "stack_out": []
    },
    "254": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "255": {
      "op": "return",
      "stack_out": []
    },
    "256": {
      "block": "main_increment_box_counter_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "258": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "259": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "260": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "262": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "263": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "265": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "1"
      ]
    },
    "266": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "267": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "268": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "270": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "271": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "272": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "273": {
      "callsub": "smart_contracts.reference_app_box.contract.ReferenceAppBox.increment_box_counter",
      "op": "callsub increment_box_counter",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "276": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "277": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "279": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "280": {
      "op": "log",
      "stack_out": []
    },
    "281": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "282": {
      "op": "return",
      "stack_out": []
    },
    "283": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "285": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "286": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "287": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "289": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "290": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "291": {
      "callsub": "smart_contracts.reference_app_box.contract.ReferenceAppBox.create",
      "op": "callsub create"
    },
    "294": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "295": {
      "op": "return",
      "stack_out": []
    },
    "296": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.create",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "297": {
      "op": "bytec_1 // \"key_length\"",
      "defined_out": [
        "\"key_length\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"key_length\""
      ]
    },
    "298": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "299": {
      "error": "check self.key_length exists",
      "op": "assert // check self.key_length exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "300": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "301": {
      "op": "bytec_2 // \"value_length\"",
      "defined_out": [
        "\"value_length\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"value_length\""
      ]
    },
    "302": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "303": {
      "error": "check self.value_length exists",
      "op": "assert // check self.value_length exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "304": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "305": {
      "op": "bytec 4 // \"box_size\"",
      "defined_out": [
        "\"box_size\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"box_size\""
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "\"box_size\"",
        "new_state_value%0#0"
      ]
    },
    "308": {
      "op": "app_global_put",
      "stack_out": []
    },
    "309": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "310": {
      "op": "bytec 4 // \"box_size\"",
      "stack_out": [
        "0",
        "\"box_size\""
      ]
    },
    "312": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "313": {
      "error": "check self.box_size exists",
      "op": "assert // check self.box_size exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "314": {
      "op": "intc_2 // 400",
      "defined_out": [
        "400",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "400"
      ]
    },
    "315": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "316": {
      "op": "intc_3 // 2500",
      "defined_out": [
        "2500",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2500"
      ]
    },
    "317": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "318": {
      "op": "bytec 5 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"box_mbr\""
      ]
    },
    "320": {
      "op": "swap",
      "stack_out": [
        "\"box_mbr\"",
        "new_state_value%1#0"
      ]
    },
    "321": {
      "op": "app_global_put",
      "stack_out": []
    },
    "322": {
      "retsub": true,
      "op": "retsub"
    },
    "323": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.increment_box_counter",
      "params": {
        "pay_mbr#0": "uint64"
      },
      "block": "increment_box_counter",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "326": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay_mbr#0 (copy)"
      ],
      "stack_out": [
        "pay_mbr#0 (copy)"
      ]
    },
    "328": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "330": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "331": {
      "op": "bytec 5 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"box_mbr\""
      ]
    },
    "333": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "334": {
      "error": "check self.box_mbr exists",
      "op": "assert // check self.box_mbr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "335": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "336": {
      "error": "Payment must cover the box MBR",
      "op": "assert // Payment must cover the box MBR",
      "stack_out": []
    },
    "337": {
      "op": "frame_dig -1",
      "stack_out": [
        "pay_mbr#0 (copy)"
      ]
    },
    "339": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "341": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "343": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "344": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": []
    },
    "345": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "346": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "\"counter\"",
        "tmp%5#0"
      ]
    },
    "348": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "349": {
      "op": "box_get",
      "defined_out": [
        "has_counter#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "has_counter#0"
      ]
    },
    "350": {
      "op": "bury 1",
      "stack_out": [
        "has_counter#0"
      ]
    },
    "352": {
      "op": "bz increment_box_counter_else_body@2",
      "stack_out": []
    },
    "355": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "\"counter\""
      ]
    },
    "356": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "tmp%7#0"
      ],
      "stack_out": [
        "\"counter\"",
        "tmp%7#0"
      ]
    },
    "358": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "359": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "360": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "361": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "362": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "maybe_exists%2#0",
        "maybe_value_converted%1#0"
      ]
    },
    "363": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "maybe_value_converted%1#0",
        "maybe_exists%2#0"
      ]
    },
    "364": {
      "error": "check self.account_box_counter entry exists",
      "op": "assert // check self.account_box_counter entry exists",
      "stack_out": [
        "tmp%8#0",
        "maybe_value_converted%1#0"
      ]
    },
    "365": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value_converted%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "maybe_value_converted%1#0",
        "1"
      ]
    },
    "366": {
      "op": "+",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_box_value%0#0"
      ]
    },
    "367": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "new_box_value%1#0"
      ]
    },
    "368": {
      "op": "box_put",
      "stack_out": []
    },
    "369": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "\"counter\""
      ]
    },
    "370": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "tmp%9#0"
      ],
      "stack_out": [
        "\"counter\"",
        "tmp%9#0"
      ]
    },
    "372": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "373": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "374": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "375": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_value_converted%2#0"
      ]
    },
    "376": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%2#0",
        "maybe_exists%3#0"
      ]
    },
    "377": {
      "error": "check self.account_box_counter entry exists",
      "op": "assert // check self.account_box_counter entry exists",
      "stack_out": [
        "maybe_value_converted%2#0"
      ]
    },
    "378": {
      "retsub": true,
      "op": "retsub"
    },
    "379": {
      "block": "increment_box_counter_else_body@2",
      "stack_in": [],
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "380": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "tmp%11#0"
      ],
      "stack_out": [
        "\"counter\"",
        "tmp%11#0"
      ]
    },
    "382": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "383": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "1"
      ]
    },
    "384": {
      "op": "itob",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "new_box_value%2#0"
      ]
    },
    "385": {
      "op": "box_put",
      "stack_out": []
    },
    "386": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "387": {
      "retsub": true,
      "op": "retsub"
    },
    "388": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter",
      "params": {},
      "block": "get_box_counter",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "391": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "392": {
      "op": "txn Sender",
      "defined_out": [
        "\"counter\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"counter\"",
        "tmp%0#0"
      ]
    },
    "394": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "395": {
      "op": "box_get",
      "defined_out": [
        "has_counter#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "has_counter#0"
      ]
    },
    "396": {
      "op": "swap",
      "stack_out": [
        "has_counter#0",
        "maybe_value%0#0"
      ]
    },
    "397": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "has_counter#0"
      ],
      "stack_out": [
        "has_counter#0",
        "counter#0"
      ]
    },
    "398": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "has_counter#0"
      ],
      "stack_out": [
        "counter#0",
        "has_counter#0"
      ]
    },
    "399": {
      "op": "bz get_box_counter_after_if_else@2",
      "stack_out": [
        "counter#0"
      ]
    },
    "402": {
      "op": "frame_dig 0",
      "stack_out": [
        "counter#0",
        "counter#0"
      ]
    },
    "404": {
      "op": "swap"
    },
    "405": {
      "retsub": true,
      "op": "retsub"
    },
    "406": {
      "block": "get_box_counter_after_if_else@2",
      "stack_in": [
        "counter#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "counter#0",
        "0"
      ]
    },
    "407": {
      "op": "swap"
    },
    "408": {
      "retsub": true,
      "op": "retsub"
    },
    "409": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter_for_account",
      "params": {
        "account#0": "bytes"
      },
      "block": "get_box_counter_for_account",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "412": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "413": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"counter\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"counter\"",
        "account#0 (copy)"
      ]
    },
    "415": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "416": {
      "op": "box_get",
      "defined_out": [
        "has_counter#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "has_counter#0"
      ]
    },
    "417": {
      "op": "swap",
      "stack_out": [
        "has_counter#0",
        "maybe_value%0#0"
      ]
    },
    "418": {
      "op": "btoi",
      "defined_out": [
        "counter#0",
        "has_counter#0"
      ],
      "stack_out": [
        "has_counter#0",
        "counter#0"
      ]
    },
    "419": {
      "op": "swap",
      "defined_out": [
        "counter#0",
        "has_counter#0"
      ],
      "stack_out": [
        "counter#0",
        "has_counter#0"
      ]
    },
    "420": {
      "op": "bz get_box_counter_for_account_after_if_else@2",
      "stack_out": [
        "counter#0"
      ]
    },
    "423": {
      "op": "frame_dig 0",
      "stack_out": [
        "counter#0",
        "counter#0"
      ]
    },
    "425": {
      "op": "swap"
    },
    "426": {
      "retsub": true,
      "op": "retsub"
    },
    "427": {
      "block": "get_box_counter_for_account_after_if_else@2",
      "stack_in": [
        "counter#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "counter#0",
        "0"
      ]
    },
    "428": {
      "op": "swap"
    },
    "429": {
      "retsub": true,
      "op": "retsub"
    },
    "430": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_mbr",
      "params": {},
      "block": "get_box_mbr",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "431": {
      "op": "bytec 5 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"box_mbr\""
      ]
    },
    "433": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "434": {
      "error": "check self.box_mbr exists",
      "op": "assert // check self.box_mbr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "435": {
      "retsub": true,
      "op": "retsub"
    },
    "436": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_configuration",
      "params": {},
      "block": "get_box_configuration",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "437": {
      "op": "bytec_1 // \"key_length\"",
      "defined_out": [
        "\"key_length\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"key_length\""
      ]
    },
    "438": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "439": {
      "error": "check self.key_length exists",
      "op": "assert // check self.key_length exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "441": {
      "op": "bytec_2 // \"value_length\"",
      "defined_out": [
        "\"value_length\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"value_length\""
      ]
    },
    "442": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "443": {
      "error": "check self.value_length exists",
      "op": "assert // check self.value_length exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "445": {
      "op": "bytec 4 // \"box_size\"",
      "defined_out": [
        "\"box_size\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"box_size\""
      ]
    },
    "447": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "448": {
      "error": "check self.box_size exists",
      "op": "assert // check self.box_size exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "449": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "450": {
      "op": "bytec 5 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"box_mbr\""
      ]
    },
    "452": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "453": {
      "error": "check self.box_mbr exists",
      "op": "assert // check self.box_mbr exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "454": {
      "retsub": true,
      "op": "retsub"
    },
    "455": {
      "subroutine": "smart_contracts.reference_app_box.contract.ReferenceAppBox.update_box_configuration",
      "params": {
        "new_key_length#0": "uint64",
        "new_value_length#0": "uint64"
      },
      "block": "update_box_configuration",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "458": {
      "op": "bytec_1 // \"key_length\"",
      "defined_out": [
        "\"key_length\""
      ],
      "stack_out": [
        "\"key_length\""
      ]
    },
    "459": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"key_length\"",
        "new_key_length#0 (copy)"
      ],
      "stack_out": [
        "\"key_length\"",
        "new_key_length#0 (copy)"
      ]
    },
    "461": {
      "op": "app_global_put",
      "stack_out": []
    },
    "462": {
      "op": "bytec_2 // \"value_length\"",
      "defined_out": [
        "\"value_length\""
      ],
      "stack_out": [
        "\"value_length\""
      ]
    },
    "463": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"value_length\"",
        "new_value_length#0 (copy)"
      ],
      "stack_out": [
        "\"value_length\"",
        "new_value_length#0 (copy)"
      ]
    },
    "465": {
      "op": "app_global_put",
      "stack_out": []
    },
    "466": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "467": {
      "op": "bytec_1 // \"key_length\"",
      "stack_out": [
        "0",
        "\"key_length\""
      ]
    },
    "468": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "469": {
      "error": "check self.key_length exists",
      "op": "assert // check self.key_length exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "471": {
      "op": "bytec_2 // \"value_length\"",
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"value_length\""
      ]
    },
    "472": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "473": {
      "error": "check self.value_length exists",
      "op": "assert // check self.value_length exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "474": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "475": {
      "op": "bytec 4 // \"box_size\"",
      "defined_out": [
        "\"box_size\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"box_size\""
      ]
    },
    "477": {
      "op": "swap",
      "stack_out": [
        "\"box_size\"",
        "new_state_value%0#0"
      ]
    },
    "478": {
      "op": "app_global_put",
      "stack_out": []
    },
    "479": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "480": {
      "op": "bytec 4 // \"box_size\"",
      "stack_out": [
        "0",
        "\"box_size\""
      ]
    },
    "482": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "483": {
      "error": "check self.box_size exists",
      "op": "assert // check self.box_size exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "484": {
      "op": "intc_2 // 400",
      "defined_out": [
        "400",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "400"
      ]
    },
    "485": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "486": {
      "op": "intc_3 // 2500",
      "defined_out": [
        "2500",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2500"
      ]
    },
    "487": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "488": {
      "op": "bytec 5 // \"box_mbr\"",
      "defined_out": [
        "\"box_mbr\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"box_mbr\""
      ]
    },
    "490": {
      "op": "swap",
      "stack_out": [
        "\"box_mbr\"",
        "new_state_value%1#0"
      ]
    },
    "491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "492": {
      "retsub": true,
      "op": "retsub"
    }
  }
}