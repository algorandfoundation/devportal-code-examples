#pragma version 10
#pragma typetrack false

// smart_contracts.reference_app_box.contract.ReferenceAppBox.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 400 2500
    bytecblock "counter" "key_length" "value_length" 0x151f7c75 "box_size" "box_mbr"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/reference_app_box/contract.py:19-20
    // # Define constants for box storage in global state
    // self.key_length = GlobalState(
    bytec_1 // "key_length"
    // smart_contracts/reference_app_box/contract.py:21
    // UInt64(COUNTER_BOX_KEY_LENGTH)
    pushint 51 // 51
    // smart_contracts/reference_app_box/contract.py:19-22
    // # Define constants for box storage in global state
    // self.key_length = GlobalState(
    //     UInt64(COUNTER_BOX_KEY_LENGTH)
    // )  # Account address (32 bytes) + key prefix overhead (19 bytes)
    app_global_put
    // smart_contracts/reference_app_box/contract.py:23
    // self.value_length = GlobalState(
    bytec_2 // "value_length"
    // smart_contracts/reference_app_box/contract.py:24
    // UInt64(COUNTER_BOX_VALUE_LENGTH)
    pushint 8 // 8
    // smart_contracts/reference_app_box/contract.py:23-25
    // self.value_length = GlobalState(
    //     UInt64(COUNTER_BOX_VALUE_LENGTH)
    // )  # uint64 (8 bytes)
    app_global_put

main_after_if_else@2:
    // smart_contracts/reference_app_box/contract.py:16
    // class ReferenceAppBox(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@12
    pushbytess 0x4c5c61ba 0x035c8f99 0xc415992d 0xb7051dd7 0x3356861d 0x1a3ea0e9 0x059b2740 // method "create()void", method "increment_box_counter(pay)uint64", method "get_box_counter()uint64", method "get_box_counter_for_account(account)uint64", method "get_box_mbr()uint64", method "get_box_configuration()(uint64,uint64,uint64,uint64)", method "update_box_configuration(uint64,uint64)void"
    txna ApplicationArgs 0
    match main_create_route@5 main_increment_box_counter_route@6 main_get_box_counter_route@7 main_get_box_counter_for_account_route@8 main_get_box_mbr_route@9 main_get_box_configuration_route@10 main_update_box_configuration_route@11

main_after_if_else@12:
    // smart_contracts/reference_app_box/contract.py:16
    // class ReferenceAppBox(ARC4Contract):
    intc_0 // 0
    return

main_update_box_configuration_route@11:
    // smart_contracts/reference_app_box/contract.py:117
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/reference_app_box/contract.py:16
    // class ReferenceAppBox(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/reference_app_box/contract.py:117
    // @abimethod
    callsub update_box_configuration
    intc_1 // 1
    return

main_get_box_configuration_route@10:
    // smart_contracts/reference_app_box/contract.py:102
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_box_configuration
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_box_mbr_route@9:
    // smart_contracts/reference_app_box/contract.py:93
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_box_mbr
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_box_counter_for_account_route@8:
    // smart_contracts/reference_app_box/contract.py:81
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/reference_app_box/contract.py:16
    // class ReferenceAppBox(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/reference_app_box/contract.py:81
    // @abimethod(readonly=True)
    callsub get_box_counter_for_account
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_box_counter_route@7:
    // smart_contracts/reference_app_box/contract.py:68
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_box_counter
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_increment_box_counter_route@6:
    // smart_contracts/reference_app_box/contract.py:46
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/reference_app_box/contract.py:16
    // class ReferenceAppBox(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/reference_app_box/contract.py:46
    // @abimethod
    callsub increment_box_counter
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_create_route@5:
    // smart_contracts/reference_app_box/contract.py:32
    // @abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub create
    intc_1 // 1
    return


// smart_contracts.reference_app_box.contract.ReferenceAppBox.create() -> void:
create:
    // smart_contracts/reference_app_box/contract.py:34
    // self.box_size.value = self.key_length.value + self.value_length.value
    intc_0 // 0
    bytec_1 // "key_length"
    app_global_get_ex
    assert // check self.key_length exists
    intc_0 // 0
    bytec_2 // "value_length"
    app_global_get_ex
    assert // check self.value_length exists
    +
    bytec 4 // "box_size"
    swap
    app_global_put
    // smart_contracts/reference_app_box/contract.py:35
    // self.box_mbr.value = UInt64(2_500) + self.box_size.value * UInt64(
    intc_0 // 0
    bytec 4 // "box_size"
    app_global_get_ex
    assert // check self.box_size exists
    // smart_contracts/reference_app_box/contract.py:35-37
    // self.box_mbr.value = UInt64(2_500) + self.box_size.value * UInt64(
    //     400
    // )  # Base MBR + (size * per-byte cost)
    intc_2 // 400
    *
    // smart_contracts/reference_app_box/contract.py:35
    // self.box_mbr.value = UInt64(2_500) + self.box_size.value * UInt64(
    intc_3 // 2500
    // smart_contracts/reference_app_box/contract.py:35-37
    // self.box_mbr.value = UInt64(2_500) + self.box_size.value * UInt64(
    //     400
    // )  # Base MBR + (size * per-byte cost)
    +
    // smart_contracts/reference_app_box/contract.py:35
    // self.box_mbr.value = UInt64(2_500) + self.box_size.value * UInt64(
    bytec 5 // "box_mbr"
    // smart_contracts/reference_app_box/contract.py:35-37
    // self.box_mbr.value = UInt64(2_500) + self.box_size.value * UInt64(
    //     400
    // )  # Base MBR + (size * per-byte cost)
    swap
    app_global_put
    retsub


// smart_contracts.reference_app_box.contract.ReferenceAppBox.increment_box_counter(pay_mbr: uint64) -> uint64:
increment_box_counter:
    // smart_contracts/reference_app_box/contract.py:46-47
    // @abimethod
    // def increment_box_counter(self, pay_mbr: gtxn.PaymentTransaction) -> UInt64:
    proto 1 1
    // smart_contracts/reference_app_box/contract.py:48-49
    // # Verify the payment covers the MBR cost and is sent to the contract
    // assert pay_mbr.amount == self.box_mbr.value, "Payment must cover the box MBR"
    frame_dig -1
    gtxns Amount
    intc_0 // 0
    bytec 5 // "box_mbr"
    app_global_get_ex
    assert // check self.box_mbr exists
    ==
    assert // Payment must cover the box MBR
    // smart_contracts/reference_app_box/contract.py:51
    // pay_mbr.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/reference_app_box/contract.py:50-52
    // assert (
    //     pay_mbr.receiver == Global.current_application_address
    // ), "Payment must be to the contract"
    assert // Payment must be to the contract
    // smart_contracts/reference_app_box/contract.py:54
    // counter, has_counter = self.account_box_counter.maybe(Txn.sender)
    bytec_0 // "counter"
    txn Sender
    concat
    box_get
    bury 1
    // smart_contracts/reference_app_box/contract.py:56
    // if has_counter:
    bz increment_box_counter_else_body@2
    // smart_contracts/reference_app_box/contract.py:57
    // self.account_box_counter[Txn.sender] += 1
    bytec_0 // "counter"
    txn Sender
    concat
    dup
    box_get
    swap
    btoi
    swap
    assert // check self.account_box_counter entry exists
    intc_1 // 1
    +
    itob
    box_put
    // smart_contracts/reference_app_box/contract.py:58
    // return self.account_box_counter[Txn.sender]
    bytec_0 // "counter"
    txn Sender
    concat
    box_get
    swap
    btoi
    swap
    assert // check self.account_box_counter entry exists
    retsub

increment_box_counter_else_body@2:
    // smart_contracts/reference_app_box/contract.py:60
    // self.account_box_counter[Txn.sender] = UInt64(1)
    bytec_0 // "counter"
    txn Sender
    concat
    intc_1 // 1
    itob
    box_put
    // smart_contracts/reference_app_box/contract.py:61
    // return UInt64(1)
    intc_1 // 1
    retsub


// smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter() -> uint64:
get_box_counter:
    // smart_contracts/reference_app_box/contract.py:68-69
    // @abimethod(readonly=True)
    // def get_box_counter(self) -> UInt64:
    proto 0 1
    // smart_contracts/reference_app_box/contract.py:70
    // counter, has_counter = self.account_box_counter.maybe(Txn.sender)
    bytec_0 // "counter"
    txn Sender
    concat
    box_get
    swap
    btoi
    swap
    // smart_contracts/reference_app_box/contract.py:71
    // if has_counter:
    bz get_box_counter_after_if_else@2
    // smart_contracts/reference_app_box/contract.py:72
    // return counter
    frame_dig 0
    swap
    retsub

get_box_counter_after_if_else@2:
    // smart_contracts/reference_app_box/contract.py:73
    // return UInt64(0)
    intc_0 // 0
    swap
    retsub


// smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_counter_for_account(account: bytes) -> uint64:
get_box_counter_for_account:
    // smart_contracts/reference_app_box/contract.py:81-82
    // @abimethod(readonly=True)
    // def get_box_counter_for_account(self, account: Account) -> UInt64:
    proto 1 1
    // smart_contracts/reference_app_box/contract.py:83
    // counter, has_counter = self.account_box_counter.maybe(account)
    bytec_0 // "counter"
    frame_dig -1
    concat
    box_get
    swap
    btoi
    swap
    // smart_contracts/reference_app_box/contract.py:84
    // if has_counter:
    bz get_box_counter_for_account_after_if_else@2
    // smart_contracts/reference_app_box/contract.py:85
    // return counter
    frame_dig 0
    swap
    retsub

get_box_counter_for_account_after_if_else@2:
    // smart_contracts/reference_app_box/contract.py:86
    // return UInt64(0)
    intc_0 // 0
    swap
    retsub


// smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_mbr() -> uint64:
get_box_mbr:
    // smart_contracts/reference_app_box/contract.py:95
    // return self.box_mbr.value
    intc_0 // 0
    bytec 5 // "box_mbr"
    app_global_get_ex
    assert // check self.box_mbr exists
    retsub


// smart_contracts.reference_app_box.contract.ReferenceAppBox.get_box_configuration() -> uint64, uint64, uint64, uint64:
get_box_configuration:
    // smart_contracts/reference_app_box/contract.py:105
    // self.key_length.value,
    intc_0 // 0
    bytec_1 // "key_length"
    app_global_get_ex
    assert // check self.key_length exists
    // smart_contracts/reference_app_box/contract.py:106
    // self.value_length.value,
    intc_0 // 0
    bytec_2 // "value_length"
    app_global_get_ex
    assert // check self.value_length exists
    // smart_contracts/reference_app_box/contract.py:107
    // self.box_size.value,
    intc_0 // 0
    bytec 4 // "box_size"
    app_global_get_ex
    assert // check self.box_size exists
    // smart_contracts/reference_app_box/contract.py:108
    // self.box_mbr.value,
    intc_0 // 0
    bytec 5 // "box_mbr"
    app_global_get_ex
    assert // check self.box_mbr exists
    // smart_contracts/reference_app_box/contract.py:104-109
    // return (
    //     self.key_length.value,
    //     self.value_length.value,
    //     self.box_size.value,
    //     self.box_mbr.value,
    // )
    retsub


// smart_contracts.reference_app_box.contract.ReferenceAppBox.update_box_configuration(new_key_length: uint64, new_value_length: uint64) -> void:
update_box_configuration:
    // smart_contracts/reference_app_box/contract.py:117-120
    // @abimethod
    // def update_box_configuration(
    //     self, new_key_length: UInt64, new_value_length: UInt64
    // ) -> None:
    proto 2 0
    // smart_contracts/reference_app_box/contract.py:121
    // self.key_length.value = new_key_length
    bytec_1 // "key_length"
    frame_dig -2
    app_global_put
    // smart_contracts/reference_app_box/contract.py:122
    // self.value_length.value = new_value_length
    bytec_2 // "value_length"
    frame_dig -1
    app_global_put
    // smart_contracts/reference_app_box/contract.py:124-125
    // # Recalculate derived values
    // self.box_size.value = self.key_length.value + self.value_length.value
    intc_0 // 0
    bytec_1 // "key_length"
    app_global_get_ex
    assert // check self.key_length exists
    intc_0 // 0
    bytec_2 // "value_length"
    app_global_get_ex
    assert // check self.value_length exists
    +
    bytec 4 // "box_size"
    swap
    app_global_put
    // smart_contracts/reference_app_box/contract.py:126
    // self.box_mbr.value = UInt64(2_500) + self.box_size.value * UInt64(400)
    intc_0 // 0
    bytec 4 // "box_size"
    app_global_get_ex
    assert // check self.box_size exists
    intc_2 // 400
    *
    intc_3 // 2500
    +
    bytec 5 // "box_mbr"
    swap
    app_global_put
    retsub
