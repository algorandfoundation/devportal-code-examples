#pragma version 10
#pragma typetrack false

// smart_contracts.reference_app_box.contract.BoxCounter.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1
    bytecblock "account_box_counter"
    // smart_contracts/reference_app_box/contract.py:10
    // class BoxCounter(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x035c8f99 // method "increment_box_counter(pay)uint64"
    txna ApplicationArgs 0
    match main_increment_box_counter_route@5

main_after_if_else@8:
    // smart_contracts/reference_app_box/contract.py:10
    // class BoxCounter(ARC4Contract):
    pushint 0 // 0
    return

main_increment_box_counter_route@5:
    // smart_contracts/reference_app_box/contract.py:15
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/reference_app_box/contract.py:10
    // class BoxCounter(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/reference_app_box/contract.py:15
    // @abimethod
    callsub increment_box_counter
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@6:
    // smart_contracts/reference_app_box/contract.py:10
    // class BoxCounter(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@8
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.reference_app_box.contract.BoxCounter.increment_box_counter(pay_mbr: uint64) -> uint64:
increment_box_counter:
    // smart_contracts/reference_app_box/contract.py:15-16
    // @abimethod
    // def increment_box_counter(self, pay_mbr: gtxn.PaymentTransaction) -> UInt64:
    proto 1 1
    // smart_contracts/reference_app_box/contract.py:17
    // assert pay_mbr.amount == COUNTER_BOX_MBR
    frame_dig -1
    gtxns Amount
    pushint 26100 // 26100
    ==
    assert
    // smart_contracts/reference_app_box/contract.py:18
    // assert pay_mbr.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/reference_app_box/contract.py:20
    // if Txn.sender in self.account_box_counter:
    bytec_0 // "account_box_counter"
    txn Sender
    concat
    box_len
    bury 1
    bz increment_box_counter_else_body@2
    // smart_contracts/reference_app_box/contract.py:21
    // self.account_box_counter[Txn.sender] += 1
    bytec_0 // "account_box_counter"
    txn Sender
    concat
    dup
    box_get
    swap
    btoi
    swap
    assert // check self.account_box_counter entry exists
    intc_0 // 1
    +
    itob
    box_put

increment_box_counter_after_if_else@3:
    // smart_contracts/reference_app_box/contract.py:25
    // return self.account_box_counter[Txn.sender]
    bytec_0 // "account_box_counter"
    txn Sender
    concat
    box_get
    swap
    btoi
    swap
    assert // check self.account_box_counter entry exists
    retsub

increment_box_counter_else_body@2:
    // smart_contracts/reference_app_box/contract.py:23
    // self.account_box_counter[Txn.sender] = UInt64(1)
    bytec_0 // "account_box_counter"
    txn Sender
    concat
    intc_0 // 1
    itob
    box_put
    b increment_box_counter_after_if_else@3
