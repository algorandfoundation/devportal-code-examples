{
    "name": "ReferenceAppBox",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "increment_box_counter",
            "args": [
                {
                    "type": "pay",
                    "name": "pay_mbr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_counter",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_counter_for_account",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_mbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_configuration",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_box_configuration",
            "args": [
                {
                    "type": "uint64",
                    "name": "new_key_length"
                },
                {
                    "type": "uint64",
                    "name": "new_value_length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "key_length": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "a2V5X2xlbmd0aA=="
                },
                "value_length": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dmFsdWVfbGVuZ3Ro"
                },
                "box_size": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym94X3NpemU="
                },
                "box_mbr": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym94X21icg=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "account_box_counter": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "prefix": "Y291bnRlcg=="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        144,
                        164,
                        202,
                        219,
                        242,
                        259,
                        286
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        344
                    ],
                    "errorMessage": "Payment must be to the contract"
                },
                {
                    "pc": [
                        336
                    ],
                    "errorMessage": "Payment must cover the box MBR"
                },
                {
                    "pc": [
                        290
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        147,
                        167,
                        205,
                        222,
                        245,
                        262
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        364,
                        377
                    ],
                    "errorMessage": "check self.account_box_counter entry exists"
                },
                {
                    "pc": [
                        334,
                        434,
                        453
                    ],
                    "errorMessage": "check self.box_mbr exists"
                },
                {
                    "pc": [
                        313,
                        448,
                        483
                    ],
                    "errorMessage": "check self.box_size exists"
                },
                {
                    "pc": [
                        299,
                        439,
                        469
                    ],
                    "errorMessage": "check self.key_length exists"
                },
                {
                    "pc": [
                        303,
                        443,
                        473
                    ],
                    "errorMessage": "check self.value_length exists"
                },
                {
                    "pc": [
                        272
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAGQA8QTJgYHY291bnRlcgprZXlfbGVuZ3RoDHZhbHVlX2xlbmd0aAQVH3x1CGJveF9zaXplB2JveF9tYnIxGEAACCmBM2cqgQhnMRtBADiCBwRMXGG6BANcj5kExBWZLQS3BR3XBDNWhh0EGj6g6QQFmydANhoAjgcAkAB1AGQATQA8ABYAAiJDMRkURDEYRDYaARc2GgIXiAEoI0MxGRREMRhEiAEJTwMWTwMWTwMWTwMWTwNPA1BPAlBMUCtMULAjQzEZFEQxGESIAN0WK0xQsCNDMRkURDEYRDYaARfAHIgAsRYrTFCwI0MxGRREMRhEiACLFitMULAjQzEZFEQxGEQxFiMJSTgQIxJEiAAvFitMULAjQzEZFEQxGBREiAACI0MiKWVEIiplRAgnBExnIicEZUQkCyUIJwVMZ4mKAQGL/zgIIicFZUQSRIv/OAcyChJEKDEAUL5FAUEAGCgxAFBJvkwXTEQjCBa/KDEAUL5MF0xEiSgxAFAjFr8jiYoAASgxAFC+TBdMQQAEiwBMiSJMiYoBASiL/1C+TBdMQQAEiwBMiSJMiSInBWVEiSIpZUQiKmVEIicEZUQiJwVlRImKAgApi/5nKov/ZyIpZUQiKmVECCcETGciJwRlRCQLJQgnBUxniQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}