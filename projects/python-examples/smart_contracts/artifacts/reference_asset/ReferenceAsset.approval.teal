#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    bytecblock 0x151f7c75
    // smart_contracts/reference_asset/contract.py:11
    // class ReferenceAsset(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x1a350779 0x59dcb8c9 // method "get_asset_total_supply()uint64", method "get_asset_total_supply_with_arg(uint64)uint64"
    txna ApplicationArgs 0
    match get_asset_total_supply get_asset_total_supply_with_arg
    err

main___algopy_default_create@9:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.reference_asset.contract.ReferenceAsset.get_asset_total_supply[routing]() -> void:
get_asset_total_supply:
    // smart_contracts/reference_asset/contract.py:19
    // return Asset(1185).total  # Replace with your asset id
    pushint 1185 // 1185
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/reference_asset/contract.py:17
    // @abimethod
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return


// smart_contracts.reference_asset.contract.ReferenceAsset.get_asset_total_supply_with_arg[routing]() -> void:
get_asset_total_supply_with_arg:
    // smart_contracts/reference_asset/contract.py:27
    // @abimethod
    txna ApplicationArgs 1
    btoi
    // smart_contracts/reference_asset/contract.py:29
    // return asset.total
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/reference_asset/contract.py:27
    // @abimethod
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return
