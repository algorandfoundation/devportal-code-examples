{
  "version": 3,
  "sources": [
    "../../reference_asset/contract.py"
  ],
  "mappings": ";;;;;;;;AAUA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;AAQe;;;AAAA;;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAUA;;;AAAA;AAEU;;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x151f7c75"
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "10": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "13": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "16": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "17": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "19": {
      "op": "assert",
      "stack_out": []
    },
    "20": {
      "op": "pushbytess 0x1a350779 0x59dcb8c9 // method \"get_asset_total_supply()uint64\", method \"get_asset_total_supply_with_arg(uint64)uint64\"",
      "defined_out": [
        "Method(get_asset_total_supply()uint64)",
        "Method(get_asset_total_supply_with_arg(uint64)uint64)"
      ],
      "stack_out": [
        "Method(get_asset_total_supply()uint64)",
        "Method(get_asset_total_supply_with_arg(uint64)uint64)"
      ]
    },
    "32": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_asset_total_supply()uint64)",
        "Method(get_asset_total_supply_with_arg(uint64)uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(get_asset_total_supply()uint64)",
        "Method(get_asset_total_supply_with_arg(uint64)uint64)",
        "tmp%6#0"
      ]
    },
    "35": {
      "op": "match get_asset_total_supply get_asset_total_supply_with_arg",
      "stack_out": []
    },
    "41": {
      "op": "err"
    },
    "42": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "44": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "45": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "48": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "49": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "50": {
      "subroutine": "smart_contracts.reference_asset.contract.ReferenceAsset.get_asset_total_supply[routing]",
      "params": {},
      "block": "get_asset_total_supply",
      "stack_in": [],
      "op": "pushint 1185 // 1185",
      "defined_out": [
        "1185"
      ],
      "stack_out": [
        "1185"
      ]
    },
    "53": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "55": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "56": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "57": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "58": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "59": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "60": {
      "op": "log",
      "stack_out": []
    },
    "61": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "63": {
      "op": "return",
      "stack_out": []
    },
    "64": {
      "subroutine": "smart_contracts.reference_asset.contract.ReferenceAsset.get_asset_total_supply_with_arg[routing]",
      "params": {},
      "block": "get_asset_total_supply_with_arg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "67": {
      "op": "btoi",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "68": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "70": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "71": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "72": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "75": {
      "op": "log",
      "stack_out": []
    },
    "76": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "78": {
      "op": "return",
      "stack_out": []
    }
  }
}