{
    "name": "LocalStorage",
    "structs": {},
    "methods": [
        {
            "name": "contains_local_data",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "contains_local_data_example",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_item_local_data",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_local_data_with_default_int",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_local_data",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "(uint64,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_item_local_data_example",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_local_data_with_default",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_local_data_example",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_local_int",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_local_data_example",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                },
                {
                    "type": "asset",
                    "name": "value_asset"
                },
                {
                    "type": "account",
                    "name": "value_account"
                },
                {
                    "type": "application",
                    "name": "value_appln"
                },
                {
                    "type": "byte[]",
                    "name": "value_byte"
                },
                {
                    "type": "bool",
                    "name": "value_bool"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_local_data",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_local_data_example",
            "args": [
                {
                    "type": "account",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 4,
                "bytes": 2
            }
        },
        "keys": {
            "global": {},
            "local": {
                "local_int": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxfaW50"
                },
                "local_bytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxfYnl0ZXM="
                },
                "local_bool": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxfYm9vbA=="
                },
                "local_asset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxfYXNzZXQ="
                },
                "local_application": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bG9jYWxfYXBwbGljYXRpb24="
                },
                "local_account": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxfYWNjb3VudA=="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        733,
                        808,
                        883
                    ],
                    "errorMessage": "Address length is 32 bytes"
                },
                {
                    "pc": [
                        213,
                        240,
                        258,
                        314,
                        336,
                        363,
                        390,
                        417,
                        447,
                        470,
                        493,
                        520
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        552
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        216,
                        243,
                        261,
                        317,
                        339,
                        366,
                        393,
                        420,
                        450,
                        473,
                        496,
                        523
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        731,
                        986
                    ],
                    "errorMessage": "check self.local_account exists for account"
                },
                {
                    "pc": [
                        722,
                        970
                    ],
                    "errorMessage": "check self.local_application exists for account"
                },
                {
                    "pc": [
                        712,
                        952
                    ],
                    "errorMessage": "check self.local_asset exists for account"
                },
                {
                    "pc": [
                        704,
                        934
                    ],
                    "errorMessage": "check self.local_bool exists for account"
                },
                {
                    "pc": [
                        693,
                        916
                    ],
                    "errorMessage": "check self.local_bytes exists for account"
                },
                {
                    "pc": [
                        633,
                        683
                    ],
                    "errorMessage": "check self.local_int exists for account"
                },
                {
                    "pc": [
                        833,
                        843,
                        854,
                        862,
                        872,
                        881
                    ],
                    "errorMessage": "no data for account"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAEKJgoEFR98dQlsb2NhbF9pbnQBAA1sb2NhbF9hY2NvdW50C2xvY2FsX2J5dGVzCmxvY2FsX2Jvb2wLbG9jYWxfYXNzZXQRbG9jYWxfYXBwbGljYXRpb24FSGVsbG8NRGVmYXVsdCBWYWx1ZTEbQQGrggwE5rzAdQQVWharBMBiG94ElnEIcARXWWFxBMIc7ngEgcbwPgQPDB2CBPGnfRYEgS3uFwRbt/R9BJF2Oss2GgCODAE1ARoBAwDsAM4AswCYAH0AZwAvAB0AAiJDMRkURDEYRDYaARfAHIgDByoiTwJUKExQsCNDMRkURDEYRDYaARfAHIgC5CNDMRkURDEYRDYaARfAHDYaAhfAMDYaAxfAHDYaBBfAMjYaBVcCADYaBiJTiAJYKiJPAlQoTFCwI0MxGRREMRhENhoBF8AcNhoCF4gCLyNDMRkURDEYRDYaARfAHIgB3CoiTwJUKExQsCNDMRkURDEYRDYaARfAHIgBbCoiTwJUKExQsCNDMRkURDEYRDYaARfAHIgBECoiTwJUKExQsCNDMRkURDEYRDYaARfAHIgA2kwWKiJPA1RQKExQsCNDMRkURDEYRDYaARfAHIgArxYoTFCwI0MxGRREMRhENhoBF8AciACOFihMULAjQzEZFEQxGEQ2GgEXwByIAD4qIk8CVChMULAjQzEZFEQxGEQ2GgEXwByIABYqIk8CVChMULAjQzEZQP6rMRgURCNDigEBi/8iKWNFAUQjiYoBAYv/IiljRQFEi/8iJwRjRQFEi/8iJwVjRQFEi/8iJwZjRQFEi/8iJwdjRQFEi/8iK2NFAUQjiYoBAYv/IiljRImKAQGL/yIpYyJOAk2JigECi/8iKWNJTwJMQAADIowBiwGLAE8DTwOJigEBi/8iKWNEJBJEi/8iJwRjRCcIEkSL/yInBWNERIv/IicGY0QkEkSL/yInB2NEJBJEi/8iK2NEIkQnCBJEI4mKAQGL/yIpYyJOAk0kEkSL/yInBGMnCU4CTScIEkSL/yInBWMiTgJNRIv/IicGYyJOAk0kEkSL/yInB2MiTgJNJBJEIkSL/yIrYycJTgJNJwgSRCOJigEBi/8iKWNEJBJEi/8iJwRjRCcIEkSL/yInBWNERIv/IicGY0QkEkSL/yInB2NEJBJEi/8iK2NEIkQnCBJEI4mKAgCL/imL/2aJigYBi/onBIv+Zov6IicEY0SL/hJEi/onBYv/Zov6IicFY0SL/xJEi/onBov7Zov6IicGY0SL+xJEi/onB4v9Zov6IicHY0SL/RJEi/ori/xmi/oiK2NEi/wSRCOJigEAi/8raImKAQGL/yloi/8nBGiL/ycFaIv/JwZoi/8nB2iL/ytoI4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}