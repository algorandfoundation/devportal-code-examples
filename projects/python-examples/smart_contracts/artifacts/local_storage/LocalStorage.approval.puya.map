{
  "version": 3,
  "sources": [
    "../../local_storage/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAcK;;;AAEU;AAAe;AAAf;AAAA;;AAAP;AAFH;AAAA;AAAA;AAAA;AAQA;;;AAEU;AAAA;AAAe;AAAf;AAAA;;AAAP;AACO;AAAA;AAAe;AAAf;AAAA;;AAAP;AACO;AAAA;AAAe;;AAAf;AAAA;;AAAP;AACO;AAAA;AAAe;;AAAf;AAAA;;AAAP;AACO;AAAA;AAAe;;AAAf;AAAA;;AAAP;AACO;AAAe;AAAf;AAAA;;AAAP;AAPH;AAAA;AAAA;AAAA;AAaA;;;AAEU;AAAA;AAAA;AAAA;AAFV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAEU;AAAA;AAAA;AAAwC;AAAxC;;AAAA;AAFV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAGoB;AAAA;AAAA;AAAA;AAAA;;AAAA;AACd;;;AACU;AAAT;;AALP;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;AAEU;AAAA;AAAA;AAAA;AAAA;AAA+B;AAA/B;AAAP;AAGO;AAAA;AAAA;AAAA;AAAA;AAAiC;;AAAjC;AAAP;AACY;AAAA;AAAA;;AAAA;AAAA;AAAZ;AACO;AAAA;AAAA;;AAAA;AAAA;AAAuC;AAAvC;AAAP;AACO;AAAA;AAAA;;AAAA;AAAA;AACH;AADG;AAAP;AAGO;AAAA;AAAA;AAAA;AAAmC;AAAA;AAAQ;;AAA3C;AAAP;AAXH;AAAA;AAAA;AAAA;AAcA;;;AAEU;AAAA;AAAA;AAAA;AAAwC;AAAxC;;AAAA;AAAsD;AAAtD;AAAP;AAGO;AAAA;AAAA;AAAA;AACkB;;AADlB;;AAAA;AAEF;;AAFE;AAAP;AAKY;AAAA;AAAA;;AAAA;AAAyC;AAAzC;;AAAA;AAAZ;AAEO;AAAA;AAAA;;AAAA;AAAgD;AAAhD;;AAAA;AACH;AADG;AAAP;AAGO;AAAA;AAAA;;AAAA;AAC8B;AAD9B;;AAAA;AAGH;AAHG;AAAP;AAMyB;AAAA;AADlB;AAAA;AAAA;AAC0B;;AAD1B;;AAAA;AAGH;;AAHG;AAAP;AApBH;AAAA;AAAA;AAAA;AA4BA;;;AAEoB;AAAA;AAAA;AAAA;AACjB;AACiB;AAAV;AAAP;AAEuB;AAAA;AAAA;AAAA;AACvB;AACuB;;AAAhB;AAAP;AAEsB;AAAA;AAAA;;AAAA;AACtB;AACA;AAEuB;AAAA;AAAA;;AAAA;AACvB;AAC6B;AAAtB;AAAP;AAEuB;AAAA;AAAA;;AAAA;AACvB;AACmC;AAA5B;AAAP;AAEyB;AAAA;AAAA;AACzB;AACyB;AAAA;AAAQ;;AAA1B;AAAP;AAxBH;AAAA;AAAA;AAAA;AA8BA;;;AAAA;;;AAAA;AAEG;AAAA;AAAA;AAFH;AAAA;AAOA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAWG;;AAAA;AAAA;;AAAA;AAGA;;AAAA;;AAAA;;AAAA;AAGA;;AAAA;;AAAA;;AAAA;AAGA;;AAAA;;AAAA;;AAAA;AAGA;AAAA;AAAA;AAvBH;AAAA;AAAA;AAAA;AA8BA;;;AAEO;AAAJ;AAFH;AAAA;AAOA;;;AAEG;AAAI;AAAJ;AACA;AAAI;AAAJ;AACA;AAAI;;AAAJ;AACA;AAAI;;AAAJ;AACA;AAAI;;AAAJ;AACI;AAAJ;AAPH;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10"
    },
    "6": {
      "op": "bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565"
    },
    "116": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "118": {
      "op": "bz main___algopy_default_create@21",
      "stack_out": []
    },
    "121": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "123": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "124": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "127": {
      "op": "assert",
      "stack_out": []
    },
    "128": {
      "op": "pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255 // method \"contains_local_data(address)bool\", method \"contains_local_data_example(address)bool\", method \"get_item_local_data(address)uint64\", method \"get_local_data_with_default_int(address)uint64\", method \"maybe_local_data(address)(uint64,bool)\", method \"get_item_local_data_example(address)bool\", method \"get_local_data_with_default(address)bool\", method \"maybe_local_data_example(address)bool\", method \"set_local_int(address,uint64)void\", method \"set_local_data_example(address,uint64,address,uint64,byte[],bool)bool\", method \"delete_local_data(address)void\", method \"delete_local_data_example(address)bool\"",
      "defined_out": [
        "Method(contains_local_data(address)bool)",
        "Method(contains_local_data_example(address)bool)",
        "Method(delete_local_data(address)void)",
        "Method(delete_local_data_example(address)bool)",
        "Method(get_item_local_data(address)uint64)",
        "Method(get_item_local_data_example(address)bool)",
        "Method(get_local_data_with_default(address)bool)",
        "Method(get_local_data_with_default_int(address)uint64)",
        "Method(maybe_local_data(address)(uint64,bool))",
        "Method(maybe_local_data_example(address)bool)",
        "Method(set_local_data_example(address,uint64,address,uint64,byte[],bool)bool)",
        "Method(set_local_int(address,uint64)void)"
      ],
      "stack_out": [
        "Method(contains_local_data(address)bool)",
        "Method(contains_local_data_example(address)bool)",
        "Method(get_item_local_data(address)uint64)",
        "Method(get_local_data_with_default_int(address)uint64)",
        "Method(maybe_local_data(address)(uint64,bool))",
        "Method(get_item_local_data_example(address)bool)",
        "Method(get_local_data_with_default(address)bool)",
        "Method(maybe_local_data_example(address)bool)",
        "Method(set_local_int(address,uint64)void)",
        "Method(set_local_data_example(address,uint64,address,uint64,byte[],bool)bool)",
        "Method(delete_local_data(address)void)",
        "Method(delete_local_data_example(address)bool)"
      ]
    },
    "190": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(contains_local_data(address)bool)",
        "Method(contains_local_data_example(address)bool)",
        "Method(delete_local_data(address)void)",
        "Method(delete_local_data_example(address)bool)",
        "Method(get_item_local_data(address)uint64)",
        "Method(get_item_local_data_example(address)bool)",
        "Method(get_local_data_with_default(address)bool)",
        "Method(get_local_data_with_default_int(address)uint64)",
        "Method(maybe_local_data(address)(uint64,bool))",
        "Method(maybe_local_data_example(address)bool)",
        "Method(set_local_data_example(address,uint64,address,uint64,byte[],bool)bool)",
        "Method(set_local_int(address,uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(contains_local_data(address)bool)",
        "Method(contains_local_data_example(address)bool)",
        "Method(get_item_local_data(address)uint64)",
        "Method(get_local_data_with_default_int(address)uint64)",
        "Method(maybe_local_data(address)(uint64,bool))",
        "Method(get_item_local_data_example(address)bool)",
        "Method(get_local_data_with_default(address)bool)",
        "Method(maybe_local_data_example(address)bool)",
        "Method(set_local_int(address,uint64)void)",
        "Method(set_local_data_example(address,uint64,address,uint64,byte[],bool)bool)",
        "Method(delete_local_data(address)void)",
        "Method(delete_local_data_example(address)bool)",
        "tmp%6#0"
      ]
    },
    "193": {
      "op": "match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example",
      "stack_out": []
    },
    "219": {
      "op": "err"
    },
    "220": {
      "block": "main___algopy_default_create@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "222": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "223": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "225": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "226": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "227": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "228": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.contains_local_data[routing]",
      "params": {},
      "block": "contains_local_data",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "231": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "232": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0",
        "\"local_int\""
      ]
    },
    "233": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "234": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "236": {
      "op": "assert",
      "stack_out": []
    },
    "237": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "238": {
      "op": "log",
      "stack_out": []
    },
    "239": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "240": {
      "op": "return",
      "stack_out": []
    },
    "241": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.contains_local_data_example[routing]",
      "params": {},
      "block": "contains_local_data_example",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "244": {
      "op": "dup",
      "defined_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "245": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "246": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "247": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%0#0",
        "for_account#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "for_account#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "248": {
      "op": "bury 1",
      "stack_out": [
        "for_account#0",
        "maybe_exists%0#0"
      ]
    },
    "250": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "251": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "252": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "253": {
      "op": "bytec_3 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "254": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%1#0",
        "for_account#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "for_account#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "255": {
      "op": "bury 1",
      "stack_out": [
        "for_account#0",
        "maybe_exists%1#0"
      ]
    },
    "257": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "258": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "259": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "260": {
      "op": "bytec 4 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "262": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%2#0",
        "for_account#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "for_account#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "263": {
      "op": "bury 1",
      "stack_out": [
        "for_account#0",
        "maybe_exists%2#0"
      ]
    },
    "265": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "266": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "267": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "268": {
      "op": "bytec 5 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "270": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%3#0",
        "for_account#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "for_account#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "271": {
      "op": "bury 1",
      "stack_out": [
        "for_account#0",
        "maybe_exists%3#0"
      ]
    },
    "273": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "274": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "275": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "276": {
      "op": "bytec 6 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "278": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%4#0",
        "for_account#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "for_account#0",
        "_%4#0",
        "maybe_exists%4#0"
      ]
    },
    "279": {
      "op": "bury 1",
      "stack_out": [
        "for_account#0",
        "maybe_exists%4#0"
      ]
    },
    "281": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "282": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "283": {
      "op": "bytec_2 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0",
        "\"local_account\""
      ]
    },
    "284": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%5#0",
        "maybe_exists%5#0"
      ],
      "stack_out": [
        "_%5#0",
        "maybe_exists%5#0"
      ]
    },
    "285": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%5#0"
      ]
    },
    "287": {
      "op": "assert",
      "stack_out": []
    },
    "288": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "289": {
      "op": "log",
      "stack_out": []
    },
    "290": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "291": {
      "op": "return",
      "stack_out": []
    },
    "292": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.get_item_local_data[routing]",
      "params": {},
      "block": "get_item_local_data",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "295": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "296": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0",
        "\"local_int\""
      ]
    },
    "297": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "298": {
      "error": "check self.local_int exists for account",
      "op": "assert // check self.local_int exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "299": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "300": {
      "op": "bytec 8 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "304": {
      "op": "log",
      "stack_out": []
    },
    "305": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "306": {
      "op": "return",
      "stack_out": []
    },
    "307": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.get_local_data_with_default_int[routing]",
      "params": {},
      "block": "get_local_data_with_default_int",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "310": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "311": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0",
        "\"local_int\""
      ]
    },
    "312": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "314": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "316": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "317": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "318": {
      "op": "bytec 8 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "320": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "321": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "322": {
      "op": "log",
      "stack_out": []
    },
    "323": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "324": {
      "op": "return",
      "stack_out": []
    },
    "325": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.maybe_local_data[routing]",
      "params": {},
      "block": "maybe_local_data",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "328": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "329": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0",
        "\"local_int\""
      ]
    },
    "330": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "exists#0"
      ]
    },
    "331": {
      "op": "dup",
      "stack_out": [
        "result#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "332": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "result#0"
      ]
    },
    "334": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "exists#0"
      ]
    },
    "335": {
      "op": "bnz maybe_local_data_after_if_else@3",
      "stack_out": [
        "exists#0",
        "result#0"
      ]
    },
    "338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "exists#0",
        "result#0",
        "result#0"
      ]
    },
    "339": {
      "op": "bury 1",
      "stack_out": [
        "exists#0",
        "result#0"
      ]
    },
    "341": {
      "block": "maybe_local_data_after_if_else@3",
      "stack_in": [
        "exists#0",
        "result#0"
      ],
      "op": "dup",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "result#0"
      ]
    },
    "342": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "343": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "aggregate%val_as_bytes%0#0",
        "0x00"
      ]
    },
    "346": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0"
      ]
    },
    "347": {
      "op": "dig 4",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0",
        "exists#0"
      ]
    },
    "349": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%val_as_bytes%0#0",
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "350": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "aggregate%head%1#0"
      ]
    },
    "351": {
      "op": "bytec 8 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%1#0",
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "aggregate%head%1#0",
        "0x151f7c75"
      ]
    },
    "353": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "result#0",
        "0x151f7c75",
        "aggregate%head%1#0"
      ]
    },
    "354": {
      "op": "concat",
      "defined_out": [
        "exists#0",
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "tmp%4#0"
      ]
    },
    "355": {
      "op": "log",
      "stack_out": [
        "exists#0",
        "result#0"
      ]
    },
    "356": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "1"
      ]
    },
    "357": {
      "op": "return",
      "stack_out": [
        "exists#0",
        "result#0"
      ]
    },
    "358": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.get_item_local_data_example[routing]",
      "params": {},
      "block": "get_item_local_data_example",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "361": {
      "op": "dup",
      "defined_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "363": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "364": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "365": {
      "error": "check self.local_int exists for account",
      "op": "assert // check self.local_int exists for account",
      "stack_out": [
        "for_account#0",
        "maybe_value%0#0"
      ]
    },
    "366": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "for_account#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%0#0",
        "10"
      ]
    },
    "367": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%0#1"
      ]
    },
    "368": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "369": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "370": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "371": {
      "op": "bytec_3 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "372": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "373": {
      "error": "check self.local_bytes exists for account",
      "op": "assert // check self.local_bytes exists for account",
      "stack_out": [
        "for_account#0",
        "maybe_value%1#0"
      ]
    },
    "374": {
      "op": "bytec 7 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "for_account#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%1#0",
        "0x48656c6c6f"
      ]
    },
    "376": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%1#1"
      ]
    },
    "377": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "378": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "379": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "380": {
      "op": "bytec 4 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "382": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "383": {
      "error": "check self.local_bool exists for account",
      "op": "assert // check self.local_bool exists for account",
      "stack_out": [
        "for_account#0",
        "maybe_value%2#0"
      ]
    },
    "384": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "385": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "386": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "387": {
      "op": "bytec 5 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "389": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "390": {
      "error": "check self.local_asset exists for account",
      "op": "assert // check self.local_asset exists for account",
      "stack_out": [
        "for_account#0",
        "maybe_value%3#0"
      ]
    },
    "391": {
      "op": "intc_2 // 10",
      "stack_out": [
        "for_account#0",
        "maybe_value%3#0",
        "10"
      ]
    },
    "392": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%2#1"
      ]
    },
    "393": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "394": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "396": {
      "op": "bytec 6 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "398": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "399": {
      "error": "check self.local_application exists for account",
      "op": "assert // check self.local_application exists for account",
      "stack_out": [
        "for_account#0",
        "maybe_value%4#0"
      ]
    },
    "400": {
      "op": "intc_2 // 10",
      "stack_out": [
        "for_account#0",
        "maybe_value%4#0",
        "10"
      ]
    },
    "401": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%3#1"
      ]
    },
    "402": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "403": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "404": {
      "op": "bytec_2 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0",
        "\"local_account\""
      ]
    },
    "405": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "406": {
      "error": "check self.local_account exists for account",
      "op": "assert // check self.local_account exists for account",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "407": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%5#0",
        "0"
      ]
    },
    "408": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "409": {
      "op": "bytec 7 // 0x48656c6c6f",
      "stack_out": [
        "maybe_value%5#0",
        "0x48656c6c6f"
      ]
    },
    "411": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "412": {
      "op": "assert",
      "stack_out": []
    },
    "413": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "414": {
      "op": "log",
      "stack_out": []
    },
    "415": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "416": {
      "op": "return",
      "stack_out": []
    },
    "417": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.get_local_data_with_default[routing]",
      "params": {},
      "block": "get_local_data_with_default",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "420": {
      "op": "dup",
      "defined_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "421": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "422": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "423": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "424": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "425": {
      "op": "cover 2",
      "stack_out": [
        "for_account#0",
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "427": {
      "op": "select",
      "defined_out": [
        "for_account#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "for_account#0",
        "state_get%0#0"
      ]
    },
    "428": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "for_account#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "for_account#0",
        "state_get%0#0",
        "10"
      ]
    },
    "429": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%0#1"
      ]
    },
    "430": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "431": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "433": {
      "op": "bytec_3 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "434": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "435": {
      "op": "bytec 9 // 0x44656661756c742056616c7565",
      "defined_out": [
        "0x44656661756c742056616c7565",
        "for_account#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x44656661756c742056616c7565"
      ]
    },
    "437": {
      "op": "cover 2",
      "stack_out": [
        "for_account#0",
        "0x44656661756c742056616c7565",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "439": {
      "op": "select",
      "defined_out": [
        "for_account#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "for_account#0",
        "state_get%1#0"
      ]
    },
    "440": {
      "op": "bytec 7 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "for_account#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "for_account#0",
        "state_get%1#0",
        "0x48656c6c6f"
      ]
    },
    "442": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%1#1"
      ]
    },
    "443": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "444": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "445": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "446": {
      "op": "bytec 4 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "448": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "449": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0"
      ]
    },
    "450": {
      "op": "cover 2",
      "stack_out": [
        "for_account#0",
        "0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "452": {
      "op": "select",
      "defined_out": [
        "for_account#0",
        "state_get%2#0"
      ],
      "stack_out": [
        "for_account#0",
        "state_get%2#0"
      ]
    },
    "453": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "454": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "456": {
      "op": "bytec 5 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "458": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "459": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "maybe_value%3#0",
        "maybe_exists%3#0",
        "0"
      ]
    },
    "460": {
      "op": "cover 2",
      "stack_out": [
        "for_account#0",
        "0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "462": {
      "op": "select",
      "defined_out": [
        "for_account#0",
        "state_get%3#0"
      ],
      "stack_out": [
        "for_account#0",
        "state_get%3#0"
      ]
    },
    "463": {
      "op": "intc_2 // 10",
      "stack_out": [
        "for_account#0",
        "state_get%3#0",
        "10"
      ]
    },
    "464": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%2#1"
      ]
    },
    "465": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "466": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "468": {
      "op": "bytec 6 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "470": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "for_account#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "maybe_value%4#0",
        "maybe_exists%4#0",
        "0"
      ]
    },
    "472": {
      "op": "cover 2",
      "stack_out": [
        "for_account#0",
        "0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "474": {
      "op": "select",
      "defined_out": [
        "for_account#0",
        "state_get%4#0"
      ],
      "stack_out": [
        "for_account#0",
        "state_get%4#0"
      ]
    },
    "475": {
      "op": "intc_2 // 10",
      "stack_out": [
        "for_account#0",
        "state_get%4#0",
        "10"
      ]
    },
    "476": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%3#1"
      ]
    },
    "477": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "479": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "for_account#0"
      ]
    },
    "480": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "481": {
      "op": "bytec_2 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0",
        "\"local_account\""
      ]
    },
    "482": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "483": {
      "op": "bytec 9 // 0x44656661756c742056616c7565",
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0",
        "0x44656661756c742056616c7565"
      ]
    },
    "485": {
      "op": "cover 2",
      "stack_out": [
        "0x44656661756c742056616c7565",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "487": {
      "op": "select",
      "defined_out": [
        "state_get%5#0"
      ],
      "stack_out": [
        "state_get%5#0"
      ]
    },
    "488": {
      "op": "bytec 7 // 0x48656c6c6f",
      "stack_out": [
        "state_get%5#0",
        "0x48656c6c6f"
      ]
    },
    "490": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "491": {
      "op": "assert",
      "stack_out": []
    },
    "492": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "493": {
      "op": "log",
      "stack_out": []
    },
    "494": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "495": {
      "op": "return",
      "stack_out": []
    },
    "496": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.maybe_local_data_example[routing]",
      "params": {},
      "block": "maybe_local_data_example",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "499": {
      "op": "dup",
      "defined_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "500": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "501": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "502": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "for_account#0",
        "result#0"
      ],
      "stack_out": [
        "for_account#0",
        "result#0",
        "exists#0"
      ]
    },
    "503": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "for_account#0",
        "result#0"
      ]
    },
    "504": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "for_account#0",
        "result#0"
      ],
      "stack_out": [
        "for_account#0",
        "result#0",
        "10"
      ]
    },
    "505": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%0#1"
      ]
    },
    "506": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "507": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "508": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "509": {
      "op": "bytec_3 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "510": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "for_account#0",
        "result_bytes#0"
      ],
      "stack_out": [
        "for_account#0",
        "result_bytes#0",
        "exists#0"
      ]
    },
    "511": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "for_account#0",
        "result_bytes#0"
      ]
    },
    "512": {
      "op": "bytec 7 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "for_account#0",
        "result_bytes#0"
      ],
      "stack_out": [
        "for_account#0",
        "result_bytes#0",
        "0x48656c6c6f"
      ]
    },
    "514": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%1#1"
      ]
    },
    "515": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "516": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "518": {
      "op": "bytec 4 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "520": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "for_account#0",
        "result_bool#0"
      ],
      "stack_out": [
        "for_account#0",
        "result_bool#0",
        "exists#0"
      ]
    },
    "521": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "for_account#0",
        "result_bool#0"
      ]
    },
    "522": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "523": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "525": {
      "op": "bytec 5 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "527": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "for_account#0",
        "result_asset#0"
      ],
      "stack_out": [
        "for_account#0",
        "result_asset#0",
        "exists#0"
      ]
    },
    "528": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "for_account#0",
        "result_asset#0"
      ]
    },
    "529": {
      "op": "intc_2 // 10",
      "stack_out": [
        "for_account#0",
        "result_asset#0",
        "10"
      ]
    },
    "530": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%2#1"
      ]
    },
    "531": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "532": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "533": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "534": {
      "op": "bytec 6 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "536": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "for_account#0",
        "result_appln#0"
      ],
      "stack_out": [
        "for_account#0",
        "result_appln#0",
        "exists#0"
      ]
    },
    "537": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "for_account#0",
        "result_appln#0"
      ]
    },
    "538": {
      "op": "intc_2 // 10",
      "stack_out": [
        "for_account#0",
        "result_appln#0",
        "10"
      ]
    },
    "539": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "for_account#0",
        "tmp%3#1"
      ]
    },
    "540": {
      "op": "assert",
      "stack_out": [
        "for_account#0"
      ]
    },
    "541": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0",
        "0"
      ]
    },
    "542": {
      "op": "bytec_2 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "0",
        "\"local_account\""
      ]
    },
    "543": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result_account#0"
      ],
      "stack_out": [
        "result_account#0",
        "exists#0"
      ]
    },
    "544": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result_account#0"
      ]
    },
    "545": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result_account#0",
        "0"
      ]
    },
    "546": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "result_account#0"
      ]
    },
    "547": {
      "op": "bytec 7 // 0x48656c6c6f",
      "stack_out": [
        "result_account#0",
        "0x48656c6c6f"
      ]
    },
    "549": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "550": {
      "op": "assert",
      "stack_out": []
    },
    "551": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "552": {
      "op": "log",
      "stack_out": []
    },
    "553": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "554": {
      "op": "return",
      "stack_out": []
    },
    "555": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.set_local_int[routing]",
      "params": {},
      "block": "set_local_int",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "558": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "for_account#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "for_account#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "561": {
      "op": "btoi",
      "defined_out": [
        "for_account#0",
        "value#0"
      ],
      "stack_out": [
        "for_account#0",
        "value#0"
      ]
    },
    "562": {
      "op": "bytec_0 // \"local_int\""
    },
    "563": {
      "op": "swap",
      "defined_out": [
        "\"local_int\"",
        "for_account#0",
        "value#0"
      ],
      "stack_out": [
        "for_account#0",
        "\"local_int\"",
        "value#0"
      ]
    },
    "564": {
      "op": "app_local_put",
      "stack_out": []
    },
    "565": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "566": {
      "op": "return",
      "stack_out": []
    },
    "567": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.set_local_data_example[routing]",
      "params": {},
      "block": "set_local_data_example",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "570": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "for_account#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "for_account#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "573": {
      "op": "btoi",
      "defined_out": [
        "for_account#0",
        "value_asset#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0"
      ]
    },
    "574": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "for_account#0",
        "value_account#0",
        "value_asset#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0"
      ]
    },
    "577": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "for_account#0",
        "reinterpret_Encoded(uint64)%1#0",
        "value_account#0",
        "value_asset#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "580": {
      "op": "btoi",
      "defined_out": [
        "for_account#0",
        "value_account#0",
        "value_appln#0",
        "value_asset#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0"
      ]
    },
    "581": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "for_account#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "value_account#0",
        "value_appln#0",
        "value_asset#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "584": {
      "op": "extract 2 0",
      "defined_out": [
        "for_account#0",
        "value_account#0",
        "value_appln#0",
        "value_asset#0",
        "value_byte#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_byte#0"
      ]
    },
    "587": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "for_account#0",
        "reinterpret_Encoded(bool8)%0#0",
        "value_account#0",
        "value_appln#0",
        "value_asset#0",
        "value_byte#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_byte#0",
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "590": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0",
        "reinterpret_Encoded(bool8)%0#0",
        "value_account#0",
        "value_appln#0",
        "value_asset#0",
        "value_byte#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_byte#0",
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "591": {
      "op": "getbit",
      "defined_out": [
        "for_account#0",
        "value_account#0",
        "value_appln#0",
        "value_asset#0",
        "value_bool#0",
        "value_byte#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_byte#0",
        "value_bool#0"
      ]
    },
    "592": {
      "op": "dig 5",
      "defined_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "value_account#0",
        "value_appln#0",
        "value_asset#0",
        "value_bool#0",
        "value_byte#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_byte#0",
        "value_bool#0",
        "for_account#0 (copy)"
      ]
    },
    "594": {
      "op": "bytec_3 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "for_account#0",
        "for_account#0 (copy)",
        "value_account#0",
        "value_appln#0",
        "value_asset#0",
        "value_bool#0",
        "value_byte#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_byte#0",
        "value_bool#0",
        "for_account#0 (copy)",
        "\"local_bytes\""
      ]
    },
    "595": {
      "op": "uncover 3",
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_bool#0",
        "for_account#0 (copy)",
        "\"local_bytes\"",
        "value_byte#0"
      ]
    },
    "597": {
      "op": "app_local_put",
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_bool#0"
      ]
    },
    "598": {
      "op": "dig 4",
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_bool#0",
        "for_account#0 (copy)"
      ]
    },
    "600": {
      "op": "bytec 4 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "for_account#0",
        "for_account#0 (copy)",
        "value_account#0",
        "value_appln#0",
        "value_asset#0",
        "value_bool#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "value_bool#0",
        "for_account#0 (copy)",
        "\"local_bool\""
      ]
    },
    "602": {
      "op": "uncover 2",
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "for_account#0 (copy)",
        "\"local_bool\"",
        "value_bool#0"
      ]
    },
    "604": {
      "op": "app_local_put",
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0"
      ]
    },
    "605": {
      "op": "dig 3",
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "for_account#0 (copy)"
      ]
    },
    "607": {
      "op": "bytec 5 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "for_account#0",
        "for_account#0 (copy)",
        "value_account#0",
        "value_appln#0",
        "value_asset#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_asset#0",
        "value_account#0",
        "value_appln#0",
        "for_account#0 (copy)",
        "\"local_asset\""
      ]
    },
    "609": {
      "op": "uncover 4",
      "stack_out": [
        "for_account#0",
        "value_account#0",
        "value_appln#0",
        "for_account#0 (copy)",
        "\"local_asset\"",
        "value_asset#0"
      ]
    },
    "611": {
      "op": "app_local_put",
      "stack_out": [
        "for_account#0",
        "value_account#0",
        "value_appln#0"
      ]
    },
    "612": {
      "op": "dig 2",
      "stack_out": [
        "for_account#0",
        "value_account#0",
        "value_appln#0",
        "for_account#0 (copy)"
      ]
    },
    "614": {
      "op": "bytec 6 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "for_account#0",
        "for_account#0 (copy)",
        "value_account#0",
        "value_appln#0"
      ],
      "stack_out": [
        "for_account#0",
        "value_account#0",
        "value_appln#0",
        "for_account#0 (copy)",
        "\"local_application\""
      ]
    },
    "616": {
      "op": "uncover 2",
      "stack_out": [
        "for_account#0",
        "value_account#0",
        "for_account#0 (copy)",
        "\"local_application\"",
        "value_appln#0"
      ]
    },
    "618": {
      "op": "app_local_put",
      "stack_out": [
        "for_account#0",
        "value_account#0"
      ]
    },
    "619": {
      "op": "bytec_2 // \"local_account\""
    },
    "620": {
      "op": "swap",
      "defined_out": [
        "\"local_account\"",
        "for_account#0",
        "value_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "\"local_account\"",
        "value_account#0"
      ]
    },
    "621": {
      "op": "app_local_put",
      "stack_out": []
    },
    "622": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "623": {
      "op": "log",
      "stack_out": []
    },
    "624": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "625": {
      "op": "return",
      "stack_out": []
    },
    "626": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.delete_local_data[routing]",
      "params": {},
      "block": "delete_local_data",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "629": {
      "op": "bytec_2 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "\"local_account\""
      ]
    },
    "630": {
      "op": "app_local_del",
      "stack_out": []
    },
    "631": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "632": {
      "op": "return",
      "stack_out": []
    },
    "633": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.delete_local_data_example[routing]",
      "params": {},
      "block": "delete_local_data_example",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0"
      ]
    },
    "636": {
      "op": "dup",
      "defined_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "637": {
      "op": "bytec_0 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "\"local_int\""
      ]
    },
    "638": {
      "op": "app_local_del",
      "stack_out": [
        "for_account#0"
      ]
    },
    "639": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "640": {
      "op": "bytec_3 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "\"local_bytes\""
      ]
    },
    "641": {
      "op": "app_local_del",
      "stack_out": [
        "for_account#0"
      ]
    },
    "642": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "643": {
      "op": "bytec 4 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "\"local_bool\""
      ]
    },
    "645": {
      "op": "app_local_del",
      "stack_out": [
        "for_account#0"
      ]
    },
    "646": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "647": {
      "op": "bytec 5 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "\"local_asset\""
      ]
    },
    "649": {
      "op": "app_local_del",
      "stack_out": [
        "for_account#0"
      ]
    },
    "650": {
      "op": "dup",
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "651": {
      "op": "bytec 6 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "for_account#0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "\"local_application\""
      ]
    },
    "653": {
      "op": "app_local_del",
      "stack_out": [
        "for_account#0"
      ]
    },
    "654": {
      "op": "bytec_2 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "for_account#0"
      ],
      "stack_out": [
        "for_account#0",
        "\"local_account\""
      ]
    },
    "655": {
      "op": "app_local_del",
      "stack_out": []
    },
    "656": {
      "op": "bytec_1 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "657": {
      "op": "log",
      "stack_out": []
    },
    "658": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "659": {
      "op": "return",
      "stack_out": []
    }
  }
}