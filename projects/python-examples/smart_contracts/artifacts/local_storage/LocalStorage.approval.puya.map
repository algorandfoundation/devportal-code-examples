{
  "version": 3,
  "sources": [
    "../../local_storage/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA4KK;;AAAA;AAAA;AAAA;;AAAA;AA5KL;;;AAAA;AAAA;;AA4KK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AArKL;;;AAAA;AAAA;;AAqKK;;;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAvIL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;;AAAA;AAuIK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAhIL;;;AAAA;AAAA;;AAAA;;;AAAA;AAgIK;;;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAlGL;;;AAAA;AAAA;;AAkGK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAtEL;;;AAAA;AAAA;;AAsEK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAxDL;;;AAAA;AAAA;;AAwDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA7CL;;;AAAA;AAAA;;AA6CK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAxCL;;;AAAA;AAAA;;AAwCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAnCL;;;AAAA;AAAA;;AAmCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAAA;AAAA;;AAsBK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAdL;;;AAAA;AAAA;;AAcK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdL;;AAAA;;;;;;;;;AAcA;;;AAEe;;AAAA;AAAe;AAAf;AAAA;;AAAP;AACO;AAAP;AAKR;;;AAEe;;AAAA;AAAe;AAAf;AAAA;;AAAP;AACO;;AAAA;AAAe;;AAAf;AAAA;;AAAP;AACO;;AAAA;AAAe;;AAAf;AAAA;;AAAP;AACO;;AAAA;AAAe;;AAAf;AAAA;;AAAP;AACO;;AAAA;AAAe;;AAAf;AAAA;;AAAP;AACO;;AAAA;AAAe;AAAf;AAAA;;AAAP;AACO;AAAP;AAKR;;;AAEe;;AAAA;AAAA;AAAA;AAAA;AAAP;AAGR;;;AAEe;;AAAA;AAAA;AAAA;AAAwC;AAAxC;;AAAA;AAAP;AAGR;;;AAGyB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACd;;;AACU;AAAT;;AACJ;;AAAA;;AAAA;;AAAA;;AAAA;AAKR;;;AAEe;;AAAA;AAAA;AAAA;AAAA;AAA+B;AAA/B;AAAP;AAGO;;AAAA;AAAA;;AAAA;AAAA;AAAiC;;AAAjC;AAAP;AACY;;AAAA;AAAA;;AAAA;AAAA;AAAZ;AACO;;AAAA;AAAA;;AAAA;AAAA;AAAuC;AAAvC;AAAP;AACO;;AAAA;AAAA;;AAAA;AAAA;AACH;AADG;AAAP;AAGO;;AAAA;AAAA;AAAA;AAAA;AAAmC;AAAA;AAAQ;;AAA3C;AAAP;AACO;AAAP;AAER;;;AAEe;;AAAA;AAAA;AAAA;AAAwC;AAAxC;;AAAA;AAAsD;AAAtD;AAAP;AAGO;;AAAA;AAAA;;AAAA;AACkB;;AADlB;;AAAA;AAEF;;AAFE;AAAP;AAKY;;AAAA;AAAA;;AAAA;AAAyC;AAAzC;;AAAA;AAAZ;AAEO;;AAAA;AAAA;;AAAA;AAAgD;AAAhD;;AAAA;AACH;AADG;AAAP;AAGO;;AAAA;AAAA;;AAAA;AAC8B;AAD9B;;AAAA;AAGH;AAHG;AAAP;AAMyB;AAAA;AADlB;;AAAA;AAAA;AAAA;AAC0B;;AAD1B;;AAAA;AAGH;;AAHG;AAAP;AAMO;AAAP;AAER;;;AAEyB;;AAAA;AAAA;AAAA;AACjB;AACiB;AAAV;AAAP;AAEuB;;AAAA;AAAA;;AAAA;AACvB;AACuB;;AAAhB;AAAP;AAEsB;;AAAA;AAAA;;AAAA;AACtB;AACA;AAEuB;;AAAA;AAAA;;AAAA;AACvB;AAC6B;AAAtB;AAAP;AAEuB;;AAAA;AAAA;;AAAA;AACvB;AACmC;AAA5B;AAAP;AAEyB;;AAAA;AAAA;AAAA;AACzB;AACyB;AAAA;AAAQ;;AAA1B;AAAP;AACO;AAAP;AAKR;;;AAEQ;;AAAA;AAAA;;AAAA;;AAKR;;;AAWQ;;AAAA;;AAAA;;AAAA;AACO;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEA;;AAAA;;AAAA;;AAAA;AACO;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEA;;AAAA;;AAAA;;AAAA;AACO;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEA;;AAAA;;AAAA;;AAAA;AACO;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEA;;AAAA;AAAA;;AAAA;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;AAAP;AAKR;;;AAEQ;;AAAI;AAAJ;;AAKR;;;AAEQ;;AAAI;AAAJ;AACA;;AAAI;;AAAJ;AACA;;AAAI;;AAAJ;AACA;;AAAI;;AAAJ;AACA;;AAAI;;AAAJ;AACA;;AAAI;AAAJ;AACO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 \"local_int\" 0x00 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x44656661756c742056616c7565"
    },
    "112": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "114": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "117": {
      "op": "pushbytess 0xe6bcc075 0x155a16ab 0xc0621bde 0x96710870 0x57596171 0xc21cee78 0x81c6f03e 0x0f0c1d82 0xf1a77d16 0x812dee17 0x5bb7f47d 0x91763acb // method \"contains_local_data(account)bool\", method \"contains_local_data_example(account)bool\", method \"get_item_local_data(account)uint64\", method \"get_local_data_with_default_int(account)uint64\", method \"maybe_local_data(account)(uint64,bool)\", method \"get_item_local_data_example(account)bool\", method \"get_local_data_with_default(account)bool\", method \"maybe_local_data_example(account)bool\", method \"set_local_int(account,uint64)void\", method \"set_local_data_example(account,asset,account,application,byte[],bool)bool\", method \"delete_local_data(account)void\", method \"delete_local_data_example(account)bool\""
    },
    "179": {
      "op": "txna ApplicationArgs 0"
    },
    "182": {
      "op": "match main_contains_local_data_route@5 main_contains_local_data_example_route@6 main_get_item_local_data_route@7 main_get_local_data_with_default_int_route@8 main_maybe_local_data_route@9 main_get_item_local_data_example_route@10 main_get_local_data_with_default_route@11 main_maybe_local_data_example_route@12 main_set_local_int_route@13 main_set_local_data_example_route@14 main_delete_local_data_route@15 main_delete_local_data_example_route@16"
    },
    "208": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "209": {
      "op": "return"
    },
    "210": {
      "block": "main_delete_local_data_example_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "212": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "213": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "216": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "217": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "220": {
      "op": "btoi",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "221": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "223": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.delete_local_data_example",
      "op": "callsub delete_local_data_example",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "226": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00"
      ]
    },
    "227": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00",
        "0"
      ]
    },
    "228": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%8#0"
      ]
    },
    "230": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%7#0"
      ],
      "stack_out": [
        "encoded_bool%7#0"
      ]
    },
    "231": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%7#0"
      ],
      "stack_out": [
        "encoded_bool%7#0",
        "0x151f7c75"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%7#0"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "234": {
      "op": "log",
      "stack_out": []
    },
    "235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "236": {
      "op": "return"
    },
    "237": {
      "block": "main_delete_local_data_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "239": {
      "op": "!",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "240": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "241": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "243": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "244": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "247": {
      "op": "btoi",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "248": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "250": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.delete_local_data",
      "op": "callsub delete_local_data",
      "stack_out": []
    },
    "253": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "254": {
      "op": "return"
    },
    "255": {
      "block": "main_set_local_data_example_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "257": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "258": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "259": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "261": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "262": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "265": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "266": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "268": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%82#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%83#0"
      ]
    },
    "271": {
      "op": "btoi",
      "defined_out": [
        "tmp%82#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%84#0"
      ]
    },
    "272": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0"
      ]
    },
    "274": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%86#0"
      ]
    },
    "277": {
      "op": "btoi",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%87#0"
      ]
    },
    "278": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0"
      ]
    },
    "280": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%89#0"
      ]
    },
    "283": {
      "op": "btoi",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%90#0"
      ]
    },
    "284": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0"
      ]
    },
    "286": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%92#0"
      ]
    },
    "289": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%93#0"
      ]
    },
    "292": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%93#0",
        "tmp%94#0"
      ]
    },
    "295": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%93#0",
        "tmp%94#0",
        "0"
      ]
    },
    "296": {
      "op": "getbit",
      "defined_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%93#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%85#0",
        "tmp%88#0",
        "tmp%91#0",
        "tmp%93#0",
        "tmp%95#0"
      ]
    },
    "297": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.set_local_data_example",
      "op": "callsub set_local_data_example",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "300": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "0x00"
      ]
    },
    "301": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%7#0",
        "0x00",
        "0"
      ]
    },
    "302": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%7#0"
      ]
    },
    "304": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0"
      ]
    },
    "305": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0",
        "0x151f7c75"
      ]
    },
    "306": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ]
    },
    "307": {
      "op": "concat",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "308": {
      "op": "log",
      "stack_out": []
    },
    "309": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "310": {
      "op": "return"
    },
    "311": {
      "block": "main_set_local_int_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "313": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "314": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "315": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "317": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "318": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "321": {
      "op": "btoi",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "322": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "324": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "tmp%74#0"
      ]
    },
    "327": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "tmp%75#0"
      ]
    },
    "328": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.set_local_int",
      "op": "callsub set_local_int",
      "stack_out": []
    },
    "331": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "332": {
      "op": "return"
    },
    "333": {
      "block": "main_maybe_local_data_example_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "335": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "336": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "337": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "339": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "340": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "343": {
      "op": "btoi",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "344": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "346": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.maybe_local_data_example",
      "op": "callsub maybe_local_data_example",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "349": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "0x00"
      ]
    },
    "350": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "0x00",
        "0"
      ]
    },
    "351": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%6#0"
      ]
    },
    "353": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0"
      ]
    },
    "354": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0",
        "0x151f7c75"
      ]
    },
    "355": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ]
    },
    "356": {
      "op": "concat",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "357": {
      "op": "log",
      "stack_out": []
    },
    "358": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "359": {
      "op": "return"
    },
    "360": {
      "block": "main_get_local_data_with_default_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "362": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "363": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "364": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "366": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "367": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "370": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "371": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "373": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.get_local_data_with_default",
      "op": "callsub get_local_data_with_default",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "376": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00"
      ]
    },
    "377": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "378": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%5#0"
      ]
    },
    "380": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "381": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "382": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "383": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "384": {
      "op": "log",
      "stack_out": []
    },
    "385": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "386": {
      "op": "return"
    },
    "387": {
      "block": "main_get_item_local_data_example_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "389": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "390": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "391": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "393": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "394": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "397": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "398": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "400": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.get_item_local_data_example",
      "op": "callsub get_item_local_data_example",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "403": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "405": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "407": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "408": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "409": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "410": {
      "op": "concat",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "411": {
      "op": "log",
      "stack_out": []
    },
    "412": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "413": {
      "op": "return"
    },
    "414": {
      "block": "main_maybe_local_data_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "416": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "417": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "418": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "420": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "421": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "424": {
      "op": "btoi",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "425": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "427": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.maybe_local_data",
      "op": "callsub maybe_local_data",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "430": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "431": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "432": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%2#0",
        "0x00"
      ]
    },
    "433": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%2#0",
        "0x00",
        "0"
      ]
    },
    "434": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%2#0",
        "0x00",
        "0",
        "elements_to_encode%1#0"
      ]
    },
    "436": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_bool%2#0"
      ]
    },
    "437": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "438": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "439": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "440": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "441": {
      "op": "log",
      "stack_out": []
    },
    "442": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "443": {
      "op": "return"
    },
    "444": {
      "block": "main_get_local_data_with_default_int_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "446": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "447": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "448": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "450": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "451": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "454": {
      "op": "btoi",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "455": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "457": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.get_local_data_with_default_int",
      "op": "callsub get_local_data_with_default_int",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "460": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "461": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "462": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "463": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "464": {
      "op": "log",
      "stack_out": []
    },
    "465": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "466": {
      "op": "return"
    },
    "467": {
      "block": "main_get_item_local_data_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "469": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "470": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "471": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "473": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "474": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "477": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "478": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "480": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.get_item_local_data",
      "op": "callsub get_item_local_data",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "483": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "484": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "485": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "486": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "487": {
      "op": "log",
      "stack_out": []
    },
    "488": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "489": {
      "op": "return"
    },
    "490": {
      "block": "main_contains_local_data_example_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "492": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "493": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "494": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "496": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "497": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "500": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "501": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "503": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.contains_local_data_example",
      "op": "callsub contains_local_data_example",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "506": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "507": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "508": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "510": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "511": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "512": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "513": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "514": {
      "op": "log",
      "stack_out": []
    },
    "515": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "516": {
      "op": "return"
    },
    "517": {
      "block": "main_contains_local_data_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "519": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "520": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "521": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "523": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "524": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "527": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "528": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "530": {
      "callsub": "smart_contracts.local_storage.contract.LocalStorage.contains_local_data",
      "op": "callsub contains_local_data",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "533": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "535": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "537": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "538": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "539": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "540": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "541": {
      "op": "log",
      "stack_out": []
    },
    "542": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "543": {
      "op": "return"
    },
    "544": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "546": {
      "op": "bnz main_after_if_else@19",
      "stack_out": []
    },
    "549": {
      "op": "txn ApplicationID"
    },
    "551": {
      "op": "!"
    },
    "552": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "553": {
      "op": "intc_1 // 1"
    },
    "554": {
      "op": "return"
    },
    "555": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.contains_local_data",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "contains_local_data",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "558": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "560": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "561": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "562": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "563": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "565": {
      "op": "assert",
      "stack_out": []
    },
    "566": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "567": {
      "retsub": true,
      "op": "retsub"
    },
    "568": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.contains_local_data_example",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "contains_local_data_example",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "571": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "573": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "574": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "575": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "576": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "578": {
      "op": "assert",
      "stack_out": []
    },
    "579": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "581": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "582": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "584": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "585": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "587": {
      "op": "assert",
      "stack_out": []
    },
    "588": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "590": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "591": {
      "op": "bytec 5 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "593": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "594": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "596": {
      "op": "assert",
      "stack_out": []
    },
    "597": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "600": {
      "op": "bytec 6 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "602": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "603": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "605": {
      "op": "assert",
      "stack_out": []
    },
    "606": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "608": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "609": {
      "op": "bytec 7 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "611": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "612": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%4#0"
      ]
    },
    "614": {
      "op": "assert",
      "stack_out": []
    },
    "615": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "617": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "618": {
      "op": "bytec_3 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_account\""
      ]
    },
    "619": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "620": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%5#0"
      ]
    },
    "622": {
      "op": "assert",
      "stack_out": []
    },
    "623": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "624": {
      "retsub": true,
      "op": "retsub"
    },
    "625": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.get_item_local_data",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "get_item_local_data",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "628": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "630": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "631": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "632": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "633": {
      "error": "check self.local_int exists for account",
      "op": "assert // check self.local_int exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "634": {
      "retsub": true,
      "op": "retsub"
    },
    "635": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.get_local_data_with_default_int",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "get_local_data_with_default_int",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "638": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "640": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "641": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "642": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "643": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "644": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "646": {
      "op": "select",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "647": {
      "retsub": true,
      "op": "retsub"
    },
    "648": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.maybe_local_data",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "maybe_local_data",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "651": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "653": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "654": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "655": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "exists#0"
      ]
    },
    "656": {
      "op": "dup",
      "stack_out": [
        "result#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "657": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "result#0"
      ]
    },
    "659": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "exists#0"
      ]
    },
    "660": {
      "op": "bnz maybe_local_data_after_if_else@2",
      "stack_out": [
        "exists#0",
        "result#0"
      ]
    },
    "663": {
      "op": "intc_0 // 0"
    },
    "664": {
      "op": "frame_bury 1"
    },
    "666": {
      "block": "maybe_local_data_after_if_else@2",
      "stack_in": [
        "exists#0",
        "result#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "result#0"
      ]
    },
    "668": {
      "op": "frame_dig 0",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "exists#0",
        "result#0",
        "result#0",
        "exists#0"
      ]
    },
    "670": {
      "op": "uncover 3"
    },
    "672": {
      "op": "uncover 3"
    },
    "674": {
      "retsub": true,
      "op": "retsub"
    },
    "675": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.get_item_local_data_example",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "get_item_local_data_example",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "678": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "680": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "681": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "682": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "683": {
      "error": "check self.local_int exists for account",
      "op": "assert // check self.local_int exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "684": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10"
      ]
    },
    "685": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "686": {
      "op": "assert",
      "stack_out": []
    },
    "687": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "689": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "690": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "692": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "693": {
      "error": "check self.local_bytes exists for account",
      "op": "assert // check self.local_bytes exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "694": {
      "op": "bytec 8 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0x48656c6c6f"
      ]
    },
    "696": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "697": {
      "op": "assert",
      "stack_out": []
    },
    "698": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "700": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "701": {
      "op": "bytec 5 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "703": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "704": {
      "error": "check self.local_bool exists for account",
      "op": "assert // check self.local_bool exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "705": {
      "op": "assert",
      "stack_out": []
    },
    "706": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "708": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "709": {
      "op": "bytec 6 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "711": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "712": {
      "error": "check self.local_asset exists for account",
      "op": "assert // check self.local_asset exists for account",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "713": {
      "op": "intc_2 // 10",
      "stack_out": [
        "maybe_value%3#0",
        "10"
      ]
    },
    "714": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "715": {
      "op": "assert",
      "stack_out": []
    },
    "716": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "718": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "719": {
      "op": "bytec 7 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "721": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "722": {
      "error": "check self.local_application exists for account",
      "op": "assert // check self.local_application exists for account",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "723": {
      "op": "intc_2 // 10",
      "stack_out": [
        "maybe_value%4#0",
        "10"
      ]
    },
    "724": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "725": {
      "op": "assert",
      "stack_out": []
    },
    "726": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "728": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "729": {
      "op": "bytec_3 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_account\""
      ]
    },
    "730": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "731": {
      "error": "check self.local_account exists for account",
      "op": "assert // check self.local_account exists for account",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "732": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%5#0",
        "0"
      ]
    },
    "733": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "734": {
      "op": "bytec 8 // 0x48656c6c6f",
      "stack_out": [
        "maybe_value%5#0",
        "0x48656c6c6f"
      ]
    },
    "736": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "737": {
      "op": "assert",
      "stack_out": []
    },
    "738": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "739": {
      "retsub": true,
      "op": "retsub"
    },
    "740": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.get_local_data_with_default",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "get_local_data_with_default",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "743": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "745": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "746": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "747": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "748": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "749": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "751": {
      "op": "select",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "752": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "10"
      ]
    },
    "753": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "754": {
      "op": "assert",
      "stack_out": []
    },
    "755": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "757": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "758": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "760": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "761": {
      "op": "bytec 9 // 0x44656661756c742056616c7565",
      "defined_out": [
        "0x44656661756c742056616c7565",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x44656661756c742056616c7565"
      ]
    },
    "763": {
      "op": "cover 2",
      "stack_out": [
        "0x44656661756c742056616c7565",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "765": {
      "op": "select",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "766": {
      "op": "bytec 8 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x48656c6c6f"
      ]
    },
    "768": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "769": {
      "op": "assert",
      "stack_out": []
    },
    "770": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "772": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "773": {
      "op": "bytec 5 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "775": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "776": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0"
      ]
    },
    "777": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "779": {
      "op": "select",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "780": {
      "op": "assert",
      "stack_out": []
    },
    "781": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "783": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "784": {
      "op": "bytec 6 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "786": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "787": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0",
        "0"
      ]
    },
    "788": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "790": {
      "op": "select",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "791": {
      "op": "intc_2 // 10",
      "stack_out": [
        "tmp%5#0",
        "10"
      ]
    },
    "792": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "793": {
      "op": "assert",
      "stack_out": []
    },
    "794": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "796": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "797": {
      "op": "bytec 7 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "799": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "800": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0",
        "0"
      ]
    },
    "801": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "803": {
      "op": "select",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "804": {
      "op": "intc_2 // 10",
      "stack_out": [
        "tmp%7#0",
        "10"
      ]
    },
    "805": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "806": {
      "op": "assert",
      "stack_out": []
    },
    "807": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "808": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": []
    },
    "809": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "811": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "812": {
      "op": "bytec_3 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_account\""
      ]
    },
    "813": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "814": {
      "op": "bytec 9 // 0x44656661756c742056616c7565",
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0",
        "0x44656661756c742056616c7565"
      ]
    },
    "816": {
      "op": "cover 2",
      "stack_out": [
        "0x44656661756c742056616c7565",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "818": {
      "op": "select",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "819": {
      "op": "bytec 8 // 0x48656c6c6f",
      "stack_out": [
        "tmp%11#0",
        "0x48656c6c6f"
      ]
    },
    "821": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "822": {
      "op": "assert",
      "stack_out": []
    },
    "823": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "824": {
      "retsub": true,
      "op": "retsub"
    },
    "825": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.maybe_local_data_example",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "maybe_local_data_example",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "828": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "830": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "831": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_int\""
      ]
    },
    "832": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "exists#0"
      ]
    },
    "833": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result#0"
      ]
    },
    "834": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "10"
      ]
    },
    "835": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "836": {
      "op": "assert",
      "stack_out": []
    },
    "837": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "839": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "840": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "842": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result_bytes#0"
      ],
      "stack_out": [
        "result_bytes#0",
        "exists#0"
      ]
    },
    "843": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result_bytes#0"
      ]
    },
    "844": {
      "op": "bytec 8 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "result_bytes#0"
      ],
      "stack_out": [
        "result_bytes#0",
        "0x48656c6c6f"
      ]
    },
    "846": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "847": {
      "op": "assert",
      "stack_out": []
    },
    "848": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "850": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "851": {
      "op": "bytec 5 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "853": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result_bool#0"
      ],
      "stack_out": [
        "result_bool#0",
        "exists#0"
      ]
    },
    "854": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result_bool#0"
      ]
    },
    "855": {
      "op": "assert",
      "stack_out": []
    },
    "856": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "858": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "859": {
      "op": "bytec 6 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "861": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result_asset#0"
      ],
      "stack_out": [
        "result_asset#0",
        "exists#0"
      ]
    },
    "862": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result_asset#0"
      ]
    },
    "863": {
      "op": "intc_2 // 10",
      "stack_out": [
        "result_asset#0",
        "10"
      ]
    },
    "864": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "865": {
      "op": "assert",
      "stack_out": []
    },
    "866": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "868": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "869": {
      "op": "bytec 7 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "871": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result_appln#0"
      ],
      "stack_out": [
        "result_appln#0",
        "exists#0"
      ]
    },
    "872": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result_appln#0"
      ]
    },
    "873": {
      "op": "intc_2 // 10",
      "stack_out": [
        "result_appln#0",
        "10"
      ]
    },
    "874": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "875": {
      "op": "assert",
      "stack_out": []
    },
    "876": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "878": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "879": {
      "op": "bytec_3 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_account\""
      ]
    },
    "880": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result_account#0"
      ],
      "stack_out": [
        "result_account#0",
        "exists#0"
      ]
    },
    "881": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result_account#0"
      ]
    },
    "882": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result_account#0",
        "0"
      ]
    },
    "883": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "result_account#0"
      ]
    },
    "884": {
      "op": "bytec 8 // 0x48656c6c6f",
      "stack_out": [
        "result_account#0",
        "0x48656c6c6f"
      ]
    },
    "886": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "887": {
      "op": "assert",
      "stack_out": []
    },
    "888": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "889": {
      "retsub": true,
      "op": "retsub"
    },
    "890": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.set_local_int",
      "params": {
        "for_account#0": "bytes",
        "value#0": "uint64"
      },
      "block": "set_local_int",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "893": {
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "895": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_int\""
      ]
    },
    "896": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local_int\"",
        "for_account#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_int\"",
        "value#0 (copy)"
      ]
    },
    "898": {
      "op": "app_local_put",
      "stack_out": []
    },
    "899": {
      "retsub": true,
      "op": "retsub"
    },
    "900": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.set_local_data_example",
      "params": {
        "for_account#0": "bytes",
        "value_asset#0": "uint64",
        "value_account#0": "bytes",
        "value_appln#0": "uint64",
        "value_byte#0": "bytes",
        "value_bool#0": "uint64"
      },
      "block": "set_local_data_example",
      "stack_in": [],
      "op": "proto 6 1"
    },
    "903": {
      "op": "frame_dig -6",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "905": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_bytes\""
      ]
    },
    "907": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"local_bytes\"",
        "for_account#0 (copy)",
        "value_byte#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_bytes\"",
        "value_byte#0 (copy)"
      ]
    },
    "909": {
      "op": "app_local_put",
      "stack_out": []
    },
    "910": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "912": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "913": {
      "op": "bytec 4 // \"local_bytes\"",
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bytes\""
      ]
    },
    "915": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "916": {
      "error": "check self.local_bytes exists for account",
      "op": "assert // check self.local_bytes exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "917": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%0#0",
        "value_byte#0 (copy)"
      ]
    },
    "919": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "920": {
      "op": "assert",
      "stack_out": []
    },
    "921": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "923": {
      "op": "bytec 5 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_bool\""
      ]
    },
    "925": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local_bool\"",
        "for_account#0 (copy)",
        "value_bool#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_bool\"",
        "value_bool#0 (copy)"
      ]
    },
    "927": {
      "op": "app_local_put",
      "stack_out": []
    },
    "928": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "930": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "931": {
      "op": "bytec 5 // \"local_bool\"",
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_bool\""
      ]
    },
    "933": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "934": {
      "error": "check self.local_bool exists for account",
      "op": "assert // check self.local_bool exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "935": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "value_bool#0 (copy)"
      ]
    },
    "937": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "938": {
      "op": "assert",
      "stack_out": []
    },
    "939": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "941": {
      "op": "bytec 6 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_asset\""
      ]
    },
    "943": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"local_asset\"",
        "for_account#0 (copy)",
        "value_asset#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_asset\"",
        "value_asset#0 (copy)"
      ]
    },
    "945": {
      "op": "app_local_put",
      "stack_out": []
    },
    "946": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "948": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "949": {
      "op": "bytec 6 // \"local_asset\"",
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_asset\""
      ]
    },
    "951": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "952": {
      "error": "check self.local_asset exists for account",
      "op": "assert // check self.local_asset exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "953": {
      "op": "frame_dig -5",
      "stack_out": [
        "maybe_value%2#0",
        "value_asset#0 (copy)"
      ]
    },
    "955": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "956": {
      "op": "assert",
      "stack_out": []
    },
    "957": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "959": {
      "op": "bytec 7 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_application\""
      ]
    },
    "961": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"local_application\"",
        "for_account#0 (copy)",
        "value_appln#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_application\"",
        "value_appln#0 (copy)"
      ]
    },
    "963": {
      "op": "app_local_put",
      "stack_out": []
    },
    "964": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "966": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "967": {
      "op": "bytec 7 // \"local_application\"",
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_application\""
      ]
    },
    "969": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "970": {
      "error": "check self.local_application exists for account",
      "op": "assert // check self.local_application exists for account",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "971": {
      "op": "frame_dig -3",
      "stack_out": [
        "maybe_value%3#0",
        "value_appln#0 (copy)"
      ]
    },
    "973": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "974": {
      "op": "assert",
      "stack_out": []
    },
    "975": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "977": {
      "op": "bytec_3 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_account\""
      ]
    },
    "978": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"local_account\"",
        "for_account#0 (copy)",
        "value_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_account\"",
        "value_account#0 (copy)"
      ]
    },
    "980": {
      "op": "app_local_put",
      "stack_out": []
    },
    "981": {
      "op": "frame_dig -6",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "983": {
      "op": "intc_0 // 0",
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "984": {
      "op": "bytec_3 // \"local_account\"",
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local_account\""
      ]
    },
    "985": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "986": {
      "error": "check self.local_account exists for account",
      "op": "assert // check self.local_account exists for account",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "987": {
      "op": "frame_dig -4",
      "stack_out": [
        "maybe_value%4#0",
        "value_account#0 (copy)"
      ]
    },
    "989": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "990": {
      "op": "assert",
      "stack_out": []
    },
    "991": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "992": {
      "retsub": true,
      "op": "retsub"
    },
    "993": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.delete_local_data",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "delete_local_data",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "996": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "998": {
      "op": "bytec_3 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_account\""
      ]
    },
    "999": {
      "op": "app_local_del",
      "stack_out": []
    },
    "1000": {
      "retsub": true,
      "op": "retsub"
    },
    "1001": {
      "subroutine": "smart_contracts.local_storage.contract.LocalStorage.delete_local_data_example",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "delete_local_data_example",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1004": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "1006": {
      "op": "bytec_1 // \"local_int\"",
      "defined_out": [
        "\"local_int\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_int\""
      ]
    },
    "1007": {
      "op": "app_local_del",
      "stack_out": []
    },
    "1008": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "1010": {
      "op": "bytec 4 // \"local_bytes\"",
      "defined_out": [
        "\"local_bytes\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_bytes\""
      ]
    },
    "1012": {
      "op": "app_local_del",
      "stack_out": []
    },
    "1013": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "1015": {
      "op": "bytec 5 // \"local_bool\"",
      "defined_out": [
        "\"local_bool\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_bool\""
      ]
    },
    "1017": {
      "op": "app_local_del",
      "stack_out": []
    },
    "1018": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "1020": {
      "op": "bytec 6 // \"local_asset\"",
      "defined_out": [
        "\"local_asset\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_asset\""
      ]
    },
    "1022": {
      "op": "app_local_del",
      "stack_out": []
    },
    "1023": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "1025": {
      "op": "bytec 7 // \"local_application\"",
      "defined_out": [
        "\"local_application\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_application\""
      ]
    },
    "1027": {
      "op": "app_local_del",
      "stack_out": []
    },
    "1028": {
      "op": "frame_dig -1",
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "1030": {
      "op": "bytec_3 // \"local_account\"",
      "defined_out": [
        "\"local_account\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local_account\""
      ]
    },
    "1031": {
      "op": "app_local_del",
      "stack_out": []
    },
    "1032": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1033": {
      "retsub": true,
      "op": "retsub"
    }
  }
}