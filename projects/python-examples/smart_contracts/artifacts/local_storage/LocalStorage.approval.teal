#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 10
    bytecblock "local_int" 0x151f7c7580 "local_account" "local_bytes" "local_bool" "local_asset" "local_application" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565
    // smart_contracts/local_storage/contract.py:13
    // class LocalStorage(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@21
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255 // method "contains_local_data(address)bool", method "contains_local_data_example(address)bool", method "get_item_local_data(address)uint64", method "get_local_data_with_default_int(address)uint64", method "maybe_local_data(address)(uint64,bool)", method "get_item_local_data_example(address)bool", method "get_local_data_with_default(address)bool", method "maybe_local_data_example(address)bool", method "set_local_int(address,uint64)void", method "set_local_data_example(address,uint64,address,uint64,byte[],bool)bool", method "delete_local_data(address)void", method "delete_local_data_example(address)bool"
    txna ApplicationArgs 0
    match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example
    err

main___algopy_default_create@21:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.local_storage.contract.LocalStorage.contains_local_data[routing]() -> void:
contains_local_data:
    // smart_contracts/local_storage/contract.py:26-27
    // # example: CONTAIN_PROPERTY_LOCAL_STATE
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:29
    // assert for_account in self.local_int  # Uint64
    intc_0 // 0
    bytec_0 // "local_int"
    app_local_get_ex
    bury 1
    assert
    // smart_contracts/local_storage/contract.py:26-27
    // # example: CONTAIN_PROPERTY_LOCAL_STATE
    // @arc4.abimethod
    bytec_1 // 0x151f7c7580
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.contains_local_data_example[routing]() -> void:
contains_local_data_example:
    // smart_contracts/local_storage/contract.py:34-35
    // # example: CONTAIN_PROPERTY_LOCAL_STATE_EXAMPLES
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:37
    // assert for_account in self.local_int  # Uint64
    dup
    intc_0 // 0
    bytec_0 // "local_int"
    app_local_get_ex
    bury 1
    assert
    // smart_contracts/local_storage/contract.py:38
    // assert for_account in self.local_bytes  # Bytes
    dup
    intc_0 // 0
    bytec_3 // "local_bytes"
    app_local_get_ex
    bury 1
    assert
    // smart_contracts/local_storage/contract.py:39
    // assert for_account in self.local_bool  # Bool
    dup
    intc_0 // 0
    bytec 4 // "local_bool"
    app_local_get_ex
    bury 1
    assert
    // smart_contracts/local_storage/contract.py:40
    // assert for_account in self.local_asset  # Asset
    dup
    intc_0 // 0
    bytec 5 // "local_asset"
    app_local_get_ex
    bury 1
    assert
    // smart_contracts/local_storage/contract.py:41
    // assert for_account in self.local_application  # Application
    dup
    intc_0 // 0
    bytec 6 // "local_application"
    app_local_get_ex
    bury 1
    assert
    // smart_contracts/local_storage/contract.py:42
    // assert for_account in self.local_account  # Account
    intc_0 // 0
    bytec_2 // "local_account"
    app_local_get_ex
    bury 1
    assert
    // smart_contracts/local_storage/contract.py:34-35
    // # example: CONTAIN_PROPERTY_LOCAL_STATE_EXAMPLES
    // @arc4.abimethod
    bytec_1 // 0x151f7c7580
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.get_item_local_data[routing]() -> void:
get_item_local_data:
    // smart_contracts/local_storage/contract.py:47-48
    // # example: READ_LOCAL_STATE
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:50
    // return self.local_int[for_account]
    intc_0 // 0
    bytec_0 // "local_int"
    app_local_get_ex
    assert // check self.local_int exists for account
    // smart_contracts/local_storage/contract.py:47-48
    // # example: READ_LOCAL_STATE
    // @arc4.abimethod
    itob
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.get_local_data_with_default_int[routing]() -> void:
get_local_data_with_default_int:
    // smart_contracts/local_storage/contract.py:52-53
    // # get function
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:55
    // return self.local_int.get(for_account, default=UInt64(0))  # Uint64
    intc_0 // 0
    bytec_0 // "local_int"
    app_local_get_ex
    intc_0 // 0
    cover 2
    select
    // smart_contracts/local_storage/contract.py:52-53
    // # get function
    // @arc4.abimethod
    itob
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.maybe_local_data[routing]() -> void:
maybe_local_data:
    // smart_contracts/local_storage/contract.py:57-58
    // # maybe function
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:60-61
    // # used to get data or assert int
    // result, exists = self.local_int.maybe(for_account)  # Uint64
    intc_0 // 0
    bytec_0 // "local_int"
    app_local_get_ex
    dup
    uncover 2
    swap
    // smart_contracts/local_storage/contract.py:62
    // if not exists:
    bnz maybe_local_data_after_if_else@3
    // smart_contracts/local_storage/contract.py:63
    // result = UInt64(0)
    intc_0 // 0
    bury 1

maybe_local_data_after_if_else@3:
    // smart_contracts/local_storage/contract.py:57-58
    // # maybe function
    // @arc4.abimethod
    dup
    itob
    pushbytes 0x00
    intc_0 // 0
    dig 4
    setbit
    concat
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.get_item_local_data_example[routing]() -> void:
get_item_local_data_example:
    // smart_contracts/local_storage/contract.py:68-69
    // # example: READ_LOCAL_STATE_EXAMPLES
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:71
    // assert self.local_int[for_account] == UInt64(
    dup
    intc_0 // 0
    bytec_0 // "local_int"
    app_local_get_ex
    assert // check self.local_int exists for account
    // smart_contracts/local_storage/contract.py:71-73
    // assert self.local_int[for_account] == UInt64(
    //     10
    // )  # Uint64 - returns guranteed data
    intc_2 // 10
    ==
    assert
    // smart_contracts/local_storage/contract.py:74
    // assert self.local_bytes[for_account] == b"Hello"  # Bytes
    dup
    intc_0 // 0
    bytec_3 // "local_bytes"
    app_local_get_ex
    assert // check self.local_bytes exists for account
    bytec 7 // 0x48656c6c6f
    ==
    assert
    // smart_contracts/local_storage/contract.py:75
    // assert bool(self.local_bool[for_account])  # Bool
    dup
    intc_0 // 0
    bytec 4 // "local_bool"
    app_local_get_ex
    assert // check self.local_bool exists for account
    assert
    // smart_contracts/local_storage/contract.py:76
    // assert self.local_asset[for_account] == Asset(UInt64(10))  # Asset
    dup
    intc_0 // 0
    bytec 5 // "local_asset"
    app_local_get_ex
    assert // check self.local_asset exists for account
    intc_2 // 10
    ==
    assert
    // smart_contracts/local_storage/contract.py:77
    // assert self.local_application[for_account] == Application(
    dup
    intc_0 // 0
    bytec 6 // "local_application"
    app_local_get_ex
    assert // check self.local_application exists for account
    // smart_contracts/local_storage/contract.py:78
    // UInt64(10)
    intc_2 // 10
    // smart_contracts/local_storage/contract.py:77-79
    // assert self.local_application[for_account] == Application(
    //     UInt64(10)
    // )  # Application
    ==
    assert
    // smart_contracts/local_storage/contract.py:80
    // assert self.local_account[for_account] == Account(Bytes(b"Hello"))  # Account
    intc_0 // 0
    bytec_2 // "local_account"
    app_local_get_ex
    assert // check self.local_account exists for account
    intc_0 // 0
    assert // Address length is 32 bytes
    bytec 7 // 0x48656c6c6f
    ==
    assert
    // smart_contracts/local_storage/contract.py:68-69
    // # example: READ_LOCAL_STATE_EXAMPLES
    // @arc4.abimethod
    bytec_1 // 0x151f7c7580
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.get_local_data_with_default[routing]() -> void:
get_local_data_with_default:
    // smart_contracts/local_storage/contract.py:83
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:85
    // assert self.local_int.get(for_account, default=UInt64(0)) == UInt64(
    dup
    intc_0 // 0
    bytec_0 // "local_int"
    app_local_get_ex
    intc_0 // 0
    cover 2
    select
    // smart_contracts/local_storage/contract.py:85-87
    // assert self.local_int.get(for_account, default=UInt64(0)) == UInt64(
    //     10
    // )  # Uint64
    intc_2 // 10
    ==
    assert
    // smart_contracts/local_storage/contract.py:88-90
    // assert self.local_bytes.get(
    //     for_account, default=Bytes(b"Default Value")
    // ) == Bytes(
    dup
    intc_0 // 0
    // smart_contracts/local_storage/contract.py:88
    // assert self.local_bytes.get(
    bytec_3 // "local_bytes"
    // smart_contracts/local_storage/contract.py:88-90
    // assert self.local_bytes.get(
    //     for_account, default=Bytes(b"Default Value")
    // ) == Bytes(
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:89
    // for_account, default=Bytes(b"Default Value")
    bytec 9 // 0x44656661756c742056616c7565
    // smart_contracts/local_storage/contract.py:88-90
    // assert self.local_bytes.get(
    //     for_account, default=Bytes(b"Default Value")
    // ) == Bytes(
    cover 2
    select
    // smart_contracts/local_storage/contract.py:90-92
    // ) == Bytes(
    //     b"Hello"
    // )  # Bytes
    bytec 7 // 0x48656c6c6f
    // smart_contracts/local_storage/contract.py:88-92
    // assert self.local_bytes.get(
    //     for_account, default=Bytes(b"Default Value")
    // ) == Bytes(
    //     b"Hello"
    // )  # Bytes
    ==
    assert
    // smart_contracts/local_storage/contract.py:93
    // assert bool(self.local_bool.get(for_account, default=False))  # Bool
    dup
    intc_0 // 0
    bytec 4 // "local_bool"
    app_local_get_ex
    intc_0 // 0
    cover 2
    select
    assert
    // smart_contracts/local_storage/contract.py:95
    // assert self.local_asset.get(for_account, default=Asset(UInt64(0))) == Asset(
    dup
    intc_0 // 0
    bytec 5 // "local_asset"
    app_local_get_ex
    intc_0 // 0
    cover 2
    select
    // smart_contracts/local_storage/contract.py:96
    // UInt64(10)
    intc_2 // 10
    // smart_contracts/local_storage/contract.py:95-97
    // assert self.local_asset.get(for_account, default=Asset(UInt64(0))) == Asset(
    //     UInt64(10)
    // )  # Asset
    ==
    assert
    // smart_contracts/local_storage/contract.py:98-100
    // assert self.local_application.get(
    //     for_account, default=Application(UInt64(0))
    // ) == Application(
    dup
    intc_0 // 0
    // smart_contracts/local_storage/contract.py:98
    // assert self.local_application.get(
    bytec 6 // "local_application"
    // smart_contracts/local_storage/contract.py:98-100
    // assert self.local_application.get(
    //     for_account, default=Application(UInt64(0))
    // ) == Application(
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:99
    // for_account, default=Application(UInt64(0))
    intc_0 // 0
    // smart_contracts/local_storage/contract.py:98-100
    // assert self.local_application.get(
    //     for_account, default=Application(UInt64(0))
    // ) == Application(
    cover 2
    select
    // smart_contracts/local_storage/contract.py:101
    // UInt64(10)
    intc_2 // 10
    // smart_contracts/local_storage/contract.py:98-102
    // assert self.local_application.get(
    //     for_account, default=Application(UInt64(0))
    // ) == Application(
    //     UInt64(10)
    // )  # Application
    ==
    assert
    // smart_contracts/local_storage/contract.py:104
    // for_account, default=Account(Bytes(b"Default Value"))
    intc_0 // 0
    assert // Address length is 32 bytes
    // smart_contracts/local_storage/contract.py:103-105
    // assert self.local_account.get(
    //     for_account, default=Account(Bytes(b"Default Value"))
    // ) == Account(
    intc_0 // 0
    // smart_contracts/local_storage/contract.py:103
    // assert self.local_account.get(
    bytec_2 // "local_account"
    // smart_contracts/local_storage/contract.py:103-105
    // assert self.local_account.get(
    //     for_account, default=Account(Bytes(b"Default Value"))
    // ) == Account(
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:104
    // for_account, default=Account(Bytes(b"Default Value"))
    bytec 9 // 0x44656661756c742056616c7565
    // smart_contracts/local_storage/contract.py:103-105
    // assert self.local_account.get(
    //     for_account, default=Account(Bytes(b"Default Value"))
    // ) == Account(
    cover 2
    select
    // smart_contracts/local_storage/contract.py:106
    // Bytes(b"Hello")
    bytec 7 // 0x48656c6c6f
    // smart_contracts/local_storage/contract.py:103-107
    // assert self.local_account.get(
    //     for_account, default=Account(Bytes(b"Default Value"))
    // ) == Account(
    //     Bytes(b"Hello")
    // )  # Account
    ==
    assert
    // smart_contracts/local_storage/contract.py:83
    // @arc4.abimethod
    bytec_1 // 0x151f7c7580
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.maybe_local_data_example[routing]() -> void:
maybe_local_data_example:
    // smart_contracts/local_storage/contract.py:111
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:113
    // result, exists = self.local_int.maybe(for_account)  # Uint64
    dup
    intc_0 // 0
    bytec_0 // "local_int"
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:114
    // assert exists, "no data for account"
    assert // no data for account
    // smart_contracts/local_storage/contract.py:115
    // assert result == UInt64(10)
    intc_2 // 10
    ==
    assert
    // smart_contracts/local_storage/contract.py:117
    // result_bytes, exists = self.local_bytes.maybe(for_account)  # Bytes
    dup
    intc_0 // 0
    bytec_3 // "local_bytes"
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:118
    // assert exists, "no data for account"
    assert // no data for account
    // smart_contracts/local_storage/contract.py:119
    // assert result_bytes == b"Hello"
    bytec 7 // 0x48656c6c6f
    ==
    assert
    // smart_contracts/local_storage/contract.py:121
    // result_bool, exists = self.local_bool.maybe(for_account)  # Bool
    dup
    intc_0 // 0
    bytec 4 // "local_bool"
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:122
    // assert exists, "no data for account"
    assert // no data for account
    // smart_contracts/local_storage/contract.py:123
    // assert bool(result_bool)
    assert
    // smart_contracts/local_storage/contract.py:125
    // result_asset, exists = self.local_asset.maybe(for_account)  # Asset
    dup
    intc_0 // 0
    bytec 5 // "local_asset"
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:126
    // assert exists, "no data for account"
    assert // no data for account
    // smart_contracts/local_storage/contract.py:127
    // assert result_asset == Asset(UInt64(10))
    intc_2 // 10
    ==
    assert
    // smart_contracts/local_storage/contract.py:129
    // result_appln, exists = self.local_application.maybe(for_account)  # Application
    dup
    intc_0 // 0
    bytec 6 // "local_application"
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:130
    // assert exists, "no data for account"
    assert // no data for account
    // smart_contracts/local_storage/contract.py:131
    // assert result_appln == Application(UInt64(10))
    intc_2 // 10
    ==
    assert
    // smart_contracts/local_storage/contract.py:133
    // result_account, exists = self.local_account.maybe(for_account)  # Account
    intc_0 // 0
    bytec_2 // "local_account"
    app_local_get_ex
    // smart_contracts/local_storage/contract.py:134
    // assert exists, "no data for account"
    assert // no data for account
    // smart_contracts/local_storage/contract.py:135
    // assert result_account == Account(Bytes(b"Hello"))
    intc_0 // 0
    assert // Address length is 32 bytes
    bytec 7 // 0x48656c6c6f
    ==
    assert
    // smart_contracts/local_storage/contract.py:111
    // @arc4.abimethod
    bytec_1 // 0x151f7c7580
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.set_local_int[routing]() -> void:
set_local_int:
    // smart_contracts/local_storage/contract.py:140-141
    // # example: WRITE_LOCAL_STATE
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // smart_contracts/local_storage/contract.py:143
    // self.local_int[for_account] = value  # Uint64
    bytec_0 // "local_int"
    swap
    app_local_put
    // smart_contracts/local_storage/contract.py:140-141
    // # example: WRITE_LOCAL_STATE
    // @arc4.abimethod
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.set_local_data_example[routing]() -> void:
set_local_data_example:
    // smart_contracts/local_storage/contract.py:147-148
    // # example: WRITE_LOCAL_STATE_EXAMPLES
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    extract 2 0
    txna ApplicationArgs 6
    intc_0 // 0
    getbit
    // smart_contracts/local_storage/contract.py:159
    // self.local_bytes[for_account] = value_byte  # Bytes
    dig 5
    bytec_3 // "local_bytes"
    uncover 3
    app_local_put
    // smart_contracts/local_storage/contract.py:162
    // self.local_bool[for_account] = value_bool  # Bool
    dig 4
    bytec 4 // "local_bool"
    uncover 2
    app_local_put
    // smart_contracts/local_storage/contract.py:165
    // self.local_asset[for_account] = value_asset  # Asset
    dig 3
    bytec 5 // "local_asset"
    uncover 4
    app_local_put
    // smart_contracts/local_storage/contract.py:168
    // self.local_application[for_account] = value_appln  # Application
    dig 2
    bytec 6 // "local_application"
    uncover 2
    app_local_put
    // smart_contracts/local_storage/contract.py:171
    // self.local_account[for_account] = value_account  # Account
    bytec_2 // "local_account"
    swap
    app_local_put
    // smart_contracts/local_storage/contract.py:147-148
    // # example: WRITE_LOCAL_STATE_EXAMPLES
    // @arc4.abimethod
    bytec_1 // 0x151f7c7580
    log
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.delete_local_data[routing]() -> void:
delete_local_data:
    // smart_contracts/local_storage/contract.py:177-178
    // # example: DELETE_LOCAL_STATE
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:180
    // del self.local_account[for_account]  # Uint64
    bytec_2 // "local_account"
    app_local_del
    // smart_contracts/local_storage/contract.py:177-178
    // # example: DELETE_LOCAL_STATE
    // @arc4.abimethod
    intc_1 // 1
    return


// smart_contracts.local_storage.contract.LocalStorage.delete_local_data_example[routing]() -> void:
delete_local_data_example:
    // smart_contracts/local_storage/contract.py:184-185
    // # example: DELETE_LOCAL_STATE_EXAMPLES
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/local_storage/contract.py:187
    // del self.local_int[for_account]  # Uint64
    dup
    bytec_0 // "local_int"
    app_local_del
    // smart_contracts/local_storage/contract.py:188
    // del self.local_bytes[for_account]  # Bytes
    dup
    bytec_3 // "local_bytes"
    app_local_del
    // smart_contracts/local_storage/contract.py:189
    // del self.local_bool[for_account]  # Bool
    dup
    bytec 4 // "local_bool"
    app_local_del
    // smart_contracts/local_storage/contract.py:190
    // del self.local_asset[for_account]  # Asset
    dup
    bytec 5 // "local_asset"
    app_local_del
    // smart_contracts/local_storage/contract.py:191
    // del self.local_application[for_account]  # Application
    dup
    bytec 6 // "local_application"
    app_local_del
    // smart_contracts/local_storage/contract.py:192
    // del self.local_account[for_account]  # Account
    bytec_2 // "local_account"
    app_local_del
    // smart_contracts/local_storage/contract.py:184-185
    // # example: DELETE_LOCAL_STATE_EXAMPLES
    // @arc4.abimethod
    bytec_1 // 0x151f7c7580
    log
    intc_1 // 1
    return
