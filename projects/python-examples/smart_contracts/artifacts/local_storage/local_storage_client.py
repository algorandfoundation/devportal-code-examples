# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "contains_local_data", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "contains_local_data_example", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "get_item_local_data", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "get_local_data_with_default_int", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "maybe_local_data", "returns": {"type": "(uint64,bool)"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "get_item_local_data_example", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "get_local_data_with_default", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "maybe_local_data_example", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}, {"type": "uint64", "name": "value"}], "name": "set_local_int", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}, {"type": "asset", "name": "value_asset"}, {"type": "account", "name": "value_account"}, {"type": "application", "name": "value_appln"}, {"type": "byte[]", "name": "value_byte"}, {"type": "bool", "name": "value_bool"}], "name": "set_local_data_example", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "delete_local_data", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "for_account"}], "name": "delete_local_data_example", "returns": {"type": "bool"}, "events": [], "readonly": false, "recommendations": {}}], "name": "LocalStorage", "state": {"keys": {"box": {}, "global": {}, "local": {"local_int": {"key": "bG9jYWxfaW50", "keyType": "AVMString", "valueType": "AVMUint64"}, "local_bytes": {"key": "bG9jYWxfYnl0ZXM=", "keyType": "AVMString", "valueType": "AVMBytes"}, "local_bool": {"key": "bG9jYWxfYm9vbA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "local_asset": {"key": "bG9jYWxfYXNzZXQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "local_application": {"key": "bG9jYWxfYXBwbGljYXRpb24=", "keyType": "AVMString", "valueType": "AVMUint64"}, "local_account": {"key": "bG9jYWxfYWNjb3VudA==", "keyType": "AVMString", "valueType": "AVMBytes"}}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 2, "ints": 4}}}, "structs": {}, "byteCode": {"approval": "CiADAAEKJgoEFR98dQlsb2NhbF9pbnQBAA1sb2NhbF9hY2NvdW50C2xvY2FsX2J5dGVzCmxvY2FsX2Jvb2wLbG9jYWxfYXNzZXQRbG9jYWxfYXBwbGljYXRpb24FSGVsbG8NRGVmYXVsdCBWYWx1ZTEbQQGrggwE5rzAdQQVWharBMBiG94ElnEIcARXWWFxBMIc7ngEgcbwPgQPDB2CBPGnfRYEgS3uFwRbt/R9BJF2Oss2GgCODAE1ARoBAwDsAM4AswCYAH0AZwAvAB0AAiJDMRkURDEYRDYaARfAHIgDByoiTwJUKExQsCNDMRkURDEYRDYaARfAHIgC5CNDMRkURDEYRDYaARfAHDYaAhfAMDYaAxfAHDYaBBfAMjYaBVcCADYaBiJTiAJYKiJPAlQoTFCwI0MxGRREMRhENhoBF8AcNhoCF4gCLyNDMRkURDEYRDYaARfAHIgB3CoiTwJUKExQsCNDMRkURDEYRDYaARfAHIgBbCoiTwJUKExQsCNDMRkURDEYRDYaARfAHIgBECoiTwJUKExQsCNDMRkURDEYRDYaARfAHIgA2kwWKiJPA1RQKExQsCNDMRkURDEYRDYaARfAHIgArxYoTFCwI0MxGRREMRhENhoBF8AciACOFihMULAjQzEZFEQxGEQ2GgEXwByIAD4qIk8CVChMULAjQzEZFEQxGEQ2GgEXwByIABYqIk8CVChMULAjQzEZQP6rMRgURCNDigEBi/8iKWNFAUQjiYoBAYv/IiljRQFEi/8iJwRjRQFEi/8iJwVjRQFEi/8iJwZjRQFEi/8iJwdjRQFEi/8iK2NFAUQjiYoBAYv/IiljRImKAQGL/yIpYyJOAk2JigECi/8iKWNJTwJMQAADIowBiwGLAE8DTwOJigEBi/8iKWNEJBJEi/8iJwRjRCcIEkSL/yInBWNERIv/IicGY0QkEkSL/yInB2NEJBJEi/8iK2NEIkQnCBJEI4mKAQGL/yIpYyJOAk0kEkSL/yInBGMnCU4CTScIEkSL/yInBWMiTgJNRIv/IicGYyJOAk0kEkSL/yInB2MiTgJNJBJEIkSL/yIrYycJTgJNJwgSRCOJigEBi/8iKWNEJBJEi/8iJwRjRCcIEkSL/yInBWNERIv/IicGY0QkEkSL/yInB2NEJBJEi/8iK2NEIkQnCBJEI4mKAgCL/imL/2aJigYBi/onBIv+Zov6IicEY0SL/hJEi/onBYv/Zov6IicFY0SL/xJEi/onBov7Zov6IicGY0SL+xJEi/onB4v9Zov6IicHY0SL/RJEi/ori/xmi/oiK2NEi/wSRCOJigEAi/8raImKAQGL/yloi/8nBGiL/ycFaIv/JwZoi/8nB2iL/ytoI4k=", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 3, "patch": 3}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [733, 808, 883], "errorMessage": "Address length is 32 bytes"}, {"pc": [213, 240, 258, 314, 336, 363, 390, 417, 447, 470, 493, 520], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [552], "errorMessage": "can only call when creating"}, {"pc": [216, 243, 261, 317, 339, 366, 393, 420, 450, 473, 496, 523], "errorMessage": "can only call when not creating"}, {"pc": [731, 986], "errorMessage": "check self.local_account exists for account"}, {"pc": [722, 970], "errorMessage": "check self.local_application exists for account"}, {"pc": [712, 952], "errorMessage": "check self.local_asset exists for account"}, {"pc": [704, 934], "errorMessage": "check self.local_bool exists for account"}, {"pc": [693, 916], "errorMessage": "check self.local_bytes exists for account"}, {"pc": [633, 683], "errorMessage": "check self.local_int exists for account"}, {"pc": [833, 843, 854, 862, 872, 881], "errorMessage": "no data for account"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: typing.Any | None = None) -> list[typing.Any] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: typing.Any) -> typing.Any:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class ContainsLocalDataArgs:
    """Dataclass for contains_local_data arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "contains_local_data(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ContainsLocalDataExampleArgs:
    """Dataclass for contains_local_data_example arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "contains_local_data_example(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetItemLocalDataArgs:
    """Dataclass for get_item_local_data arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_item_local_data(account)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetLocalDataWithDefaultIntArgs:
    """Dataclass for get_local_data_with_default_int arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_local_data_with_default_int(account)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MaybeLocalDataArgs:
    """Dataclass for maybe_local_data arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "maybe_local_data(account)(uint64,bool)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetItemLocalDataExampleArgs:
    """Dataclass for get_item_local_data_example arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_item_local_data_example(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetLocalDataWithDefaultArgs:
    """Dataclass for get_local_data_with_default arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_local_data_with_default(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MaybeLocalDataExampleArgs:
    """Dataclass for maybe_local_data_example arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "maybe_local_data_example(account)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetLocalIntArgs:
    """Dataclass for set_local_int arguments"""
    for_account: str | bytes
    value: int

    @property
    def abi_method_signature(self) -> str:
        return "set_local_int(account,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetLocalDataExampleArgs:
    """Dataclass for set_local_data_example arguments"""
    for_account: str | bytes
    value_asset: int
    value_account: str | bytes
    value_appln: int
    value_byte: bytes | str
    value_bool: bool

    @property
    def abi_method_signature(self) -> str:
        return "set_local_data_example(account,asset,account,application,byte[],bool)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DeleteLocalDataArgs:
    """Dataclass for delete_local_data arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "delete_local_data(account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DeleteLocalDataExampleArgs:
    """Dataclass for delete_local_data_example arguments"""
    for_account: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "delete_local_data_example(account)bool"


class LocalStorageParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def contains_local_data(
        self,
        args: tuple[str | bytes] | ContainsLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contains_local_data(account)bool",
            "args": method_args,
        }))

    def contains_local_data_example(
        self,
        args: tuple[str | bytes] | ContainsLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contains_local_data_example(account)bool",
            "args": method_args,
        }))

    def get_item_local_data(
        self,
        args: tuple[str | bytes] | GetItemLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_local_data(account)uint64",
            "args": method_args,
        }))

    def get_local_data_with_default_int(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultIntArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_local_data_with_default_int(account)uint64",
            "args": method_args,
        }))

    def maybe_local_data(
        self,
        args: tuple[str | bytes] | MaybeLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "maybe_local_data(account)(uint64,bool)",
            "args": method_args,
        }))

    def get_item_local_data_example(
        self,
        args: tuple[str | bytes] | GetItemLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_local_data_example(account)bool",
            "args": method_args,
        }))

    def get_local_data_with_default(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_local_data_with_default(account)bool",
            "args": method_args,
        }))

    def maybe_local_data_example(
        self,
        args: tuple[str | bytes] | MaybeLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "maybe_local_data_example(account)bool",
            "args": method_args,
        }))

    def set_local_int(
        self,
        args: tuple[str | bytes, int] | SetLocalIntArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_local_int(account,uint64)void",
            "args": method_args,
        }))

    def set_local_data_example(
        self,
        args: tuple[str | bytes, int, str | bytes, int, bytes | str, bool] | SetLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_local_data_example(account,asset,account,application,byte[],bool)bool",
            "args": method_args,
        }))

    def delete_local_data(
        self,
        args: tuple[str | bytes] | DeleteLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_local_data(account)void",
            "args": method_args,
        }))

    def delete_local_data_example(
        self,
        args: tuple[str | bytes] | DeleteLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_local_data_example(account)bool",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class LocalStorageCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def contains_local_data(
        self,
        args: tuple[str | bytes] | ContainsLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contains_local_data(account)bool",
            "args": method_args,
        }))

    def contains_local_data_example(
        self,
        args: tuple[str | bytes] | ContainsLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contains_local_data_example(account)bool",
            "args": method_args,
        }))

    def get_item_local_data(
        self,
        args: tuple[str | bytes] | GetItemLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_local_data(account)uint64",
            "args": method_args,
        }))

    def get_local_data_with_default_int(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultIntArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_local_data_with_default_int(account)uint64",
            "args": method_args,
        }))

    def maybe_local_data(
        self,
        args: tuple[str | bytes] | MaybeLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "maybe_local_data(account)(uint64,bool)",
            "args": method_args,
        }))

    def get_item_local_data_example(
        self,
        args: tuple[str | bytes] | GetItemLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_local_data_example(account)bool",
            "args": method_args,
        }))

    def get_local_data_with_default(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_local_data_with_default(account)bool",
            "args": method_args,
        }))

    def maybe_local_data_example(
        self,
        args: tuple[str | bytes] | MaybeLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "maybe_local_data_example(account)bool",
            "args": method_args,
        }))

    def set_local_int(
        self,
        args: tuple[str | bytes, int] | SetLocalIntArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_local_int(account,uint64)void",
            "args": method_args,
        }))

    def set_local_data_example(
        self,
        args: tuple[str | bytes, int, str | bytes, int, bytes | str, bool] | SetLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_local_data_example(account,asset,account,application,byte[],bool)bool",
            "args": method_args,
        }))

    def delete_local_data(
        self,
        args: tuple[str | bytes] | DeleteLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_local_data(account)void",
            "args": method_args,
        }))

    def delete_local_data_example(
        self,
        args: tuple[str | bytes] | DeleteLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_local_data_example(account)bool",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class LocalStorageSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def contains_local_data(
        self,
        args: tuple[str | bytes] | ContainsLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contains_local_data(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def contains_local_data_example(
        self,
        args: tuple[str | bytes] | ContainsLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contains_local_data_example(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def get_item_local_data(
        self,
        args: tuple[str | bytes] | GetItemLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_local_data(account)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_local_data_with_default_int(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultIntArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_local_data_with_default_int(account)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def maybe_local_data(
        self,
        args: tuple[str | bytes] | MaybeLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, bool]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "maybe_local_data(account)(uint64,bool)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, bool]], parsed_response)

    def get_item_local_data_example(
        self,
        args: tuple[str | bytes] | GetItemLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_item_local_data_example(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def get_local_data_with_default(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_local_data_with_default(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def maybe_local_data_example(
        self,
        args: tuple[str | bytes] | MaybeLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "maybe_local_data_example(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def set_local_int(
        self,
        args: tuple[str | bytes, int] | SetLocalIntArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_local_int(account,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_local_data_example(
        self,
        args: tuple[str | bytes, int, str | bytes, int, bytes | str, bool] | SetLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_local_data_example(account,asset,account,application,byte[],bool)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def delete_local_data(
        self,
        args: tuple[str | bytes] | DeleteLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_local_data(account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def delete_local_data_example(
        self,
        args: tuple[str | bytes] | DeleteLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_local_data_example(account)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    local_int: int
    local_bytes: bytes
    local_bool: int
    local_asset: int
    local_application: int
    local_account: bytes

class LocalStorageState:
    """Methods to access state for the current LocalStorage app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def local_int(self) -> int:
        """Get the current value of the local_int key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("local_int")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def local_bytes(self) -> bytes:
        """Get the current value of the local_bytes key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("local_bytes")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def local_bool(self) -> int:
        """Get the current value of the local_bool key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("local_bool")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def local_asset(self) -> int:
        """Get the current value of the local_asset key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("local_asset")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def local_application(self) -> int:
        """Get the current value of the local_application key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("local_application")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def local_account(self) -> bytes:
        """Get the current value of the local_account key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("local_account")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

class LocalStorageClient:
    """Client for interacting with LocalStorage smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LocalStorageParams(self.app_client)
        self.create_transaction = LocalStorageCreateTransactionParams(self.app_client)
        self.send = LocalStorageSend(self.app_client)
        self.state = LocalStorageState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "LocalStorageClient":
        return LocalStorageClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LocalStorageClient":
        return LocalStorageClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LocalStorageClient":
        return LocalStorageClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LocalStorageComposer":
        return LocalStorageComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["contains_local_data(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["contains_local_data_example(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_item_local_data(account)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_local_data_with_default_int(account)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["maybe_local_data(account)(uint64,bool)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, bool] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_item_local_data_example(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_local_data_with_default(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["maybe_local_data_example(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_local_int(account,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_local_data_example(account,asset,account,application,byte[],bool)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["delete_local_data(account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["delete_local_data_example(account)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | bool | int | tuple[int, bool]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class LocalStorageBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating LocalStorage contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class LocalStorageFactory(algokit_utils.TypedAppFactoryProtocol[LocalStorageBareCallCreateParams, None, None]):
    """Factory for deploying and managing LocalStorageClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = LocalStorageFactoryParams(self.app_factory)
        self.create_transaction = LocalStorageFactoryCreateTransaction(self.app_factory)
        self.send = LocalStorageFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: LocalStorageBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[LocalStorageClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return LocalStorageClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LocalStorageClient:
        """Get an app client by creator address and name"""
        return LocalStorageClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LocalStorageClient:
        """Get an app client by app ID"""
        return LocalStorageClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LocalStorageFactoryParams:
    """Parameters for creating transactions for LocalStorage contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LocalStorageFactoryCreateParams(app_factory)
        self.update = LocalStorageFactoryUpdateParams(app_factory)
        self.delete = LocalStorageFactoryDeleteParams(app_factory)

class LocalStorageFactoryCreateParams:
    """Parameters for 'create' operations of LocalStorage contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def contains_local_data(
        self,
        args: tuple[str | bytes] | ContainsLocalDataArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the contains_local_data(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "contains_local_data(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def contains_local_data_example(
        self,
        args: tuple[str | bytes] | ContainsLocalDataExampleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the contains_local_data_example(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "contains_local_data_example(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_item_local_data(
        self,
        args: tuple[str | bytes] | GetItemLocalDataArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_item_local_data(account)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_item_local_data(account)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_local_data_with_default_int(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultIntArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_local_data_with_default_int(account)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_local_data_with_default_int(account)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def maybe_local_data(
        self,
        args: tuple[str | bytes] | MaybeLocalDataArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the maybe_local_data(account)(uint64,bool) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "maybe_local_data(account)(uint64,bool)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_item_local_data_example(
        self,
        args: tuple[str | bytes] | GetItemLocalDataExampleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_item_local_data_example(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_item_local_data_example(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_local_data_with_default(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_local_data_with_default(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_local_data_with_default(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def maybe_local_data_example(
        self,
        args: tuple[str | bytes] | MaybeLocalDataExampleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the maybe_local_data_example(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "maybe_local_data_example(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_local_int(
        self,
        args: tuple[str | bytes, int] | SetLocalIntArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_local_int(account,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_local_int(account,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_local_data_example(
        self,
        args: tuple[str | bytes, int, str | bytes, int, bytes | str, bool] | SetLocalDataExampleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_local_data_example(account,asset,account,application,byte[],bool)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_local_data_example(account,asset,account,application,byte[],bool)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def delete_local_data(
        self,
        args: tuple[str | bytes] | DeleteLocalDataArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the delete_local_data(account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "delete_local_data(account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def delete_local_data_example(
        self,
        args: tuple[str | bytes] | DeleteLocalDataExampleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the delete_local_data_example(account)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "delete_local_data_example(account)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class LocalStorageFactoryUpdateParams:
    """Parameters for 'update' operations of LocalStorage contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class LocalStorageFactoryDeleteParams:
    """Parameters for 'delete' operations of LocalStorage contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class LocalStorageFactoryCreateTransaction:
    """Create transactions for LocalStorage contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LocalStorageFactoryCreateTransactionCreate(app_factory)


class LocalStorageFactoryCreateTransactionCreate:
    """Create new instances of LocalStorage contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class LocalStorageFactorySend:
    """Send calls to LocalStorage contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LocalStorageFactorySendCreate(app_factory)


class LocalStorageFactorySendCreate:
    """Send create calls to LocalStorage contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[LocalStorageClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return LocalStorageClient(result[0]), result[1]


class LocalStorageComposer:
    """Composer for creating transaction groups for LocalStorage contract calls"""

    def __init__(self, client: "LocalStorageClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], typing.Any] | None] = []

    def contains_local_data(
        self,
        args: tuple[str | bytes] | ContainsLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.contains_local_data(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "contains_local_data(account)bool", v
            )
        )
        return self

    def contains_local_data_example(
        self,
        args: tuple[str | bytes] | ContainsLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.contains_local_data_example(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "contains_local_data_example(account)bool", v
            )
        )
        return self

    def get_item_local_data(
        self,
        args: tuple[str | bytes] | GetItemLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_item_local_data(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_item_local_data(account)uint64", v
            )
        )
        return self

    def get_local_data_with_default_int(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultIntArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_local_data_with_default_int(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_local_data_with_default_int(account)uint64", v
            )
        )
        return self

    def maybe_local_data(
        self,
        args: tuple[str | bytes] | MaybeLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.maybe_local_data(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "maybe_local_data(account)(uint64,bool)", v
            )
        )
        return self

    def get_item_local_data_example(
        self,
        args: tuple[str | bytes] | GetItemLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_item_local_data_example(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_item_local_data_example(account)bool", v
            )
        )
        return self

    def get_local_data_with_default(
        self,
        args: tuple[str | bytes] | GetLocalDataWithDefaultArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_local_data_with_default(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_local_data_with_default(account)bool", v
            )
        )
        return self

    def maybe_local_data_example(
        self,
        args: tuple[str | bytes] | MaybeLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.maybe_local_data_example(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "maybe_local_data_example(account)bool", v
            )
        )
        return self

    def set_local_int(
        self,
        args: tuple[str | bytes, int] | SetLocalIntArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_local_int(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_local_int(account,uint64)void", v
            )
        )
        return self

    def set_local_data_example(
        self,
        args: tuple[str | bytes, int, str | bytes, int, bytes | str, bool] | SetLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_local_data_example(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_local_data_example(account,asset,account,application,byte[],bool)bool", v
            )
        )
        return self

    def delete_local_data(
        self,
        args: tuple[str | bytes] | DeleteLocalDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.delete_local_data(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "delete_local_data(account)void", v
            )
        )
        return self

    def delete_local_data_example(
        self,
        args: tuple[str | bytes] | DeleteLocalDataExampleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_app_call_method_call(
            self.client.params.delete_local_data_example(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "delete_local_data_example(account)bool", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "LocalStorageComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LocalStorageComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
