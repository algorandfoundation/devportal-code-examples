{
  "version": 3,
  "sources": [
    "../../global_storage/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeQ;AAAmC;AAAnC;AACA;;AAA6B;AAA7B;AAMA;AACI;AADJ;AAGA;;AAA+B;AAA/B;AAMA;;AAA8B;AAA9B;AAnBR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AA2IK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AA/GL;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;;AAAA;AA+GK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAxGL;;;AAAA;;;AAwGK;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7BL;;AAAA;;;;;;;;;AA+Be;AAAA;AAAA;AAAiC;AAAjC;;AAAA;AAAP;AAER;;;AAEgC;AAAA;AAAA;AAAA;AAAA;;AAAA;AACrB;;;AACa;AAAZ;;AACJ;;AAAA;;AAAA;;AAAA;;AAAA;AAIO;AAAA;AAAA;AAAiC;AAAjC;;AAAA;AAA+C;AAA/C;AAAP;AACO;AAAA;;AAAA;AAAA;AAA8B;AAA9B;AAAP;AACO;AAAA;;AAAA;AAAuC;AAAvC;;AAAA;AAAA;AAAP;AAEO;AAAA;AAAA;AAA2B;;;;;;;;;AAA3B;;AAAA;AAAiD;AAAjD;AAAP;AACO;AAAP;AAOsB;AAAA;AAAA;AACtB;AACoB;AAAb;AAAP;AAEuB;AAAA;AAAA;AACvB;AACqB;AAAd;AAAP;AAE2B;AAAA;AAAA;AAAA;;AACpB;AAAP;AACO;AAAA;AAAA;AAAA;AAAgC;AAAhC;AAAP;AAEuB;AAAA;;AAAA;AACvB;AACA;AAEwB;AAAA;;AAAA;AACxB;AAC4B;AAArB;AAAP;AAEwB;AAAA;;AAAA;AACxB;AACkC;AAA3B;AAAP;AAEO;AAAP;AAOO;AAAA;AAAA;AAAA;AAA8B;AAA9B;AAAP;AACO;AAAA;AAAA;AAAA;AAAgC;AAAhC;AAAP;AAEO;AAAA;;AAAA;AAAA;AAA8B;AAA9B;AAAP;AACO;AAAA;;AAAA;AAAA;AAAgC;AAAhC;AAAP;AACY;AAAA;;AAAA;AAAA;AAAZ;AAEO;AAAI;;AAAJ;AAAA;;AAAA;AAAP;AACO;AAAI;;AAAJ;AAAA;;AAAA;AAAP;AACO;AAAI;;AAAJ;AAAA;;AAAA;AAAP;AAEO;AAAA;;AAAA;AAAA;AAAiC;AAAjC;AAAP;AACO;AAAA;;AAAA;AAAA;AAA6C;AAA7C;AAAP;AACO;AAAA;;;;;;;;;;;;;;;;AAAA;AAAA;AAA6B;AAAA;AAAQ;AAArC;AAAP;AACO;AAAP;AAKR;;;AAEQ;AAAA;;AAAA;;AAKR;;;AAQQ;;AAAA;;AAAA;AACO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEA;;AAAA;;AAAA;AACY;AAAA;;AAAA;AAAA;AAAZ;AAEA;;AAAA;;AAAA;AACO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;;AAOI;AAAJ;AACO;AAAP;AAOI;;AAAJ;AACI;;AAAJ;AACI;;AAAJ;AACO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10 50"
    },
    "7": {
      "op": "bytecblock 0x48656c6c6f \"global_int_full\" \"global_bytes_full\" 0x151f7c75 0x00 \"global_bool_no_default\" \"global_asset\" \"global_bytes_no_default\" \"global_int_simplified\" \"global_bytes_simplified\" \"global_bool_simplified\" \"global_int_no_default\" \"global_application\""
    },
    "226": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "228": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "231": {
      "op": "bytec_1 // \"global_int_full\"",
      "defined_out": [
        "\"global_int_full\""
      ],
      "stack_out": [
        "\"global_int_full\""
      ]
    },
    "232": {
      "op": "intc_3 // 50",
      "defined_out": [
        "\"global_int_full\"",
        "50"
      ],
      "stack_out": [
        "\"global_int_full\"",
        "50"
      ]
    },
    "233": {
      "op": "app_global_put",
      "stack_out": []
    },
    "234": {
      "op": "bytec 8 // \"global_int_simplified\"",
      "defined_out": [
        "\"global_int_simplified\""
      ],
      "stack_out": [
        "\"global_int_simplified\""
      ]
    },
    "236": {
      "op": "intc_2 // 10",
      "defined_out": [
        "\"global_int_simplified\"",
        "10"
      ],
      "stack_out": [
        "\"global_int_simplified\"",
        "10"
      ]
    },
    "237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "238": {
      "op": "bytec_2 // \"global_bytes_full\"",
      "defined_out": [
        "\"global_bytes_full\""
      ],
      "stack_out": [
        "\"global_bytes_full\""
      ]
    },
    "239": {
      "op": "bytec_0 // 0x48656c6c6f",
      "defined_out": [
        "\"global_bytes_full\"",
        "0x48656c6c6f"
      ],
      "stack_out": [
        "\"global_bytes_full\"",
        "0x48656c6c6f"
      ]
    },
    "240": {
      "op": "app_global_put",
      "stack_out": []
    },
    "241": {
      "op": "bytec 9 // \"global_bytes_simplified\"",
      "defined_out": [
        "\"global_bytes_simplified\""
      ],
      "stack_out": [
        "\"global_bytes_simplified\""
      ]
    },
    "243": {
      "op": "bytec_0 // 0x48656c6c6f",
      "stack_out": [
        "\"global_bytes_simplified\"",
        "0x48656c6c6f"
      ]
    },
    "244": {
      "op": "app_global_put",
      "stack_out": []
    },
    "245": {
      "op": "bytec 10 // \"global_bool_simplified\"",
      "defined_out": [
        "\"global_bool_simplified\""
      ],
      "stack_out": [
        "\"global_bool_simplified\""
      ]
    },
    "247": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"global_bool_simplified\"",
        "1"
      ],
      "stack_out": [
        "\"global_bool_simplified\"",
        "1"
      ]
    },
    "248": {
      "op": "app_global_put",
      "stack_out": []
    },
    "249": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "251": {
      "op": "bz main_bare_routing@14",
      "stack_out": []
    },
    "254": {
      "op": "pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0x3868e4c7 0x3feae30e 0x8fd05d5a // method \"get_global_state()uint64\", method \"maybe_global_state()(uint64,bool)\", method \"get_global_state_example()bool\", method \"maybe_global_state_example()bool\", method \"check_global_state_example()bool\", method \"set_global_state(byte[])void\", method \"set_global_state_example(byte[],asset,bool)void\", method \"del_global_state()bool\", method \"del_global_state_example()bool\"",
      "defined_out": [
        "Method(check_global_state_example()bool)",
        "Method(del_global_state()bool)",
        "Method(del_global_state_example()bool)",
        "Method(get_global_state()uint64)",
        "Method(get_global_state_example()bool)",
        "Method(maybe_global_state()(uint64,bool))",
        "Method(maybe_global_state_example()bool)",
        "Method(set_global_state(byte[])void)",
        "Method(set_global_state_example(byte[],asset,bool)void)"
      ],
      "stack_out": [
        "Method(get_global_state()uint64)",
        "Method(maybe_global_state()(uint64,bool))",
        "Method(get_global_state_example()bool)",
        "Method(maybe_global_state_example()bool)",
        "Method(check_global_state_example()bool)",
        "Method(set_global_state(byte[])void)",
        "Method(set_global_state_example(byte[],asset,bool)void)",
        "Method(del_global_state()bool)",
        "Method(del_global_state_example()bool)"
      ]
    },
    "301": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(check_global_state_example()bool)",
        "Method(del_global_state()bool)",
        "Method(del_global_state_example()bool)",
        "Method(get_global_state()uint64)",
        "Method(get_global_state_example()bool)",
        "Method(maybe_global_state()(uint64,bool))",
        "Method(maybe_global_state_example()bool)",
        "Method(set_global_state(byte[])void)",
        "Method(set_global_state_example(byte[],asset,bool)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(get_global_state()uint64)",
        "Method(maybe_global_state()(uint64,bool))",
        "Method(get_global_state_example()bool)",
        "Method(maybe_global_state_example()bool)",
        "Method(check_global_state_example()bool)",
        "Method(set_global_state(byte[])void)",
        "Method(set_global_state_example(byte[],asset,bool)void)",
        "Method(del_global_state()bool)",
        "Method(del_global_state_example()bool)",
        "tmp%2#0"
      ]
    },
    "304": {
      "op": "match main_get_global_state_route@5 main_maybe_global_state_route@6 main_get_global_state_example_route@7 main_maybe_global_state_example_route@8 main_check_global_state_example_route@9 main_set_global_state_route@10 main_set_global_state_example_route@11 main_del_global_state_route@12 main_del_global_state_example_route@13",
      "stack_out": []
    },
    "324": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "block": "main_del_global_state_example_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "328": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "329": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "330": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "332": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "333": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.del_global_state_example",
      "op": "callsub del_global_state_example",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "336": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00"
      ]
    },
    "338": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "339": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%5#0"
      ]
    },
    "341": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0"
      ]
    },
    "342": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0",
        "0x151f7c75"
      ]
    },
    "343": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ]
    },
    "344": {
      "op": "concat",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "345": {
      "op": "log",
      "stack_out": []
    },
    "346": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "347": {
      "op": "return",
      "stack_out": []
    },
    "348": {
      "block": "main_del_global_state_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "350": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "351": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "352": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "354": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "355": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.del_global_state",
      "op": "callsub del_global_state",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "358": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "360": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "361": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "363": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "364": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "365": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "366": {
      "op": "concat",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "367": {
      "op": "log",
      "stack_out": []
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "block": "main_set_global_state_example_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "373": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "374": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "376": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "377": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "380": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "383": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "386": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "387": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%39#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%41#0"
      ]
    },
    "389": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%39#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%41#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "392": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%1#0",
        "tmp%39#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%41#0",
        "reinterpret_bytes[1]%1#0",
        "0"
      ]
    },
    "393": {
      "op": "getbit",
      "defined_out": [
        "tmp%39#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "394": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.set_global_state_example",
      "op": "callsub set_global_state_example",
      "stack_out": []
    },
    "397": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "398": {
      "op": "return",
      "stack_out": []
    },
    "399": {
      "block": "main_set_global_state_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "401": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "402": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "403": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "405": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "406": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "409": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "412": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.set_global_state",
      "op": "callsub set_global_state",
      "stack_out": []
    },
    "415": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "416": {
      "op": "return",
      "stack_out": []
    },
    "417": {
      "block": "main_check_global_state_example_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "419": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "420": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "421": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "423": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "424": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.check_global_state_example",
      "op": "callsub check_global_state_example",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "427": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "429": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "430": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "432": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "433": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "434": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "435": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "436": {
      "op": "log",
      "stack_out": []
    },
    "437": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "438": {
      "op": "return",
      "stack_out": []
    },
    "439": {
      "block": "main_maybe_global_state_example_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "441": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "442": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "443": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "445": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "446": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.maybe_global_state_example",
      "op": "callsub maybe_global_state_example",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "449": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "451": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "452": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "454": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "455": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "456": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "457": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "458": {
      "op": "log",
      "stack_out": []
    },
    "459": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "460": {
      "op": "return",
      "stack_out": []
    },
    "461": {
      "block": "main_get_global_state_example_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "463": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "464": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "465": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "467": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "468": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.get_global_state_example",
      "op": "callsub get_global_state_example",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "471": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "473": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "474": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "476": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "477": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "478": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "479": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "480": {
      "op": "log",
      "stack_out": []
    },
    "481": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "482": {
      "op": "return",
      "stack_out": []
    },
    "483": {
      "block": "main_maybe_global_state_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "485": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "486": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "487": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "489": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "490": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.maybe_global_state",
      "op": "callsub maybe_global_state",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "493": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "494": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "495": {
      "op": "bytec 4 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "497": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00",
        "0"
      ]
    },
    "498": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x00",
        "0",
        "elements_to_encode%1#0"
      ]
    },
    "500": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_bool%0#0"
      ]
    },
    "501": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "502": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "503": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "504": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "505": {
      "op": "log",
      "stack_out": []
    },
    "506": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "507": {
      "op": "return",
      "stack_out": []
    },
    "508": {
      "block": "main_get_global_state_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "510": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "511": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "512": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "514": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "515": {
      "callsub": "smart_contracts.global_storage.contract.GlobalStorage.get_global_state",
      "op": "callsub get_global_state",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "518": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "519": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "520": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "521": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "522": {
      "op": "log",
      "stack_out": []
    },
    "523": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "524": {
      "op": "return",
      "stack_out": []
    },
    "525": {
      "block": "main_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "527": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "530": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "532": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "533": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "534": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "535": {
      "op": "return",
      "stack_out": []
    },
    "536": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.get_global_state",
      "params": {},
      "block": "get_global_state",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "537": {
      "op": "bytec_1 // \"global_int_full\"",
      "defined_out": [
        "\"global_int_full\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_full\""
      ]
    },
    "538": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "539": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "540": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "542": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "543": {
      "retsub": true,
      "op": "retsub"
    },
    "544": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.maybe_global_state",
      "params": {},
      "block": "maybe_global_state",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "547": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "548": {
      "op": "bytec_1 // \"global_int_full\"",
      "defined_out": [
        "\"global_int_full\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_full\""
      ]
    },
    "549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "int_exists#0",
        "int_value#0"
      ],
      "stack_out": [
        "int_value#0",
        "int_exists#0"
      ]
    },
    "550": {
      "op": "dup",
      "stack_out": [
        "int_value#0",
        "int_exists#0",
        "int_exists#0 (copy)"
      ]
    },
    "551": {
      "op": "uncover 2",
      "defined_out": [
        "int_exists#0",
        "int_value#0"
      ],
      "stack_out": [
        "int_exists#0",
        "int_exists#0",
        "int_value#0"
      ]
    },
    "553": {
      "op": "swap",
      "defined_out": [
        "int_exists#0",
        "int_value#0"
      ],
      "stack_out": [
        "int_exists#0",
        "int_value#0",
        "int_exists#0"
      ]
    },
    "554": {
      "op": "bnz maybe_global_state_after_if_else@2",
      "stack_out": [
        "int_exists#0",
        "int_value#0"
      ]
    },
    "557": {
      "op": "intc_0 // 0",
      "stack_out": [
        "int_exists#0",
        "int_value#0",
        "int_value#0"
      ]
    },
    "558": {
      "op": "frame_bury 1",
      "stack_out": [
        "int_exists#0",
        "int_value#0"
      ]
    },
    "560": {
      "block": "maybe_global_state_after_if_else@2",
      "stack_in": [
        "int_exists#0",
        "int_value#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "int_value#0"
      ],
      "stack_out": [
        "int_exists#0",
        "int_value#0",
        "int_value#0"
      ]
    },
    "562": {
      "op": "frame_dig 0",
      "defined_out": [
        "int_exists#0",
        "int_value#0"
      ],
      "stack_out": [
        "int_exists#0",
        "int_value#0",
        "int_value#0",
        "int_exists#0"
      ]
    },
    "564": {
      "op": "uncover 3"
    },
    "566": {
      "op": "uncover 3"
    },
    "568": {
      "retsub": true,
      "op": "retsub"
    },
    "569": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.get_global_state_example",
      "params": {},
      "block": "get_global_state_example",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "570": {
      "op": "bytec_1 // \"global_int_full\"",
      "defined_out": [
        "\"global_int_full\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_full\""
      ]
    },
    "571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "572": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0"
      ]
    },
    "573": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "575": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "576": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "50"
      ]
    },
    "577": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "578": {
      "op": "assert",
      "stack_out": []
    },
    "579": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "580": {
      "op": "bytec 8 // \"global_int_simplified\"",
      "defined_out": [
        "\"global_int_simplified\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_simplified\""
      ]
    },
    "582": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "583": {
      "error": "check self.global_int_simplified exists",
      "op": "assert // check self.global_int_simplified exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "584": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "10"
      ]
    },
    "585": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "586": {
      "op": "assert",
      "stack_out": []
    },
    "587": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "588": {
      "op": "bytec 11 // \"global_int_no_default\"",
      "defined_out": [
        "\"global_int_no_default\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_no_default\""
      ]
    },
    "590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "591": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0"
      ]
    },
    "592": {
      "op": "cover 2",
      "stack_out": [
        "0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "594": {
      "op": "select",
      "defined_out": [
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%1#0"
      ]
    },
    "595": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "596": {
      "op": "assert",
      "stack_out": []
    },
    "597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "598": {
      "op": "bytec_2 // \"global_bytes_full\"",
      "defined_out": [
        "\"global_bytes_full\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_bytes_full\""
      ]
    },
    "599": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "600": {
      "op": "pushbytes 0x64656661756c74",
      "defined_out": [
        "0x64656661756c74",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0",
        "0x64656661756c74"
      ]
    },
    "609": {
      "op": "cover 2",
      "stack_out": [
        "0x64656661756c74",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "611": {
      "op": "select",
      "defined_out": [
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0"
      ]
    },
    "612": {
      "op": "bytec_0 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0",
        "0x48656c6c6f"
      ]
    },
    "613": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "614": {
      "op": "assert",
      "stack_out": []
    },
    "615": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "616": {
      "retsub": true,
      "op": "retsub"
    },
    "617": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.maybe_global_state_example",
      "params": {},
      "block": "maybe_global_state_example",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "618": {
      "op": "bytec_1 // \"global_int_full\"",
      "defined_out": [
        "\"global_int_full\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_full\""
      ]
    },
    "619": {
      "op": "app_global_get_ex",
      "defined_out": [
        "i_exists#0",
        "int_value#0"
      ],
      "stack_out": [
        "int_value#0",
        "i_exists#0"
      ]
    },
    "620": {
      "op": "assert",
      "stack_out": [
        "int_value#0"
      ]
    },
    "621": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "int_value#0"
      ],
      "stack_out": [
        "int_value#0",
        "50"
      ]
    },
    "622": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "assert",
      "stack_out": []
    },
    "624": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "625": {
      "op": "bytec_2 // \"global_bytes_full\"",
      "defined_out": [
        "\"global_bytes_full\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_bytes_full\""
      ]
    },
    "626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "b_exists#0",
        "byte_value#0"
      ],
      "stack_out": [
        "byte_value#0",
        "b_exists#0"
      ]
    },
    "627": {
      "op": "assert",
      "stack_out": [
        "byte_value#0"
      ]
    },
    "628": {
      "op": "bytec_0 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "byte_value#0"
      ],
      "stack_out": [
        "byte_value#0",
        "0x48656c6c6f"
      ]
    },
    "629": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "630": {
      "op": "assert",
      "stack_out": []
    },
    "631": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "632": {
      "op": "bytec_2 // \"global_bytes_full\"",
      "stack_out": [
        "0",
        "\"global_bytes_full\""
      ]
    },
    "633": {
      "op": "app_global_get_ex",
      "defined_out": [
        "b_exists#0",
        "byte_del_value#0"
      ],
      "stack_out": [
        "byte_del_value#0",
        "b_exists#0"
      ]
    },
    "634": {
      "op": "bury 1",
      "stack_out": [
        "b_exists#0"
      ]
    },
    "636": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "637": {
      "op": "assert",
      "stack_out": []
    },
    "638": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "639": {
      "op": "bytec_2 // \"global_bytes_full\"",
      "stack_out": [
        "0",
        "\"global_bytes_full\""
      ]
    },
    "640": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "641": {
      "error": "check self.global_bytes_full exists",
      "op": "assert // check self.global_bytes_full exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "642": {
      "op": "bytec_0 // 0x48656c6c6f",
      "stack_out": [
        "maybe_value%3#0",
        "0x48656c6c6f"
      ]
    },
    "643": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "644": {
      "op": "assert",
      "stack_out": []
    },
    "645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "646": {
      "op": "bytec 5 // \"global_bool_no_default\"",
      "defined_out": [
        "\"global_bool_no_default\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_bool_no_default\""
      ]
    },
    "648": {
      "op": "app_global_get_ex",
      "defined_out": [
        "bool_value#0",
        "i_exists#0"
      ],
      "stack_out": [
        "bool_value#0",
        "i_exists#0"
      ]
    },
    "649": {
      "op": "assert",
      "stack_out": [
        "bool_value#0"
      ]
    },
    "650": {
      "op": "assert",
      "stack_out": []
    },
    "651": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "652": {
      "op": "bytec 6 // \"global_asset\"",
      "defined_out": [
        "\"global_asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_asset\""
      ]
    },
    "654": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset_value#0",
        "i_exists#0"
      ],
      "stack_out": [
        "asset_value#0",
        "i_exists#0"
      ]
    },
    "655": {
      "op": "assert",
      "stack_out": [
        "asset_value#0"
      ]
    },
    "656": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "asset_value#0"
      ],
      "stack_out": [
        "asset_value#0",
        "10"
      ]
    },
    "657": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "658": {
      "op": "assert",
      "stack_out": []
    },
    "659": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "660": {
      "op": "bytec 12 // \"global_application\"",
      "defined_out": [
        "\"global_application\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_application\""
      ]
    },
    "662": {
      "op": "app_global_get_ex",
      "defined_out": [
        "appln_value#0",
        "i_exists#0"
      ],
      "stack_out": [
        "appln_value#0",
        "i_exists#0"
      ]
    },
    "663": {
      "op": "assert",
      "stack_out": [
        "appln_value#0"
      ]
    },
    "664": {
      "op": "intc_2 // 10",
      "stack_out": [
        "appln_value#0",
        "10"
      ]
    },
    "665": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "666": {
      "op": "assert",
      "stack_out": []
    },
    "667": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "668": {
      "retsub": true,
      "op": "retsub"
    },
    "669": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.check_global_state_example",
      "params": {},
      "block": "check_global_state_example",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "670": {
      "op": "bytec_1 // \"global_int_full\"",
      "defined_out": [
        "\"global_int_full\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_full\""
      ]
    },
    "671": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "672": {
      "error": "check self.global_int_full exists",
      "op": "assert // check self.global_int_full exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "673": {
      "op": "intc_3 // 50",
      "defined_out": [
        "50",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "50"
      ]
    },
    "674": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "675": {
      "op": "assert",
      "stack_out": []
    },
    "676": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "677": {
      "op": "bytec_2 // \"global_bytes_full\"",
      "defined_out": [
        "\"global_bytes_full\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_bytes_full\""
      ]
    },
    "678": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "679": {
      "error": "check self.global_bytes_full exists",
      "op": "assert // check self.global_bytes_full exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "680": {
      "op": "bytec_0 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0x48656c6c6f"
      ]
    },
    "681": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "682": {
      "op": "assert",
      "stack_out": []
    },
    "683": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "684": {
      "op": "bytec 8 // \"global_int_simplified\"",
      "defined_out": [
        "\"global_int_simplified\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_simplified\""
      ]
    },
    "686": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "687": {
      "error": "check self.global_int_simplified exists",
      "op": "assert // check self.global_int_simplified exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "688": {
      "op": "intc_2 // 10",
      "defined_out": [
        "10",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "10"
      ]
    },
    "689": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "690": {
      "op": "assert",
      "stack_out": []
    },
    "691": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "692": {
      "op": "bytec 9 // \"global_bytes_simplified\"",
      "defined_out": [
        "\"global_bytes_simplified\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_bytes_simplified\""
      ]
    },
    "694": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "695": {
      "error": "check self.global_bytes_simplified exists",
      "op": "assert // check self.global_bytes_simplified exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "696": {
      "op": "bytec_0 // 0x48656c6c6f",
      "stack_out": [
        "maybe_value%3#0",
        "0x48656c6c6f"
      ]
    },
    "697": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "698": {
      "op": "assert",
      "stack_out": []
    },
    "699": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "700": {
      "op": "bytec 10 // \"global_bool_simplified\"",
      "defined_out": [
        "\"global_bool_simplified\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_bool_simplified\""
      ]
    },
    "702": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "703": {
      "error": "check self.global_bool_simplified exists",
      "op": "assert // check self.global_bool_simplified exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "704": {
      "op": "assert",
      "stack_out": []
    },
    "705": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "706": {
      "op": "bytec 11 // \"global_int_no_default\"",
      "defined_out": [
        "\"global_int_no_default\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_int_no_default\""
      ]
    },
    "708": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "709": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%5#0"
      ]
    },
    "711": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "712": {
      "op": "assert",
      "stack_out": []
    },
    "713": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "714": {
      "op": "bytec 7 // \"global_bytes_no_default\"",
      "defined_out": [
        "\"global_bytes_no_default\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_bytes_no_default\""
      ]
    },
    "716": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "717": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%6#0"
      ]
    },
    "719": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "720": {
      "op": "assert",
      "stack_out": []
    },
    "721": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "722": {
      "op": "bytec 5 // \"global_bool_no_default\"",
      "defined_out": [
        "\"global_bool_no_default\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_bool_no_default\""
      ]
    },
    "724": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "725": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%7#0"
      ]
    },
    "727": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "728": {
      "op": "assert",
      "stack_out": []
    },
    "729": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "730": {
      "op": "bytec 6 // \"global_asset\"",
      "defined_out": [
        "\"global_asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_asset\""
      ]
    },
    "732": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "733": {
      "error": "check self.global_asset exists",
      "op": "assert // check self.global_asset exists",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "734": {
      "op": "intc_2 // 10",
      "stack_out": [
        "maybe_value%8#0",
        "10"
      ]
    },
    "735": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "736": {
      "op": "assert",
      "stack_out": []
    },
    "737": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "738": {
      "op": "bytec 12 // \"global_application\"",
      "defined_out": [
        "\"global_application\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_application\""
      ]
    },
    "740": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "741": {
      "error": "check self.global_application exists",
      "op": "assert // check self.global_application exists",
      "stack_out": [
        "maybe_value%9#0"
      ]
    },
    "742": {
      "op": "intc_2 // 10",
      "stack_out": [
        "maybe_value%9#0",
        "10"
      ]
    },
    "743": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "744": {
      "op": "assert",
      "stack_out": []
    },
    "745": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "746": {
      "op": "pushbytes \"global_account\"",
      "defined_out": [
        "\"global_account\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_account\""
      ]
    },
    "762": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "763": {
      "error": "check self.global_account exists",
      "op": "assert // check self.global_account exists",
      "stack_out": [
        "maybe_value%10#0"
      ]
    },
    "764": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%10#0",
        "0"
      ]
    },
    "765": {
      "error": "Address length is 32 bytes",
      "op": "assert // Address length is 32 bytes",
      "stack_out": [
        "maybe_value%10#0"
      ]
    },
    "766": {
      "op": "bytec_0 // 0x48656c6c6f",
      "stack_out": [
        "maybe_value%10#0",
        "0x48656c6c6f"
      ]
    },
    "767": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "768": {
      "op": "assert",
      "stack_out": []
    },
    "769": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "770": {
      "retsub": true,
      "op": "retsub"
    },
    "771": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.set_global_state",
      "params": {
        "value#0": "bytes"
      },
      "block": "set_global_state",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "774": {
      "op": "bytec_2 // \"global_bytes_full\"",
      "defined_out": [
        "\"global_bytes_full\""
      ],
      "stack_out": [
        "\"global_bytes_full\""
      ]
    },
    "775": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"global_bytes_full\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"global_bytes_full\"",
        "value#0 (copy)"
      ]
    },
    "777": {
      "op": "app_global_put",
      "stack_out": []
    },
    "778": {
      "retsub": true,
      "op": "retsub"
    },
    "779": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.set_global_state_example",
      "params": {
        "value_bytes#0": "bytes",
        "value_asset#0": "uint64",
        "value_bool#0": "uint64"
      },
      "block": "set_global_state_example",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "782": {
      "op": "bytec 7 // \"global_bytes_no_default\"",
      "defined_out": [
        "\"global_bytes_no_default\""
      ],
      "stack_out": [
        "\"global_bytes_no_default\""
      ]
    },
    "784": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"global_bytes_no_default\"",
        "value_bytes#0 (copy)"
      ],
      "stack_out": [
        "\"global_bytes_no_default\"",
        "value_bytes#0 (copy)"
      ]
    },
    "786": {
      "op": "app_global_put",
      "stack_out": []
    },
    "787": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "788": {
      "op": "bytec 7 // \"global_bytes_no_default\"",
      "stack_out": [
        "0",
        "\"global_bytes_no_default\""
      ]
    },
    "790": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "791": {
      "error": "check self.global_bytes_no_default exists",
      "op": "assert // check self.global_bytes_no_default exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "792": {
      "op": "frame_dig -3",
      "stack_out": [
        "maybe_value%0#0",
        "value_bytes#0 (copy)"
      ]
    },
    "794": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "795": {
      "op": "assert",
      "stack_out": []
    },
    "796": {
      "op": "bytec 5 // \"global_bool_no_default\"",
      "defined_out": [
        "\"global_bool_no_default\""
      ],
      "stack_out": [
        "\"global_bool_no_default\""
      ]
    },
    "798": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"global_bool_no_default\"",
        "value_bool#0 (copy)"
      ],
      "stack_out": [
        "\"global_bool_no_default\"",
        "value_bool#0 (copy)"
      ]
    },
    "800": {
      "op": "app_global_put",
      "stack_out": []
    },
    "801": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "802": {
      "op": "bytec 5 // \"global_bool_no_default\"",
      "stack_out": [
        "0",
        "\"global_bool_no_default\""
      ]
    },
    "804": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "805": {
      "error": "check self.global_bool_no_default exists",
      "op": "assert // check self.global_bool_no_default exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "806": {
      "op": "assert",
      "stack_out": []
    },
    "807": {
      "op": "bytec 6 // \"global_asset\"",
      "defined_out": [
        "\"global_asset\""
      ],
      "stack_out": [
        "\"global_asset\""
      ]
    },
    "809": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"global_asset\"",
        "value_asset#0 (copy)"
      ],
      "stack_out": [
        "\"global_asset\"",
        "value_asset#0 (copy)"
      ]
    },
    "811": {
      "op": "app_global_put",
      "stack_out": []
    },
    "812": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "813": {
      "op": "bytec 6 // \"global_asset\"",
      "stack_out": [
        "0",
        "\"global_asset\""
      ]
    },
    "815": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "816": {
      "error": "check self.global_asset exists",
      "op": "assert // check self.global_asset exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "817": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%2#0",
        "value_asset#0 (copy)"
      ]
    },
    "819": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "820": {
      "op": "assert",
      "stack_out": []
    },
    "821": {
      "retsub": true,
      "op": "retsub"
    },
    "822": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.del_global_state",
      "params": {},
      "block": "del_global_state",
      "stack_in": [],
      "op": "bytec_1 // \"global_int_full\"",
      "defined_out": [
        "\"global_int_full\""
      ],
      "stack_out": [
        "\"global_int_full\""
      ]
    },
    "823": {
      "op": "app_global_del",
      "stack_out": []
    },
    "824": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "825": {
      "retsub": true,
      "op": "retsub"
    },
    "826": {
      "subroutine": "smart_contracts.global_storage.contract.GlobalStorage.del_global_state_example",
      "params": {},
      "block": "del_global_state_example",
      "stack_in": [],
      "op": "bytec 7 // \"global_bytes_no_default\"",
      "defined_out": [
        "\"global_bytes_no_default\""
      ],
      "stack_out": [
        "\"global_bytes_no_default\""
      ]
    },
    "828": {
      "op": "app_global_del",
      "stack_out": []
    },
    "829": {
      "op": "bytec 5 // \"global_bool_no_default\"",
      "defined_out": [
        "\"global_bool_no_default\""
      ],
      "stack_out": [
        "\"global_bool_no_default\""
      ]
    },
    "831": {
      "op": "app_global_del",
      "stack_out": []
    },
    "832": {
      "op": "bytec 6 // \"global_asset\"",
      "defined_out": [
        "\"global_asset\""
      ],
      "stack_out": [
        "\"global_asset\""
      ]
    },
    "834": {
      "op": "app_global_del",
      "stack_out": []
    },
    "835": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "836": {
      "retsub": true,
      "op": "retsub"
    }
  }
}