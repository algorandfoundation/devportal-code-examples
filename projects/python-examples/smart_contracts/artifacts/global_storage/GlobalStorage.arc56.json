{
    "name": "GlobalStorage",
    "structs": {},
    "methods": [
        {
            "name": "get_global_state",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_global_state",
            "args": [],
            "returns": {
                "type": "(uint64,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_global_state_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_global_state_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_global_state_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_global_state",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_global_state_example",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value_bytes"
                },
                {
                    "type": "uint64",
                    "name": "value_asset"
                },
                {
                    "type": "bool",
                    "name": "value_bool"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "del_global_state",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "del_global_state_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 7,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "global_int_full": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2ludF9mdWxs"
                },
                "global_int_simplified": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2ludF9zaW1wbGlmaWVk"
                },
                "global_int_no_default": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2ludF9ub19kZWZhdWx0"
                },
                "global_bytes_full": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsX2J5dGVzX2Z1bGw="
                },
                "global_bytes_simplified": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsX2J5dGVzX3NpbXBsaWZpZWQ="
                },
                "global_bytes_no_default": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsX2J5dGVzX25vX2RlZmF1bHQ="
                },
                "global_bool_simplified": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2Jvb2xfc2ltcGxpZmllZA=="
                },
                "global_bool_no_default": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2Jvb2xfbm9fZGVmYXVsdA=="
                },
                "global_asset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2Fzc2V0"
                },
                "global_application": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2FwcGxpY2F0aW9u"
                },
                "global_account": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Z2xvYmFsX2FjY291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        579
                    ],
                    "errorMessage": "Address length is 32 bytes"
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        343
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        577
                    ],
                    "errorMessage": "check self.global_account exists"
                },
                {
                    "pc": [
                        555
                    ],
                    "errorMessage": "check self.global_application exists"
                },
                {
                    "pc": [
                        547
                    ],
                    "errorMessage": "check self.global_asset exists"
                },
                {
                    "pc": [
                        517
                    ],
                    "errorMessage": "check self.global_bool_simplified exists"
                },
                {
                    "pc": [
                        493
                    ],
                    "errorMessage": "check self.global_bytes_full exists"
                },
                {
                    "pc": [
                        509
                    ],
                    "errorMessage": "check self.global_bytes_simplified exists"
                },
                {
                    "pc": [
                        486
                    ],
                    "errorMessage": "check self.global_int_full exists"
                },
                {
                    "pc": [
                        403,
                        501
                    ],
                    "errorMessage": "check self.global_int_simplified exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEKMiYND2dsb2JhbF9pbnRfZnVsbAVIZWxsbxFnbG9iYWxfYnl0ZXNfZnVsbAUVH3x1gBZnbG9iYWxfYm9vbF9ub19kZWZhdWx0DGdsb2JhbF9hc3NldBVnbG9iYWxfaW50X3NpbXBsaWZpZWQXZ2xvYmFsX2J5dGVzX25vX2RlZmF1bHQXZ2xvYmFsX2J5dGVzX3NpbXBsaWZpZWQWZ2xvYmFsX2Jvb2xfc2ltcGxpZmllZAQVH3x1FWdsb2JhbF9pbnRfbm9fZGVmYXVsdBJnbG9iYWxfYXBwbGljYXRpb24xGEAAEiglZycGJGcqKWcnCClnJwkjZzEbQQBOMRkURDEYRIIJBM4W0IMEieLhKATPZlh4BNSYadoEW6T0aQSGbUSEBLELOHIEP+rjDgSP0F1aNhoAjgkACQAYADYAaACUAPwBBwEnAS0AMRkUMRgUEEMiKGUiTgJNFicKTFCwI0MiKGVJTwJMQAADIkUBSRaAAQAiSwRUUCcKTFCwI0MiKGUiTgJNJRJEIicGZUQkEkQiJwtlIk4CTRREIiplgAdkZWZhdWx0TgJNKRJEK7AjQyIoZUQlEkQiKmVJREwpEkQURCInBGVERCInBWVEJBJEIicMZUQkEkQrsCNDIihlRCUSRCIqZUQpEkQiJwZlRCQSRCInCGVEKRJEIicJZUREIicLZUUBFEQiJwdlRQEURCInBGVFARREIicFZUQkEkQiJwxlRCQSRCKADmdsb2JhbF9hY2NvdW50ZUQiRCkSRCuwI0M2GgFXAgAqTGcjQzYaAVcCADYaAhc2GgMiUycHTwNnJwRLAWdEJwVMZyNDKGkrsCNDJwdpJwRpJwVpK7AjQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}