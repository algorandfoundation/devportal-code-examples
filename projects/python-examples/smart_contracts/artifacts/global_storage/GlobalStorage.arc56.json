{
    "name": "GlobalStorage",
    "structs": {},
    "methods": [
        {
            "name": "get_global_state",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_global_state",
            "args": [],
            "returns": {
                "type": "(uint64,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_global_state_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_global_state_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_global_state_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_global_state",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_global_state_example",
            "args": [
                {
                    "type": "byte[]",
                    "name": "value_bytes"
                },
                {
                    "type": "asset",
                    "name": "value_asset"
                },
                {
                    "type": "bool",
                    "name": "value_bool"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "del_global_state",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "del_global_state_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 7,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "global_int_full": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2ludF9mdWxs"
                },
                "global_int_simplified": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2ludF9zaW1wbGlmaWVk"
                },
                "global_int_no_default": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2ludF9ub19kZWZhdWx0"
                },
                "global_bytes_full": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsX2J5dGVzX2Z1bGw="
                },
                "global_bytes_simplified": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsX2J5dGVzX3NpbXBsaWZpZWQ="
                },
                "global_bytes_no_default": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsX2J5dGVzX25vX2RlZmF1bHQ="
                },
                "global_bool_simplified": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2Jvb2xfc2ltcGxpZmllZA=="
                },
                "global_bool_no_default": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2Jvb2xfbm9fZGVmYXVsdA=="
                },
                "global_asset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2Fzc2V0"
                },
                "global_application": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2FwcGxpY2F0aW9u"
                },
                "global_account": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z2xvYmFsX2FjY291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        765
                    ],
                    "errorMessage": "Address length is 32 bytes"
                },
                {
                    "pc": [
                        329,
                        351,
                        373,
                        402,
                        420,
                        442,
                        464,
                        486,
                        511
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        533
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        332,
                        354,
                        376,
                        405,
                        423,
                        445,
                        467,
                        489,
                        514
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        763
                    ],
                    "errorMessage": "check self.global_account exists"
                },
                {
                    "pc": [
                        741
                    ],
                    "errorMessage": "check self.global_application exists"
                },
                {
                    "pc": [
                        733,
                        816
                    ],
                    "errorMessage": "check self.global_asset exists"
                },
                {
                    "pc": [
                        805
                    ],
                    "errorMessage": "check self.global_bool_no_default exists"
                },
                {
                    "pc": [
                        703
                    ],
                    "errorMessage": "check self.global_bool_simplified exists"
                },
                {
                    "pc": [
                        641,
                        679
                    ],
                    "errorMessage": "check self.global_bytes_full exists"
                },
                {
                    "pc": [
                        791
                    ],
                    "errorMessage": "check self.global_bytes_no_default exists"
                },
                {
                    "pc": [
                        695
                    ],
                    "errorMessage": "check self.global_bytes_simplified exists"
                },
                {
                    "pc": [
                        672
                    ],
                    "errorMessage": "check self.global_int_full exists"
                },
                {
                    "pc": [
                        583,
                        687
                    ],
                    "errorMessage": "check self.global_int_simplified exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEKMiYNBUhlbGxvD2dsb2JhbF9pbnRfZnVsbBFnbG9iYWxfYnl0ZXNfZnVsbAQVH3x1AQAWZ2xvYmFsX2Jvb2xfbm9fZGVmYXVsdAxnbG9iYWxfYXNzZXQXZ2xvYmFsX2J5dGVzX25vX2RlZmF1bHQVZ2xvYmFsX2ludF9zaW1wbGlmaWVkF2dsb2JhbF9ieXRlc19zaW1wbGlmaWVkFmdsb2JhbF9ib29sX3NpbXBsaWZpZWQVZ2xvYmFsX2ludF9ub19kZWZhdWx0Emdsb2JhbF9hcHBsaWNhdGlvbjEYQAASKSVnJwgkZyooZycJKGcnCiNnMRtBAQ+CCQTOFtCDBIni4SgEz2ZYeATUmGnaBFuk9GkEhm1EhAQ4aOTHBD/q4w4Ej9BdWjYaAI4JALgAnwCJAHMAXQBLAC4AGAACIkMxGRREMRhEiAHqJwQiTwJUK0xQsCNDMRkURDEYRIgB0CcEIk8CVCtMULAjQzEZFEQxGEQ2GgFXAgA2GgIXwDA2GgMiU4gBfiNDMRkURDEYRDYaAVcCAIgBZCNDMRkURDEYRIgA8icEIk8CVCtMULAjQzEZFEQxGESIAKgnBCJPAlQrTFCwI0MxGRREMRhEiABiJwQiTwJUK0xQsCNDMRkURDEYRIgAM0wWJwQiTwNUUCtMULAjQzEZFEQxGESIABIWK0xQsCNDMRlA/zIxGBREI0MiKWUiTgJNiYoAAiIpZUlPAkxAAAMijAGLAYsATwNPA4kiKWUiTgJNJRJEIicIZUQkEkQiJwtlIk4CTRREIiplgAdkZWZhdWx0TgJNKBJEI4kiKWVEJRJEIiplRCgSRCIqZUUBFEQiKmVEKBJEIicFZUREIicGZUQkEkQiJwxlRCQSRCOJIillRCUSRCIqZUQoEkQiJwhlRCQSRCInCWVEKBJEIicKZUREIicLZUUBFEQiJwdlRQEURCInBWVFARREIicGZUQkEkQiJwxlRCQSRCKADmdsb2JhbF9hY2NvdW50ZUQiRCgSRCOJigEAKov/Z4mKAwAnB4v9ZyInB2VEi/0SRCcFi/9nIicFZUREJwaL/mciJwZlRIv+EkSJKWkjiScHaScFaScGaSOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}