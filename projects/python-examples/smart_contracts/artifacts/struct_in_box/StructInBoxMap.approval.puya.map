{
  "version": 3,
  "sources": [
    "../../struct_in_box/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;;;;;;;;AASQ;AAAA;;AAAA;AAFQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAER;AACO;AAAA;AAAA;AAAqC;;AAArC;AAAP;AANH;AAAA;AAAA;AAAA;AAUA;;;AAEG;AAFH;;;AAEG;AAAA;AAAA;;AAAA;AAAA;AAFH;AAAA;AAAA;AAAA;AAQU;AAFV;;;AAEU;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAMiB;AAFjB;;;AAEU;AAAA;AAAA;;AAFV;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75"
    },
    "37": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "39": {
      "op": "bz main___algopy_default_create@13",
      "stack_out": []
    },
    "42": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "44": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "45": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "46": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "48": {
      "op": "assert",
      "stack_out": []
    },
    "49": {
      "op": "pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364 // method \"box_map_test()bool\", method \"box_map_set(uint64,(string,uint64,uint64))bool\", method \"box_map_get(uint64)(string,uint64,uint64)\", method \"box_map_exists(uint64)bool\"",
      "defined_out": [
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)(string,uint64,uint64))",
        "Method(box_map_set(uint64,(string,uint64,uint64))bool)",
        "Method(box_map_test()bool)"
      ],
      "stack_out": [
        "Method(box_map_test()bool)",
        "Method(box_map_set(uint64,(string,uint64,uint64))bool)",
        "Method(box_map_get(uint64)(string,uint64,uint64))",
        "Method(box_map_exists(uint64)bool)"
      ]
    },
    "71": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)(string,uint64,uint64))",
        "Method(box_map_set(uint64,(string,uint64,uint64))bool)",
        "Method(box_map_test()bool)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(box_map_test()bool)",
        "Method(box_map_set(uint64,(string,uint64,uint64))bool)",
        "Method(box_map_get(uint64)(string,uint64,uint64))",
        "Method(box_map_exists(uint64)bool)",
        "tmp%6#0"
      ]
    },
    "74": {
      "op": "match box_map_test box_map_set box_map_get box_map_exists",
      "stack_out": []
    },
    "84": {
      "op": "err"
    },
    "85": {
      "block": "main___algopy_default_create@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "87": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "88": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "90": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "91": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "92": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "93": {
      "subroutine": "smart_contracts.struct_in_box.contract.StructInBoxMap.box_map_test[routing]",
      "params": {},
      "block": "box_map_test",
      "stack_in": [],
      "op": "bytec_0 // 0x75736572730000000000000000",
      "defined_out": [
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "94": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "95": {
      "op": "pop",
      "stack_out": []
    },
    "96": {
      "op": "bytec_0 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "97": {
      "op": "pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
      "defined_out": [
        "0x0012000000000000004600000000000000020008746573744e616d65",
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000",
        "0x0012000000000000004600000000000000020008746573744e616d65"
      ]
    },
    "127": {
      "op": "box_put",
      "stack_out": []
    },
    "128": {
      "op": "bytec_0 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "129": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "130": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "131": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "28"
      ]
    },
    "133": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "134": {
      "op": "assert",
      "stack_out": []
    },
    "135": {
      "op": "bytec_2 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "136": {
      "op": "log",
      "stack_out": []
    },
    "137": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "138": {
      "op": "return",
      "stack_out": []
    },
    "139": {
      "subroutine": "smart_contracts.struct_in_box.contract.StructInBoxMap.box_map_set[routing]",
      "params": {},
      "block": "box_map_set",
      "stack_in": [],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "142": {
      "op": "bytec_1 // \"users\"",
      "defined_out": [
        "\"users\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"users\""
      ]
    },
    "143": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"users\"",
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"users\"",
        "key#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "147": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "148": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "149": {
      "op": "pop",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "150": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "value#0"
      ]
    },
    "151": {
      "op": "box_put",
      "stack_out": []
    },
    "152": {
      "op": "bytec_2 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "153": {
      "op": "log",
      "stack_out": []
    },
    "154": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "155": {
      "op": "return",
      "stack_out": []
    },
    "156": {
      "subroutine": "smart_contracts.struct_in_box.contract.StructInBoxMap.box_map_get[routing]",
      "params": {},
      "block": "box_map_get",
      "stack_in": [],
      "op": "bytec_1 // \"users\"",
      "defined_out": [
        "\"users\""
      ],
      "stack_out": [
        "\"users\""
      ]
    },
    "157": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"users\"",
        "key#0"
      ],
      "stack_out": [
        "\"users\"",
        "key#0"
      ]
    },
    "160": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "161": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "162": {
      "error": "check self.user_map entry exists",
      "op": "assert // check self.user_map entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "163": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0x151f7c75"
      ]
    },
    "164": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ]
    },
    "165": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "166": {
      "op": "log",
      "stack_out": []
    },
    "167": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "168": {
      "op": "return",
      "stack_out": []
    },
    "169": {
      "subroutine": "smart_contracts.struct_in_box.contract.StructInBoxMap.box_map_exists[routing]",
      "params": {},
      "block": "box_map_exists",
      "stack_in": [],
      "op": "bytec_1 // \"users\"",
      "defined_out": [
        "\"users\""
      ],
      "stack_out": [
        "\"users\""
      ]
    },
    "170": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"users\"",
        "key#0"
      ],
      "stack_out": [
        "\"users\"",
        "key#0"
      ]
    },
    "173": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "174": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "175": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "177": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "180": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "182": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "184": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "185": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "188": {
      "op": "log",
      "stack_out": []
    },
    "189": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "190": {
      "op": "return",
      "stack_out": []
    }
  }
}