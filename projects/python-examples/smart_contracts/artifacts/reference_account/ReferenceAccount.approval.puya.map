{
  "version": 3,
  "sources": [
    "../../reference_account/contract.py"
  ],
  "mappings": ";;;;;;;;AASA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;AAQe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAYA;;;AAEU;;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x151f7c75"
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "10": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "13": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "16": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "17": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "19": {
      "op": "assert",
      "stack_out": []
    },
    "20": {
      "op": "pushbytess 0x4c5bca2c 0xdc562ebc // method \"get_account_balance()uint64\", method \"get_account_balance_with_argument(address)uint64\"",
      "defined_out": [
        "Method(get_account_balance()uint64)",
        "Method(get_account_balance_with_argument(address)uint64)"
      ],
      "stack_out": [
        "Method(get_account_balance()uint64)",
        "Method(get_account_balance_with_argument(address)uint64)"
      ]
    },
    "32": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_account_balance()uint64)",
        "Method(get_account_balance_with_argument(address)uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(get_account_balance()uint64)",
        "Method(get_account_balance_with_argument(address)uint64)",
        "tmp%6#0"
      ]
    },
    "35": {
      "op": "match get_account_balance get_account_balance_with_argument",
      "stack_out": []
    },
    "41": {
      "op": "err"
    },
    "42": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "44": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "45": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "48": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "49": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "50": {
      "subroutine": "smart_contracts.reference_account.contract.ReferenceAccount.get_account_balance[routing]",
      "params": {},
      "block": "get_account_balance",
      "stack_in": [],
      "op": "pushbytes base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M",
      "defined_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ],
      "stack_out": [
        "Address(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M)"
      ]
    },
    "84": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "86": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "87": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "88": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "89": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "90": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "91": {
      "op": "log",
      "stack_out": []
    },
    "92": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "94": {
      "op": "return",
      "stack_out": []
    },
    "95": {
      "subroutine": "smart_contracts.reference_account.contract.ReferenceAccount.get_account_balance_with_argument[routing]",
      "params": {},
      "block": "get_account_balance_with_argument",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "account#0"
      ],
      "stack_out": [
        "account#0"
      ]
    },
    "98": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "100": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "101": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "102": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "103": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "104": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "105": {
      "op": "log",
      "stack_out": []
    },
    "106": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "108": {
      "op": "return",
      "stack_out": []
    }
  }
}