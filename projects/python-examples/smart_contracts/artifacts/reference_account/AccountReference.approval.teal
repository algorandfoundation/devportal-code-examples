#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    bytecblock 0x151f7c75
    // smart_contracts/reference_account/contract.py:5
    // class AccountReference(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x4c5bca2c 0x283075ce // method "get_account_balance()uint64", method "get_account_balance_with_arg(account)uint64"
    txna ApplicationArgs 0
    match main_get_account_balance_route@3 main_get_account_balance_with_arg_route@4

main_after_if_else@11:
    // smart_contracts/reference_account/contract.py:5
    // class AccountReference(ARC4Contract):
    pushint 0 // 0
    return

main_get_account_balance_with_arg_route@4:
    // smart_contracts/reference_account/contract.py:13
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/reference_account/contract.py:5
    // class AccountReference(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/reference_account/contract.py:13
    // @abimethod
    callsub get_account_balance_with_arg
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return

main_get_account_balance_route@3:
    // smart_contracts/reference_account/contract.py:7
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_account_balance
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return

main_bare_routing@7:
    // smart_contracts/reference_account/contract.py:5
    // class AccountReference(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    pushint 1 // 1
    return


// smart_contracts.reference_account.contract.AccountReference.get_account_balance() -> uint64:
get_account_balance:
    // smart_contracts/reference_account/contract.py:9-11
    // return Account(
    //     "WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M"
    // ).balance  # Replace with your account address
    pushbytes base32(WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRA) // addr WMHF4FLJNKY2BPFK7YPV5ID6OZ7LVDB2B66ZTXEAMLL2NX4WJZRJFVX66M
    acct_params_get AcctBalance
    assert // account funded
    retsub


// smart_contracts.reference_account.contract.AccountReference.get_account_balance_with_arg(acct: bytes) -> uint64:
get_account_balance_with_arg:
    // smart_contracts/reference_account/contract.py:13-14
    // @abimethod
    // def get_account_balance_with_arg(self, acct: Account) -> UInt64:
    proto 1 1
    // smart_contracts/reference_account/contract.py:15
    // return acct.balance
    frame_dig -1
    acct_params_get AcctBalance
    assert // account funded
    retsub
