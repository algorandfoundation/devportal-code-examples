#pragma version 10

smart_contracts.control_flow.contract.IfElseExample.approval_program:
    callsub __puya_arc4_router__
    return


// smart_contracts.control_flow.contract.IfElseExample.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@6
    method "is_rich(uint64)string"
    method "is_even(uint64)string"
    txna ApplicationArgs 0
    match __puya_arc4_router___is_rich_route@2 __puya_arc4_router___is_even_route@3
    int 0
    retsub

__puya_arc4_router___is_rich_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub is_rich
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___is_even_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub is_even
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___bare_routing@6:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@10
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@10:
    int 0
    retsub


// smart_contracts.control_flow.contract.IfElseExample.is_rich(account_balance: uint64) -> bytes:
is_rich:
    proto 1 1
    frame_dig -1
    int 1000
    >
    bz is_rich_else_body@2
    byte "This account is rich!"
    retsub

is_rich_else_body@2:
    frame_dig -1
    int 100
    >
    bz is_rich_else_body@4
    byte "This account is doing well."
    retsub

is_rich_else_body@4:
    byte "This account is poor :("
    retsub


// smart_contracts.control_flow.contract.IfElseExample.is_even(number: uint64) -> bytes:
is_even:
    proto 1 1
    frame_dig -1
    int 2
    %
    bnz is_even_ternary_false@2
    byte "Even"
    b is_even_ternary_merge@3

is_even_ternary_false@2:
    byte "Odd"

is_even_ternary_merge@3:
    retsub
