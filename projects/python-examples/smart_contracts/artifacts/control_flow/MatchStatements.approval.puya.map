{
  "version": 3,
  "sources": [
    "../../control_flow/contract.py"
  ],
  "mappings": ";AAqDA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;;AAAA;AAEG;;;;;;;;;;;;;;;;AAgBe;;;;;;;;;;;;;AAlBlB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAgBkB;;;;;;;;AAhBlB;;;AAckB;;;;;;;;;;AAdlB;;;AAYkB;;;;;;;;AAZlB;;;AAUkB;;;;;;;;;;AAVlB;;;AAQkB;;;;;;;;;;;AARlB;;;AAMkB;;;;;;;;;AANlB;;;AAIkB;;;;;;;;AAJlB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "6": {
      "op": "pushbytes 0xe5a4ea52 // method \"get_day(uint64)string\"",
      "defined_out": [
        "Method(get_day(uint64)string)"
      ],
      "stack_out": [
        "Method(get_day(uint64)string)"
      ]
    },
    "12": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_day(uint64)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(get_day(uint64)string)",
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "match main_get_day_route@3",
      "stack_out": []
    },
    "19": {
      "op": "err"
    },
    "20": {
      "block": "main_get_day_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "22": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "23": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "25": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "26": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "27": {
      "op": "b get_day"
    },
    "30": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "32": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "36": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "37": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "38": {
      "subroutine": "smart_contracts.control_flow.contract.MatchStatements.get_day[routing]",
      "params": {},
      "block": "get_day",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "41": {
      "op": "btoi",
      "defined_out": [
        "date#0"
      ],
      "stack_out": [
        "date#0"
      ]
    },
    "42": {
      "op": "switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8",
      "stack_out": []
    },
    "58": {
      "op": "pushbytes \"Invalid day\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "71": {
      "block": "get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "72": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "73": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "74": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "79": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "86": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "87": {
      "op": "log",
      "stack_out": []
    },
    "88": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "block": "get_day_switch_case_6@8",
      "stack_in": [],
      "op": "pushbytes \"Sunday\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "99": {
      "op": "b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
    },
    "102": {
      "block": "get_day_switch_case_5@7",
      "stack_in": [],
      "op": "pushbytes \"Saturday\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "112": {
      "op": "b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
    },
    "115": {
      "block": "get_day_switch_case_4@6",
      "stack_in": [],
      "op": "pushbytes \"Friday\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "123": {
      "op": "b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
    },
    "126": {
      "block": "get_day_switch_case_3@5",
      "stack_in": [],
      "op": "pushbytes \"Thursday\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "136": {
      "op": "b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
    },
    "139": {
      "block": "get_day_switch_case_2@4",
      "stack_in": [],
      "op": "pushbytes \"Wednesday\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "150": {
      "op": "b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
    },
    "153": {
      "block": "get_day_switch_case_1@3",
      "stack_in": [],
      "op": "pushbytes \"Tuesday\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "162": {
      "op": "b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
    },
    "165": {
      "block": "get_day_switch_case_0@2",
      "stack_in": [],
      "op": "pushbytes \"Monday\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "173": {
      "op": "b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
    }
  }
}