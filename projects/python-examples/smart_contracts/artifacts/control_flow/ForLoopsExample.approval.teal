#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    // smart_contracts/control_flow/contract.py:29
    // class ForLoopsExample(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    pushbytes 0x91d632fb // method "for_loop()uint8[4]"
    txna ApplicationArgs 0
    match main_for_loop_route@3

main_after_if_else@10:
    // smart_contracts/control_flow/contract.py:29
    // class ForLoopsExample(ARC4Contract):
    intc_1 // 0
    return

main_for_loop_route@3:
    // smart_contracts/control_flow/contract.py:31-32
    // # urange: reversed items, forward index
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub for_loop
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@6:
    // smart_contracts/control_flow/contract.py:29
    // class ForLoopsExample(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts.control_flow.contract.ForLoopsExample.for_loop() -> bytes:
for_loop:
    // smart_contracts/control_flow/contract.py:31-33
    // # urange: reversed items, forward index
    // @arc4.abimethod
    // def for_loop(self) -> FourArray:
    proto 0 1
    // smart_contracts/control_flow/contract.py:34
    // array = FourArray(arc4.UInt8(0), arc4.UInt8(0), arc4.UInt8(0), arc4.UInt8(0))
    pushbytess "" 0x00000000 // "", 0x00000000
    // smart_contracts/control_flow/contract.py:36
    // for index, item in uenumerate(reversed(urange(4))):  # [3, 2, 1, 0]
    pushint 3 // 3
    intc_1 // 0

for_loop_for_body@2:
    // smart_contracts/control_flow/contract.py:37
    // array[index] = arc4.UInt8(item)
    frame_dig 2
    dup
    itob
    extract 7 1
    frame_dig 3
    dup
    pushint 4 // 4
    <
    assert // Index access is out of bounds
    frame_dig 1
    swap
    uncover 2
    replace3
    frame_bury 1
    // smart_contracts/control_flow/contract.py:36
    // for index, item in uenumerate(reversed(urange(4))):  # [3, 2, 1, 0]
    bz for_loop_after_for@5
    frame_dig 2
    intc_0 // 1
    -
    frame_bury 2
    frame_dig 3
    intc_0 // 1
    +
    frame_bury 3
    b for_loop_for_body@2

for_loop_after_for@5:
    // smart_contracts/control_flow/contract.py:39
    // x = UInt64(0)
    intc_1 // 0
    frame_bury 0
    // smart_contracts/control_flow/contract.py:41
    // for item in urange(1, 5):  # [1, 2, 3, 4]
    intc_0 // 1
    frame_bury 2

for_loop_for_header@6:
    // smart_contracts/control_flow/contract.py:41
    // for item in urange(1, 5):  # [1, 2, 3, 4]
    frame_dig 2
    pushint 5 // 5
    <
    bz for_loop_after_for@9
    // smart_contracts/control_flow/contract.py:42
    // x += item
    frame_dig 0
    frame_dig 2
    dup
    cover 2
    +
    frame_bury 0
    // smart_contracts/control_flow/contract.py:41
    // for item in urange(1, 5):  # [1, 2, 3, 4]
    intc_0 // 1
    +
    frame_bury 2
    b for_loop_for_header@6

for_loop_after_for@9:
    // smart_contracts/control_flow/contract.py:44
    // assert x == 10
    frame_dig 0
    pushint 10 // 10
    ==
    assert
    // smart_contracts/control_flow/contract.py:46
    // return array
    frame_dig 1
    frame_bury 0
    retsub
