#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0
    // smart_contracts/control_flow/contract.py:31
    // class ForLoopsExample(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@5
    pushbytes 0x91d632fb // method "for_loop()uint8[4]"
    txna ApplicationArgs 0
    match main_for_loop_route@3
    err

main_for_loop_route@3:
    // smart_contracts/control_flow/contract.py:32-33
    // # urange: reversed items, forward index
    // @arc4.abimethod
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b for_loop

main___algopy_default_create@5:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.control_flow.contract.ForLoopsExample.for_loop[routing]() -> void:
for_loop:
    // smart_contracts/control_flow/contract.py:35
    // array = FourArray(arc4.UInt8(0), arc4.UInt8(0), arc4.UInt8(0), arc4.UInt8(0))
    pushbytess "" 0x00000000 // "", 0x00000000
    // smart_contracts/control_flow/contract.py:37
    // for index, item in uenumerate(reversed(urange(4))):  # [3, 2, 1, 0]
    pushint 3 // 3
    intc_1 // 0

for_loop_for_body@3:
    // smart_contracts/control_flow/contract.py:38
    // array[index] = arc4.UInt8(item)
    dig 1
    dup
    itob
    dup
    bitlen
    pushint 8 // 8
    <=
    assert // overflow
    extract 7 1
    dig 4
    dig 3
    uncover 2
    replace3 // on error: index access is out of bounds
    bury 4
    // smart_contracts/control_flow/contract.py:37
    // for index, item in uenumerate(reversed(urange(4))):  # [3, 2, 1, 0]
    bz for_loop_after_for@6
    dig 1
    intc_0 // 1
    -
    bury 2
    dup
    intc_0 // 1
    +
    bury 1
    b for_loop_for_body@3

for_loop_after_for@6:
    // smart_contracts/control_flow/contract.py:40
    // x = UInt64(0)
    intc_1 // 0
    bury 4
    // smart_contracts/control_flow/contract.py:42
    // for item in urange(1, 5):  # [1, 2, 3, 4]
    intc_0 // 1
    bury 2

for_loop_for_header@7:
    // smart_contracts/control_flow/contract.py:42
    // for item in urange(1, 5):  # [1, 2, 3, 4]
    dig 1
    pushint 5 // 5
    <
    bz for_loop_after_for@10
    // smart_contracts/control_flow/contract.py:43
    // x += item
    dig 3
    dig 2
    dup
    cover 2
    +
    bury 5
    // smart_contracts/control_flow/contract.py:42
    // for item in urange(1, 5):  # [1, 2, 3, 4]
    intc_0 // 1
    +
    bury 2
    b for_loop_for_header@7

for_loop_after_for@10:
    // smart_contracts/control_flow/contract.py:45
    // assert x == 10
    dig 3
    pushint 10 // 10
    ==
    assert
    // smart_contracts/control_flow/contract.py:32-33
    // # urange: reversed items, forward index
    // @arc4.abimethod
    pushbytes 0x151f7c75
    dig 3
    concat
    log
    intc_0 // 1
    return
