{
  "version": 3,
  "sources": [
    "../../control_flow/contract.py"
  ],
  "mappings": ";;;;AA+EA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAES;;;;AAGd;;AAAA;;;AACe;;AAAM;;AAAN;AAAf;;;AACgB;;AAAO;AAAP;AAAA;;AACA;AAAc;AAAd;AAAA;;AACA;;;AAEJ;;AAAO;;AAAP;AAAA;AAAA;;AACA;;AAAc;AAAd;AAAA;;AAEU;AAAP;AAAf;;;AAdK;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "9": {
      "op": "pushbytes 0xf82a2654 // method \"loop()uint64\"",
      "defined_out": [
        "Method(loop()uint64)"
      ],
      "stack_out": [
        "Method(loop()uint64)"
      ]
    },
    "15": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(loop()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(loop()uint64)",
        "tmp%2#0"
      ]
    },
    "18": {
      "op": "match main_loop_route@3",
      "stack_out": []
    },
    "22": {
      "op": "err"
    },
    "23": {
      "block": "main_loop_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "25": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "26": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "28": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "29": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "30": {
      "op": "b loop"
    },
    "33": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "36": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "38": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "39": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "40": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "41": {
      "subroutine": "smart_contracts.control_flow.contract.WhileLoopExample.loop[routing]",
      "params": {},
      "block": "loop",
      "stack_in": [],
      "op": "pushints 10 0 // 10, 0",
      "defined_out": [
        "loop_count#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0"
      ]
    },
    "45": {
      "block": "loop_while_top@2",
      "stack_in": [
        "num#0",
        "loop_count#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0"
      ]
    },
    "47": {
      "op": "bz loop_after_while@8",
      "stack_out": [
        "num#0",
        "loop_count#0"
      ]
    },
    "50": {
      "op": "dig 1",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0"
      ]
    },
    "52": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0",
        "5"
      ]
    },
    "54": {
      "op": ">",
      "defined_out": [
        "num#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "tmp%1#1"
      ]
    },
    "55": {
      "op": "bz loop_after_if_else@5",
      "stack_out": [
        "num#0",
        "loop_count#0"
      ]
    },
    "58": {
      "op": "dig 1",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0"
      ]
    },
    "60": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0",
        "1"
      ]
    },
    "61": {
      "op": "-",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0"
      ]
    },
    "62": {
      "op": "bury 2",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0"
      ]
    },
    "64": {
      "op": "dup",
      "defined_out": [
        "loop_count#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "loop_count#0"
      ]
    },
    "65": {
      "op": "intc_0 // 1",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "loop_count#0",
        "1"
      ]
    },
    "66": {
      "op": "+",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "loop_count#0"
      ]
    },
    "67": {
      "op": "bury 1",
      "defined_out": [
        "loop_count#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0"
      ]
    },
    "69": {
      "op": "b loop_while_top@2"
    },
    "72": {
      "block": "loop_after_if_else@5",
      "stack_in": [
        "num#0",
        "loop_count#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0"
      ]
    },
    "74": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0",
        "2"
      ]
    },
    "76": {
      "op": "-",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0"
      ]
    },
    "77": {
      "op": "dup",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0",
        "num#0"
      ]
    },
    "78": {
      "op": "bury 3",
      "defined_out": [
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0"
      ]
    },
    "80": {
      "op": "dig 1",
      "defined_out": [
        "loop_count#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0",
        "loop_count#0"
      ]
    },
    "82": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "loop_count#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0",
        "loop_count#0",
        "1"
      ]
    },
    "83": {
      "op": "+",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0",
        "loop_count#0"
      ]
    },
    "84": {
      "op": "bury 2",
      "defined_out": [
        "loop_count#0",
        "num#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0"
      ]
    },
    "86": {
      "op": "intc_0 // 1",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "num#0",
        "1"
      ]
    },
    "87": {
      "op": "==",
      "defined_out": [
        "loop_count#0",
        "num#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "tmp%6#0"
      ]
    },
    "88": {
      "op": "bz loop_while_top@2",
      "stack_out": [
        "num#0",
        "loop_count#0"
      ]
    },
    "91": {
      "block": "loop_after_while@8",
      "stack_in": [
        "num#0",
        "loop_count#0"
      ],
      "op": "dup",
      "defined_out": [
        "loop_count#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "loop_count#0"
      ]
    },
    "92": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "loop_count#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "93": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "loop_count#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "num#0",
        "loop_count#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "loop_count#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "tmp%2#0"
      ]
    },
    "101": {
      "op": "log",
      "stack_out": [
        "num#0",
        "loop_count#0"
      ]
    },
    "102": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "loop_count#0"
      ],
      "stack_out": [
        "num#0",
        "loop_count#0",
        "1"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": [
        "num#0",
        "loop_count#0"
      ]
    }
  }
}