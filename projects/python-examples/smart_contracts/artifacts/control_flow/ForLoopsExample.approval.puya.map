{
  "version": 3,
  "sources": [
    "../../control_flow/contract.py"
  ],
  "mappings": ";;;;;AA8BA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAEK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAEW;;;;;;;;AAE+B;;;AACpB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAf;;AAAA;;AAAA;;AAAA;AAAA;;AADZ;;;AAA+C;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;AAGnC;AAAJ;;AAEmB;;;AAA3B;;AAA8B;;AAA9B;AAAA;;;AACY;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AADQ;AAAA;;;;;;AAGL;;AAAK;;AAAL;AAAP;AAZH;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "10": {
      "op": "pushbytes 0x91d632fb // method \"for_loop()uint8[4]\"",
      "defined_out": [
        "Method(for_loop()uint8[4])"
      ],
      "stack_out": [
        "Method(for_loop()uint8[4])"
      ]
    },
    "16": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(for_loop()uint8[4])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(for_loop()uint8[4])",
        "tmp%2#0"
      ]
    },
    "19": {
      "op": "match main_for_loop_route@3",
      "stack_out": []
    },
    "23": {
      "op": "err"
    },
    "24": {
      "block": "main_for_loop_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "26": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "27": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "29": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "30": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "31": {
      "op": "b for_loop"
    },
    "34": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "36": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "39": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "40": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "41": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "42": {
      "subroutine": "smart_contracts.control_flow.contract.ForLoopsExample.for_loop[routing]",
      "params": {},
      "block": "for_loop",
      "stack_in": [],
      "op": "pushbytess \"\" 0x00000000 // \"\", 0x00000000",
      "stack_out": [
        "x#0"
      ]
    },
    "50": {
      "op": "pushint 3 // 3"
    },
    "52": {
      "op": "intc_1 // 0",
      "defined_out": [
        "array#0",
        "index#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "53": {
      "block": "for_loop_for_body@3",
      "stack_in": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0"
      ]
    },
    "55": {
      "op": "dup",
      "defined_out": [
        "item#0",
        "item#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "item#0 (copy)"
      ]
    },
    "56": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "57": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "58": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "59": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "61": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "62": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "63": {
      "op": "extract 7 1",
      "defined_out": [
        "aggregate%uint8%0#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%uint8%0#0"
      ]
    },
    "66": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%uint8%0#0",
        "array#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%uint8%0#0",
        "array#0"
      ]
    },
    "68": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%uint8%0#0",
        "array#0",
        "index#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "aggregate%uint8%0#0",
        "array#0",
        "index#0"
      ]
    },
    "70": {
      "op": "uncover 2",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "array#0",
        "index#0",
        "aggregate%uint8%0#0"
      ]
    },
    "72": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "array#0"
      ]
    },
    "73": {
      "op": "bury 4",
      "defined_out": [
        "array#0",
        "index#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0"
      ]
    },
    "75": {
      "op": "bz for_loop_after_for@6",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "78": {
      "op": "dig 1",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0"
      ]
    },
    "80": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "array#0",
        "index#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "1"
      ]
    },
    "81": {
      "op": "-",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0"
      ]
    },
    "82": {
      "op": "bury 2",
      "defined_out": [
        "array#0",
        "index#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "84": {
      "op": "dup",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "index#0"
      ]
    },
    "85": {
      "op": "intc_0 // 1",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "index#0",
        "1"
      ]
    },
    "86": {
      "op": "+",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "index#0"
      ]
    },
    "87": {
      "op": "bury 1",
      "defined_out": [
        "array#0",
        "index#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "89": {
      "op": "b for_loop_for_body@3"
    },
    "92": {
      "block": "for_loop_after_for@6",
      "stack_in": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "x#0"
      ]
    },
    "93": {
      "op": "bury 4",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "95": {
      "op": "intc_0 // 1",
      "defined_out": [
        "item#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0"
      ]
    },
    "96": {
      "op": "bury 2",
      "defined_out": [
        "item#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "98": {
      "block": "for_loop_for_header@7",
      "stack_in": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0"
      ]
    },
    "100": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "5"
      ]
    },
    "102": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "item#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "continue_looping%1#0"
      ]
    },
    "103": {
      "op": "bz for_loop_after_for@10",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "106": {
      "op": "dig 3",
      "defined_out": [
        "item#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "x#0"
      ]
    },
    "108": {
      "op": "dig 2",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "x#0",
        "item#0"
      ]
    },
    "110": {
      "op": "dup",
      "defined_out": [
        "item#0",
        "item#0 (copy)",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "x#0",
        "item#0 (copy)",
        "item#0 (copy)"
      ]
    },
    "111": {
      "op": "cover 2",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "x#0",
        "item#0 (copy)"
      ]
    },
    "113": {
      "op": "+",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "x#0"
      ]
    },
    "114": {
      "op": "bury 5",
      "defined_out": [
        "item#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0"
      ]
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0",
        "1"
      ]
    },
    "117": {
      "op": "+",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "item#0"
      ]
    },
    "118": {
      "op": "bury 2",
      "defined_out": [
        "item#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "120": {
      "op": "b for_loop_for_header@7"
    },
    "123": {
      "block": "for_loop_after_for@10",
      "stack_in": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "x#0"
      ]
    },
    "125": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "x#0",
        "10"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "tmp%2#0"
      ]
    },
    "128": {
      "op": "assert",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "129": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "0x151f7c75"
      ]
    },
    "135": {
      "op": "dig 3",
      "defined_out": [
        "0x151f7c75",
        "array#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "0x151f7c75",
        "array#0"
      ]
    },
    "137": {
      "op": "concat",
      "defined_out": [
        "array#0",
        "tmp%1#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "tmp%1#0"
      ]
    },
    "138": {
      "op": "log",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    },
    "139": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "array#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0",
        "1"
      ]
    },
    "140": {
      "op": "return",
      "stack_out": [
        "x#0",
        "array#0",
        "item#0",
        "index#0"
      ]
    }
  }
}