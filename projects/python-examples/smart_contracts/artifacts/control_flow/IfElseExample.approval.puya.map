{
  "version": 3,
  "sources": [
    "../../control_flow/contract.py"
  ],
  "mappings": ";;;;;;;;AAMA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAWK;;AAAA;AAAA;AAAA;;AAAA;AAXL;;;AAAA;AAWK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAFL;;;AAAA;AAEK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAFL;;AAAA;;;;;;;;;;AAEA;;;AAEW;;AAAkB;;;AAAlB;AAAX;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;AAAP;AACC;;AAAkB;;AAAlB;AAAb;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEZ;;;AAEiC;;AAAS;;AAAT;AAAlB;;;AAAA;;;;;;AAAP;AAA8C;;;;;AAA9C",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x151f7c75"
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "10": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0x37c01090 0x6632c2d6 // method \"is_rich(uint64)string\", method \"is_even(uint64)string\""
    },
    "25": {
      "op": "txna ApplicationArgs 0"
    },
    "28": {
      "op": "match main_is_rich_route@3 main_is_even_route@4"
    },
    "34": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "36": {
      "op": "return"
    },
    "37": {
      "block": "main_is_even_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "39": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "40": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "41": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "43": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "44": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "47": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "48": {
      "callsub": "smart_contracts.control_flow.contract.IfElseExample.is_even",
      "op": "callsub is_even",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "51": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "52": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%1#0"
      ]
    },
    "53": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%1#0"
      ]
    },
    "54": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%1#0"
      ]
    },
    "57": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%1#0"
      ]
    },
    "58": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "59": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "60": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "61": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "62": {
      "op": "log",
      "stack_out": []
    },
    "63": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "65": {
      "op": "return"
    },
    "66": {
      "block": "main_is_rich_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "68": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "69": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "70": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "72": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "73": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "76": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "77": {
      "callsub": "smart_contracts.control_flow.contract.IfElseExample.is_rich",
      "op": "callsub is_rich",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "80": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "81": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "82": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "83": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "86": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "88": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "89": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "90": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "91": {
      "op": "log",
      "stack_out": []
    },
    "92": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "94": {
      "op": "return"
    },
    "95": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "97": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "100": {
      "op": "txn ApplicationID"
    },
    "102": {
      "op": "!"
    },
    "103": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "104": {
      "op": "pushint 1 // 1"
    },
    "106": {
      "op": "return"
    },
    "107": {
      "subroutine": "smart_contracts.control_flow.contract.IfElseExample.is_rich",
      "params": {
        "account_balance#0": "uint64"
      },
      "block": "is_rich",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "110": {
      "op": "frame_dig -1",
      "defined_out": [
        "account_balance#0 (copy)"
      ],
      "stack_out": [
        "account_balance#0 (copy)"
      ]
    },
    "112": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "account_balance#0 (copy)"
      ],
      "stack_out": [
        "account_balance#0 (copy)",
        "1000"
      ]
    },
    "115": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "116": {
      "op": "bz is_rich_else_body@2",
      "stack_out": []
    },
    "119": {
      "op": "pushbytes \"This account is rich!\""
    },
    "142": {
      "retsub": true,
      "op": "retsub"
    },
    "143": {
      "block": "is_rich_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "account_balance#0 (copy)"
      ],
      "stack_out": [
        "account_balance#0 (copy)"
      ]
    },
    "145": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "account_balance#0 (copy)"
      ],
      "stack_out": [
        "account_balance#0 (copy)",
        "100"
      ]
    },
    "147": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "148": {
      "op": "bz is_rich_else_body@4",
      "stack_out": []
    },
    "151": {
      "op": "pushbytes \"This account is doing well.\""
    },
    "180": {
      "retsub": true,
      "op": "retsub"
    },
    "181": {
      "block": "is_rich_else_body@4",
      "stack_in": [],
      "op": "pushbytes \"This account is poor :(\"",
      "defined_out": [
        "\"This account is poor :(\""
      ],
      "stack_out": [
        "\"This account is poor :(\""
      ]
    },
    "206": {
      "retsub": true,
      "op": "retsub"
    },
    "207": {
      "subroutine": "smart_contracts.control_flow.contract.IfElseExample.is_even",
      "params": {
        "number#0": "uint64"
      },
      "block": "is_even",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "210": {
      "op": "frame_dig -1",
      "defined_out": [
        "number#0 (copy)"
      ],
      "stack_out": [
        "number#0 (copy)"
      ]
    },
    "212": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "number#0 (copy)"
      ],
      "stack_out": [
        "number#0 (copy)",
        "2"
      ]
    },
    "214": {
      "op": "%",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "bnz is_even_ternary_false@2",
      "stack_out": []
    },
    "218": {
      "op": "pushbytes \"Even\""
    },
    "224": {
      "retsub": true,
      "op": "retsub"
    },
    "225": {
      "block": "is_even_ternary_false@2",
      "stack_in": [],
      "op": "pushbytes \"Odd\"",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "230": {
      "retsub": true,
      "op": "retsub"
    }
  }
}