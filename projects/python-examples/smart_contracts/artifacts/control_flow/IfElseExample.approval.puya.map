{
  "version": 3,
  "sources": [
    "../../control_flow/contract.py"
  ],
  "mappings": ";;;;;;;;AAKA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;AAEK;;;AAAA;AAAA;AAEwB;;;AAAlB;AAAX;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;AAHd;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAIQ;AAAkB;;AAAlB;AAAb;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALd;;;AAOc;;;;;;;;;;;;;;;;;;;;;;;;;AAPd;;;AAYA;;;AAAA;AAEqC;;AAAT;AAAlB;;;AAAA;;;;;;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEiD;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x151f7c75"
    },
    "8": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "10": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "13": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "16": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "17": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "19": {
      "op": "assert",
      "stack_out": []
    },
    "20": {
      "op": "pushbytess 0x37c01090 0x6632c2d6 // method \"is_rich(uint64)string\", method \"is_even(uint64)string\"",
      "defined_out": [
        "Method(is_even(uint64)string)",
        "Method(is_rich(uint64)string)"
      ],
      "stack_out": [
        "Method(is_rich(uint64)string)",
        "Method(is_even(uint64)string)"
      ]
    },
    "32": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(is_even(uint64)string)",
        "Method(is_rich(uint64)string)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(is_rich(uint64)string)",
        "Method(is_even(uint64)string)",
        "tmp%6#0"
      ]
    },
    "35": {
      "op": "match is_rich is_even",
      "stack_out": []
    },
    "41": {
      "op": "err"
    },
    "42": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "44": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "45": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "48": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "49": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "50": {
      "subroutine": "smart_contracts.control_flow.contract.IfElseExample.is_rich[routing]",
      "params": {},
      "block": "is_rich",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "53": {
      "op": "btoi",
      "defined_out": [
        "account_balance#0"
      ],
      "stack_out": [
        "account_balance#0"
      ]
    },
    "54": {
      "op": "dup",
      "defined_out": [
        "account_balance#0"
      ],
      "stack_out": [
        "account_balance#0",
        "account_balance#0"
      ]
    },
    "55": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "account_balance#0"
      ],
      "stack_out": [
        "account_balance#0",
        "account_balance#0",
        "1000"
      ]
    },
    "58": {
      "op": ">",
      "defined_out": [
        "account_balance#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%0#1"
      ]
    },
    "59": {
      "op": "bz is_rich_else_body@3",
      "stack_out": [
        "account_balance#0"
      ]
    },
    "62": {
      "op": "pushbytes \"This account is rich!\"",
      "defined_out": [
        "account_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%1#0"
      ]
    },
    "85": {
      "block": "is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6",
      "stack_in": [
        "account_balance#0",
        "tmp%1#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "86": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "87": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "88": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "91": {
      "op": "swap",
      "stack_out": [
        "account_balance#0",
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "92": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "account_balance#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "93": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "account_balance#0",
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "94": {
      "op": "swap",
      "stack_out": [
        "account_balance#0",
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "95": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%3#0"
      ]
    },
    "96": {
      "op": "log",
      "stack_out": [
        "account_balance#0"
      ]
    },
    "97": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "account_balance#0",
        "1"
      ]
    },
    "99": {
      "op": "return",
      "stack_out": [
        "account_balance#0"
      ]
    },
    "100": {
      "block": "is_rich_else_body@3",
      "stack_in": [
        "account_balance#0"
      ],
      "op": "dup",
      "defined_out": [
        "account_balance#0"
      ],
      "stack_out": [
        "account_balance#0",
        "account_balance#0"
      ]
    },
    "101": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "account_balance#0"
      ],
      "stack_out": [
        "account_balance#0",
        "account_balance#0",
        "100"
      ]
    },
    "103": {
      "op": ">",
      "defined_out": [
        "account_balance#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%1#1"
      ]
    },
    "104": {
      "op": "bz is_rich_else_body@5",
      "stack_out": [
        "account_balance#0"
      ]
    },
    "107": {
      "op": "pushbytes \"This account is doing well.\"",
      "defined_out": [
        "account_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%1#0"
      ]
    },
    "136": {
      "op": "b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
    },
    "139": {
      "block": "is_rich_else_body@5",
      "stack_in": [
        "account_balance#0"
      ],
      "op": "pushbytes \"This account is poor :(\"",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "account_balance#0",
        "tmp%1#0"
      ]
    },
    "164": {
      "op": "b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
    },
    "167": {
      "subroutine": "smart_contracts.control_flow.contract.IfElseExample.is_even[routing]",
      "params": {},
      "block": "is_even",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "170": {
      "op": "btoi",
      "defined_out": [
        "number#0"
      ],
      "stack_out": [
        "number#0"
      ]
    },
    "171": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "number#0"
      ],
      "stack_out": [
        "number#0",
        "2"
      ]
    },
    "173": {
      "op": "%",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "174": {
      "op": "bnz is_even_ternary_false@3",
      "stack_out": []
    },
    "177": {
      "op": "pushbytes \"Even\"",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "183": {
      "block": "is_even_ternary_merge@4",
      "stack_in": [
        "ternary_result%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "ternary_result%0#0",
        "ternary_result%0#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "ternary_result%0#0 (copy)"
      ]
    },
    "184": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "aggregate%length%0#0"
      ]
    },
    "185": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "186": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "189": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "ternary_result%0#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "191": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "192": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "193": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "194": {
      "op": "log",
      "stack_out": []
    },
    "195": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": []
    },
    "198": {
      "block": "is_even_ternary_false@3",
      "stack_in": [],
      "op": "pushbytes \"Odd\"",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "203": {
      "op": "b is_even_ternary_merge@4"
    }
  }
}