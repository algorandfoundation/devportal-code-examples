{
    "name": "ForLoopsExample",
    "structs": {},
    "methods": [
        {
            "name": "for_loop",
            "args": [],
            "returns": {
                "type": "uint8[4]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        84
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        28
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        54
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        31
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cm9sX2Zsb3cvY29udHJhY3QucHk6MzEKICAgIC8vIGNsYXNzIEZvckxvb3BzRXhhbXBsZShBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDYKICAgIHB1c2hieXRlcyAweDkxZDYzMmZiIC8vIG1ldGhvZCAiZm9yX2xvb3AoKXVpbnQ4WzRdIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9mb3JfbG9vcF9yb3V0ZUAzCgptYWluX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJvbF9mbG93L2NvbnRyYWN0LnB5OjMxCiAgICAvLyBjbGFzcyBGb3JMb29wc0V4YW1wbGUoQVJDNENvbnRyYWN0KToKICAgIGludGNfMSAvLyAwCiAgICByZXR1cm4KCm1haW5fZm9yX2xvb3Bfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cm9sX2Zsb3cvY29udHJhY3QucHk6MzItMzMKICAgIC8vICMgdXJhbmdlOiByZXZlcnNlZCBpdGVtcywgZm9yd2FyZCBpbmRleAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZm9yX2xvb3AKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cm9sX2Zsb3cvY29udHJhY3QucHk6MzEKICAgIC8vIGNsYXNzIEZvckxvb3BzRXhhbXBsZShBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuY29udHJvbF9mbG93LmNvbnRyYWN0LkZvckxvb3BzRXhhbXBsZS5mb3JfbG9vcCgpIC0+IGJ5dGVzOgpmb3JfbG9vcDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cm9sX2Zsb3cvY29udHJhY3QucHk6MzItMzQKICAgIC8vICMgdXJhbmdlOiByZXZlcnNlZCBpdGVtcywgZm9yd2FyZCBpbmRleAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZm9yX2xvb3Aoc2VsZikgLT4gRm91ckFycmF5OgogICAgcHJvdG8gMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJvbF9mbG93L2NvbnRyYWN0LnB5OjM1CiAgICAvLyBhcnJheSA9IEZvdXJBcnJheShhcmM0LlVJbnQ4KDApLCBhcmM0LlVJbnQ4KDApLCBhcmM0LlVJbnQ4KDApLCBhcmM0LlVJbnQ4KDApKQogICAgcHVzaGJ5dGVzcyAiIiAweDAwMDAwMDAwIC8vICIiLCAweDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJvbF9mbG93L2NvbnRyYWN0LnB5OjM3CiAgICAvLyBmb3IgaW5kZXgsIGl0ZW0gaW4gdWVudW1lcmF0ZShyZXZlcnNlZCh1cmFuZ2UoNCkpKTogICMgWzMsIDIsIDEsIDBdCiAgICBwdXNoaW50IDMgLy8gMwogICAgaW50Y18xIC8vIDAKCmZvcl9sb29wX2Zvcl9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJvbF9mbG93L2NvbnRyYWN0LnB5OjM4CiAgICAvLyBhcnJheVtpbmRleF0gPSBhcmM0LlVJbnQ4KGl0ZW0pCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBpdG9iCiAgICBleHRyYWN0IDcgMQogICAgZnJhbWVfZGlnIDMKICAgIGR1cAogICAgcHVzaGludCA0IC8vIDQKICAgIDwKICAgIGFzc2VydCAvLyBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIDEKICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyb2xfZmxvdy9jb250cmFjdC5weTozNwogICAgLy8gZm9yIGluZGV4LCBpdGVtIGluIHVlbnVtZXJhdGUocmV2ZXJzZWQodXJhbmdlKDQpKSk6ICAjIFszLCAyLCAxLCAwXQogICAgYnogZm9yX2xvb3BfYWZ0ZXJfZm9yQDUKICAgIGZyYW1lX2RpZyAyCiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZnJhbWVfYnVyeSAyCiAgICBmcmFtZV9kaWcgMwogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBmb3JfbG9vcF9mb3JfYm9keUAyCgpmb3JfbG9vcF9hZnRlcl9mb3JANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cm9sX2Zsb3cvY29udHJhY3QucHk6NDAKICAgIC8vIHggPSBVSW50NjQoMCkKICAgIGludGNfMSAvLyAwCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9jb250cm9sX2Zsb3cvY29udHJhY3QucHk6NDIKICAgIC8vIGZvciBpdGVtIGluIHVyYW5nZSgxLCA1KTogICMgWzEsIDIsIDMsIDRdCiAgICBpbnRjXzAgLy8gMQogICAgZnJhbWVfYnVyeSAyCgpmb3JfbG9vcF9mb3JfaGVhZGVyQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJvbF9mbG93L2NvbnRyYWN0LnB5OjQyCiAgICAvLyBmb3IgaXRlbSBpbiB1cmFuZ2UoMSwgNSk6ICAjIFsxLCAyLCAzLCA0XQogICAgZnJhbWVfZGlnIDIKICAgIHB1c2hpbnQgNSAvLyA1CiAgICA8CiAgICBieiBmb3JfbG9vcF9hZnRlcl9mb3JAOQogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyb2xfZmxvdy9jb250cmFjdC5weTo0MwogICAgLy8geCArPSBpdGVtCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgY292ZXIgMgogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJvbF9mbG93L2NvbnRyYWN0LnB5OjQyCiAgICAvLyBmb3IgaXRlbSBpbiB1cmFuZ2UoMSwgNSk6ICAjIFsxLCAyLCAzLCA0XQogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMgogICAgYiBmb3JfbG9vcF9mb3JfaGVhZGVyQDYKCmZvcl9sb29wX2FmdGVyX2ZvckA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2NvbnRyb2xfZmxvdy9jb250cmFjdC5weTo0NQogICAgLy8gYXNzZXJ0IHggPT0gMTAKICAgIGZyYW1lX2RpZyAwCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvY29udHJvbF9mbG93L2NvbnRyYWN0LnB5OjQ3CiAgICAvLyByZXR1cm4gYXJyYXkKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAxG0EAJIAEkdYy+zYaAI4BAAIjQzEZFEQxGESIABaABBUffHVMULAiQzEZQP/kMRgURCJDigABggIABAAAAACBAyOLAkkWVwcBiwNJgQQMRIsBTE8CXYwBQQAPiwIiCYwCiwMiCIwDQv/YI4wAIowCiwKBBQxBABGLAIsCSU4CCIwAIgiMAkL/54sAgQoSRIsBjACJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}