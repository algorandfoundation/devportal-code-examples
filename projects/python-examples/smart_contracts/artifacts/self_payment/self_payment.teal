#pragma version 11
#pragma typetrack false

// smart_contracts.self_payment.contract.self_payment() -> uint64:
main:
    intcblock 1 TMPL_LAST_ROUND
    bytecblock TMPL_TARGET_NETWORK_GENESIS
    // smart_contracts/self_payment/contract.py:20
    // Txn.type_enum == TransactionType.Payment
    txn TypeEnum
    intc_0 // pay
    ==
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bz main_bool_false@10
    // smart_contracts/self_payment/contract.py:21
    // and Txn.receiver == Txn.sender
    txn Receiver
    txn Sender
    ==
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bz main_bool_false@10
    // smart_contracts/self_payment/contract.py:22
    // and Txn.amount == 0
    txn Amount
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bnz main_bool_false@10
    // smart_contracts/self_payment/contract.py:23
    // and Txn.rekey_to == Global.zero_address
    txn RekeyTo
    global ZeroAddress
    ==
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bz main_bool_false@10
    // smart_contracts/self_payment/contract.py:24
    // and Txn.close_remainder_to == Global.zero_address
    txn CloseRemainderTo
    global ZeroAddress
    ==
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bz main_bool_false@10
    // smart_contracts/self_payment/contract.py:25
    // and Txn.fee == Global.min_txn_fee
    txn Fee
    global MinTxnFee
    ==
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bz main_bool_false@10
    // smart_contracts/self_payment/contract.py:26
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    global GenesisHash
    bytec_0 // TMPL_TARGET_NETWORK_GENESIS
    ==
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bz main_bool_false@10
    // smart_contracts/self_payment/contract.py:27-28
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    txn LastValid
    intc_1 // TMPL_LAST_ROUND
    ==
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bz main_bool_false@10
    // smart_contracts/self_payment/contract.py:29
    // and Txn.lease == op.sha256(b"self-payment")
    txn Lease
    pushbytes 0xd751a814da6b1673556450ce8f7de3c5cc2eb93ac6c1e54339682c0a8f0af709
    ==
    // smart_contracts/self_payment/contract.py:20-29
    // Txn.type_enum == TransactionType.Payment
    // and Txn.receiver == Txn.sender
    // and Txn.amount == 0
    // and Txn.rekey_to == Global.zero_address
    // and Txn.close_remainder_to == Global.zero_address
    // and Txn.fee == Global.min_txn_fee
    // and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    // # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    // and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    // and Txn.lease == op.sha256(b"self-payment")
    bz main_bool_false@10
    intc_0 // 1
    // smart_contracts/self_payment/contract.py:19-30
    // return (
    //     Txn.type_enum == TransactionType.Payment
    //     and Txn.receiver == Txn.sender
    //     and Txn.amount == 0
    //     and Txn.rekey_to == Global.zero_address
    //     and Txn.close_remainder_to == Global.zero_address
    //     and Txn.fee == Global.min_txn_fee
    //     and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    //     # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    //     and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    //     and Txn.lease == op.sha256(b"self-payment")
    // )
    return

main_bool_false@10:
    pushint 0 // 0
    // smart_contracts/self_payment/contract.py:19-30
    // return (
    //     Txn.type_enum == TransactionType.Payment
    //     and Txn.receiver == Txn.sender
    //     and Txn.amount == 0
    //     and Txn.rekey_to == Global.zero_address
    //     and Txn.close_remainder_to == Global.zero_address
    //     and Txn.fee == Global.min_txn_fee
    //     and Global.genesis_hash == TemplateVar[Bytes]("TARGET_NETWORK_GENESIS")
    //     # Acquiring a lease with last_round and a non-empty lease field prevents replay attacks.
    //     and Txn.last_valid == TemplateVar[UInt64]("LAST_ROUND")
    //     and Txn.lease == op.sha256(b"self-payment")
    // )
    return
