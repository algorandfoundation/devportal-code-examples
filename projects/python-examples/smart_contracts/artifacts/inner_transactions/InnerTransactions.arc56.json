{
    "name": "InnerTransactions",
    "structs": {},
    "methods": [
        {
            "name": "payment",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fungible_asset_create",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "non_fungible_asset_create",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Following the ARC3 standard, the total supply must be 1 for a non-fungible asset.\nIf you want to create fractional NFTs, `total` * `decimals` point must be 1. ex) total=100, decimals=2, 100 * 0.01 = 1",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_opt_in",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_transfer",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "account",
                    "name": "receiver"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_freeze",
            "args": [
                {
                    "type": "account",
                    "name": "acct_to_be_frozen"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_revoke",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "account",
                    "name": "account_to_be_revoked"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_config",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_delete",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "multi_inner_txns",
            "args": [
                {
                    "type": "application",
                    "name": "app_id"
                }
            ],
            "returns": {
                "type": "(uint64,string)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deploy_app",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "This method uses the itxn.ApplicationCall to deploy the HelloWorld contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4_deploy_app",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "This method uses the arc4.arc4_create to deploy the HelloWorld contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "noop_app_call",
            "args": [
                {
                    "type": "application",
                    "name": "app_id"
                }
            ],
            "returns": {
                "type": "(string,string)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        897,
                        974,
                        1013
                    ],
                    "errorMessage": "ARC4 prefix is valid"
                },
                {
                    "pc": [
                        227,
                        277,
                        294,
                        311,
                        342,
                        360,
                        378,
                        406,
                        430,
                        458,
                        476,
                        493,
                        510
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        532
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        230,
                        280,
                        297,
                        314,
                        345,
                        363,
                        381,
                        409,
                        433,
                        461,
                        479,
                        496,
                        513
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEGBCYFBBUffHUEAr7OEQcABVdvcmxkBAqBAUNWCjEbQQA0gAQCvs4RNhoAjgEAA4EAQzEZFEQxGEQ2GgFXAgCIACBJFRZXBgJMUIAEFR98dUxQsIEBQzEZQP/UMRgURIEBQ4oBAYAHSGVsbG8sIIv/UIkxG0EBkIINBCOVACcE6naJ8wT+JkcwBLbCsUgESxnf3QSpDmpPBMUEYoIEWEQA/wSp6BKlBA5zmBQENjF0XQQQqbECBJ0MXeE2GgCODQEdAQwA+wDpAM0AtQCZAIcAdQBWAEUANAACIkMxGRREMRhENhoBF8AyiAK9SRUWVwYCTFBLARUlCBZXBgKAAgAETFBPAlBMUChMULAjQzEZFEQxGESIAnwWKExQsCNDMRkURDEYRIgCVhYoTFCwI0MxGRREMRhENhoBF8AyiAIJTBaAAgAKUExQKExQsCNDMRkURDEYRDYaARfAMIgB2SNDMRkURDEYRDYaARfAMIgBqCNDMRkURDEYRDYaARfAMDYaAhfAHDYaAxeIAXAjQzEZFEQxGEQ2GgEXwBw2GgIXwDCIAUAjQzEZFEQxGEQ2GgEXwDA2GgIXwBw2GgMXiAEMI0MxGRREMRhENhoBF8AwiADjI0MxGRREMRhEiAB/FihMULAjQzEZFEQxGESIADoWKExQsCNDMRkURDEYRIgAEhYoTFCwI0MxGUD+zTEYFEQjQ4oAAbExALIHgYgnsggjshAisgGztAiJigABsYAOUm95YWx0eSBQb2ludHOyJoACUlCyJYECsiOBgNDbw/QCsiKBA7IQIrIBs7Q8iYoAAbEyCkcDsiyyK7IqsimAHmh0dHBzOi8vbGlua190b19pcGZzL01vbmFfTGlzYbIngAlNb25hIExpc2GyJoACTUyyJYECsiOBZLIigQOyECKyAbO0PImKAQCxMgoishKL/7IRshQlshAisgGziYoDALGL/7ISi/2yEYv+shQlshAisgGziYoCALEjsi+L/7Iti/6yLoEFshAisgGziYoDALEyCov/shKL/rITi/2yEbIUJbIQIrIBs4mKAQCxMgpJMQBJsiyyK7IqsimL/7IhgQOyECKyAbOJigEAsYv/siGBA7IQIrIBs4mKAQIxALGyB4GIJ7III7IQIrIBtimyGiqyGov/shgkshAisgGztwAItD5JVwQATFcABCgSRImKAAGxK7JCJwSyQCSyECKyAbO0PYmKAAGxK7JCJwSyQCSyECKyAbO0PYmKAQKxKbIaKrIai/+yGCSyECKyAbO0PklXBABMVwAEKBJEsYv/shgpshqABwAFYWdhaW6yGiSyECKyAbO0PklXBABMVwAEKBJEVwIAiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}