#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 2 1 0
    // smart_contracts/arc4_types/contract.py:165
    // class Arc4DynamicArray(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x8ad12a2b 0x02bece11 0x95d64116 // method "goodbye(string)string[]", method "hello(string)string", method "arc4_dynamic_bytes()byte[]"
    txna ApplicationArgs 0
    match goodbye hello main_arc4_dynamic_bytes_route@6
    err

main_arc4_dynamic_bytes_route@6:
    // smart_contracts/arc4_types/contract.py:196-197
    // # example: ARC4_DYNAMIC_BYTES
    // @abimethod()
    pushbytes 0x151f7c75000600ffffaabbff
    log
    intc_1 // 1
    return

main___algopy_default_create@10:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.arc4_types.contract.Arc4DynamicArray.goodbye[routing]() -> void:
goodbye:
    // smart_contracts/arc4_types/contract.py:166
    // @abimethod
    pushbytes 0x151f7c7500020004000f0009476f6f642062796520
    txna ApplicationArgs 1
    concat
    log
    intc_1 // 1
    return


// smart_contracts.arc4_types.contract.Arc4DynamicArray.hello[routing]() -> void:
hello:
    intc_2 // 0
    dup
    pushbytes ""
    dup
    // smart_contracts/arc4_types/contract.py:172
    // @abimethod()
    txna ApplicationArgs 1
    // smart_contracts/arc4_types/contract.py:180
    // extension = arc4.DynamicArray[arc4.String](name, arc4.String("!"))
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    pushbytes 0x00020004
    swap
    concat
    swap
    concat
    pushbytes 0x000121
    concat
    // smart_contracts/arc4_types/contract.py:181
    // dynamic_string_array.extend(extension)
    dup
    extract 2 0
    swap
    intc_2 // 0
    extract_uint16
    dup
    intc_0 // 2
    *
    dig 2
    len
    uncover 3
    dig 2
    uncover 2
    substring3
    intc_1 // 1
    uncover 3
    +
    dup
    itob
    extract 6 2
    cover 3
    uncover 2
    bzero
    pushbytes 0x0002
    swap
    concat
    pushbytes 0x000648656c6c6f20
    concat
    uncover 2
    concat
    swap
    intc_0 // 2
    *
    dup
    intc_2 // 0

hello_for_header@7:
    dup
    dig 3
    <
    bz hello_after_for@9
    dig 1
    dup
    itob
    extract 6 2
    dig 5
    dig 3
    dup
    cover 4
    uncover 2
    replace3
    dup
    bury 7
    dig 1
    extract_uint16
    intc_0 // 2
    +
    +
    bury 3
    intc_0 // 2
    +
    bury 1
    b hello_for_header@7

hello_after_for@9:
    dig 4
    dig 4
    concat
    dup
    bury 10
    // smart_contracts/arc4_types/contract.py:188
    // greeting = String()
    pushbytes ""
    bury 9
    // smart_contracts/arc4_types/contract.py:189
    // for x in dynamic_string_array:
    intc_2 // 0
    extract_uint16
    bury 7
    intc_2 // 0
    bury 6

hello_for_header@2:
    // smart_contracts/arc4_types/contract.py:189
    // for x in dynamic_string_array:
    dig 5
    dig 7
    <
    bz hello_after_for@5
    dig 8
    extract 2 0
    dig 6
    dup
    cover 2
    intc_0 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_0 // 2
    +
    extract3
    // smart_contracts/arc4_types/contract.py:190
    // greeting += x.native
    extract 2 0
    dig 9
    swap
    concat
    bury 9
    intc_1 // 1
    +
    bury 6
    b hello_for_header@2

hello_after_for@5:
    // smart_contracts/arc4_types/contract.py:172
    // @abimethod()
    dig 7
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return
