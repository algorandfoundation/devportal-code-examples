{
  "version": 3,
  "sources": [
    "../../arc4_types/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;AAcA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;;AAsFK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAtFL;;;AAsFK;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AArEL;;;AAqEK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA3DL;;;AA2DK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAxCL;;;AAAA;;;AAAA;;;AAwCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AApBL;;;AAAA;;;AAAA;;;AAAA;;;AAoBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAHL;;;AAAA;;;AAGK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAHL;;AAAA;;;;;;;;;AAGA;;;AASY;;AAAA;AAAW;;AAAA;AAAX;AAGG;AAAP;AAKR;;;AAQe;;AAAA;AAAkB;AAAlB;AAAP;AACO;;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;AAAkB;;AAAlB;AAAP;AAEQ;;AAAA;AAAW;;AAAA;AAAX;AAAsB;;AAAA;AAAtB;AAAiC;;AAAA;AAAjC;AAED;AAAP;AAKR;;;AAQe;;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;AAAkB;AAAlB;AAAP;AAEQ;;AAAA;;AAAA;AAAR;;AAAQ;AAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAKR;;;AAKyB;;AAAA;AAAW;AAAX;AAAV;AAAA;;;AAAP;AAKR;;;AAUc;;AAAA;;AAAA;AAEF;;AAAA;;AAAA;;AAAA;AAGJ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main_bare_routing@11",
      "stack_out": []
    },
    "17": {
      "op": "pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58 // method \"add_arc4_uint64(uint64,uint64)uint64\", method \"add_arc4_uint_n(uint8,uint16,uint32,uint64)uint64\", method \"add_arc4_biguint_n(uint128,uint256,uint512)uint512\", method \"arc4_byte(byte)byte\", method \"arc4_address_properties(address)uint64\", method \"arc4_address_return(address)address\""
    },
    "49": {
      "op": "txna ApplicationArgs 0"
    },
    "52": {
      "op": "match main_add_arc4_uint64_route@3 main_add_arc4_uint_n_route@4 main_add_arc4_biguint_n_route@5 main_arc4_byte_route@6 main_arc4_address_properties_route@7 main_arc4_address_return_route@8"
    },
    "66": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "68": {
      "op": "return"
    },
    "69": {
      "block": "main_arc4_address_return_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "71": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "72": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "73": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "75": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "76": {
      "op": "bytec_0 // 0x151f7c75"
    },
    "77": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "address#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "address#0"
      ]
    },
    "80": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "81": {
      "op": "log",
      "stack_out": []
    },
    "82": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "83": {
      "op": "return"
    },
    "84": {
      "block": "main_arc4_address_properties_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "86": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "87": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "88": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "90": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "91": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "94": {
      "callsub": "smart_contracts.arc4_types.contract.Arc4Types.arc4_address_properties",
      "op": "callsub arc4_address_properties",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "97": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "98": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "101": {
      "op": "log",
      "stack_out": []
    },
    "102": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "103": {
      "op": "return"
    },
    "104": {
      "block": "main_arc4_byte_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "106": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "107": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "108": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "110": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "111": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "114": {
      "callsub": "smart_contracts.arc4_types.contract.Arc4Types.arc4_byte",
      "op": "callsub arc4_byte",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "117": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0x151f7c75"
      ]
    },
    "118": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%35#0"
      ]
    },
    "119": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "120": {
      "op": "log",
      "stack_out": []
    },
    "121": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "122": {
      "op": "return"
    },
    "123": {
      "block": "main_add_arc4_biguint_n_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "125": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "126": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "129": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "130": {
      "op": "txna ApplicationArgs 1"
    },
    "133": {
      "op": "txna ApplicationArgs 2"
    },
    "136": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "139": {
      "callsub": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_biguint_n",
      "op": "callsub add_arc4_biguint_n",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "142": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%28#0"
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "145": {
      "op": "log",
      "stack_out": []
    },
    "146": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "147": {
      "op": "return"
    },
    "148": {
      "block": "main_add_arc4_uint_n_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "150": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "151": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "152": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "154": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "155": {
      "op": "txna ApplicationArgs 1"
    },
    "158": {
      "op": "txna ApplicationArgs 2"
    },
    "161": {
      "op": "txna ApplicationArgs 3"
    },
    "164": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "167": {
      "callsub": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_uint_n",
      "op": "callsub add_arc4_uint_n",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "170": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%19#0"
      ]
    },
    "172": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "173": {
      "op": "log",
      "stack_out": []
    },
    "174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "175": {
      "op": "return"
    },
    "176": {
      "block": "main_add_arc4_uint64_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "178": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "179": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "180": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "182": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "183": {
      "op": "txna ApplicationArgs 1"
    },
    "186": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "189": {
      "callsub": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_uint64",
      "op": "callsub add_arc4_uint64",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "192": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "193": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "195": {
      "op": "log",
      "stack_out": []
    },
    "196": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "return"
    },
    "198": {
      "block": "main_bare_routing@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "200": {
      "op": "bnz main_after_if_else@15",
      "stack_out": []
    },
    "203": {
      "op": "txn ApplicationID"
    },
    "205": {
      "op": "!"
    },
    "206": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "207": {
      "op": "intc_0 // 1"
    },
    "208": {
      "op": "return"
    },
    "209": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_uint64",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "add_arc4_uint64",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "212": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "214": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "217": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "218": {
      "op": "+",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0"
      ]
    },
    "219": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "220": {
      "retsub": true,
      "op": "retsub"
    },
    "221": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_uint_n",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "add_arc4_uint_n",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "224": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "226": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "227": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "228": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "229": {
      "op": "assert",
      "stack_out": []
    },
    "230": {
      "op": "frame_dig -3",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "232": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "233": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "2"
      ]
    },
    "235": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "236": {
      "op": "assert",
      "stack_out": []
    },
    "237": {
      "op": "frame_dig -2",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "239": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "240": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "4"
      ]
    },
    "242": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "243": {
      "op": "assert",
      "stack_out": []
    },
    "244": {
      "op": "frame_dig -1",
      "defined_out": [
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0 (copy)"
      ]
    },
    "246": {
      "op": "len",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "247": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "8"
      ]
    },
    "249": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "250": {
      "op": "assert",
      "stack_out": []
    },
    "251": {
      "op": "frame_dig -4",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "253": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "254": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%8#0",
        "b#0 (copy)"
      ]
    },
    "256": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "257": {
      "op": "+",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "258": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%10#0",
        "c#0 (copy)"
      ]
    },
    "260": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "261": {
      "op": "+",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "262": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "d#0 (copy)"
      ]
    },
    "264": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "265": {
      "op": "+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "266": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "267": {
      "retsub": true,
      "op": "retsub"
    },
    "268": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_biguint_n",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "add_arc4_biguint_n",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "271": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "273": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "16"
      ]
    },
    "276": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "277": {
      "op": "assert",
      "stack_out": []
    },
    "278": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "280": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "281": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "32"
      ]
    },
    "283": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "284": {
      "op": "assert",
      "stack_out": []
    },
    "285": {
      "op": "frame_dig -1",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "287": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "288": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "64"
      ]
    },
    "289": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "290": {
      "op": "assert",
      "stack_out": []
    },
    "291": {
      "op": "frame_dig -3",
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "293": {
      "op": "frame_dig -2",
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "295": {
      "op": "b+",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "296": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%6#0",
        "c#0 (copy)"
      ]
    },
    "298": {
      "op": "b+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "299": {
      "op": "dup",
      "defined_out": [
        "total#0",
        "total#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "total#0 (copy)"
      ]
    },
    "300": {
      "op": "len",
      "defined_out": [
        "len_%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "len_%0#0"
      ]
    },
    "301": {
      "op": "intc_1 // 64",
      "stack_out": [
        "total#0",
        "len_%0#0",
        "64"
      ]
    },
    "302": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "no_overflow%0#0"
      ]
    },
    "303": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "total#0"
      ]
    },
    "304": {
      "op": "intc_1 // 64",
      "stack_out": [
        "total#0",
        "64"
      ]
    },
    "305": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "b_zeros%0#0"
      ]
    },
    "306": {
      "op": "b|",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "307": {
      "retsub": true,
      "op": "retsub"
    },
    "308": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.arc4_byte",
      "params": {
        "a#0": "bytes"
      },
      "block": "arc4_byte",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "311": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "313": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "314": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "315": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "316": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "317": {
      "op": "extract 7 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "320": {
      "retsub": true,
      "op": "retsub"
    },
    "321": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.arc4_address_properties",
      "params": {
        "address#0": "bytes"
      },
      "block": "arc4_address_properties",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "324": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "326": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "bal#0",
        "check%0#0"
      ],
      "stack_out": [
        "bal#0",
        "check%0#0"
      ]
    },
    "328": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "bal#0"
      ]
    },
    "329": {
      "op": "frame_dig -1",
      "stack_out": [
        "bal#0",
        "address#0 (copy)"
      ]
    },
    "331": {
      "op": "acct_params_get AcctTotalAssets",
      "defined_out": [
        "bal#0",
        "check%1#0",
        "total_asset#0"
      ],
      "stack_out": [
        "bal#0",
        "total_asset#0",
        "check%1#0"
      ]
    },
    "333": {
      "op": "bury 1",
      "stack_out": [
        "bal#0",
        "check%1#0"
      ]
    },
    "335": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "bal#0"
      ]
    },
    "336": {
      "retsub": true,
      "op": "retsub"
    }
  }
}