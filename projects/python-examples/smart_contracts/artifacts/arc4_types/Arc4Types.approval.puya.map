{
  "version": 3,
  "sources": [
    "../../arc4_types/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAcA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;;;;;;;;AAEK;;;AAAA;;;AASO;AAAW;AAAA;AAAX;AAGG;AAZV;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;;;AAAA;;;AAAA;;;AAAA;;;AAQU;;AAAA;AAAkB;AAAlB;AAAP;AACO;;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;AAAkB;;AAAlB;AAAP;AACO;AAAA;AAAkB;AAAlB;AAAP;AAEQ;;AAAA;AAAW;;AAAA;AAAX;AAAsB;;AAAA;AAAtB;AAAiC;AAAA;AAAjC;AAED;AAfV;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;;;AAAA;;;AAAA;;;AAQU;;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;AAAkB;;AAAlB;AAAP;AACO;AAAA;AAAkB;AAAlB;AAAP;AAEQ;;AAAA;AAAA;AAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdV;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;;;AAKoB;AAAW;AAAX;AAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAUS;AAAA;;AAAA;AAEF;AAAA;;AAAA;;AAAA;AAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;;;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64 8"
    },
    "6": {
      "op": "bytecblock 0x151f7c75"
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main___algopy_default_create@13",
      "stack_out": []
    },
    "18": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "20": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "21": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "22": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "24": {
      "op": "assert",
      "stack_out": []
    },
    "25": {
      "op": "pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58 // method \"add_arc4_uint64(uint64,uint64)uint64\", method \"add_arc4_uint_n(uint8,uint16,uint32,uint64)uint64\", method \"add_arc4_biguint_n(uint128,uint256,uint512)uint512\", method \"arc4_byte(byte)byte\", method \"arc4_address_properties(address)uint64\", method \"arc4_address_return(address)address\"",
      "defined_out": [
        "Method(add_arc4_biguint_n(uint128,uint256,uint512)uint512)",
        "Method(add_arc4_uint64(uint64,uint64)uint64)",
        "Method(add_arc4_uint_n(uint8,uint16,uint32,uint64)uint64)",
        "Method(arc4_address_properties(address)uint64)",
        "Method(arc4_address_return(address)address)",
        "Method(arc4_byte(byte)byte)"
      ],
      "stack_out": [
        "Method(add_arc4_uint64(uint64,uint64)uint64)",
        "Method(add_arc4_uint_n(uint8,uint16,uint32,uint64)uint64)",
        "Method(add_arc4_biguint_n(uint128,uint256,uint512)uint512)",
        "Method(arc4_byte(byte)byte)",
        "Method(arc4_address_properties(address)uint64)",
        "Method(arc4_address_return(address)address)"
      ]
    },
    "57": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_arc4_biguint_n(uint128,uint256,uint512)uint512)",
        "Method(add_arc4_uint64(uint64,uint64)uint64)",
        "Method(add_arc4_uint_n(uint8,uint16,uint32,uint64)uint64)",
        "Method(arc4_address_properties(address)uint64)",
        "Method(arc4_address_return(address)address)",
        "Method(arc4_byte(byte)byte)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(add_arc4_uint64(uint64,uint64)uint64)",
        "Method(add_arc4_uint_n(uint8,uint16,uint32,uint64)uint64)",
        "Method(add_arc4_biguint_n(uint128,uint256,uint512)uint512)",
        "Method(arc4_byte(byte)byte)",
        "Method(arc4_address_properties(address)uint64)",
        "Method(arc4_address_return(address)address)",
        "tmp%6#0"
      ]
    },
    "60": {
      "op": "match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return",
      "stack_out": []
    },
    "74": {
      "op": "err"
    },
    "75": {
      "block": "main___algopy_default_create@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "78": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "81": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "82": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "83": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_uint64[routing]",
      "params": {},
      "block": "add_arc4_uint64",
      "stack_in": [],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "b#0"
      ]
    },
    "86": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "89": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#1"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "b#0"
      ]
    },
    "91": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "92": {
      "op": "+",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "c#0"
      ]
    },
    "93": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "94": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "95": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "96": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "97": {
      "op": "log",
      "stack_out": []
    },
    "98": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "99": {
      "op": "return",
      "stack_out": []
    },
    "100": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_uint_n[routing]",
      "params": {},
      "block": "add_arc4_uint_n",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "103": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "106": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "112": {
      "op": "dig 3",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "a#0 (copy)"
      ]
    },
    "114": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1"
      ]
    },
    "115": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "1"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%1#1"
      ]
    },
    "117": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "118": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "b#0",
        "b#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "b#0 (copy)"
      ]
    },
    "120": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%2#0"
      ]
    },
    "121": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%2#0",
        "2"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%3#0"
      ]
    },
    "124": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "125": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "c#0 (copy)",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "c#0 (copy)"
      ]
    },
    "127": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%4#0"
      ]
    },
    "128": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%4#0",
        "4"
      ]
    },
    "130": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%5#0"
      ]
    },
    "131": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "132": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "d#0 (copy)"
      ]
    },
    "133": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ]
    },
    "134": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%6#0",
        "8"
      ]
    },
    "135": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "tmp%7#0"
      ]
    },
    "136": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "137": {
      "op": "uncover 3",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "a#0"
      ]
    },
    "139": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "tmp%8#0"
      ]
    },
    "140": {
      "op": "uncover 3",
      "stack_out": [
        "c#0",
        "d#0",
        "tmp%8#0",
        "b#0"
      ]
    },
    "142": {
      "op": "btoi",
      "defined_out": [
        "c#0",
        "d#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "143": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "tmp%10#0"
      ]
    },
    "144": {
      "op": "uncover 2",
      "stack_out": [
        "d#0",
        "tmp%10#0",
        "c#0"
      ]
    },
    "146": {
      "op": "btoi",
      "defined_out": [
        "d#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "d#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "147": {
      "op": "+",
      "defined_out": [
        "d#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "d#0",
        "tmp%12#0"
      ]
    },
    "148": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "d#0"
      ]
    },
    "149": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "150": {
      "op": "+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "151": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "152": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "153": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "154": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "155": {
      "op": "log",
      "stack_out": []
    },
    "156": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "157": {
      "op": "return",
      "stack_out": []
    },
    "158": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.add_arc4_biguint_n[routing]",
      "params": {},
      "block": "add_arc4_biguint_n",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "161": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "164": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "167": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "a#0 (copy)"
      ]
    },
    "169": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "170": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "a#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%0#1",
        "16"
      ]
    },
    "172": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%1#1"
      ]
    },
    "173": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "174": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "b#0",
        "b#0 (copy)",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "b#0 (copy)"
      ]
    },
    "176": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%2#0"
      ]
    },
    "177": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "a#0",
        "b#0",
        "c#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%2#0",
        "32"
      ]
    },
    "179": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%3#0"
      ]
    },
    "180": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "181": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "c#0 (copy)"
      ]
    },
    "182": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%4#0"
      ]
    },
    "183": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "a#0",
        "b#0",
        "c#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%4#0",
        "64"
      ]
    },
    "184": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%5#0"
      ]
    },
    "185": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "186": {
      "op": "cover 2",
      "stack_out": [
        "c#0",
        "a#0",
        "b#0"
      ]
    },
    "188": {
      "op": "b+",
      "defined_out": [
        "c#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "c#0",
        "tmp%8#0"
      ]
    },
    "189": {
      "op": "b+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "190": {
      "op": "dup",
      "defined_out": [
        "total#0",
        "total#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "total#0 (copy)"
      ]
    },
    "191": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%value_len%0#0"
      ]
    },
    "192": {
      "op": "intc_1 // 64",
      "stack_out": [
        "total#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "193": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "194": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "total#0"
      ]
    },
    "195": {
      "op": "intc_1 // 64",
      "stack_out": [
        "total#0",
        "64"
      ]
    },
    "196": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%bzero%0#0"
      ]
    },
    "197": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "198": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "199": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "200": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "201": {
      "op": "log",
      "stack_out": []
    },
    "202": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "203": {
      "op": "return",
      "stack_out": []
    },
    "204": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.arc4_byte[routing]",
      "params": {},
      "block": "arc4_byte",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "207": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "208": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1"
      ]
    },
    "209": {
      "op": "+",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "210": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "211": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "212": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "213": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "8"
      ]
    },
    "214": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "215": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "216": {
      "op": "extract 7 1",
      "defined_out": [
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0"
      ]
    },
    "219": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%uint8%0#0"
      ],
      "stack_out": [
        "aggregate%uint8%0#0",
        "0x151f7c75"
      ]
    },
    "220": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%uint8%0#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": []
    },
    "223": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.arc4_address_properties[routing]",
      "params": {},
      "block": "arc4_address_properties",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0"
      ]
    },
    "228": {
      "op": "dup",
      "defined_out": [
        "address#0",
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "address#0 (copy)"
      ]
    },
    "229": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "address#0",
        "bal#0",
        "check%0#0"
      ],
      "stack_out": [
        "address#0",
        "bal#0",
        "check%0#0"
      ]
    },
    "231": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "address#0",
        "bal#0"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "bal#0",
        "address#0"
      ]
    },
    "233": {
      "op": "acct_params_get AcctTotalAssets",
      "defined_out": [
        "bal#0",
        "check%1#0",
        "total_asset#0"
      ],
      "stack_out": [
        "bal#0",
        "total_asset#0",
        "check%1#0"
      ]
    },
    "235": {
      "op": "bury 1",
      "stack_out": [
        "bal#0",
        "check%1#0"
      ]
    },
    "237": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "bal#0"
      ]
    },
    "238": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "239": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "240": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "241": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "242": {
      "op": "log",
      "stack_out": []
    },
    "243": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "244": {
      "op": "return",
      "stack_out": []
    },
    "245": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Types.arc4_address_return[routing]",
      "params": {},
      "block": "arc4_address_return",
      "stack_in": [],
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "246": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "0x151f7c75",
        "address#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "address#0"
      ]
    },
    "249": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "250": {
      "op": "log",
      "stack_out": []
    },
    "251": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "252": {
      "op": "return",
      "stack_out": []
    }
  }
}