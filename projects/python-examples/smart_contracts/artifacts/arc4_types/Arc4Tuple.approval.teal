#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock "contact_info" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/arc4_types/contract.py:274
    // self.contact_info = GlobalState(
    bytec_0 // "contact_info"
    // smart_contracts/arc4_types/contract.py:275
    // contact_info_tuple((arc4.String(""), arc4.String(""), arc4.UInt64(0)))
    pushbytes 0x000c000e000000000000000000000000
    // smart_contracts/arc4_types/contract.py:274-276
    // self.contact_info = GlobalState(
    //     contact_info_tuple((arc4.String(""), arc4.String(""), arc4.UInt64(0)))
    // )
    app_global_put

main_after_if_else@2:
    // smart_contracts/arc4_types/contract.py:272
    // class Arc4Tuple(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@11
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x7f68c13f 0x288dc75f // method "add_contact_info((string,string,uint64))uint64", method "return_contact()(string,string,uint64)"
    txna ApplicationArgs 0
    match add_contact_info return_contact
    err

main___algopy_default_create@11:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.arc4_types.contract.Arc4Tuple.add_contact_info[routing]() -> void:
add_contact_info:
    // smart_contracts/arc4_types/contract.py:278
    // @abimethod()
    txna ApplicationArgs 1
    // smart_contracts/arc4_types/contract.py:281
    // name, email, phone = contact.native
    dup
    intc_0 // 0
    extract_uint16
    dig 1
    pushint 2 // 2
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dig 2
    len
    dig 3
    uncover 3
    uncover 2
    substring3
    dig 2
    extract 4 8
    // smart_contracts/arc4_types/contract.py:283
    // assert name.native == "Alice"
    uncover 2
    extract 2 0
    pushbytes "Alice"
    ==
    assert
    // smart_contracts/arc4_types/contract.py:284
    // assert email.native == "alice@something.com"
    swap
    extract 2 0
    pushbytes "alice@something.com"
    ==
    assert
    // smart_contracts/arc4_types/contract.py:285
    // assert phone == arc4.UInt64(555_555_555)
    dup
    pushbytes 0x00000000211d1ae3
    b==
    assert
    // smart_contracts/arc4_types/contract.py:287
    // self.contact_info.value = contact
    bytec_0 // "contact_info"
    uncover 2
    app_global_put
    // smart_contracts/arc4_types/contract.py:278
    // @abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// smart_contracts.arc4_types.contract.Arc4Tuple.return_contact[routing]() -> void:
return_contact:
    // smart_contracts/arc4_types/contract.py:295
    // return self.contact_info.value
    intc_0 // 0
    bytec_0 // "contact_info"
    app_global_get_ex
    assert // check self.contact_info exists
    // smart_contracts/arc4_types/contract.py:291
    // @abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return
