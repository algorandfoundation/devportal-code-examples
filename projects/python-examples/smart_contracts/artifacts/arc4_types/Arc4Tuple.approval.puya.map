{
  "version": 3,
  "sources": [
    "../../arc4_types/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyRQ;AACI;;;;;;;;;;;;;;;;;;AADJ;AAHR;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAoBK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAPL;;;AAOK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPL;;AAAA;;;;;;;;;AAOA;;;AAG6B;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAEd;;AAAA;;;AAAe;;;;;;;AAAf;AAAP;AACO;AAAA;;;AAAgB;;;;;;;;;;;;;;;;;;;;;AAAhB;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;AAEA;AAAA;;AAAA;AAEO;;AARc;;AAQd;AAAP;AAMO;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Tuple.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"contact_info\" 0x151f7c75"
    },
    "25": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "27": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "30": {
      "op": "bytec_0 // \"contact_info\"",
      "defined_out": [
        "\"contact_info\""
      ],
      "stack_out": [
        "\"contact_info\""
      ]
    },
    "31": {
      "op": "pushbytes 0x000c000e000000000000000000000000",
      "defined_out": [
        "\"contact_info\"",
        "0x000c000e000000000000000000000000"
      ],
      "stack_out": [
        "\"contact_info\"",
        "0x000c000e000000000000000000000000"
      ]
    },
    "49": {
      "op": "app_global_put",
      "stack_out": []
    },
    "50": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "52": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "55": {
      "op": "pushbytess 0x7f68c13f 0x288dc75f // method \"add_contact_info((string,string,uint64))uint64\", method \"return_contact()(string,string,uint64)\"",
      "defined_out": [
        "Method(add_contact_info((string,string,uint64))uint64)",
        "Method(return_contact()(string,string,uint64))"
      ],
      "stack_out": [
        "Method(add_contact_info((string,string,uint64))uint64)",
        "Method(return_contact()(string,string,uint64))"
      ]
    },
    "67": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_contact_info((string,string,uint64))uint64)",
        "Method(return_contact()(string,string,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(add_contact_info((string,string,uint64))uint64)",
        "Method(return_contact()(string,string,uint64))",
        "tmp%2#0"
      ]
    },
    "70": {
      "op": "match main_add_contact_info_route@5 main_return_contact_route@6",
      "stack_out": []
    },
    "76": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "77": {
      "op": "return",
      "stack_out": []
    },
    "78": {
      "block": "main_return_contact_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "81": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "84": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "85": {
      "callsub": "smart_contracts.arc4_types.contract.Arc4Tuple.return_contact",
      "op": "callsub return_contact",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "88": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "89": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%13#0"
      ]
    },
    "90": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "91": {
      "op": "log",
      "stack_out": []
    },
    "92": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "93": {
      "op": "return",
      "stack_out": []
    },
    "94": {
      "block": "main_add_contact_info_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "96": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "97": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "98": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "100": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "101": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "104": {
      "callsub": "smart_contracts.arc4_types.contract.Arc4Tuple.add_contact_info",
      "op": "callsub add_contact_info",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "108": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "109": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "110": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "111": {
      "op": "log",
      "stack_out": []
    },
    "112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "113": {
      "op": "return",
      "stack_out": []
    },
    "114": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "116": {
      "op": "bnz main_after_if_else@9",
      "stack_out": []
    },
    "119": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "121": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "122": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "123": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "124": {
      "op": "return",
      "stack_out": []
    },
    "125": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Tuple.add_contact_info",
      "params": {
        "contact#0": "bytes"
      },
      "block": "add_contact_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "128": {
      "op": "frame_dig -1",
      "defined_out": [
        "contact#0 (copy)"
      ],
      "stack_out": [
        "contact#0 (copy)"
      ]
    },
    "130": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "contact#0 (copy)"
      ],
      "stack_out": [
        "contact#0 (copy)",
        "0"
      ]
    },
    "131": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0"
      ]
    },
    "132": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%0#0",
        "contact#0 (copy)"
      ]
    },
    "134": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "contact#0 (copy)",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "contact#0 (copy)",
        "2"
      ]
    },
    "136": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "137": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "contact#0 (copy)"
      ]
    },
    "139": {
      "op": "uncover 2",
      "stack_out": [
        "item_end_offset%0#0",
        "contact#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "141": {
      "op": "dig 2",
      "defined_out": [
        "contact#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0"
      ],
      "stack_out": [
        "item_end_offset%0#0",
        "contact#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "143": {
      "op": "substring3",
      "defined_out": [
        "item_end_offset%0#0",
        "name#0"
      ],
      "stack_out": [
        "item_end_offset%0#0",
        "name#0"
      ]
    },
    "144": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_end_offset%0#0",
        "name#0",
        "contact#0 (copy)"
      ]
    },
    "146": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "name#0"
      ],
      "stack_out": [
        "item_end_offset%0#0",
        "name#0",
        "item_end_offset%1#0"
      ]
    },
    "147": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_end_offset%0#0",
        "name#0",
        "item_end_offset%1#0",
        "contact#0 (copy)"
      ]
    },
    "149": {
      "op": "uncover 3",
      "stack_out": [
        "name#0",
        "item_end_offset%1#0",
        "contact#0 (copy)",
        "item_end_offset%0#0"
      ]
    },
    "151": {
      "op": "uncover 2",
      "stack_out": [
        "name#0",
        "contact#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "153": {
      "op": "substring3",
      "defined_out": [
        "email#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "email#0"
      ]
    },
    "154": {
      "op": "frame_dig -1",
      "stack_out": [
        "name#0",
        "email#0",
        "contact#0 (copy)"
      ]
    },
    "156": {
      "error": "Index access is out of bounds",
      "op": "extract 4 8 // on error: Index access is out of bounds",
      "defined_out": [
        "email#0",
        "name#0",
        "phone#0"
      ],
      "stack_out": [
        "name#0",
        "email#0",
        "phone#0"
      ]
    },
    "159": {
      "op": "uncover 2",
      "stack_out": [
        "email#0",
        "phone#0",
        "name#0"
      ]
    },
    "161": {
      "op": "extract 2 0",
      "defined_out": [
        "email#0",
        "phone#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "email#0",
        "phone#0",
        "tmp%0#0"
      ]
    },
    "164": {
      "op": "pushbytes \"Alice\"",
      "defined_out": [
        "\"Alice\"",
        "email#0",
        "phone#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "email#0",
        "phone#0",
        "tmp%0#0",
        "\"Alice\""
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "email#0",
        "phone#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "email#0",
        "phone#0",
        "tmp%1#0"
      ]
    },
    "172": {
      "op": "assert",
      "stack_out": [
        "email#0",
        "phone#0"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "phone#0",
        "email#0"
      ]
    },
    "174": {
      "op": "extract 2 0",
      "defined_out": [
        "phone#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "phone#0",
        "tmp%2#0"
      ]
    },
    "177": {
      "op": "pushbytes \"alice@something.com\"",
      "defined_out": [
        "\"alice@something.com\"",
        "phone#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "phone#0",
        "tmp%2#0",
        "\"alice@something.com\""
      ]
    },
    "198": {
      "op": "==",
      "defined_out": [
        "phone#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "phone#0",
        "tmp%3#0"
      ]
    },
    "199": {
      "op": "assert",
      "stack_out": [
        "phone#0"
      ]
    },
    "200": {
      "op": "pushbytes 0x00000000211d1ae3",
      "defined_out": [
        "0x00000000211d1ae3",
        "phone#0"
      ],
      "stack_out": [
        "phone#0",
        "0x00000000211d1ae3"
      ]
    },
    "210": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "211": {
      "op": "assert",
      "stack_out": []
    },
    "212": {
      "op": "bytec_0 // \"contact_info\"",
      "defined_out": [
        "\"contact_info\""
      ],
      "stack_out": [
        "\"contact_info\""
      ]
    },
    "213": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"contact_info\"",
        "contact#0 (copy)"
      ]
    },
    "215": {
      "op": "app_global_put",
      "stack_out": []
    },
    "216": {
      "op": "frame_dig -1",
      "stack_out": [
        "contact#0 (copy)"
      ]
    },
    "218": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "contact#0 (copy)"
      ],
      "stack_out": [
        "contact#0 (copy)",
        "4"
      ]
    },
    "220": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "221": {
      "retsub": true,
      "op": "retsub"
    },
    "222": {
      "subroutine": "smart_contracts.arc4_types.contract.Arc4Tuple.return_contact",
      "params": {},
      "block": "return_contact",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "223": {
      "op": "bytec_0 // \"contact_info\"",
      "defined_out": [
        "\"contact_info\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contact_info\""
      ]
    },
    "224": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "225": {
      "error": "check self.contact_info exists",
      "op": "assert // check self.contact_info exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "226": {
      "retsub": true,
      "op": "retsub"
    }
  }
}