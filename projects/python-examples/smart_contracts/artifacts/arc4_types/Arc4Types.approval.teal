#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 64 8
    bytecblock 0x151f7c75
    // smart_contracts/arc4_types/contract.py:15
    // class Arc4Types(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@13
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58 // method "add_arc4_uint64(uint64,uint64)uint64", method "add_arc4_uint_n(uint8,uint16,uint32,uint64)uint64", method "add_arc4_biguint_n(uint128,uint256,uint512)uint512", method "arc4_byte(byte)byte", method "arc4_address_properties(address)uint64", method "arc4_address_return(address)address"
    txna ApplicationArgs 0
    match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return
    err

main___algopy_default_create@13:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.arc4_types.contract.Arc4Types.add_arc4_uint64[routing]() -> void:
add_arc4_uint64:
    // smart_contracts/arc4_types/contract.py:16-17
    // # example: ARC4_UINT64
    // @abimethod()
    txna ApplicationArgs 2
    txna ApplicationArgs 1
    // smart_contracts/arc4_types/contract.py:25-26
    // # Use the native integers to perform arithmetic
    // c = a.native + b.native
    btoi
    swap
    btoi
    +
    // smart_contracts/arc4_types/contract.py:28-29
    // # Convert back to arc4.UInt64 for ABI compatability before returning
    // return arc4.UInt64(c)
    itob
    // smart_contracts/arc4_types/contract.py:16-17
    // # example: ARC4_UINT64
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.arc4_types.contract.Arc4Types.add_arc4_uint_n[routing]() -> void:
add_arc4_uint_n:
    // smart_contracts/arc4_types/contract.py:33-34
    // # example: ARC4_UINTN
    // @abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // smart_contracts/arc4_types/contract.py:42
    // assert a.bytes.length == 1  # UInt8 = 1 byte
    dig 3
    len
    intc_0 // 1
    ==
    assert
    // smart_contracts/arc4_types/contract.py:43
    // assert b.bytes.length == 2  # UInt16 = 2 bytes
    dig 2
    len
    pushint 2 // 2
    ==
    assert
    // smart_contracts/arc4_types/contract.py:44
    // assert c.bytes.length == 4  # UInt32 = 4 bytes
    dig 1
    len
    pushint 4 // 4
    ==
    assert
    // smart_contracts/arc4_types/contract.py:45
    // assert d.bytes.length == 8  # UInt64 = 8 bytes
    dup
    len
    intc_2 // 8
    ==
    assert
    // smart_contracts/arc4_types/contract.py:47
    // total = a.native + b.native + c.native + d.native
    uncover 3
    btoi
    uncover 3
    btoi
    +
    uncover 2
    btoi
    +
    swap
    btoi
    +
    // smart_contracts/arc4_types/contract.py:49
    // return arc4.UInt64(total)
    itob
    // smart_contracts/arc4_types/contract.py:33-34
    // # example: ARC4_UINTN
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.arc4_types.contract.Arc4Types.add_arc4_biguint_n[routing]() -> void:
add_arc4_biguint_n:
    // smart_contracts/arc4_types/contract.py:53-54
    // # example: ARC4_BIGUINT
    // @abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/arc4_types/contract.py:62
    // assert a.bytes.length == 16
    dig 2
    len
    pushint 16 // 16
    ==
    assert
    // smart_contracts/arc4_types/contract.py:63
    // assert b.bytes.length == 32
    dig 1
    len
    pushint 32 // 32
    ==
    assert
    // smart_contracts/arc4_types/contract.py:64
    // assert c.bytes.length == 64
    dup
    len
    intc_1 // 64
    ==
    assert
    // smart_contracts/arc4_types/contract.py:66
    // total = a.native + b.native + c.native
    cover 2
    b+
    b+
    // smart_contracts/arc4_types/contract.py:68
    // return arc4.UInt512(total)
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    // smart_contracts/arc4_types/contract.py:53-54
    // # example: ARC4_BIGUINT
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.arc4_types.contract.Arc4Types.arc4_byte[routing]() -> void:
arc4_byte:
    // smart_contracts/arc4_types/contract.py:72-73
    // # example: ARC4_BYTES
    // @abimethod()
    txna ApplicationArgs 1
    // smart_contracts/arc4_types/contract.py:78
    // return arc4.Byte(a.native + 1)
    btoi
    intc_0 // 1
    +
    itob
    dup
    bitlen
    intc_2 // 8
    <=
    assert // overflow
    extract 7 1
    // smart_contracts/arc4_types/contract.py:72-73
    // # example: ARC4_BYTES
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.arc4_types.contract.Arc4Types.arc4_address_properties[routing]() -> void:
arc4_address_properties:
    // smart_contracts/arc4_types/contract.py:82-83
    // # example: ARC4_ADDRESS
    // @abimethod()
    txna ApplicationArgs 1
    // smart_contracts/arc4_types/contract.py:93
    // bal = account.balance  # returns the balance of the account
    dup
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/arc4_types/contract.py:95
    // account.total_assets
    swap
    acct_params_get AcctTotalAssets
    bury 1
    assert // account funded
    // smart_contracts/arc4_types/contract.py:82-83
    // # example: ARC4_ADDRESS
    // @abimethod()
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.arc4_types.contract.Arc4Types.arc4_address_return[routing]() -> void:
arc4_address_return:
    // smart_contracts/arc4_types/contract.py:100
    // @abimethod()
    bytec_0 // 0x151f7c75
    txna ApplicationArgs 1
    concat
    log
    intc_0 // 1
    return
