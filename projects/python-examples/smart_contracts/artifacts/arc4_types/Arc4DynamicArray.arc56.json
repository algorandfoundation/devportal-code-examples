{
    "name": "Arc4DynamicArray",
    "structs": {},
    "methods": [
        {
            "name": "goodbye",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "hello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Dynamic Arrays have variable size and capacity.\nThey are similar to native Python lists because they can also append, extend, and pop.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4_dynamic_bytes",
            "args": [],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "arc4.DynamicBytes is essentially an arc4.DynamicArray[arc4.Byte] with additional convenience methods",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        54,
                        78,
                        105
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        129
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        57,
                        81,
                        108
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAgABJgIEFR98dQIAAjEbQQBkggMEitEqKwQCvs4RBJXWQRY2GgCOAwA1ABoAAiNDMRkURDEYRIAMFR98dQAGAP//qrv/sCRDMRkURDEYRDYaAYgBBEkVFlcGAkxQKExQsCRDMRkURDEYRDYaAYgAzihMULAkQzEZQP+zMRgURCRDigECi/8jWSQJSSILi/9XAgBJSwJZSwEVSwJLAk8CUksCI0sFUk8EIghPBExPBFJQSwIWVwYCTE8DI4gAOlCJigMBi/0jWUmL/whMIgsiCEsBFlcGAov9IksDUov/IguvUIv9FYv9TwRPAlJQi/5QTwIjiAACUImKAwGL/iILSYv/IgtJTgKL/UxZi/9NiwGLAAxBACOLAkkWVwYCi/2LAUlOBE8CXUmM/UsBWSIICIwCIgiMAUL/1Yv9jACJigEBgA8ABAAPAAlHb29kIGJ5ZSCL/1ApTFCJigEBi/8VgQQIFlcGAoACAARMUIv/UIADAAEhUClMUEkjWUxXAgBLASILSwEVUoAMAAEAAgAGSGVsbG8gTE8CiP8lRwKI/uFFAYj+3EUBgAgABndvcmxkISSI/wtIgABMI1kjiwOLAgxBACWLAFcCAIsDSU4CIgtLAUxZSlkiCFhXAgCLAUxQjAEkCIwDQv/TiwGMAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}