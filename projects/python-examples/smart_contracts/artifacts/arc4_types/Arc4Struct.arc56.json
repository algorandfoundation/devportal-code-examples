{
    "name": "Arc4Struct",
    "structs": {
        "Todo": [
            {
                "name": "task",
                "type": "string"
            },
            {
                "name": "completed",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "add_todo",
            "args": [
                {
                    "type": "string",
                    "name": "task"
                }
            ],
            "returns": {
                "type": "(string,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "complete_todo",
            "args": [
                {
                    "type": "string",
                    "name": "task"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "return_todo",
            "args": [
                {
                    "type": "string",
                    "name": "task"
                }
            ],
            "returns": {
                "type": "(string,bool)",
                "struct": "Todo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "todos": {
                    "keyType": "AVMString",
                    "valueType": "(string,bool)[]",
                    "key": "dG9kb3M="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        383,
                        433,
                        625,
                        675
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        72,
                        91,
                        106
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        130
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        75,
                        94,
                        109
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        153,
                        175,
                        182,
                        335,
                        350,
                        418,
                        577,
                        592,
                        660
                    ],
                    "errorMessage": "check self.todos exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAAIBJgUFdG9kb3MAAgAABBUffHUCAAIxGEAAAygqZzEbQQBTggME9hiiVQQRz+LYBOqeLZ02GgCOAwAkABUAAiJDMRkURDEYRDYaAYgB5StMULAkQzEZFEQxGEQ2GgGIAN8kQzEZFEQxGEQ2GgGIABErTFCwJEMxGUD/xDEYFEQkQ4oBASJHAilHA4ADAAMAi/9QIihlRCoSQQAUJwRMUIACAAFMUChMZyIoZUSMAIkiKGVEJwRPAlCMAkkiWUlOAowDVwIAjAApjAEjC4wGIowEiwSLBgxBABuLAIsESU4CWSMIFlcGAosBTFCMASMIjARC/92LABWMBSKMBIsEIwxBAByLAosESU4CWYsFCBZXBgKLAUxQjAEjCIwEQv/diwMkCBZXBgKLAVCLAIsGiwVSUIsCSRUjTFJQKExnQv9oigEAIkkpRwQiKGVEIlkiiwiLBwxBANYiKGVESVcCAIsISU4DIwtJjANLAUxZTwIiWU8DJAhJTgRMSwEJSwMVTwIjC0mMAksETFlPAk1SSSJZSwEVUov/EkEAkyIoZURJVwIASYsDWUsCIllPBAlLAhVLA4sCWUpPBE1LBEsETwJSgRAkVE8FUQACSYwBF0mLCAkkCUsETwRPAk1JSwUJjAVLAhWMBEsFIk8GUk8DUE8ETwJPBFJQjAAjC4wGiwKLBgxBACCLAEmLAklOA1mLBAiLBQkWVwYCSwJMXYwAIwiMAkL/2IsBiwBQKExniYwIQv8cigEBKUkiRwIoZUQiWSKLBYsEDEEAayIoZURJVwIAiwVJTgMjC0mMAEsBTFlPAiJZTwMkCEmMBUxLAQlLAxVPAiMLSYwBSwRMWU8CTVJJIllLARVSi/8SQf+0IihlRElXAgBJiwBZTwIiWYsFCUsCFUsDiwFZTwJNUowCJIwDQv+NiwNEiwKMAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}