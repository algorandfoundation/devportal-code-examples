{
    "name": "BoxStorage",
    "structs": {
        "UserStruct": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "get_box",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_item_box_map",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_map",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_box",
            "args": [],
            "returns": {
                "type": "(uint64,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_box_map",
            "args": [],
            "returns": {
                "type": "(string,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_box_ref",
            "args": [],
            "returns": {
                "type": "(byte[],bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_example",
            "args": [],
            "returns": {
                "type": "(uint64,byte[],string)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_map_example",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_box_example",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "maybe_box_map_example",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_box_map_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "(string,uint64,uint64)",
                "struct": "UserStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "value_int"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_box_map",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_box_map_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                },
                {
                    "type": "(string,uint64,uint64)",
                    "struct": "UserStruct",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_box_example",
            "args": [
                {
                    "type": "uint64",
                    "name": "value_int"
                },
                {
                    "type": "byte[]",
                    "name": "value_dbytes"
                },
                {
                    "type": "string",
                    "name": "value_string"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_box_map",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_length",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "length_box_ref",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_struct_length",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_length_example",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "length_box_ref_example",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "extract_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "manipulate_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "value_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "exist_box",
            "args": [],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "exist_box_example",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "slice_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "key_box",
            "args": [],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "key_box_example",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_exists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_struct_exists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "key_prefix_box_map",
            "args": [],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box_int": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym94X2ludA=="
                },
                "box_dynamic_bytes": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Yg=="
                },
                "box_string": {
                    "keyType": "AVMBytes",
                    "valueType": "string",
                    "key": "Qk9YX0M="
                },
                "box_bytes": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X2J5dGVz"
                },
                "box_ref": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X3JlZg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "AVMUint64",
                    "valueType": "AVMString",
                    "prefix": ""
                },
                "box_map_struct": {
                    "keyType": "uint64",
                    "valueType": "UserStruct",
                    "prefix": "dXNlcnM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1797
                    ],
                    "errorMessage": "Blob exists"
                },
                {
                    "pc": [
                        1995,
                        2005,
                        2017,
                        2029
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        370,
                        388,
                        412,
                        437,
                        449,
                        474,
                        486,
                        498,
                        545,
                        566,
                        578,
                        590,
                        602,
                        614,
                        626,
                        647,
                        664,
                        681,
                        693,
                        709,
                        721,
                        743,
                        770,
                        792,
                        808,
                        827,
                        839,
                        851,
                        872,
                        922,
                        959,
                        996,
                        1020,
                        1032,
                        1056,
                        1084
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        2042
                    ],
                    "errorMessage": "box string key ok"
                },
                {
                    "pc": [
                        1106
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        373,
                        391,
                        415,
                        440,
                        452,
                        477,
                        489,
                        501,
                        548,
                        569,
                        581,
                        593,
                        605,
                        617,
                        629,
                        650,
                        667,
                        684,
                        696,
                        712,
                        724,
                        746,
                        773,
                        795,
                        811,
                        830,
                        842,
                        854,
                        875,
                        925,
                        962,
                        999,
                        1023,
                        1035,
                        1059,
                        1087
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1994,
                        2004,
                        2016,
                        2028
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        1561,
                        1662,
                        1672,
                        1682,
                        1692,
                        1800
                    ],
                    "errorMessage": "check BoxRef exists"
                },
                {
                    "pc": [
                        1238,
                        1411,
                        1415
                    ],
                    "errorMessage": "check self.box_dynamic_bytes exists"
                },
                {
                    "pc": [
                        1117,
                        1234,
                        1428,
                        1813
                    ],
                    "errorMessage": "check self.box_int exists"
                },
                {
                    "pc": [
                        1126,
                        1549,
                        1641,
                        1647
                    ],
                    "errorMessage": "check self.box_map entry exists"
                },
                {
                    "pc": [
                        1320,
                        1361,
                        1606,
                        1614
                    ],
                    "errorMessage": "check self.box_map_struct entry exists"
                },
                {
                    "pc": [
                        1245
                    ],
                    "errorMessage": "check self.box_string exists"
                },
                {
                    "pc": [
                        1422
                    ],
                    "errorMessage": "direct reference should match copy"
                },
                {
                    "pc": [
                        1517,
                        1750
                    ],
                    "errorMessage": "has data"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}