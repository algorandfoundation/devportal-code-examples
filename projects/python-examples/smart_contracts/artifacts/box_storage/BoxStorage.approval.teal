#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 42 10
    bytecblock "box_int" 0x151f7c75 0x424f585f43 0x00 "b" "blob" "0" "default" 0x151f7c7580 "users" "box_bytes" 0x00023432 0x75736572730000000000000000 0x68656c6c6f
    // smart_contracts/box_storage/contract.py:24
    // class BoxStorage(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@39
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e // method "get_box()uint64", method "get_item_box_map(uint64)string", method "get_box_map()string", method "maybe_box()(uint64,bool)", method "maybe_box_map()(string,bool)", method "get_box_example()(uint64,byte[],string)", method "get_box_map_example()bool", method "maybe_box_example()void", method "maybe_box_map_example()void", method "get_box_map_struct(uint64)(string,uint64,uint64)", method "set_box(uint64)void", method "set_box_map(uint64,string)void", method "set_box_map_struct(uint64,(string,uint64,uint64))bool", method "set_box_example(uint64,byte[],string)void", method "delete_box()void", method "delete_box_map(uint64)void", method "box_map_length()uint64", method "box_map_struct_length()bool", method "box_map_length_example()void", method "extract_box()void", method "value_box()void", method "exist_box()bool", method "exist_box_example()(bool,bool,bool)", method "slice_box()void", method "arc4_box()void", method "key_box()byte[]", method "key_box_example()void", method "box_map_exists(uint64)bool", method "box_map_struct_exists(uint64)bool", method "key_prefix_box_map()byte[]"
    txna ApplicationArgs 0
    match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35
    err

main_key_prefix_box_map_route@35:
    // smart_contracts/box_storage/contract.py:265
    // @arc4.abimethod
    pushbytes 0x151f7c750000
    log
    intc_0 // 1
    return

main_key_box_example_route@32:
    // smart_contracts/box_storage/contract.py:248
    // @arc4.abimethod
    err // box string key ok

main_key_box_route@31:
    // smart_contracts/box_storage/contract.py:244
    // @arc4.abimethod
    pushbytes 0x151f7c750007626f785f696e74
    log
    intc_0 // 1
    return

main_arc4_box_route@30:
    // smart_contracts/box_storage/contract.py:234-237
    // box_bytes = Box(StaticInts, key=Bytes(b"d"))
    // box_bytes.value = StaticInts(
    //     arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3)
    // )
    pushbytess 0x64 0x00010203 // 0x64, 0x00010203
    // smart_contracts/box_storage/contract.py:235-237
    // box_bytes.value = StaticInts(
    //     arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3)
    // )
    box_put
    // smart_contracts/box_storage/contract.py:232
    // @arc4.abimethod
    intc_0 // 1
    return

main___algopy_default_create@39:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.box_storage.contract.BoxStorage.get_box[routing]() -> void:
get_box:
    // smart_contracts/box_storage/contract.py:41
    // return self.box_int.value
    bytec_0 // "box_int"
    box_get
    assert // check self.box_int exists
    btoi
    // smart_contracts/box_storage/contract.py:38-39
    // # example: GET_BOX_STORAGE
    // @arc4.abimethod
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.get_item_box_map[routing]() -> void:
get_item_box_map:
    // smart_contracts/box_storage/contract.py:43
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    // smart_contracts/box_storage/contract.py:45
    // return self.box_map[key]
    itob
    box_get
    assert // check self.box_map entry exists
    // smart_contracts/box_storage/contract.py:43
    // @arc4.abimethod
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.get_box_map[routing]() -> void:
get_box_map:
    // smart_contracts/box_storage/contract.py:49
    // key_1 = UInt64(1)
    intc_0 // 1
    // smart_contracts/box_storage/contract.py:50
    // return self.box_map.get(key_1, default=String("default"))
    itob
    box_get
    bytec 7 // "default"
    cover 2
    select
    // smart_contracts/box_storage/contract.py:47
    // @arc4.abimethod
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.maybe_box[routing]() -> void:
maybe_box:
    // smart_contracts/box_storage/contract.py:54
    // box_int_value, box_int_exists = self.box_int.maybe()
    bytec_0 // "box_int"
    box_get
    swap
    btoi
    // smart_contracts/box_storage/contract.py:52
    // @arc4.abimethod
    itob
    bytec_3 // 0x00
    intc_1 // 0
    uncover 3
    setbit
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.maybe_box_map[routing]() -> void:
maybe_box_map:
    // smart_contracts/box_storage/contract.py:59
    // key_1 = UInt64(1)
    intc_0 // 1
    // smart_contracts/box_storage/contract.py:60
    // value, exists = self.box_map.maybe(key_1)
    itob
    box_get
    dup
    uncover 2
    swap
    // smart_contracts/box_storage/contract.py:61
    // if not exists:
    bnz maybe_box_map_after_if_else@3
    // smart_contracts/box_storage/contract.py:62
    // value = String("")
    pushbytes ""
    bury 1

maybe_box_map_after_if_else@3:
    // smart_contracts/box_storage/contract.py:57
    // @arc4.abimethod
    dupn 2
    len
    itob
    extract 6 2
    swap
    concat
    bytec_3 // 0x00
    intc_1 // 0
    dig 4
    setbit
    pushbytes 0x0003
    swap
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.get_box_example[routing]() -> void:
get_box_example:
    // smart_contracts/box_storage/contract.py:71
    // self.box_int.value,
    bytec_0 // "box_int"
    box_get
    assert // check self.box_int exists
    btoi
    // smart_contracts/box_storage/contract.py:72
    // self.box_dynamic_bytes.value.native,
    bytec 4 // "b"
    box_get
    assert // check self.box_dynamic_bytes exists
    extract 2 0
    // smart_contracts/box_storage/contract.py:73
    // self.box_string.value,
    bytec_2 // 0x424f585f43
    box_get
    assert // check self.box_string exists
    // smart_contracts/box_storage/contract.py:67-68
    // # example: GET_BOX_STORAGE_EXAMPLE
    // @arc4.abimethod
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    pushbytes 0x000c
    concat
    dig 1
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.get_box_map_example[routing]() -> void:
get_box_map_example:
    // smart_contracts/box_storage/contract.py:78
    // key_1 = UInt64(1)
    intc_0 // 1
    // smart_contracts/box_storage/contract.py:79
    // assert self.box_map.get(key_1, default=String("default")) == String("default")
    itob
    box_get
    bytec 7 // "default"
    cover 2
    select
    bytec 7 // "default"
    ==
    assert
    // smart_contracts/box_storage/contract.py:76
    // @arc4.abimethod
    bytec 8 // 0x151f7c7580
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.maybe_box_example[routing]() -> void:
maybe_box_example:
    // smart_contracts/box_storage/contract.py:84
    // del self.box_int.value
    bytec_0 // "box_int"
    box_del
    pop
    // smart_contracts/box_storage/contract.py:85
    // assert self.box_int.get(default=UInt64(42)) == 42
    bytec_0 // "box_int"
    box_get
    swap
    btoi
    intc_2 // 42
    dig 1
    dig 3
    select
    intc_2 // 42
    ==
    assert
    // smart_contracts/box_storage/contract.py:87
    // assert not box_int_exists
    swap
    !
    assert
    // smart_contracts/box_storage/contract.py:88
    // assert box_int_value == 0
    !
    // smart_contracts/box_storage/contract.py:82
    // @arc4.abimethod
    return


// smart_contracts.box_storage.contract.BoxStorage.maybe_box_map_example[routing]() -> void:
maybe_box_map_example:
    // smart_contracts/box_storage/contract.py:93
    // key_1 = UInt64(1)
    intc_0 // 1
    // smart_contracts/box_storage/contract.py:94
    // value, exists = self.box_map.maybe(key_1)
    itob
    box_len
    bury 1
    // smart_contracts/box_storage/contract.py:95
    // assert not exists
    !
    assert
    // smart_contracts/box_storage/contract.py:92
    // key_0 = UInt64(0)
    intc_1 // 0
    // smart_contracts/box_storage/contract.py:96
    // assert key_0 in self.box_map
    itob
    box_len
    bury 1
    // smart_contracts/box_storage/contract.py:90
    // @arc4.abimethod
    return


// smart_contracts.box_storage.contract.BoxStorage.get_box_map_struct[routing]() -> void:
get_box_map_struct:
    // smart_contracts/box_storage/contract.py:100
    // return self.box_map_struct[key]
    bytec 9 // "users"
    // smart_contracts/box_storage/contract.py:98
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/box_storage/contract.py:100
    // return self.box_map_struct[key]
    concat
    box_get
    assert // check self.box_map_struct entry exists
    // smart_contracts/box_storage/contract.py:98
    // @arc4.abimethod
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.set_box[routing]() -> void:
set_box:
    // smart_contracts/box_storage/contract.py:104-105
    // # example: SET_BOX_STORAGE
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    // smart_contracts/box_storage/contract.py:107
    // self.box_int.value = value_int
    itob
    bytec_0 // "box_int"
    swap
    box_put
    // smart_contracts/box_storage/contract.py:104-105
    // # example: SET_BOX_STORAGE
    // @arc4.abimethod
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.set_box_map[routing]() -> void:
set_box_map:
    // smart_contracts/box_storage/contract.py:109
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/box_storage/contract.py:111
    // self.box_map[key] = value
    swap
    itob
    dup
    box_del
    pop
    swap
    box_put
    // smart_contracts/box_storage/contract.py:109
    // @arc4.abimethod
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.set_box_map_struct[routing]() -> void:
set_box_map_struct:
    // smart_contracts/box_storage/contract.py:113
    // @arc4.abimethod
    txna ApplicationArgs 2
    // smart_contracts/box_storage/contract.py:115
    // self.box_map_struct[key] = value.copy()
    bytec 9 // "users"
    // smart_contracts/box_storage/contract.py:113
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/box_storage/contract.py:115
    // self.box_map_struct[key] = value.copy()
    concat
    dup
    box_del
    pop
    swap
    box_put
    // smart_contracts/box_storage/contract.py:113
    // @arc4.abimethod
    bytec 8 // 0x151f7c7580
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.set_box_example[routing]() -> void:
set_box_example:
    // smart_contracts/box_storage/contract.py:121-122
    // # example: SET_BOX_STORAGE_EXAMPLE
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/box_storage/contract.py:129
    // self.box_int.value = value_int
    uncover 2
    itob
    bytec_0 // "box_int"
    swap
    box_put
    // smart_contracts/box_storage/contract.py:130
    // self.box_dynamic_bytes.value = value_dbytes.copy()
    bytec 4 // "b"
    box_del
    pop
    bytec 4 // "b"
    dig 2
    box_put
    // smart_contracts/box_storage/contract.py:131
    // self.box_string.value = value_string
    bytec_2 // 0x424f585f43
    box_del
    pop
    bytec_2 // 0x424f585f43
    swap
    box_put
    // smart_contracts/box_storage/contract.py:132
    // self.box_bytes.value = value_dbytes.native
    extract 2 0
    bytec 10 // "box_bytes"
    box_del
    pop
    bytec 10 // "box_bytes"
    swap
    box_put
    // smart_contracts/box_storage/contract.py:139
    // self.box_int.value += 3
    bytec_0 // "box_int"
    box_get
    assert // check self.box_int exists
    btoi
    pushint 3 // 3
    +
    itob
    bytec_0 // "box_int"
    swap
    box_put
    // smart_contracts/box_storage/contract.py:121-122
    // # example: SET_BOX_STORAGE_EXAMPLE
    // @arc4.abimethod
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.delete_box[routing]() -> void:
delete_box:
    // smart_contracts/box_storage/contract.py:146
    // del self.box_int.value
    bytec_0 // "box_int"
    box_del
    pop
    // smart_contracts/box_storage/contract.py:147
    // del self.box_dynamic_bytes.value
    bytec 4 // "b"
    box_del
    pop
    // smart_contracts/box_storage/contract.py:148
    // del self.box_string.value
    bytec_2 // 0x424f585f43
    box_del
    pop
    // smart_contracts/box_storage/contract.py:150
    // assert self.box_int.get(default=UInt64(42)) == 42
    bytec_0 // "box_int"
    box_get
    swap
    btoi
    intc_2 // 42
    swap
    uncover 2
    select
    intc_2 // 42
    ==
    assert
    // smart_contracts/box_storage/contract.py:152
    // self.box_dynamic_bytes.get(default=arc4.DynamicBytes(b"42")).native == b"42"
    bytec 4 // "b"
    box_get
    bytec 11 // 0x00023432
    cover 2
    select
    extract 2 0
    pushbytes 0x3432
    ==
    // smart_contracts/box_storage/contract.py:151-153
    // assert (
    //     self.box_dynamic_bytes.get(default=arc4.DynamicBytes(b"42")).native == b"42"
    // )
    assert
    // smart_contracts/box_storage/contract.py:154
    // assert self.box_string.get(default=arc4.String("42")) == "42"
    bytec_2 // 0x424f585f43
    box_get
    bytec 11 // 0x00023432
    cover 2
    select
    bytec 11 // 0x00023432
    ==
    // smart_contracts/box_storage/contract.py:143-144
    // # example: DELETE_BOX_STORAGE
    // @arc4.abimethod
    return


// smart_contracts.box_storage.contract.BoxStorage.delete_box_map[routing]() -> void:
delete_box_map:
    // smart_contracts/box_storage/contract.py:156
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    // smart_contracts/box_storage/contract.py:158
    // del self.box_map[key]
    itob
    box_del
    pop
    // smart_contracts/box_storage/contract.py:156
    // @arc4.abimethod
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.box_map_length[routing]() -> void:
box_map_length:
    // smart_contracts/box_storage/contract.py:165
    // key_0 = UInt64(0)
    intc_1 // 0
    // smart_contracts/box_storage/contract.py:166
    // if key_0 not in self.box_map:
    itob
    dup
    box_len
    bury 1
    bnz box_map_length_after_if_else@3
    // smart_contracts/box_storage/contract.py:167
    // return UInt64(0)
    intc_1 // 0

box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:
    // smart_contracts/box_storage/contract.py:162-163
    // # example: LENGTH_BOX_STORAGE
    // @arc4.abimethod
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

box_map_length_after_if_else@3:
    // smart_contracts/box_storage/contract.py:168
    // return self.box_map.length(key_0)
    dup
    box_len
    assert // check self.box_map entry exists
    // smart_contracts/box_storage/contract.py:162-163
    // # example: LENGTH_BOX_STORAGE
    // @arc4.abimethod
    b box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4


// smart_contracts.box_storage.contract.BoxStorage.box_map_struct_length[routing]() -> void:
box_map_struct_length:
    // smart_contracts/box_storage/contract.py:175
    // self.box_map_struct[key_0] = value.copy()
    bytec 12 // 0x75736572730000000000000000
    box_del
    pop
    bytec 12 // 0x75736572730000000000000000
    // smart_contracts/box_storage/contract.py:173
    // value = UserStruct(arc4.String("testName"), arc4.UInt64(70), arc4.UInt64(2))
    pushbytes 0x0012000000000000004600000000000000020008746573744e616d65
    // smart_contracts/box_storage/contract.py:175
    // self.box_map_struct[key_0] = value.copy()
    box_put
    // smart_contracts/box_storage/contract.py:176
    // assert self.box_map_struct[key_0].bytes.length == value.bytes.length
    bytec 12 // 0x75736572730000000000000000
    box_len
    pop
    pushint 28 // 28
    ==
    assert
    // smart_contracts/box_storage/contract.py:170
    // @arc4.abimethod
    bytec 8 // 0x151f7c7580
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.box_map_length_example[routing]() -> void:
box_map_length_example:
    // smart_contracts/box_storage/contract.py:185
    // key_0 = UInt64(0)
    intc_1 // 0
    // smart_contracts/box_storage/contract.py:187
    // self.box_map[key_0] = value
    itob
    dup
    box_del
    pop
    dup
    // smart_contracts/box_storage/contract.py:186
    // value = String("Hmmmmm")
    pushbytes "Hmmmmm"
    // smart_contracts/box_storage/contract.py:187
    // self.box_map[key_0] = value
    box_put
    // smart_contracts/box_storage/contract.py:188
    // assert self.box_map[key_0].bytes.length == value.bytes.length
    box_len
    pop
    pushint 6 // 6
    ==
    // smart_contracts/box_storage/contract.py:182-183
    // # example: LENGTH_BOX_STORAGE_EXAMPLES
    // @arc4.abimethod
    return


// smart_contracts.box_storage.contract.BoxStorage.extract_box[routing]() -> void:
extract_box:
    // smart_contracts/box_storage/contract.py:196
    // box = Box(Bytes, key=String("blob"))
    bytec 5 // "blob"
    // smart_contracts/box_storage/contract.py:197
    // assert box.create(size=UInt64(32))
    pushint 32 // 32
    box_create
    assert
    // smart_contracts/box_storage/contract.py:199
    // sender_bytes = Txn.sender.bytes
    txn Sender
    // smart_contracts/box_storage/contract.py:200
    // app_address = Global.current_application_address.bytes
    global CurrentApplicationAddress
    // smart_contracts/box_storage/contract.py:196
    // box = Box(Bytes, key=String("blob"))
    bytec 5 // "blob"
    // smart_contracts/box_storage/contract.py:202
    // box.replace(0, sender_bytes)
    intc_1 // 0
    dig 3
    box_replace
    // smart_contracts/box_storage/contract.py:196
    // box = Box(Bytes, key=String("blob"))
    bytec 5 // "blob"
    // smart_contracts/box_storage/contract.py:203
    // box.splice(0, 0, app_address)
    intc_1 // 0
    dup
    dig 3
    box_splice
    // smart_contracts/box_storage/contract.py:196
    // box = Box(Bytes, key=String("blob"))
    bytec 5 // "blob"
    // smart_contracts/box_storage/contract.py:204
    // box.replace(64, value_3)
    pushint 64 // 64
    // smart_contracts/box_storage/contract.py:201
    // value_3 = Bytes(b"hello")
    bytec 13 // 0x68656c6c6f
    // smart_contracts/box_storage/contract.py:204
    // box.replace(64, value_3)
    box_replace
    // smart_contracts/box_storage/contract.py:196
    // box = Box(Bytes, key=String("blob"))
    bytec 5 // "blob"
    // smart_contracts/box_storage/contract.py:205
    // prefix = box.extract(0, 32 * 2 + value_3.length)
    intc_1 // 0
    pushint 69 // 69
    box_extract
    // smart_contracts/box_storage/contract.py:206
    // assert prefix == app_address + sender_bytes + value_3
    swap
    uncover 2
    concat
    // smart_contracts/box_storage/contract.py:201
    // value_3 = Bytes(b"hello")
    bytec 13 // 0x68656c6c6f
    // smart_contracts/box_storage/contract.py:206
    // assert prefix == app_address + sender_bytes + value_3
    concat
    ==
    // smart_contracts/box_storage/contract.py:193-194
    // # example: EXTRACT_BOX
    // @arc4.abimethod
    return


// smart_contracts.box_storage.contract.BoxStorage.value_box[routing]() -> void:
value_box:
    // smart_contracts/box_storage/contract.py:213
    // assert self.box_int.value == UInt64(10)
    bytec_0 // "box_int"
    box_get
    assert // check self.box_int exists
    btoi
    intc_3 // 10
    ==
    // smart_contracts/box_storage/contract.py:210-211
    // # example: OTHER_OPS_BOX
    // @arc4.abimethod
    return


// smart_contracts.box_storage.contract.BoxStorage.exist_box[routing]() -> void:
exist_box:
    // smart_contracts/box_storage/contract.py:217
    // return bool(self.box_int)
    bytec_0 // "box_int"
    box_len
    bury 1
    // smart_contracts/box_storage/contract.py:215
    // @arc4.abimethod
    bytec_3 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.exist_box_example[routing]() -> void:
exist_box_example:
    // smart_contracts/box_storage/contract.py:221
    // return bool(self.box_dynamic_bytes), bool(self.box_string), bool(self.box_bytes)
    bytec 4 // "b"
    box_len
    bury 1
    bytec_2 // 0x424f585f43
    box_len
    cover 2
    pop
    bytec 10 // "box_bytes"
    box_len
    cover 3
    pop
    // smart_contracts/box_storage/contract.py:219
    // @arc4.abimethod
    bytec_3 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    intc_0 // 1
    uncover 2
    setbit
    pushint 2 // 2
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.slice_box[routing]() -> void:
slice_box:
    // smart_contracts/box_storage/contract.py:225
    // box_0 = Box(Bytes, key=String("0"))
    bytec 6 // "0"
    // smart_contracts/box_storage/contract.py:226
    // box_0.value = Bytes(b"Testing testing 123")
    box_del
    pop
    // smart_contracts/box_storage/contract.py:225
    // box_0 = Box(Bytes, key=String("0"))
    bytec 6 // "0"
    // smart_contracts/box_storage/contract.py:226
    // box_0.value = Bytes(b"Testing testing 123")
    pushbytes 0x54657374696e672074657374696e6720313233
    box_put
    // smart_contracts/box_storage/contract.py:225
    // box_0 = Box(Bytes, key=String("0"))
    bytec 6 // "0"
    // smart_contracts/box_storage/contract.py:227
    // assert box_0.value[0:7] == b"Testing"
    box_len
    pop
    dup
    intc_1 // 0
    dig 2
    select
    pushint 7 // 7
    dig 2
    <
    uncover 2
    pushint 7 // 7
    uncover 2
    select
    dig 1
    -
    // smart_contracts/box_storage/contract.py:225
    // box_0 = Box(Bytes, key=String("0"))
    bytec 6 // "0"
    // smart_contracts/box_storage/contract.py:227
    // assert box_0.value[0:7] == b"Testing"
    cover 2
    box_extract
    pushbytes 0x54657374696e67
    ==
    assert
    // smart_contracts/box_storage/contract.py:229
    // self.box_string.value = arc4.String("Hello")
    bytec_2 // 0x424f585f43
    box_del
    pop
    bytec_2 // 0x424f585f43
    pushbytes 0x000548656c6c6f
    box_put
    // smart_contracts/box_storage/contract.py:230
    // assert self.box_string.value.bytes[2:10] == b"Hello"
    bytec_2 // 0x424f585f43
    box_len
    pop
    pushint 2 // 2
    dig 1
    <
    dig 1
    pushint 2 // 2
    uncover 2
    select
    intc_3 // 10
    dig 2
    <
    uncover 2
    intc_3 // 10
    uncover 2
    select
    dig 1
    -
    bytec_2 // 0x424f585f43
    cover 2
    box_extract
    pushbytes 0x48656c6c6f
    ==
    // smart_contracts/box_storage/contract.py:223
    // @arc4.abimethod
    return


// smart_contracts.box_storage.contract.BoxStorage.box_map_exists[routing]() -> void:
box_map_exists:
    // smart_contracts/box_storage/contract.py:256-257
    // # example: OTHER_OPS_BOX_MAP
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    // smart_contracts/box_storage/contract.py:259
    // return key in self.box_map
    itob
    box_len
    bury 1
    // smart_contracts/box_storage/contract.py:256-257
    // # example: OTHER_OPS_BOX_MAP
    // @arc4.abimethod
    bytec_3 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// smart_contracts.box_storage.contract.BoxStorage.box_map_struct_exists[routing]() -> void:
box_map_struct_exists:
    // smart_contracts/box_storage/contract.py:263
    // return key in self.box_map_struct
    bytec 9 // "users"
    // smart_contracts/box_storage/contract.py:261
    // @arc4.abimethod
    txna ApplicationArgs 1
    // smart_contracts/box_storage/contract.py:263
    // return key in self.box_map_struct
    concat
    box_len
    bury 1
    // smart_contracts/box_storage/contract.py:261
    // @arc4.abimethod
    bytec_3 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
