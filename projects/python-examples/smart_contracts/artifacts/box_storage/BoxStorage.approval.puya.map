{
  "version": 3,
  "sources": [
    "../../box_storage/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAmUK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA/TL;;;AA+TK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA3TL;;;AAAA;AA2TK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAzJL;;;AAAA;AAyJK;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAvHL;;;AAAA;AAAA;;;AAAA;;;AAuHK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA9GL;;;AAAA;;;AA8GK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA1GL;;;AAAA;AAAA;;;AAAA;;;AA0GK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtGL;;;AAAA;AAsGK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA/FL;;;AA+FK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AApBL;;;AAAA;AAoBK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBL;;AAAA;;;;;;;;;AAgBA;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEe;;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEgB;AACD;AAAA;AAAgC;;AAAhC;;AAAA;AAAP;AAER;;;AAE6B;AACM;AAApB;AAAP;AACe;;AAFM;AAId;AAAP;AAJqB;AAMd;AAAA;;AAAA;;AAAA;AAAA;AAAP;;AAER;;;AAEwC;AAAA;AAAA;AAAA;AAChC;AAAA;AAER;;;AAEgB;AACQ;AAAA;AAAA;AAAA;;AAAA;AACb;;;AACS;;AAAR;;AACJ;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;AAE6B;AACM;AAApB;AAAP;AADqB;AAGL;AAAA;AAAA;;AAAA;AACb;;;AACS;;AAAR;;AACJ;;AAAA;;AAAA;;AAAA;;AAAA;AAKR;;;AAGY;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;;AACA;;AAAA;AAAA;AAHJ;AAMR;;;AAEgB;AACD;AAAA;AAAgC;;AAAhC;;AAAA;AAAsD;;AAAtD;AAAP;AACO;AAAP;AAER;;;AAEY;AAAJ;;AACO;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAA;;AAAA;AAAwC;;AAAxC;AAAP;AACgC;AAAA;AAAA;AAAA;AACzB;AAAA;AAAP;AACO;AAAP;;AAER;;;AAGgB;AACQ;AAAA;AAAA;;AACT;AAAP;AAHQ;AAID;AAAA;AAAA;;AAAP;;AAER;;;AAEe;;AAAA;;AAAA;AAAA;AAAA;AAAP;AAKR;;;AAEQ;;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAEQ;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAER;;;AAEQ;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACO;AAAA;AAAA;;AAAA;AAAP;AACO;AAAP;AAKR;;;AAOQ;;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACuB;;AAAA;;;AAAvB;;AAAA;;AAAA;;AAAA;AAAA;AAEa;;AAAA;AAAA;AAET;;AAAA;AAAA;AAAA;AAAA;AAAuC;AAAA;AAAA;AAAvC;AADJ;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB;;AAAtB;AAAA;AAAA;AAAA;AAAA;;AAKR;;;AAEY;AAAJ;;AACI;;AAAJ;;AACI;;AAAJ;;AAEO;AAAA;AAAA;AAAA;AAAyB;;AAAzB;AAAA;;AAAA;AAAwC;;AAAxC;AAAP;AAEI;;AAAA;AAAmC;;AAAnC;;AAAA;AAAA;;;AAAuE;;;;AAAvE;AADJ;AAGO;;AAAA;AAA4B;;AAA5B;;AAAA;AAAkD;;AAAlD;AAAP;;AAER;;;AAEY;;AAAA;AAAJ;;;AAER;;;AAGQ;;AAAyB;AAAzB;;AACO;;AAAA;AAAA;;AAAP;AAEA;;AAAA;;AAJqB;AAKL;AACT;AAAP;AACgB;;AAAT;AAAP;;AAKR;;;AAEgB;AACL;AAAA;AAAA;AAAA;;AAAA;;;AACQ;AAAP;AAAA;AACG;;AAAA;AAAA;AAAP;AAAA;AAER;;;AAE6B;AACM;AAApB;AAAP;AADqB;AAEd;AAAA;AAAP;AAER;;;AAKQ;;AAAA;;AAAA;;AAFQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAER;AACO;;AAAA;AAAA;AAA2C;;AAA3C;AAAP;AACO;;AAAA;AAAA;AAAqC;;AAArC;AAAP;AACO;AAAP;AAKR;;;AAEgB;AAER;AAAA;AAAA;;AAAA;AADQ;;;;;;;;AACR;AACO;AAAA;AAAA;AAAoC;;AAApC;AAAP;AACO;AAAA;AAA8B;;AAA9B;AAAP;;AAER;;;AAE6B;AACM;AAApB;AAAP;AADqB;AAEd;AAAA;AAAkB;AAAlB;AAAP;AAEqB;AACM;AAApB;AAAP;AADqB;AAEd;AAAA;AAAkB;AAAlB;AAAP;AAEqB;AACM;AAApB;AAAP;AADqB;AAEd;AAAA;AAAkB;AAAlB;AAAP;AAEqB;AACM;AAApB;AAAP;AADqB;AAEd;AAAA;AAAkB;AAAlB;AAAP;;AAKR;;;AAE6B;AACM;AAApB;AAAP;AAEe;;AACD;;AAJO;AAML;AAAhB;;AAAA;AANqB;AAON;AAAG;AAAlB;;AAAA;AAPqB;AAQL;AAHN;;AAGV;AARqB;AASI;AAAG;;AAAnB;AACQ;AAAA;;AAAA;AALP;;AAKO;AAAV;AAAP;;AAKR;;;AAE6B;AACM;AAApB;AAAP;AADqB;AAEd;AAAA;;AAAP;AAGe;;AACD;;AANO;AAQL;AAAhB;;AAAA;AARqB;AASN;AAAG;AAAlB;;AAAA;AATqB;AAUL;AAHN;;AAGV;AAVqB;AAWI;AAAG;;AAAnB;AACQ;;AAAA;;AAAA;AALP;;AAKO;AAAV;AAAP;AAZqB;AAcd;AAAP;AAGY;AAjBS;AAiBrB;AAAA;AAjBqB;AAkBd;AAAA;;AAAP;AAlBqB;AAmBd;AAAA;AAAkB;AAAlB;AAAP;;AAKR;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB;;AAAtB;AAAP;;AAER;;;AAEoB;AAAL;AAAA;;AAAP;AAER;;;AAEoB;;AAAL;AAAA;;AAAmC;;AAAL;AAAA;;AAA4B;;AAAL;AAAA;;AAA5D;AAER;;;AAE+B;;AACvB;;AADuB;;AACT;;;;;;;;;;;;;;;;;;;;;AAAd;AADuB;;AAEhB;AAAA;AAAA;AAAY;AAAZ;;AAAA;AAAc;;AAAd;;AAAA;AAAA;;AAAc;;AAAd;;AAAA;AAAA;;AAAA;AAFgB;;AAEhB;;AAAA;AAAoB;;;;;;;;;AAApB;AAAP;AAEA;;AAAA;;AAAA;;AAAwB;;;;;;;;;AAAxB;AACO;;AAAA;AAAA;AAA4B;;AAA5B;;AAAA;AAAA;;AAA4B;;AAA5B;;AAAA;AAA8B;;AAA9B;;AAAA;AAAA;;AAA8B;;AAA9B;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAqC;;;;;;;AAArC;AAAP;;AAER;;;AAEwC;;AACd;;;;;;AAAlB;AADgC;;AAKzB;AAAA;AAAA;;;AAAsB;AAAtB;AAAP;AALgC;;AAMzB;AAAA;AAAA;;;AAAsB;;;AAAtB;AAAP;AANgC;;AAOzB;AAAA;AAAA;;;AAAsB;;;AAAtB;AAAP;AAPgC;;AAQzB;AAAA;AAAA;;;AAAsB;;;AAAtB;AAAP;;AAMR;;;AAGe;AAAP;;AAMR;;;AAEe;;AAAA;AAAA;AAAA;;AAAP;AAER;;;AAEsB;;AAAP;;AAAA;AAAA;AAAA;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 32 64"
    },
    "7": {
      "op": "bytecblock 0x626c6f62 0x151f7c75 \"box_int\" 0x00 0x424f585f43 \"b\" 0x64 0x75736572730000000000000000 0x68656c6c6f \"0\" \"default\" \"users\" \"box_bytes\" 0x00023432 \"box_ref\" 0x0003"
    },
    "101": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "103": {
      "op": "bz main_bare_routing@41",
      "stack_out": []
    },
    "106": {
      "op": "pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0xcb911969 0x4fc279e1 0x9ef66971 0xe89b7f6f 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x3b8cae2f 0x78b0734e 0xb13e64d8 0xd67789eb 0x94e5d3f4 0xa86d16b1 0x54db62de 0xef156830 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e // method \"get_box()uint64\", method \"get_item_box_map(uint64)string\", method \"get_box_map()string\", method \"get_box_ref()void\", method \"maybe_box()(uint64,bool)\", method \"maybe_box_map()(string,bool)\", method \"maybe_box_ref()(byte[],bool)\", method \"get_box_example()(uint64,byte[],string)\", method \"get_box_map_example()bool\", method \"maybe_box_example()void\", method \"maybe_box_map_example()void\", method \"get_box_map_struct(uint64)(string,uint64,uint64)\", method \"set_box(uint64)void\", method \"set_box_map(uint64,string)void\", method \"set_box_map_struct(uint64,(string,uint64,uint64))bool\", method \"set_box_example(uint64,byte[],string)void\", method \"delete_box()void\", method \"delete_box_map(uint64)void\", method \"delete_box_ref()void\", method \"box_map_length()uint64\", method \"length_box_ref()uint64\", method \"box_map_struct_length()bool\", method \"box_map_length_example()void\", method \"length_box_ref_example()void\", method \"extract_box_ref()void\", method \"manipulate_box_ref()void\", method \"value_box()void\", method \"exist_box()bool\", method \"exist_box_example()(bool,bool,bool)\", method \"slice_box()void\", method \"arc4_box()void\", method \"key_box()byte[]\", method \"key_box_example()void\", method \"box_map_exists(uint64)bool\", method \"box_map_struct_exists(uint64)bool\", method \"key_prefix_box_map()byte[]\""
    },
    "288": {
      "op": "txna ApplicationArgs 0"
    },
    "291": {
      "op": "match main_get_box_route@5 main_get_item_box_map_route@6 main_get_box_map_route@7 main_get_box_ref_route@8 main_maybe_box_route@9 main_maybe_box_map_route@10 main_maybe_box_ref_route@11 main_get_box_example_route@12 main_get_box_map_example_route@13 main_maybe_box_example_route@14 main_maybe_box_map_example_route@15 main_get_box_map_struct_route@16 main_set_box_route@17 main_set_box_map_route@18 main_set_box_map_struct_route@19 main_set_box_example_route@20 main_delete_box_route@21 main_delete_box_map_route@22 main_delete_box_ref_route@23 main_box_map_length_route@24 main_length_box_ref_route@25 main_box_map_struct_length_route@26 main_box_map_length_example_route@27 main_length_box_ref_example_route@28 main_extract_box_ref_route@29 main_manipulate_box_ref_route@30 main_value_box_route@31 main_exist_box_route@32 main_exist_box_example_route@33 main_slice_box_route@34 main_arc4_box_route@35 main_key_box_route@36 main_key_box_example_route@37 main_box_map_exists_route@38 main_box_map_struct_exists_route@39 main_key_prefix_box_map_route@40"
    },
    "365": {
      "block": "main_after_if_else@43",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "366": {
      "op": "return"
    },
    "367": {
      "block": "main_key_prefix_box_map_route@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "369": {
      "op": "!",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "370": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "371": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "373": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "374": {
      "op": "pushbytes 0x151f7c750000",
      "defined_out": [
        "0x151f7c750000"
      ],
      "stack_out": [
        "0x151f7c750000"
      ]
    },
    "382": {
      "op": "log",
      "stack_out": []
    },
    "383": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "384": {
      "op": "return"
    },
    "385": {
      "block": "main_box_map_struct_exists_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "387": {
      "op": "!",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "388": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "389": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "391": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "392": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "395": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.box_map_struct_exists",
      "op": "callsub box_map_struct_exists",
      "defined_out": [
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0"
      ]
    },
    "398": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "0x00"
      ]
    },
    "399": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%11#0"
      ],
      "stack_out": [
        "to_encode%11#0",
        "0x00",
        "0"
      ]
    },
    "400": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%11#0"
      ]
    },
    "402": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%11#0"
      ],
      "stack_out": [
        "encoded_bool%11#0"
      ]
    },
    "403": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%11#0"
      ],
      "stack_out": [
        "encoded_bool%11#0",
        "0x151f7c75"
      ]
    },
    "404": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%11#0"
      ]
    },
    "405": {
      "op": "concat",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "406": {
      "op": "log",
      "stack_out": []
    },
    "407": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "408": {
      "op": "return"
    },
    "409": {
      "block": "main_box_map_exists_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "411": {
      "op": "!",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "412": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "413": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "415": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "416": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "419": {
      "op": "btoi",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "420": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.box_map_exists",
      "op": "callsub box_map_exists",
      "defined_out": [
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0"
      ]
    },
    "423": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "0x00"
      ]
    },
    "424": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0",
        "0x00",
        "0"
      ]
    },
    "425": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%10#0"
      ]
    },
    "427": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%10#0"
      ],
      "stack_out": [
        "encoded_bool%10#0"
      ]
    },
    "428": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%10#0"
      ],
      "stack_out": [
        "encoded_bool%10#0",
        "0x151f7c75"
      ]
    },
    "429": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%10#0"
      ]
    },
    "430": {
      "op": "concat",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "431": {
      "op": "log",
      "stack_out": []
    },
    "432": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "433": {
      "op": "return"
    },
    "434": {
      "block": "main_key_box_example_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "436": {
      "op": "!",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "437": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "438": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "440": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "441": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.key_box_example",
      "op": "callsub key_box_example"
    },
    "444": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "445": {
      "op": "return"
    },
    "446": {
      "block": "main_key_box_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "448": {
      "op": "!",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "449": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "450": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "452": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "453": {
      "op": "pushbytes 0x151f7c750007626f785f696e74",
      "defined_out": [
        "0x151f7c750007626f785f696e74"
      ],
      "stack_out": [
        "0x151f7c750007626f785f696e74"
      ]
    },
    "468": {
      "op": "log",
      "stack_out": []
    },
    "469": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "470": {
      "op": "return"
    },
    "471": {
      "block": "main_arc4_box_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "473": {
      "op": "!",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "474": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "475": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "477": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "478": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.arc4_box",
      "op": "callsub arc4_box"
    },
    "481": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "482": {
      "op": "return"
    },
    "483": {
      "block": "main_slice_box_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "485": {
      "op": "!",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "486": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "487": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "489": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "490": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.slice_box",
      "op": "callsub slice_box"
    },
    "493": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "494": {
      "op": "return"
    },
    "495": {
      "block": "main_exist_box_example_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "497": {
      "op": "!",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "498": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "499": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "501": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "502": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.exist_box_example",
      "op": "callsub exist_box_example",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0"
      ]
    },
    "505": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "0x00"
      ]
    },
    "506": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "0x00",
        "0"
      ]
    },
    "507": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "0x00",
        "0",
        "elements_to_encode%9#0"
      ]
    },
    "509": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%7#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%7#0"
      ]
    },
    "510": {
      "op": "bytec_3 // 0x00",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%7#0",
        "0x00"
      ]
    },
    "511": {
      "op": "intc_1 // 0",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%7#0",
        "0x00",
        "0"
      ]
    },
    "512": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_bool%7#0",
        "0x00",
        "0",
        "elements_to_encode%10#0"
      ]
    },
    "514": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%11#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0"
      ]
    },
    "515": {
      "op": "bytec_3 // 0x00",
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "0x00"
      ]
    },
    "516": {
      "op": "intc_1 // 0",
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "0x00",
        "0"
      ]
    },
    "517": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "0x00",
        "0",
        "elements_to_encode%11#0"
      ]
    },
    "519": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_bool%9#0"
      ],
      "stack_out": [
        "encoded_bool%7#0",
        "encoded_bool%8#0",
        "encoded_bool%9#0"
      ]
    },
    "520": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%7#0",
        "encoded_bool%9#0",
        "encoded_bool%8#0"
      ]
    },
    "521": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_bool%7#0",
        "encoded_bool%9#0",
        "encoded_bool%8#0",
        "0"
      ]
    },
    "522": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%7#0",
        "encoded_bool%9#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_bool%7#0",
        "encoded_bool%9#0",
        "is_true%0#0"
      ]
    },
    "523": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%9#0",
        "is_true%0#0",
        "encoded_bool%7#0"
      ]
    },
    "525": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "encoded_bool%7#0",
        "encoded_bool%9#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_bool%9#0",
        "is_true%0#0",
        "encoded_bool%7#0",
        "1"
      ]
    },
    "526": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%9#0",
        "encoded_bool%7#0",
        "1",
        "is_true%0#0"
      ]
    },
    "528": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%9#0",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_bool%9#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "529": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_bool%9#0"
      ]
    },
    "530": {
      "op": "intc_1 // 0",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_bool%9#0",
        "0"
      ]
    },
    "531": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "is_true%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "is_true%1#0"
      ]
    },
    "532": {
      "op": "pushint 2 // 2"
    },
    "534": {
      "op": "swap",
      "defined_out": [
        "2",
        "encoded_tuple_buffer%19#0",
        "is_true%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "2",
        "is_true%1#0"
      ]
    },
    "535": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0"
      ]
    },
    "536": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "0x151f7c75"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "539": {
      "op": "log",
      "stack_out": []
    },
    "540": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "541": {
      "op": "return"
    },
    "542": {
      "block": "main_exist_box_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "544": {
      "op": "!",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "545": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "546": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "548": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "549": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.exist_box",
      "op": "callsub exist_box",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "552": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00"
      ]
    },
    "553": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0",
        "0x00",
        "0"
      ]
    },
    "554": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%8#0"
      ]
    },
    "556": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0"
      ]
    },
    "557": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ],
      "stack_out": [
        "encoded_bool%6#0",
        "0x151f7c75"
      ]
    },
    "558": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%6#0"
      ]
    },
    "559": {
      "op": "concat",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "560": {
      "op": "log",
      "stack_out": []
    },
    "561": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "562": {
      "op": "return"
    },
    "563": {
      "block": "main_value_box_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "565": {
      "op": "!",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "566": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "567": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "569": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "570": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.value_box",
      "op": "callsub value_box"
    },
    "573": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "574": {
      "op": "return"
    },
    "575": {
      "block": "main_manipulate_box_ref_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "577": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "578": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "579": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "581": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "582": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.manipulate_box_ref",
      "op": "callsub manipulate_box_ref"
    },
    "585": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "586": {
      "op": "return"
    },
    "587": {
      "block": "main_extract_box_ref_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "589": {
      "op": "!",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "590": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "591": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "593": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "594": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.extract_box_ref",
      "op": "callsub extract_box_ref"
    },
    "597": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "598": {
      "op": "return"
    },
    "599": {
      "block": "main_length_box_ref_example_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "601": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "602": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "603": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "605": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "606": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.length_box_ref_example",
      "op": "callsub length_box_ref_example"
    },
    "609": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "610": {
      "op": "return"
    },
    "611": {
      "block": "main_box_map_length_example_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "613": {
      "op": "!",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "614": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "615": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "617": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "618": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.box_map_length_example",
      "op": "callsub box_map_length_example"
    },
    "621": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "622": {
      "op": "return"
    },
    "623": {
      "block": "main_box_map_struct_length_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "625": {
      "op": "!",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "626": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "627": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "629": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "630": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.box_map_struct_length",
      "op": "callsub box_map_struct_length",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "633": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "0x00"
      ]
    },
    "634": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0",
        "0x00",
        "0"
      ]
    },
    "635": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%7#0"
      ]
    },
    "637": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0"
      ]
    },
    "638": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ],
      "stack_out": [
        "encoded_bool%5#0",
        "0x151f7c75"
      ]
    },
    "639": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%5#0"
      ]
    },
    "640": {
      "op": "concat",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "641": {
      "op": "log",
      "stack_out": []
    },
    "642": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "643": {
      "op": "return"
    },
    "644": {
      "block": "main_length_box_ref_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "646": {
      "op": "!",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "647": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "648": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "650": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "651": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.length_box_ref",
      "op": "callsub length_box_ref",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "654": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "655": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "656": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "657": {
      "op": "concat",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "658": {
      "op": "log",
      "stack_out": []
    },
    "659": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "660": {
      "op": "return"
    },
    "661": {
      "block": "main_box_map_length_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "663": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "664": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "665": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "667": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "668": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.box_map_length",
      "op": "callsub box_map_length",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "671": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "672": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "673": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "674": {
      "op": "concat",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "675": {
      "op": "log",
      "stack_out": []
    },
    "676": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "677": {
      "op": "return"
    },
    "678": {
      "block": "main_delete_box_ref_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "680": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "681": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "682": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "684": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "685": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.delete_box_ref",
      "op": "callsub delete_box_ref"
    },
    "688": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "689": {
      "op": "return"
    },
    "690": {
      "block": "main_delete_box_map_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "692": {
      "op": "!",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "693": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "694": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "696": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "697": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "700": {
      "op": "btoi",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "701": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.delete_box_map",
      "op": "callsub delete_box_map",
      "stack_out": []
    },
    "704": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "705": {
      "op": "return"
    },
    "706": {
      "block": "main_delete_box_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "708": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "709": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "710": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "712": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "713": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.delete_box",
      "op": "callsub delete_box"
    },
    "716": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "717": {
      "op": "return"
    },
    "718": {
      "block": "main_set_box_example_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "720": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "721": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "722": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "724": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "725": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "728": {
      "op": "btoi",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "729": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "tmp%91#0"
      ]
    },
    "732": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0"
      ]
    },
    "735": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.set_box_example",
      "op": "callsub set_box_example",
      "stack_out": []
    },
    "738": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "739": {
      "op": "return"
    },
    "740": {
      "block": "main_set_box_map_struct_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "742": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "743": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "744": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "746": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "747": {
      "op": "txna ApplicationArgs 1"
    },
    "750": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%82#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "tmp%83#0"
      ]
    },
    "753": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.set_box_map_struct",
      "op": "callsub set_box_map_struct",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "756": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "757": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "758": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "760": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "761": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "762": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "763": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "764": {
      "op": "log",
      "stack_out": []
    },
    "765": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "766": {
      "op": "return"
    },
    "767": {
      "block": "main_set_box_map_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "769": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "770": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "771": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "773": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "774": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "777": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "778": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0"
      ]
    },
    "781": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0"
      ]
    },
    "784": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.set_box_map",
      "op": "callsub set_box_map",
      "stack_out": []
    },
    "787": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "788": {
      "op": "return"
    },
    "789": {
      "block": "main_set_box_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "791": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "792": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "793": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "795": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "796": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "799": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "800": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.set_box",
      "op": "callsub set_box",
      "stack_out": []
    },
    "803": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "804": {
      "op": "return"
    },
    "805": {
      "block": "main_get_box_map_struct_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "807": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "808": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "809": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "811": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "812": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "815": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.get_box_map_struct",
      "op": "callsub get_box_map_struct",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "818": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "0x151f7c75"
      ]
    },
    "819": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%62#0"
      ]
    },
    "820": {
      "op": "concat",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "821": {
      "op": "log",
      "stack_out": []
    },
    "822": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "823": {
      "op": "return"
    },
    "824": {
      "block": "main_maybe_box_map_example_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "826": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "827": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "828": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "830": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "831": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_map_example",
      "op": "callsub maybe_box_map_example"
    },
    "834": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "835": {
      "op": "return"
    },
    "836": {
      "block": "main_maybe_box_example_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "838": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "839": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "840": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "842": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "843": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_example",
      "op": "callsub maybe_box_example"
    },
    "846": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "847": {
      "op": "return"
    },
    "848": {
      "block": "main_get_box_map_example_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "850": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "851": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "852": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "854": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "855": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.get_box_map_example",
      "op": "callsub get_box_map_example",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "858": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "859": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "860": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "862": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "863": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "864": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "865": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "866": {
      "op": "log",
      "stack_out": []
    },
    "867": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "868": {
      "op": "return"
    },
    "869": {
      "block": "main_get_box_example_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "871": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "872": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "873": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "875": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "876": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.get_box_example",
      "op": "callsub get_box_example",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ]
    },
    "879": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0"
      ]
    },
    "881": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0"
      ]
    },
    "882": {
      "op": "dig 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%7#0 (copy)",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0",
        "elements_to_encode%7#0 (copy)"
      ]
    },
    "884": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "length%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0",
        "length%4#0"
      ]
    },
    "885": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0",
        "as_bytes%6#0"
      ]
    },
    "886": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "length_uint16%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "val_as_bytes%2#0",
        "length_uint16%4#0"
      ]
    },
    "889": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%8#0",
        "val_as_bytes%2#0",
        "length_uint16%4#0",
        "elements_to_encode%7#0"
      ]
    },
    "891": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "val_as_bytes%2#0",
        "encoded_value%4#0"
      ]
    },
    "892": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0"
      ]
    },
    "893": {
      "op": "pushbytes 0x000c",
      "defined_out": [
        "0x000c",
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "0x000c"
      ]
    },
    "897": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "898": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "900": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%13#0",
        "data_length%2#0"
      ]
    },
    "901": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "data_length%2#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%13#0",
        "data_length%2#0",
        "12"
      ]
    },
    "903": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%6#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%13#0",
        "current_tail_offset%6#0"
      ]
    },
    "904": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%13#0",
        "as_bytes%8#0"
      ]
    },
    "905": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%13#0",
        "offset_as_uint16%3#0"
      ]
    },
    "908": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "909": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%4#0"
      ]
    },
    "910": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "911": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%15#0",
        "elements_to_encode%8#0"
      ]
    },
    "912": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0"
      ]
    },
    "913": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "0x151f7c75"
      ]
    },
    "914": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "915": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "916": {
      "op": "log",
      "stack_out": []
    },
    "917": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "918": {
      "op": "return"
    },
    "919": {
      "block": "main_maybe_box_ref_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "921": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "922": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "923": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "925": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "926": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_ref",
      "op": "callsub maybe_box_ref",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "929": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "931": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%3#0"
      ]
    },
    "932": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "as_bytes%4#0"
      ]
    },
    "933": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%3#0"
      ]
    },
    "936": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%5#0",
        "length_uint16%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "938": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ]
    },
    "939": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0",
        "0x00"
      ]
    },
    "940": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%3#0",
        "0x00",
        "0"
      ]
    },
    "941": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%3#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "943": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_bool%2#0"
      ]
    },
    "944": {
      "op": "bytec 15 // 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_bool%2#0",
        "0x0003"
      ]
    },
    "946": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "0x0003",
        "encoded_bool%2#0"
      ]
    },
    "947": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "948": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%3#0"
      ]
    },
    "949": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "950": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x151f7c75"
      ]
    },
    "951": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "952": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "953": {
      "op": "log",
      "stack_out": []
    },
    "954": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "955": {
      "op": "return"
    },
    "956": {
      "block": "main_maybe_box_map_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "958": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "959": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "960": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "962": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "963": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_map",
      "op": "callsub maybe_box_map",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "966": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "968": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%2#0"
      ]
    },
    "969": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "as_bytes%2#0"
      ]
    },
    "970": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%2#0"
      ]
    },
    "973": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "length_uint16%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "975": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ]
    },
    "976": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "0x00"
      ]
    },
    "977": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "0x00",
        "0"
      ]
    },
    "978": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%2#0",
        "0x00",
        "0",
        "elements_to_encode%3#0"
      ]
    },
    "980": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_bool%1#0"
      ]
    },
    "981": {
      "op": "bytec 15 // 0x0003",
      "defined_out": [
        "0x0003",
        "encoded_bool%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_bool%1#0",
        "0x0003"
      ]
    },
    "983": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "0x0003",
        "encoded_bool%1#0"
      ]
    },
    "984": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "985": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%2#0"
      ]
    },
    "986": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "987": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "988": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "989": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "990": {
      "op": "log",
      "stack_out": []
    },
    "991": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "992": {
      "op": "return"
    },
    "993": {
      "block": "main_maybe_box_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "995": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "996": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "997": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "999": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1000": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.maybe_box",
      "op": "callsub maybe_box",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "1003": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "1004": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "1005": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "1006": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "val_as_bytes%1#0",
        "0x00",
        "0"
      ]
    },
    "1007": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "0x00",
        "0",
        "elements_to_encode%1#0"
      ]
    },
    "1009": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "encoded_bool%0#0"
      ]
    },
    "1010": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1011": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x151f7c75"
      ]
    },
    "1012": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1013": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1014": {
      "op": "log",
      "stack_out": []
    },
    "1015": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1016": {
      "op": "return"
    },
    "1017": {
      "block": "main_get_box_ref_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1019": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1020": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1021": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1023": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1024": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.get_box_ref",
      "op": "callsub get_box_ref"
    },
    "1027": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1028": {
      "op": "return"
    },
    "1029": {
      "block": "main_get_box_map_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1031": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1032": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1033": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1035": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1036": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.get_box_map",
      "op": "callsub get_box_map",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1039": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "1040": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "1041": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "1042": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "1045": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "1046": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "1047": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "1048": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "1049": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1050": {
      "op": "log",
      "stack_out": []
    },
    "1051": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1052": {
      "op": "return"
    },
    "1053": {
      "block": "main_get_item_box_map_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1055": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1056": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1057": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1059": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1060": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1063": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1064": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.get_item_box_map",
      "op": "callsub get_item_box_map",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1067": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "1068": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "1069": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "1070": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "1073": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "1074": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1075": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "1076": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "1077": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1078": {
      "op": "log",
      "stack_out": []
    },
    "1079": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1080": {
      "op": "return"
    },
    "1081": {
      "block": "main_get_box_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1083": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1084": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1085": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1087": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1088": {
      "callsub": "smart_contracts.box_storage.contract.BoxStorage.get_box",
      "op": "callsub get_box",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1091": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1092": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1093": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1094": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1095": {
      "op": "log",
      "stack_out": []
    },
    "1096": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1097": {
      "op": "return"
    },
    "1098": {
      "block": "main_bare_routing@41",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "1100": {
      "op": "bnz main_after_if_else@43",
      "stack_out": []
    },
    "1103": {
      "op": "txn ApplicationID"
    },
    "1105": {
      "op": "!"
    },
    "1106": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "1107": {
      "op": "intc_0 // 1"
    },
    "1108": {
      "op": "return"
    },
    "1109": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box",
      "params": {},
      "block": "get_box",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1112": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1113": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1114": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1115": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1116": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1117": {
      "error": "check self.box_int exists",
      "op": "assert // check self.box_int exists",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1118": {
      "retsub": true,
      "op": "retsub"
    },
    "1119": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_item_box_map",
      "params": {
        "key#0": "uint64"
      },
      "block": "get_item_box_map",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1122": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1124": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1125": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1126": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1127": {
      "retsub": true,
      "op": "retsub"
    },
    "1128": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_map",
      "params": {},
      "block": "get_box_map",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1131": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1132": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1133": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1134": {
      "op": "bytec 10 // \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "1136": {
      "op": "cover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1138": {
      "op": "select",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1139": {
      "retsub": true,
      "op": "retsub"
    },
    "1140": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_ref",
      "params": {},
      "block": "get_box_ref",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1143": {
      "op": "bytec_0 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1144": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1145": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1146": {
      "op": "assert",
      "stack_out": []
    },
    "1147": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "1149": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "1150": {
      "op": "box_del",
      "defined_out": [
        "sender_bytes#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "tmp%1#0"
      ]
    },
    "1151": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "1152": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "1153": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1154": {
      "op": "dig 2",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "1156": {
      "op": "cover 2",
      "stack_out": [
        "sender_bytes#0",
        "sender_bytes#0 (copy)",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1158": {
      "op": "select",
      "defined_out": [
        "sender_bytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "tmp%3#0"
      ]
    },
    "1159": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1160": {
      "op": "assert",
      "stack_out": []
    },
    "1161": {
      "retsub": true,
      "op": "retsub"
    },
    "1162": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box",
      "params": {},
      "block": "maybe_box",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "1165": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1166": {
      "op": "box_get",
      "defined_out": [
        "box_int_exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "box_int_exists#0"
      ]
    },
    "1167": {
      "op": "swap",
      "stack_out": [
        "box_int_exists#0",
        "maybe_value%0#0"
      ]
    },
    "1168": {
      "op": "btoi",
      "defined_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ]
    },
    "1169": {
      "op": "swap",
      "stack_out": [
        "box_int_value#0",
        "box_int_exists#0"
      ]
    },
    "1170": {
      "retsub": true,
      "op": "retsub"
    },
    "1171": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_map",
      "params": {},
      "block": "maybe_box_map",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "1174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1175": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1176": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "1177": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "1178": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "value#0"
      ]
    },
    "1180": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "exists#0"
      ]
    },
    "1181": {
      "op": "bnz maybe_box_map_after_if_else@2",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "1184": {
      "op": "pushbytes \"\""
    },
    "1186": {
      "op": "frame_bury 1"
    },
    "1188": {
      "block": "maybe_box_map_after_if_else@2",
      "stack_in": [
        "exists#0",
        "value#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0"
      ]
    },
    "1190": {
      "op": "frame_dig 0",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0",
        "exists#0"
      ]
    },
    "1192": {
      "op": "uncover 3"
    },
    "1194": {
      "op": "uncover 3"
    },
    "1196": {
      "retsub": true,
      "op": "retsub"
    },
    "1197": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_ref",
      "params": {},
      "block": "maybe_box_ref",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "1200": {
      "op": "bytec_0 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1201": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1202": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1203": {
      "op": "assert",
      "stack_out": []
    },
    "1204": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1205": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "1206": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "1207": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "value#0"
      ]
    },
    "1209": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "exists#0"
      ]
    },
    "1210": {
      "op": "bnz maybe_box_ref_after_if_else@2",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "1213": {
      "op": "pushbytes 0x"
    },
    "1215": {
      "op": "frame_bury 1"
    },
    "1217": {
      "block": "maybe_box_ref_after_if_else@2",
      "stack_in": [
        "exists#0",
        "value#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0"
      ]
    },
    "1219": {
      "op": "frame_dig 0",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0",
        "exists#0"
      ]
    },
    "1221": {
      "op": "uncover 3"
    },
    "1223": {
      "op": "uncover 3"
    },
    "1225": {
      "retsub": true,
      "op": "retsub"
    },
    "1226": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_example",
      "params": {},
      "block": "get_box_example",
      "stack_in": [],
      "op": "proto 0 3"
    },
    "1229": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1230": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1231": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1232": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1233": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1234": {
      "error": "check self.box_int exists",
      "op": "assert // check self.box_int exists",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1235": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "\"b\""
      ]
    },
    "1237": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1238": {
      "error": "check self.box_dynamic_bytes exists",
      "op": "assert // check self.box_dynamic_bytes exists",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0"
      ]
    },
    "1239": {
      "op": "extract 2 0",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ]
    },
    "1242": {
      "op": "bytec 4 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0",
        "0x424f585f43"
      ]
    },
    "1244": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1245": {
      "error": "check self.box_string exists",
      "op": "assert // check self.box_string exists",
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "1246": {
      "retsub": true,
      "op": "retsub"
    },
    "1247": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_map_example",
      "params": {},
      "block": "get_box_map_example",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1250": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1251": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1252": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1253": {
      "op": "bytec 10 // \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "1255": {
      "op": "cover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1257": {
      "op": "select",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1258": {
      "op": "bytec 10 // \"default\"",
      "stack_out": [
        "tmp%2#0",
        "\"default\""
      ]
    },
    "1260": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1261": {
      "op": "assert",
      "stack_out": []
    },
    "1262": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1263": {
      "retsub": true,
      "op": "retsub"
    },
    "1264": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_example",
      "params": {},
      "block": "maybe_box_example",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1267": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1268": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1269": {
      "op": "pop",
      "stack_out": []
    },
    "1270": {
      "op": "bytec_2 // \"box_int\"",
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1271": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1272": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1273": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1274": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "1276": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "1277": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1279": {
      "op": "select",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1280": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "tmp%0#0",
        "42"
      ]
    },
    "1282": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1283": {
      "op": "assert",
      "stack_out": []
    },
    "1284": {
      "op": "bytec_2 // \"box_int\"",
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1285": {
      "op": "box_get",
      "defined_out": [
        "box_int_exists#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "box_int_exists#0"
      ]
    },
    "1286": {
      "op": "swap",
      "stack_out": [
        "box_int_exists#0",
        "maybe_value%1#0"
      ]
    },
    "1287": {
      "op": "btoi",
      "defined_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ]
    },
    "1288": {
      "op": "swap",
      "stack_out": [
        "box_int_value#0",
        "box_int_exists#0"
      ]
    },
    "1289": {
      "op": "!",
      "defined_out": [
        "box_int_value#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_int_value#0",
        "tmp%2#0"
      ]
    },
    "1290": {
      "op": "assert",
      "stack_out": [
        "box_int_value#0"
      ]
    },
    "1291": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1292": {
      "op": "assert",
      "stack_out": []
    },
    "1293": {
      "retsub": true,
      "op": "retsub"
    },
    "1294": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_map_example",
      "params": {},
      "block": "maybe_box_map_example",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1297": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1298": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1299": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "1300": {
      "op": "bury 1",
      "stack_out": [
        "exists#0"
      ]
    },
    "1302": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1303": {
      "op": "assert",
      "stack_out": []
    },
    "1304": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1305": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1306": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1307": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1309": {
      "op": "assert",
      "stack_out": []
    },
    "1310": {
      "retsub": true,
      "op": "retsub"
    },
    "1311": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_map_struct",
      "params": {
        "key#0": "bytes"
      },
      "block": "get_box_map_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1314": {
      "op": "bytec 11 // \"users\"",
      "defined_out": [
        "\"users\""
      ],
      "stack_out": [
        "\"users\""
      ]
    },
    "1316": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"users\"",
        "key#0 (copy)"
      ],
      "stack_out": [
        "\"users\"",
        "key#0 (copy)"
      ]
    },
    "1318": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1319": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1320": {
      "error": "check self.box_map_struct entry exists",
      "op": "assert // check self.box_map_struct entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1321": {
      "retsub": true,
      "op": "retsub"
    },
    "1322": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.set_box",
      "params": {
        "value_int#0": "uint64"
      },
      "block": "set_box",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1325": {
      "op": "frame_dig -1",
      "defined_out": [
        "value_int#0 (copy)"
      ],
      "stack_out": [
        "value_int#0 (copy)"
      ]
    },
    "1327": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "1328": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"box_int\""
      ]
    },
    "1329": {
      "op": "swap",
      "stack_out": [
        "\"box_int\"",
        "new_box_value%0#0"
      ]
    },
    "1330": {
      "op": "box_put",
      "stack_out": []
    },
    "1331": {
      "retsub": true,
      "op": "retsub"
    },
    "1332": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.set_box_map",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "set_box_map",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1335": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1337": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1338": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1339": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "1340": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1341": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ]
    },
    "1343": {
      "op": "box_put",
      "stack_out": []
    },
    "1344": {
      "retsub": true,
      "op": "retsub"
    },
    "1345": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.set_box_map_struct",
      "params": {
        "key#0": "bytes",
        "value#0": "bytes"
      },
      "block": "set_box_map_struct",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1348": {
      "op": "bytec 11 // \"users\"",
      "defined_out": [
        "\"users\""
      ],
      "stack_out": [
        "\"users\""
      ]
    },
    "1350": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"users\"",
        "key#0 (copy)"
      ],
      "stack_out": [
        "\"users\"",
        "key#0 (copy)"
      ]
    },
    "1352": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1353": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1354": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "1355": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1356": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1357": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "value#0 (copy)"
      ]
    },
    "1359": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1360": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1361": {
      "error": "check self.box_map_struct entry exists",
      "op": "assert // check self.box_map_struct entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1362": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "value#0 (copy)"
      ]
    },
    "1364": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1365": {
      "op": "assert",
      "stack_out": []
    },
    "1366": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1367": {
      "retsub": true,
      "op": "retsub"
    },
    "1368": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.set_box_example",
      "params": {
        "value_int#0": "uint64",
        "value_dbytes#0": "bytes",
        "value_string#0": "bytes"
      },
      "block": "set_box_example",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1371": {
      "op": "frame_dig -3",
      "defined_out": [
        "value_int#0 (copy)"
      ],
      "stack_out": [
        "value_int#0 (copy)"
      ]
    },
    "1373": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "1374": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"box_int\""
      ]
    },
    "1375": {
      "op": "swap",
      "stack_out": [
        "\"box_int\"",
        "new_box_value%0#0"
      ]
    },
    "1376": {
      "op": "box_put",
      "stack_out": []
    },
    "1377": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "1379": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1380": {
      "op": "pop",
      "stack_out": []
    },
    "1381": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "1383": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"b\"",
        "value_dbytes#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "value_dbytes#0 (copy)"
      ]
    },
    "1385": {
      "op": "box_put",
      "stack_out": []
    },
    "1386": {
      "op": "bytec 4 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1388": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1389": {
      "op": "pop",
      "stack_out": []
    },
    "1390": {
      "op": "bytec 4 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1392": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x424f585f43",
        "value_string#0 (copy)"
      ],
      "stack_out": [
        "0x424f585f43",
        "value_string#0 (copy)"
      ]
    },
    "1394": {
      "op": "box_put",
      "stack_out": []
    },
    "1395": {
      "op": "frame_dig -2",
      "stack_out": [
        "value_dbytes#0 (copy)"
      ]
    },
    "1397": {
      "op": "extract 2 0",
      "defined_out": [
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0"
      ]
    },
    "1400": {
      "op": "bytec 12 // \"box_bytes\"",
      "defined_out": [
        "\"box_bytes\"",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0",
        "\"box_bytes\""
      ]
    },
    "1402": {
      "op": "box_del",
      "stack_out": [
        "new_box_value%1#0",
        "{box_del}"
      ]
    },
    "1403": {
      "op": "pop",
      "stack_out": [
        "new_box_value%1#0"
      ]
    },
    "1404": {
      "op": "bytec 12 // \"box_bytes\"",
      "stack_out": [
        "new_box_value%1#0",
        "\"box_bytes\""
      ]
    },
    "1406": {
      "op": "swap",
      "stack_out": [
        "\"box_bytes\"",
        "new_box_value%1#0"
      ]
    },
    "1407": {
      "op": "box_put",
      "stack_out": []
    },
    "1408": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "1410": {
      "op": "box_get",
      "defined_out": [
        "byte_value#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "byte_value#0",
        "maybe_exists%0#0"
      ]
    },
    "1411": {
      "error": "check self.box_dynamic_bytes exists",
      "op": "assert // check self.box_dynamic_bytes exists",
      "stack_out": [
        "byte_value#0"
      ]
    },
    "1412": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "byte_value#0",
        "\"b\""
      ]
    },
    "1414": {
      "op": "box_get",
      "defined_out": [
        "byte_value#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "byte_value#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1415": {
      "error": "check self.box_dynamic_bytes exists",
      "op": "assert // check self.box_dynamic_bytes exists",
      "stack_out": [
        "byte_value#0",
        "maybe_value%1#0"
      ]
    },
    "1416": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "byte_value#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "byte_value#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1417": {
      "op": "extract_uint16",
      "defined_out": [
        "byte_value#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "byte_value#0",
        "tmp%0#0"
      ]
    },
    "1418": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "byte_value#0"
      ]
    },
    "1419": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "byte_value#0",
        "0"
      ]
    },
    "1420": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1421": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1422": {
      "error": "direct reference should match copy",
      "op": "assert // direct reference should match copy",
      "stack_out": []
    },
    "1423": {
      "op": "bytec_2 // \"box_int\"",
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1424": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1425": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1426": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1427": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%2#0"
      ]
    },
    "1428": {
      "error": "check self.box_int exists",
      "op": "assert // check self.box_int exists",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1429": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "3"
      ]
    },
    "1431": {
      "op": "+",
      "defined_out": [
        "new_box_value%2#0"
      ],
      "stack_out": [
        "new_box_value%2#0"
      ]
    },
    "1432": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0"
      ],
      "stack_out": [
        "new_box_value%3#0"
      ]
    },
    "1433": {
      "op": "bytec_2 // \"box_int\"",
      "stack_out": [
        "new_box_value%3#0",
        "\"box_int\""
      ]
    },
    "1434": {
      "op": "swap",
      "stack_out": [
        "\"box_int\"",
        "new_box_value%3#0"
      ]
    },
    "1435": {
      "op": "box_put",
      "stack_out": []
    },
    "1436": {
      "retsub": true,
      "op": "retsub"
    },
    "1437": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.delete_box",
      "params": {},
      "block": "delete_box",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1440": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1441": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1442": {
      "op": "pop",
      "stack_out": []
    },
    "1443": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "1445": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1446": {
      "op": "pop",
      "stack_out": []
    },
    "1447": {
      "op": "bytec 4 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1449": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1450": {
      "op": "pop",
      "stack_out": []
    },
    "1451": {
      "op": "bytec_2 // \"box_int\"",
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1452": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1453": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1454": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1455": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "1457": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "1458": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1460": {
      "op": "select",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1461": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "tmp%0#0",
        "42"
      ]
    },
    "1463": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1464": {
      "op": "assert",
      "stack_out": []
    },
    "1465": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "1467": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1468": {
      "op": "bytec 13 // 0x00023432",
      "defined_out": [
        "0x00023432",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "1470": {
      "op": "cover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1472": {
      "op": "select",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1473": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1476": {
      "op": "pushbytes 0x3432",
      "defined_out": [
        "0x3432",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x3432"
      ]
    },
    "1480": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1481": {
      "op": "assert",
      "stack_out": []
    },
    "1482": {
      "op": "bytec 4 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1484": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1485": {
      "op": "bytec 13 // 0x00023432",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0x00023432"
      ]
    },
    "1487": {
      "op": "cover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1489": {
      "op": "select",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1490": {
      "op": "bytec 13 // 0x00023432",
      "stack_out": [
        "tmp%5#0",
        "0x00023432"
      ]
    },
    "1492": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1493": {
      "op": "assert",
      "stack_out": []
    },
    "1494": {
      "retsub": true,
      "op": "retsub"
    },
    "1495": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.delete_box_map",
      "params": {
        "key#0": "uint64"
      },
      "block": "delete_box_map",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1498": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1500": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1501": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1502": {
      "op": "pop",
      "stack_out": []
    },
    "1503": {
      "retsub": true,
      "op": "retsub"
    },
    "1504": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.delete_box_ref",
      "params": {},
      "block": "delete_box_ref",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1507": {
      "op": "bytec 14 // \"box_ref\"",
      "defined_out": [
        "\"box_ref\""
      ],
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "1509": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"box_ref\"",
        "32"
      ],
      "stack_out": [
        "\"box_ref\"",
        "32"
      ]
    },
    "1510": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "1511": {
      "op": "pop",
      "stack_out": []
    },
    "1512": {
      "op": "bytec 14 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "1514": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1515": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1517": {
      "error": "has data",
      "op": "assert // has data",
      "stack_out": []
    },
    "1518": {
      "op": "bytec 14 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "1520": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1521": {
      "op": "pop",
      "stack_out": []
    },
    "1522": {
      "op": "bytec_0 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1523": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "1524": {
      "op": "!",
      "defined_out": [
        "tmp%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%0#0"
      ]
    },
    "1525": {
      "op": "assert",
      "stack_out": [
        "value#0"
      ]
    },
    "1526": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "0x"
      ]
    },
    "1528": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1529": {
      "op": "assert",
      "stack_out": []
    },
    "1530": {
      "retsub": true,
      "op": "retsub"
    },
    "1531": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_length",
      "params": {},
      "block": "box_map_length",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1534": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1535": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1536": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1537": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1538": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1540": {
      "op": "bnz box_map_length_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1543": {
      "op": "intc_1 // 0"
    },
    "1544": {
      "op": "swap"
    },
    "1545": {
      "retsub": true,
      "op": "retsub"
    },
    "1546": {
      "block": "box_map_length_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1548": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1549": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "tmp%0#0",
        "value%0#0"
      ]
    },
    "1550": {
      "op": "swap"
    },
    "1551": {
      "retsub": true,
      "op": "retsub"
    },
    "1552": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.length_box_ref",
      "params": {},
      "block": "length_box_ref",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1555": {
      "op": "bytec_0 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1556": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1557": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1558": {
      "op": "assert",
      "stack_out": []
    },
    "1559": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1560": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1561": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1562": {
      "retsub": true,
      "op": "retsub"
    },
    "1563": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_struct_length",
      "params": {},
      "block": "box_map_struct_length",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1566": {
      "op": "bytec 7 // 0x75736572730000000000000000",
      "defined_out": [
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "1568": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1569": {
      "op": "pop",
      "stack_out": []
    },
    "1570": {
      "op": "bytec 7 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "1572": {
      "op": "pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
      "defined_out": [
        "0x0012000000000000004600000000000000020008746573744e616d65",
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000",
        "0x0012000000000000004600000000000000020008746573744e616d65"
      ]
    },
    "1602": {
      "op": "box_put",
      "stack_out": []
    },
    "1603": {
      "op": "bytec 7 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "1605": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1606": {
      "error": "check self.box_map_struct entry exists",
      "op": "assert // check self.box_map_struct entry exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1607": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "28"
      ]
    },
    "1609": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1610": {
      "op": "assert",
      "stack_out": []
    },
    "1611": {
      "op": "bytec 7 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "1613": {
      "op": "box_len",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "1614": {
      "error": "check self.box_map_struct entry exists",
      "op": "assert // check self.box_map_struct entry exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "1615": {
      "op": "pushint 28 // 28",
      "stack_out": [
        "value%1#0",
        "28"
      ]
    },
    "1617": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1618": {
      "op": "assert",
      "stack_out": []
    },
    "1619": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1620": {
      "retsub": true,
      "op": "retsub"
    },
    "1621": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_length_example",
      "params": {},
      "block": "box_map_length_example",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1624": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1625": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1626": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1627": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "1628": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1629": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1630": {
      "op": "pushbytes \"Hmmmmm\"",
      "defined_out": [
        "\"Hmmmmm\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "\"Hmmmmm\""
      ]
    },
    "1638": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1639": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1640": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1641": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "tmp%0#0",
        "value%0#0"
      ]
    },
    "1642": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "6"
      ]
    },
    "1644": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1645": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1646": {
      "op": "box_len",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "1647": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "1648": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "value%1#0",
        "6"
      ]
    },
    "1650": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1651": {
      "op": "assert",
      "stack_out": []
    },
    "1652": {
      "retsub": true,
      "op": "retsub"
    },
    "1653": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.length_box_ref_example",
      "params": {},
      "block": "length_box_ref_example",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1656": {
      "op": "bytec_0 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1657": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1658": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1659": {
      "op": "assert",
      "stack_out": []
    },
    "1660": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1661": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1662": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1663": {
      "op": "intc_3 // 64",
      "defined_out": [
        "64",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "64"
      ]
    },
    "1664": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1665": {
      "op": "assert",
      "stack_out": []
    },
    "1666": {
      "op": "bytec_0 // 0x626c6f62",
      "defined_out": [
        "0x626c6f62"
      ],
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "1667": {
      "op": "intc_2 // 32",
      "stack_out": [
        "0x626c6f62",
        "32"
      ]
    },
    "1668": {
      "op": "box_create",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1669": {
      "op": "assert",
      "stack_out": []
    },
    "1670": {
      "op": "bytec_0 // 0x626c6f62",
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "1671": {
      "op": "box_len",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "1672": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "1673": {
      "op": "intc_3 // 64",
      "stack_out": [
        "value%1#0",
        "64"
      ]
    },
    "1674": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1675": {
      "op": "assert",
      "stack_out": []
    },
    "1676": {
      "op": "bytec_0 // 0x626c6f62",
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "1677": {
      "op": "intc_2 // 32",
      "stack_out": [
        "0x626c6f62",
        "32"
      ]
    },
    "1678": {
      "op": "box_create",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1679": {
      "op": "assert",
      "stack_out": []
    },
    "1680": {
      "op": "bytec_0 // 0x626c6f62",
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "1681": {
      "op": "box_len",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "check%2#0"
      ]
    },
    "1682": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%2#0"
      ]
    },
    "1683": {
      "op": "intc_3 // 64",
      "stack_out": [
        "value%2#0",
        "64"
      ]
    },
    "1684": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1685": {
      "op": "assert",
      "stack_out": []
    },
    "1686": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1687": {
      "op": "intc_2 // 32",
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1688": {
      "op": "box_create",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1689": {
      "op": "assert",
      "stack_out": []
    },
    "1690": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1691": {
      "op": "box_len",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "1692": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "1693": {
      "op": "intc_3 // 64",
      "stack_out": [
        "value%3#0",
        "64"
      ]
    },
    "1694": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1695": {
      "op": "assert",
      "stack_out": []
    },
    "1696": {
      "retsub": true,
      "op": "retsub"
    },
    "1697": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.extract_box_ref",
      "params": {},
      "block": "extract_box_ref",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1700": {
      "op": "bytec_0 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1701": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1702": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1703": {
      "op": "assert",
      "stack_out": []
    },
    "1704": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "1706": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1708": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1709": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "1710": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "1712": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1713": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1714": {
      "op": "intc_1 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "1715": {
      "op": "dup",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "1716": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "1718": {
      "op": "box_splice",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1719": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1720": {
      "op": "intc_3 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64"
      ]
    },
    "1721": {
      "op": "bytec 8 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "1723": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1724": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1725": {
      "op": "intc_1 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "1726": {
      "op": "pushint 69 // 69",
      "defined_out": [
        "\"blob\"",
        "0",
        "69",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "69"
      ]
    },
    "1728": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0"
      ]
    },
    "1729": {
      "op": "swap",
      "stack_out": [
        "sender_bytes#0",
        "prefix#0",
        "app_address#0"
      ]
    },
    "1730": {
      "op": "uncover 2",
      "stack_out": [
        "prefix#0",
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1732": {
      "op": "concat",
      "defined_out": [
        "prefix#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "prefix#0",
        "tmp%3#0"
      ]
    },
    "1733": {
      "op": "bytec 8 // 0x68656c6c6f",
      "stack_out": [
        "prefix#0",
        "tmp%3#0",
        "0x68656c6c6f"
      ]
    },
    "1735": {
      "op": "concat",
      "defined_out": [
        "prefix#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "prefix#0",
        "tmp%4#0"
      ]
    },
    "1736": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1737": {
      "op": "assert",
      "stack_out": []
    },
    "1738": {
      "retsub": true,
      "op": "retsub"
    },
    "1739": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.manipulate_box_ref",
      "params": {},
      "block": "manipulate_box_ref",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1742": {
      "op": "bytec_0 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1743": {
      "op": "intc_2 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1744": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1745": {
      "op": "assert",
      "stack_out": []
    },
    "1746": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1747": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1748": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1750": {
      "error": "has data",
      "op": "assert // has data",
      "stack_out": []
    },
    "1751": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "1753": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1755": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1756": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "1757": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "1759": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1760": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1761": {
      "op": "intc_1 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "1762": {
      "op": "dup",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "1763": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "1765": {
      "op": "box_splice",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1766": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1767": {
      "op": "intc_3 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64"
      ]
    },
    "1768": {
      "op": "bytec 8 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "1770": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1771": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1772": {
      "op": "intc_1 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "1773": {
      "op": "pushint 69 // 69",
      "defined_out": [
        "\"blob\"",
        "0",
        "69",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "69"
      ]
    },
    "1775": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0"
      ]
    },
    "1776": {
      "op": "dig 1",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)"
      ]
    },
    "1778": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)",
        "sender_bytes#0 (copy)"
      ]
    },
    "1780": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%3#0"
      ]
    },
    "1781": {
      "op": "bytec 8 // 0x68656c6c6f",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%3#0",
        "0x68656c6c6f"
      ]
    },
    "1783": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%4#0"
      ]
    },
    "1784": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%5#0"
      ]
    },
    "1785": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1786": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "1787": {
      "op": "box_del",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%6#0"
      ]
    },
    "1788": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1789": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1790": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "tmp%8#0",
        "\"blob\""
      ]
    },
    "1791": {
      "op": "swap",
      "stack_out": [
        "\"blob\"",
        "tmp%8#0"
      ]
    },
    "1792": {
      "op": "box_put",
      "stack_out": []
    },
    "1793": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1794": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1795": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1797": {
      "error": "Blob exists",
      "op": "assert // Blob exists",
      "stack_out": []
    },
    "1798": {
      "op": "bytec_0 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1799": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1800": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1801": {
      "op": "intc_3 // 64",
      "stack_out": [
        "value%0#0",
        "64"
      ]
    },
    "1802": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1803": {
      "op": "assert",
      "stack_out": []
    },
    "1804": {
      "retsub": true,
      "op": "retsub"
    },
    "1805": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.value_box",
      "params": {},
      "block": "value_box",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1808": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1809": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1810": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1811": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1812": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1813": {
      "error": "check self.box_int exists",
      "op": "assert // check self.box_int exists",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1814": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "10"
      ]
    },
    "1816": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1817": {
      "op": "assert",
      "stack_out": []
    },
    "1818": {
      "retsub": true,
      "op": "retsub"
    },
    "1819": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.exist_box",
      "params": {},
      "block": "exist_box",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1822": {
      "op": "bytec_2 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "1823": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1824": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1826": {
      "retsub": true,
      "op": "retsub"
    },
    "1827": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.exist_box_example",
      "params": {},
      "block": "exist_box_example",
      "stack_in": [],
      "op": "proto 0 3"
    },
    "1830": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "1832": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1833": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1835": {
      "op": "bytec 4 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x424f585f43"
      ]
    },
    "1837": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1838": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1840": {
      "op": "bytec 12 // \"box_bytes\"",
      "defined_out": [
        "\"box_bytes\"",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "\"box_bytes\""
      ]
    },
    "1842": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1843": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1845": {
      "retsub": true,
      "op": "retsub"
    },
    "1846": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.slice_box",
      "params": {},
      "block": "slice_box",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1849": {
      "op": "bytec 9 // \"0\"",
      "defined_out": [
        "\"0\""
      ],
      "stack_out": [
        "\"0\""
      ]
    },
    "1851": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1852": {
      "op": "pop",
      "stack_out": []
    },
    "1853": {
      "op": "bytec 9 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "1855": {
      "op": "pushbytes 0x54657374696e672074657374696e6720313233",
      "defined_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ],
      "stack_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ]
    },
    "1876": {
      "op": "box_put",
      "stack_out": []
    },
    "1877": {
      "op": "bytec 9 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "1879": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1880": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1881": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1882": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1883": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "tmp%0#0 (copy)"
      ]
    },
    "1885": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1886": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7"
      ]
    },
    "1888": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7",
        "tmp%0#0 (copy)"
      ]
    },
    "1890": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1891": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1893": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "7"
      ]
    },
    "1895": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%4#0"
      ]
    },
    "1897": {
      "op": "select",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1898": {
      "op": "dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1900": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "1901": {
      "op": "bytec 9 // \"0\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"0\""
      ]
    },
    "1903": {
      "op": "cover 2",
      "stack_out": [
        "\"0\"",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "1905": {
      "op": "box_extract",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1906": {
      "op": "pushbytes 0x54657374696e67",
      "defined_out": [
        "0x54657374696e67",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x54657374696e67"
      ]
    },
    "1915": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1916": {
      "op": "assert",
      "stack_out": []
    },
    "1917": {
      "op": "bytec 4 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1919": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1920": {
      "op": "pop",
      "stack_out": []
    },
    "1921": {
      "op": "bytec 4 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1923": {
      "op": "pushbytes 0x000548656c6c6f",
      "defined_out": [
        "0x000548656c6c6f",
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43",
        "0x000548656c6c6f"
      ]
    },
    "1932": {
      "op": "box_put",
      "stack_out": []
    },
    "1933": {
      "op": "bytec 4 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1935": {
      "op": "box_len",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1936": {
      "op": "pop",
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1937": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "2"
      ]
    },
    "1939": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "tmp%9#0",
        "2",
        "tmp%9#0 (copy)"
      ]
    },
    "1941": {
      "op": "<",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1942": {
      "op": "dig 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1944": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%9#0 (copy)",
        "2"
      ]
    },
    "1946": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "2",
        "tmp%11#0"
      ]
    },
    "1948": {
      "op": "select",
      "defined_out": [
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "1949": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "10"
      ]
    },
    "1951": {
      "op": "dig 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "10",
        "tmp%9#0 (copy)"
      ]
    },
    "1953": {
      "op": "<",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1954": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0"
      ]
    },
    "1956": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0",
        "10"
      ]
    },
    "1958": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%9#0",
        "10",
        "tmp%13#0"
      ]
    },
    "1960": {
      "op": "select",
      "defined_out": [
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "1961": {
      "op": "dig 1",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%14#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1963": {
      "op": "-",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1964": {
      "op": "bytec 4 // 0x424f585f43",
      "stack_out": [
        "tmp%12#0",
        "tmp%15#0",
        "0x424f585f43"
      ]
    },
    "1966": {
      "op": "cover 2",
      "stack_out": [
        "0x424f585f43",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1968": {
      "op": "box_extract",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1969": {
      "op": "pushbytes 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0x48656c6c6f"
      ]
    },
    "1976": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1977": {
      "op": "assert",
      "stack_out": []
    },
    "1978": {
      "retsub": true,
      "op": "retsub"
    },
    "1979": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.arc4_box",
      "params": {},
      "block": "arc4_box",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1982": {
      "op": "bytec 6 // 0x64",
      "defined_out": [
        "0x64"
      ],
      "stack_out": [
        "0x64"
      ]
    },
    "1984": {
      "op": "pushbytes 0x00010203",
      "defined_out": [
        "0x00010203",
        "0x64"
      ],
      "stack_out": [
        "0x64",
        "0x00010203"
      ]
    },
    "1990": {
      "op": "box_put",
      "stack_out": []
    },
    "1991": {
      "op": "bytec 6 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "1993": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1994": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1995": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "1998": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "1999": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2000": {
      "op": "assert",
      "stack_out": []
    },
    "2001": {
      "op": "bytec 6 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "2003": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2004": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2005": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "2008": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x01"
      ]
    },
    "2011": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2012": {
      "op": "assert",
      "stack_out": []
    },
    "2013": {
      "op": "bytec 6 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "2015": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2016": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2017": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0"
      ]
    },
    "2020": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0",
        "0x02"
      ]
    },
    "2023": {
      "op": "b==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2024": {
      "op": "assert",
      "stack_out": []
    },
    "2025": {
      "op": "bytec 6 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "2027": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2028": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2029": {
      "error": "Index access is out of bounds",
      "op": "extract 3 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%6#0"
      ]
    },
    "2032": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%6#0",
        "0x03"
      ]
    },
    "2035": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2036": {
      "op": "assert",
      "stack_out": []
    },
    "2037": {
      "retsub": true,
      "op": "retsub"
    },
    "2038": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.key_box_example",
      "params": {},
      "block": "key_box_example",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2041": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2042": {
      "error": "box string key ok",
      "op": "assert // box string key ok",
      "stack_out": []
    },
    "2043": {
      "retsub": true,
      "op": "retsub"
    },
    "2044": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_exists",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2047": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2049": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2050": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2051": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2053": {
      "retsub": true,
      "op": "retsub"
    },
    "2054": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_struct_exists",
      "params": {
        "key#0": "bytes"
      },
      "block": "box_map_struct_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2057": {
      "op": "bytec 11 // \"users\"",
      "defined_out": [
        "\"users\""
      ],
      "stack_out": [
        "\"users\""
      ]
    },
    "2059": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"users\"",
        "key#0 (copy)"
      ],
      "stack_out": [
        "\"users\"",
        "key#0 (copy)"
      ]
    },
    "2061": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2062": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2063": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2065": {
      "retsub": true,
      "op": "retsub"
    }
  }
}