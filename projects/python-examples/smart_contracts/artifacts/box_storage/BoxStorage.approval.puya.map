{
  "version": 3,
  "sources": [
    "../../box_storage/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAiPK;;;;;;;;AAAA;AAAA;AAAA;AAjBA;AAJA;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAVmC;;;;;;;;;AAChC;AAHH;AAAA;;;;;;;;;AA/LU;AAAA;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAEuB;AAAb;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMW;AACgB;AAAjB;AAAgC;;AAAhC;;AAAA;AAHV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOmC;AAAA;AAAA;AAAA;AAFnC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOW;AAC2B;AAAnB;AAAA;AAAA;;AAAA;AACb;;;AACS;;AAAR;;AALP;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcO;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AALP;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUW;AACgB;AAAjB;AAAgC;;AAAhC;;AAAA;AAAsD;;AAAtD;AAAP;AAHH;;AAAA;AAAA;AAAA;AAQO;AAAJ;;AACO;AAAA;AAAA;AAAA;AAAyB;AAAzB;;AAAA;;AAAA;AAAwC;AAAxC;AAAP;AAEO;AAAA;AAAP;AACO;AANV;AAWW;AAC2B;AAAnB;AAAA;;AACT;AAAP;AAHQ;AAID;AAAA;AAAA;;AANV;AAUU;;AAFV;;;AAEU;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;AAEG;AAAA;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;AAAA;;;AAAA;;;AAEgB;AAAA;AAAb;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAEG;;AAFH;;;AAEG;AAAA;AAAA;;AAAA;AAAA;AAFH;;AAAA;AAAA;AAAA;AASA;;;AAAA;AAAA;;;AAAA;;;AAOG;;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;AAAA;AACuB;;;AAAvB;;AAAA;;AAAA;;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAsB;;AAAtB;AAAA;AAAA;AAAA;AAAA;AAjBH;AAAA;AAwBO;AAAJ;;AACI;;AAAJ;;AACI;AAAJ;;AAEO;AAAA;AAAA;AAAA;AAAyB;AAAzB;AAAA;;AAAA;AAAwC;AAAxC;AAAP;AAEI;;AAAA;AAAmC;;AAAnC;;AAAA;AAAA;;;AAAuE;;;;AAAvE;AADJ;AAGO;AAAA;AAA4B;;AAA5B;;AAAA;AAA4B;;AAA5B;AAVV;AAYA;;;AAAA;AAEoB;AAAjB;;AAFH;AAAA;AASW;AACL;AAAA;AAAA;AAAA;;AAAA;;;AACQ;AAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKU;AAAA;AAAA;AALV;;;AAYG;;AAAA;;AAAA;;AAFQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAER;AACO;;AAAA;AAAA;AAA2C;;AAA3C;AAAP;AANH;;AAAA;AAAA;AAAA;AAeW;AAEK;AAAb;AAAA;;AAAA;AADQ;;;;;;;;AACR;AACO;AAAA;AAAoC;;AAApC;AALV;AAawB;;AACE;;AAAhB;AAAP;AAEe;;AACD;;AAJO;;AAMT;AAAZ;;AAAA;AANqB;;AAOV;AAAG;AAAd;;AAAA;AAPqB;;AAQT;;AAHF;;AAGV;AARqB;;AASA;AAAG;;AAAf;AACQ;AAAA;;AAAA;AALP;;AAKO;AAAV;AAZV;AAmBU;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAFV;AAMe;AAAL;AAAA;;AAFV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMe;;AAAL;AAAA;;AAAmC;AAAL;AAAA;;AAAA;AAA4B;;AAAL;AAAA;;AAAA;AAF/D;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM0B;;AACvB;;AADuB;;AACT;;;;;;;;;;;;;;;;;;;;;AAAd;AADuB;;AAEhB;AAAA;AAAA;AAAY;AAAZ;;AAAA;AAAc;;AAAd;;AAAA;AAAA;;AAAc;;AAAd;;AAAA;AAAA;;AAAA;AAFgB;;AAEhB;;AAAA;AAAoB;;;;;;;;;AAApB;AAAP;AAEA;AAAA;;AAAA;AAAwB;;;;;;;;;AAAxB;AACO;AAAA;AAAA;AAA4B;;AAA5B;;AAAA;AAAA;;AAA4B;;AAA5B;;AAAA;AAA8B;AAA9B;;AAAA;AAAA;;AAA8B;AAA9B;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAqC;;;;;;;AAArC;AAPV;AAkCA;;;AAAA;AAEU;AAAA;AAAA;;AAFV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMiB;;AAFjB;;;AAEU;AAAA;AAAA;;AAFV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 42 10"
    },
    "7": {
      "op": "bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f"
    },
    "94": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "96": {
      "op": "bz main___algopy_default_create@39",
      "stack_out": []
    },
    "99": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "101": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "102": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "103": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "105": {
      "op": "assert",
      "stack_out": []
    },
    "106": {
      "op": "pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e // method \"get_box()uint64\", method \"get_item_box_map(uint64)string\", method \"get_box_map()string\", method \"maybe_box()(uint64,bool)\", method \"maybe_box_map()(string,bool)\", method \"get_box_example()(uint64,byte[],string)\", method \"get_box_map_example()bool\", method \"maybe_box_example()void\", method \"maybe_box_map_example()void\", method \"get_box_map_struct(uint64)(string,uint64,uint64)\", method \"set_box(uint64)void\", method \"set_box_map(uint64,string)void\", method \"set_box_map_struct(uint64,(string,uint64,uint64))bool\", method \"set_box_example(uint64,byte[],string)void\", method \"delete_box()void\", method \"delete_box_map(uint64)void\", method \"box_map_length()uint64\", method \"box_map_struct_length()bool\", method \"box_map_length_example()void\", method \"extract_box()void\", method \"value_box()void\", method \"exist_box()bool\", method \"exist_box_example()(bool,bool,bool)\", method \"slice_box()void\", method \"arc4_box()void\", method \"key_box()byte[]\", method \"key_box_example()void\", method \"box_map_exists(uint64)bool\", method \"box_map_struct_exists(uint64)bool\", method \"key_prefix_box_map()byte[]\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_length()uint64)",
        "Method(box_map_length_example()void)",
        "Method(box_map_struct_exists(uint64)bool)",
        "Method(box_map_struct_length()bool)",
        "Method(delete_box()void)",
        "Method(delete_box_map(uint64)void)",
        "Method(exist_box()bool)",
        "Method(exist_box_example()(bool,bool,bool))",
        "Method(extract_box()void)",
        "Method(get_box()uint64)",
        "Method(get_box_example()(uint64,byte[],string))",
        "Method(get_box_map()string)",
        "Method(get_box_map_example()bool)",
        "Method(get_box_map_struct(uint64)(string,uint64,uint64))",
        "Method(get_item_box_map(uint64)string)",
        "Method(key_box()byte[])",
        "Method(key_box_example()void)",
        "Method(key_prefix_box_map()byte[])",
        "Method(maybe_box()(uint64,bool))",
        "Method(maybe_box_example()void)",
        "Method(maybe_box_map()(string,bool))",
        "Method(maybe_box_map_example()void)",
        "Method(set_box(uint64)void)",
        "Method(set_box_example(uint64,byte[],string)void)",
        "Method(set_box_map(uint64,string)void)",
        "Method(set_box_map_struct(uint64,(string,uint64,uint64))bool)",
        "Method(slice_box()void)",
        "Method(value_box()void)"
      ],
      "stack_out": [
        "Method(get_box()uint64)",
        "Method(get_item_box_map(uint64)string)",
        "Method(get_box_map()string)",
        "Method(maybe_box()(uint64,bool))",
        "Method(maybe_box_map()(string,bool))",
        "Method(get_box_example()(uint64,byte[],string))",
        "Method(get_box_map_example()bool)",
        "Method(maybe_box_example()void)",
        "Method(maybe_box_map_example()void)",
        "Method(get_box_map_struct(uint64)(string,uint64,uint64))",
        "Method(set_box(uint64)void)",
        "Method(set_box_map(uint64,string)void)",
        "Method(set_box_map_struct(uint64,(string,uint64,uint64))bool)",
        "Method(set_box_example(uint64,byte[],string)void)",
        "Method(delete_box()void)",
        "Method(delete_box_map(uint64)void)",
        "Method(box_map_length()uint64)",
        "Method(box_map_struct_length()bool)",
        "Method(box_map_length_example()void)",
        "Method(extract_box()void)",
        "Method(value_box()void)",
        "Method(exist_box()bool)",
        "Method(exist_box_example()(bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(key_box()byte[])",
        "Method(key_box_example()void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_struct_exists(uint64)bool)",
        "Method(key_prefix_box_map()byte[])"
      ]
    },
    "258": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_length()uint64)",
        "Method(box_map_length_example()void)",
        "Method(box_map_struct_exists(uint64)bool)",
        "Method(box_map_struct_length()bool)",
        "Method(delete_box()void)",
        "Method(delete_box_map(uint64)void)",
        "Method(exist_box()bool)",
        "Method(exist_box_example()(bool,bool,bool))",
        "Method(extract_box()void)",
        "Method(get_box()uint64)",
        "Method(get_box_example()(uint64,byte[],string))",
        "Method(get_box_map()string)",
        "Method(get_box_map_example()bool)",
        "Method(get_box_map_struct(uint64)(string,uint64,uint64))",
        "Method(get_item_box_map(uint64)string)",
        "Method(key_box()byte[])",
        "Method(key_box_example()void)",
        "Method(key_prefix_box_map()byte[])",
        "Method(maybe_box()(uint64,bool))",
        "Method(maybe_box_example()void)",
        "Method(maybe_box_map()(string,bool))",
        "Method(maybe_box_map_example()void)",
        "Method(set_box(uint64)void)",
        "Method(set_box_example(uint64,byte[],string)void)",
        "Method(set_box_map(uint64,string)void)",
        "Method(set_box_map_struct(uint64,(string,uint64,uint64))bool)",
        "Method(slice_box()void)",
        "Method(value_box()void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(get_box()uint64)",
        "Method(get_item_box_map(uint64)string)",
        "Method(get_box_map()string)",
        "Method(maybe_box()(uint64,bool))",
        "Method(maybe_box_map()(string,bool))",
        "Method(get_box_example()(uint64,byte[],string))",
        "Method(get_box_map_example()bool)",
        "Method(maybe_box_example()void)",
        "Method(maybe_box_map_example()void)",
        "Method(get_box_map_struct(uint64)(string,uint64,uint64))",
        "Method(set_box(uint64)void)",
        "Method(set_box_map(uint64,string)void)",
        "Method(set_box_map_struct(uint64,(string,uint64,uint64))bool)",
        "Method(set_box_example(uint64,byte[],string)void)",
        "Method(delete_box()void)",
        "Method(delete_box_map(uint64)void)",
        "Method(box_map_length()uint64)",
        "Method(box_map_struct_length()bool)",
        "Method(box_map_length_example()void)",
        "Method(extract_box()void)",
        "Method(value_box()void)",
        "Method(exist_box()bool)",
        "Method(exist_box_example()(bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(key_box()byte[])",
        "Method(key_box_example()void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_struct_exists(uint64)bool)",
        "Method(key_prefix_box_map()byte[])",
        "tmp%6#0"
      ]
    },
    "261": {
      "op": "match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35",
      "stack_out": []
    },
    "323": {
      "op": "err"
    },
    "324": {
      "block": "main_key_prefix_box_map_route@35",
      "stack_in": [],
      "op": "pushbytes 0x151f7c750000",
      "defined_out": [
        "0x151f7c750000"
      ],
      "stack_out": [
        "0x151f7c750000"
      ]
    },
    "332": {
      "op": "log",
      "stack_out": []
    },
    "333": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "334": {
      "op": "return",
      "stack_out": []
    },
    "335": {
      "error": "box string key ok",
      "block": "main_key_box_example_route@32",
      "stack_in": [],
      "op": "err // box string key ok",
      "defined_out": []
    },
    "336": {
      "block": "main_key_box_route@31",
      "stack_in": [],
      "op": "pushbytes 0x151f7c750007626f785f696e74",
      "defined_out": [
        "0x151f7c750007626f785f696e74"
      ],
      "stack_out": [
        "0x151f7c750007626f785f696e74"
      ]
    },
    "351": {
      "op": "log",
      "stack_out": []
    },
    "352": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "353": {
      "op": "return",
      "stack_out": []
    },
    "354": {
      "block": "main_arc4_box_route@30",
      "stack_in": [],
      "op": "pushbytess 0x64 0x00010203 // 0x64, 0x00010203",
      "defined_out": [
        "0x00010203",
        "0x64"
      ],
      "stack_out": [
        "0x64",
        "0x00010203"
      ]
    },
    "363": {
      "op": "box_put",
      "stack_out": []
    },
    "364": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "365": {
      "op": "return",
      "stack_out": []
    },
    "366": {
      "block": "main___algopy_default_create@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "368": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "369": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "371": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "372": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "373": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "374": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box[routing]",
      "params": {},
      "block": "get_box",
      "stack_in": [],
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "375": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "376": {
      "error": "check self.box_int exists",
      "op": "assert // check self.box_int exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "377": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "378": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "379": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "380": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "381": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "382": {
      "op": "log",
      "stack_out": []
    },
    "383": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "384": {
      "op": "return",
      "stack_out": []
    },
    "385": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_item_box_map[routing]",
      "params": {},
      "block": "get_item_box_map",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "388": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "389": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "390": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "391": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "392": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "393": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%length%0#0"
      ]
    },
    "394": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "395": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "400": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "401": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "402": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "403": {
      "op": "log",
      "stack_out": []
    },
    "404": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "405": {
      "op": "return",
      "stack_out": []
    },
    "406": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_map[routing]",
      "params": {},
      "block": "get_box_map",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "407": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "408": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "409": {
      "op": "bytec 7 // \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "411": {
      "op": "cover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "413": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "414": {
      "op": "dup",
      "defined_out": [
        "state_get%0#0",
        "state_get%0#0 (copy)"
      ],
      "stack_out": [
        "state_get%0#0",
        "state_get%0#0 (copy)"
      ]
    },
    "415": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%length%0#0"
      ]
    },
    "416": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "417": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "420": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "state_get%0#0"
      ]
    },
    "421": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "422": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "423": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "424": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "425": {
      "op": "log",
      "stack_out": []
    },
    "426": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "427": {
      "op": "return",
      "stack_out": []
    },
    "428": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box[routing]",
      "params": {},
      "block": "maybe_box",
      "stack_in": [],
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "429": {
      "op": "box_get",
      "defined_out": [
        "box_int_exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "box_int_exists#0"
      ]
    },
    "430": {
      "op": "swap",
      "stack_out": [
        "box_int_exists#0",
        "maybe_value%0#0"
      ]
    },
    "431": {
      "op": "btoi",
      "defined_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ]
    },
    "432": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box_int_exists#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "433": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "box_int_exists#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "aggregate%val_as_bytes%0#0",
        "0x00"
      ]
    },
    "434": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%val_as_bytes%0#0",
        "box_int_exists#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0"
      ]
    },
    "435": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x00",
        "0",
        "box_int_exists#0"
      ]
    },
    "437": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "438": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "439": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x151f7c75"
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ]
    },
    "441": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "442": {
      "op": "log",
      "stack_out": []
    },
    "443": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "444": {
      "op": "return",
      "stack_out": []
    },
    "445": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_map[routing]",
      "params": {},
      "block": "maybe_box_map",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "446": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "447": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "448": {
      "op": "dup",
      "stack_out": [
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "449": {
      "op": "uncover 2",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "exists#0",
        "value#0"
      ]
    },
    "451": {
      "op": "swap",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "exists#0"
      ]
    },
    "452": {
      "op": "bnz maybe_box_map_after_if_else@3",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "455": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0"
      ]
    },
    "457": {
      "op": "bury 1",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "459": {
      "block": "maybe_box_map_after_if_else@3",
      "stack_in": [
        "exists#0",
        "value#0"
      ],
      "op": "dupn 2",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0",
        "value#0 (copy)"
      ]
    },
    "461": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0",
        "aggregate%length%0#0"
      ]
    },
    "462": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "463": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "value#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "466": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%length_uint16%0#0",
        "value#0"
      ]
    },
    "467": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "468": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "aggregate%encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00"
      ]
    },
    "469": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0"
      ]
    },
    "470": {
      "op": "dig 4",
      "defined_out": [
        "0",
        "0x00",
        "aggregate%encoded_value%0#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x00",
        "0",
        "exists#0"
      ]
    },
    "472": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "473": {
      "op": "pushbytes 0x0003",
      "defined_out": [
        "0x0003",
        "aggregate%encoded_bool%0#0",
        "aggregate%encoded_value%0#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_bool%0#0",
        "0x0003"
      ]
    },
    "477": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "0x0003",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "478": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "479": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "480": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%concat%0#0"
      ]
    },
    "481": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%0#0",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "aggregate%concat%0#0",
        "0x151f7c75"
      ]
    },
    "482": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "value#0",
        "0x151f7c75",
        "aggregate%concat%0#0"
      ]
    },
    "483": {
      "op": "concat",
      "defined_out": [
        "exists#0",
        "tmp%3#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "tmp%3#0"
      ]
    },
    "484": {
      "op": "log",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "485": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "exists#0",
        "value#0",
        "1"
      ]
    },
    "486": {
      "op": "return",
      "stack_out": [
        "exists#0",
        "value#0"
      ]
    },
    "487": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_example[routing]",
      "params": {},
      "block": "get_box_example",
      "stack_in": [],
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "488": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "489": {
      "error": "check self.box_int exists",
      "op": "assert // check self.box_int exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "490": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "491": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "\"b\""
      ]
    },
    "493": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "494": {
      "error": "check self.box_dynamic_bytes exists",
      "op": "assert // check self.box_dynamic_bytes exists",
      "stack_out": [
        "maybe_value_converted%0#0",
        "aggregate%box_get%2#0"
      ]
    },
    "495": {
      "op": "extract 2 0",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#1"
      ]
    },
    "498": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_value_converted%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#1",
        "0x424f585f43"
      ]
    },
    "499": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "maybe_value_converted%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#1",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "500": {
      "error": "check self.box_string exists",
      "op": "assert // check self.box_string exists",
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#1",
        "aggregate%box_get%4#0"
      ]
    },
    "501": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "aggregate%box_get%4#0",
        "maybe_value_converted%0#0"
      ]
    },
    "503": {
      "op": "itob",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "504": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#1 (copy)"
      ]
    },
    "506": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%length%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length%0#0"
      ]
    },
    "507": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "508": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%length_uint16%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "511": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length_uint16%0#0",
        "tmp%0#1"
      ]
    },
    "513": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "514": {
      "op": "swap",
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "515": {
      "op": "pushbytes 0x000c",
      "defined_out": [
        "0x000c",
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x000c"
      ]
    },
    "519": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "520": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "522": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "523": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%box_get%4#0",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%data_length%0#0",
        "12"
      ]
    },
    "525": {
      "op": "+",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "526": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "527": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "531": {
      "op": "swap",
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%concat%0#0"
      ]
    },
    "533": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%box_get%4#0"
      ]
    },
    "534": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "535": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "536": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "537": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "538": {
      "op": "log",
      "stack_out": []
    },
    "539": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "540": {
      "op": "return",
      "stack_out": []
    },
    "541": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_map_example[routing]",
      "params": {},
      "block": "get_box_map_example",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "542": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "543": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "544": {
      "op": "bytec 7 // \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "546": {
      "op": "cover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "548": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "549": {
      "op": "bytec 7 // \"default\"",
      "stack_out": [
        "state_get%0#0",
        "\"default\""
      ]
    },
    "551": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "552": {
      "op": "assert",
      "stack_out": []
    },
    "553": {
      "op": "bytec 8 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "555": {
      "op": "log",
      "stack_out": []
    },
    "556": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "557": {
      "op": "return",
      "stack_out": []
    },
    "558": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_example[routing]",
      "params": {},
      "block": "maybe_box_example",
      "stack_in": [],
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "559": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "560": {
      "op": "pop",
      "stack_out": []
    },
    "561": {
      "op": "bytec_0 // \"box_int\"",
      "stack_out": [
        "\"box_int\""
      ]
    },
    "562": {
      "op": "box_get",
      "defined_out": [
        "box_int_exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "box_int_exists#0"
      ]
    },
    "563": {
      "op": "swap",
      "stack_out": [
        "box_int_exists#0",
        "maybe_value%0#0"
      ]
    },
    "564": {
      "op": "btoi",
      "defined_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ]
    },
    "565": {
      "op": "intc_2 // 42",
      "defined_out": [
        "42",
        "box_int_exists#0",
        "box_int_value#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0",
        "42"
      ]
    },
    "566": {
      "op": "dig 1",
      "defined_out": [
        "42",
        "box_int_exists#0",
        "box_int_value#0",
        "box_int_value#0 (copy)"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0",
        "42",
        "box_int_value#0 (copy)"
      ]
    },
    "568": {
      "op": "dig 3",
      "defined_out": [
        "42",
        "box_int_exists#0",
        "box_int_exists#0 (copy)",
        "box_int_value#0",
        "box_int_value#0 (copy)"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0",
        "42",
        "box_int_value#0 (copy)",
        "box_int_exists#0 (copy)"
      ]
    },
    "570": {
      "op": "select",
      "defined_out": [
        "box_int_exists#0",
        "box_int_value#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0",
        "state_get%0#0"
      ]
    },
    "571": {
      "op": "intc_2 // 42",
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0",
        "state_get%0#0",
        "42"
      ]
    },
    "572": {
      "op": "==",
      "defined_out": [
        "box_int_exists#0",
        "box_int_value#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0",
        "tmp%0#0"
      ]
    },
    "573": {
      "op": "assert",
      "stack_out": [
        "box_int_exists#0",
        "box_int_value#0"
      ]
    },
    "574": {
      "op": "swap",
      "stack_out": [
        "box_int_value#0",
        "box_int_exists#0"
      ]
    },
    "575": {
      "op": "!",
      "defined_out": [
        "box_int_value#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_int_value#0",
        "tmp%1#0"
      ]
    },
    "576": {
      "op": "assert",
      "stack_out": [
        "box_int_value#0"
      ]
    },
    "577": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "578": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "579": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.maybe_box_map_example[routing]",
      "params": {},
      "block": "maybe_box_map_example",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "580": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "581": {
      "op": "box_len",
      "defined_out": [
        "exists#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "exists#0"
      ]
    },
    "582": {
      "op": "bury 1",
      "stack_out": [
        "exists#0"
      ]
    },
    "584": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "585": {
      "op": "assert",
      "stack_out": []
    },
    "586": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "587": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "588": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%1#0"
      ]
    },
    "589": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "591": {
      "op": "return",
      "stack_out": []
    },
    "592": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.get_box_map_struct[routing]",
      "params": {},
      "block": "get_box_map_struct",
      "stack_in": [],
      "op": "bytec 9 // \"users\"",
      "defined_out": [
        "\"users\""
      ],
      "stack_out": [
        "\"users\""
      ]
    },
    "594": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"users\"",
        "key#0"
      ],
      "stack_out": [
        "\"users\"",
        "key#0"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "598": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "599": {
      "error": "check self.box_map_struct entry exists",
      "op": "assert // check self.box_map_struct entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "600": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0x151f7c75"
      ]
    },
    "601": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%box_get%0#0"
      ]
    },
    "602": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "603": {
      "op": "log",
      "stack_out": []
    },
    "604": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "605": {
      "op": "return",
      "stack_out": []
    },
    "606": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.set_box[routing]",
      "params": {},
      "block": "set_box",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "609": {
      "op": "btoi",
      "defined_out": [
        "value_int#0"
      ],
      "stack_out": [
        "value_int#0"
      ]
    },
    "610": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "611": {
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_int\""
      ]
    },
    "612": {
      "op": "swap",
      "stack_out": [
        "\"box_int\"",
        "encoded_value%0#0"
      ]
    },
    "613": {
      "op": "box_put",
      "stack_out": []
    },
    "614": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "615": {
      "op": "return",
      "stack_out": []
    },
    "616": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.set_box_map[routing]",
      "params": {},
      "block": "set_box_map",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "619": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "620": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "623": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0"
      ]
    },
    "626": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "key#0"
      ]
    },
    "627": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "628": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "629": {
      "op": "box_del",
      "defined_out": [
        "encoded_value%0#0",
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "{box_del}"
      ]
    },
    "630": {
      "op": "pop",
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "631": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "value#0"
      ]
    },
    "632": {
      "op": "box_put",
      "stack_out": []
    },
    "633": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "634": {
      "op": "return",
      "stack_out": []
    },
    "635": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.set_box_map_struct[routing]",
      "params": {},
      "block": "set_box_map_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "638": {
      "op": "bytec 9 // \"users\"",
      "defined_out": [
        "\"users\"",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"users\""
      ]
    },
    "640": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"users\"",
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "\"users\"",
        "key#0"
      ]
    },
    "643": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "644": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "645": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "646": {
      "op": "pop",
      "stack_out": [
        "value#0",
        "box_prefixed_key%0#0"
      ]
    },
    "647": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "value#0"
      ]
    },
    "648": {
      "op": "box_put",
      "stack_out": []
    },
    "649": {
      "op": "bytec 8 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "651": {
      "op": "log",
      "stack_out": []
    },
    "652": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "653": {
      "op": "return",
      "stack_out": []
    },
    "654": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.set_box_example[routing]",
      "params": {},
      "block": "set_box_example",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "657": {
      "op": "btoi",
      "defined_out": [
        "value_int#0"
      ],
      "stack_out": [
        "value_int#0"
      ]
    },
    "658": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "value_dbytes#0",
        "value_int#0"
      ],
      "stack_out": [
        "value_int#0",
        "value_dbytes#0"
      ]
    },
    "661": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "value_dbytes#0",
        "value_int#0",
        "value_string#0"
      ],
      "stack_out": [
        "value_int#0",
        "value_dbytes#0",
        "value_string#0"
      ]
    },
    "664": {
      "op": "uncover 2",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "value_int#0"
      ]
    },
    "666": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "value_dbytes#0",
        "value_string#0"
      ],
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "encoded_value%0#0"
      ]
    },
    "667": {
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\"",
        "encoded_value%0#0",
        "value_dbytes#0",
        "value_string#0"
      ],
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "encoded_value%0#0",
        "\"box_int\""
      ]
    },
    "668": {
      "op": "swap",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "\"box_int\"",
        "encoded_value%0#0"
      ]
    },
    "669": {
      "op": "box_put",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0"
      ]
    },
    "670": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "value_dbytes#0",
        "value_string#0"
      ],
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "\"b\""
      ]
    },
    "672": {
      "op": "box_del",
      "defined_out": [
        "value_dbytes#0",
        "value_string#0",
        "{box_del}"
      ],
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "{box_del}"
      ]
    },
    "673": {
      "op": "pop",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0"
      ]
    },
    "674": {
      "op": "bytec 4 // \"b\"",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "\"b\""
      ]
    },
    "676": {
      "op": "dig 2",
      "defined_out": [
        "\"b\"",
        "value_dbytes#0",
        "value_dbytes#0 (copy)",
        "value_string#0"
      ],
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "\"b\"",
        "value_dbytes#0 (copy)"
      ]
    },
    "678": {
      "op": "box_put",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0"
      ]
    },
    "679": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "value_dbytes#0",
        "value_string#0"
      ],
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "0x424f585f43"
      ]
    },
    "680": {
      "op": "box_del",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "{box_del}"
      ]
    },
    "681": {
      "op": "pop",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0"
      ]
    },
    "682": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "value_dbytes#0",
        "value_string#0",
        "0x424f585f43"
      ]
    },
    "683": {
      "op": "swap",
      "stack_out": [
        "value_dbytes#0",
        "0x424f585f43",
        "value_string#0"
      ]
    },
    "684": {
      "op": "box_put",
      "stack_out": [
        "value_dbytes#0"
      ]
    },
    "685": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "688": {
      "op": "bytec 10 // \"box_bytes\"",
      "defined_out": [
        "\"box_bytes\"",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "\"box_bytes\""
      ]
    },
    "690": {
      "op": "box_del",
      "stack_out": [
        "tmp%0#1",
        "{box_del}"
      ]
    },
    "691": {
      "op": "pop",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "692": {
      "op": "bytec 10 // \"box_bytes\"",
      "stack_out": [
        "tmp%0#1",
        "\"box_bytes\""
      ]
    },
    "694": {
      "op": "swap",
      "stack_out": [
        "\"box_bytes\"",
        "tmp%0#1"
      ]
    },
    "695": {
      "op": "box_put",
      "stack_out": []
    },
    "696": {
      "op": "bytec_0 // \"box_int\"",
      "stack_out": [
        "\"box_int\""
      ]
    },
    "697": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "698": {
      "error": "check self.box_int exists",
      "op": "assert // check self.box_int exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "699": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "700": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "3"
      ]
    },
    "702": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "703": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "704": {
      "op": "bytec_0 // \"box_int\"",
      "stack_out": [
        "encoded_value%1#0",
        "\"box_int\""
      ]
    },
    "705": {
      "op": "swap",
      "stack_out": [
        "\"box_int\"",
        "encoded_value%1#0"
      ]
    },
    "706": {
      "op": "box_put",
      "stack_out": []
    },
    "707": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "708": {
      "op": "return",
      "stack_out": []
    },
    "709": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.delete_box[routing]",
      "params": {},
      "block": "delete_box",
      "stack_in": [],
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "710": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "711": {
      "op": "pop",
      "stack_out": []
    },
    "712": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "714": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "715": {
      "op": "pop",
      "stack_out": []
    },
    "716": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "717": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "718": {
      "op": "pop",
      "stack_out": []
    },
    "719": {
      "op": "bytec_0 // \"box_int\"",
      "stack_out": [
        "\"box_int\""
      ]
    },
    "720": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "721": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "722": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "723": {
      "op": "intc_2 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "724": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "725": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "727": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "728": {
      "op": "intc_2 // 42",
      "stack_out": [
        "state_get%0#0",
        "42"
      ]
    },
    "729": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "730": {
      "op": "assert",
      "stack_out": []
    },
    "731": {
      "op": "bytec 4 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "733": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "734": {
      "op": "bytec 11 // 0x00023432",
      "defined_out": [
        "0x00023432",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "736": {
      "op": "cover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "738": {
      "op": "select",
      "defined_out": [
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%1#0"
      ]
    },
    "739": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "742": {
      "op": "pushbytes 0x3432",
      "defined_out": [
        "0x3432",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x3432"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "747": {
      "op": "assert",
      "stack_out": []
    },
    "748": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "749": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "750": {
      "op": "bytec 11 // 0x00023432",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0x00023432"
      ]
    },
    "752": {
      "op": "cover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "754": {
      "op": "select",
      "defined_out": [
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0"
      ]
    },
    "755": {
      "op": "bytec 11 // 0x00023432",
      "stack_out": [
        "state_get%2#0",
        "0x00023432"
      ]
    },
    "757": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "758": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "759": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.delete_box_map[routing]",
      "params": {},
      "block": "delete_box_map",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "762": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "763": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "764": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "765": {
      "op": "pop",
      "stack_out": []
    },
    "766": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "767": {
      "op": "return",
      "stack_out": []
    },
    "768": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_length[routing]",
      "params": {},
      "block": "box_map_length",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "769": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "770": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "771": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "772": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "774": {
      "op": "bnz box_map_length_after_if_else@3",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "777": {
      "op": "intc_1 // 0",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%0#0"
      ]
    },
    "778": {
      "block": "box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4",
      "stack_in": [
        "encoded_value%0#0",
        "tmp%0#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "779": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "780": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "781": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%2#0"
      ]
    },
    "782": {
      "op": "log",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "783": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "1"
      ]
    },
    "784": {
      "op": "return",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "785": {
      "block": "box_map_length_after_if_else@3",
      "stack_in": [
        "encoded_value%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "786": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "encoded_value%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "787": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%0#0"
      ]
    },
    "788": {
      "op": "b box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4"
    },
    "791": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_struct_length[routing]",
      "params": {},
      "block": "box_map_struct_length",
      "stack_in": [],
      "op": "bytec 12 // 0x75736572730000000000000000",
      "defined_out": [
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "793": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "794": {
      "op": "pop",
      "stack_out": []
    },
    "795": {
      "op": "bytec 12 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "797": {
      "op": "pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
      "defined_out": [
        "0x0012000000000000004600000000000000020008746573744e616d65",
        "0x75736572730000000000000000"
      ],
      "stack_out": [
        "0x75736572730000000000000000",
        "0x0012000000000000004600000000000000020008746573744e616d65"
      ]
    },
    "827": {
      "op": "box_put",
      "stack_out": []
    },
    "828": {
      "op": "bytec 12 // 0x75736572730000000000000000",
      "stack_out": [
        "0x75736572730000000000000000"
      ]
    },
    "830": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "831": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "832": {
      "op": "pushint 28 // 28",
      "defined_out": [
        "28",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "28"
      ]
    },
    "834": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "835": {
      "op": "assert",
      "stack_out": []
    },
    "836": {
      "op": "bytec 8 // 0x151f7c7580",
      "defined_out": [
        "0x151f7c7580"
      ],
      "stack_out": [
        "0x151f7c7580"
      ]
    },
    "838": {
      "op": "log",
      "stack_out": []
    },
    "839": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "840": {
      "op": "return",
      "stack_out": []
    },
    "841": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_length_example[routing]",
      "params": {},
      "block": "box_map_length_example",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "842": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "843": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "844": {
      "op": "box_del",
      "defined_out": [
        "encoded_value%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "{box_del}"
      ]
    },
    "845": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "846": {
      "op": "dup",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "847": {
      "op": "pushbytes \"Hmmmmm\"",
      "defined_out": [
        "\"Hmmmmm\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "\"Hmmmmm\""
      ]
    },
    "855": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "856": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "857": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "858": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "6"
      ]
    },
    "860": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "861": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "862": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.extract_box[routing]",
      "params": {},
      "block": "extract_box",
      "stack_in": [],
      "op": "bytec 5 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "864": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "866": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "867": {
      "op": "assert",
      "stack_out": []
    },
    "868": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "870": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "872": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "874": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "875": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "877": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "878": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "880": {
      "op": "intc_1 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "881": {
      "op": "dup",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "882": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "884": {
      "op": "box_splice",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "885": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "887": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64"
      ]
    },
    "889": {
      "op": "bytec 13 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "891": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "892": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "894": {
      "op": "intc_1 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "895": {
      "op": "pushint 69 // 69",
      "defined_out": [
        "\"blob\"",
        "0",
        "69",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "69"
      ]
    },
    "897": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0"
      ]
    },
    "898": {
      "op": "swap",
      "stack_out": [
        "sender_bytes#0",
        "prefix#0",
        "app_address#0"
      ]
    },
    "899": {
      "op": "uncover 2",
      "stack_out": [
        "prefix#0",
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "901": {
      "op": "concat",
      "defined_out": [
        "prefix#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "prefix#0",
        "tmp%6#0"
      ]
    },
    "902": {
      "op": "bytec 13 // 0x68656c6c6f",
      "stack_out": [
        "prefix#0",
        "tmp%6#0",
        "0x68656c6c6f"
      ]
    },
    "904": {
      "op": "concat",
      "defined_out": [
        "prefix#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "prefix#0",
        "tmp%7#0"
      ]
    },
    "905": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "906": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "907": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.value_box[routing]",
      "params": {},
      "block": "value_box",
      "stack_in": [],
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "908": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "909": {
      "error": "check self.box_int exists",
      "op": "assert // check self.box_int exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "910": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "911": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "10"
      ]
    },
    "912": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "913": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "914": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.exist_box[routing]",
      "params": {},
      "block": "exist_box",
      "stack_in": [],
      "op": "bytec_0 // \"box_int\"",
      "defined_out": [
        "\"box_int\""
      ],
      "stack_out": [
        "\"box_int\""
      ]
    },
    "915": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "916": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "918": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "919": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "920": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "922": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "923": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "924": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "925": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "926": {
      "op": "log",
      "stack_out": []
    },
    "927": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "928": {
      "op": "return",
      "stack_out": []
    },
    "929": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.exist_box_example[routing]",
      "params": {},
      "block": "exist_box_example",
      "stack_in": [],
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "931": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "932": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "934": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x424f585f43"
      ]
    },
    "935": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "936": {
      "op": "cover 2",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "_%1#0"
      ]
    },
    "938": {
      "op": "pop",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%0#0"
      ]
    },
    "939": {
      "op": "bytec 10 // \"box_bytes\"",
      "defined_out": [
        "\"box_bytes\"",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "\"box_bytes\""
      ]
    },
    "941": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "942": {
      "op": "cover 3",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "_%2#0"
      ]
    },
    "944": {
      "op": "pop",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0"
      ]
    },
    "945": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "946": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "947": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "949": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "950": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_bool%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "aggregate%encoded_bool%0#0",
        "1"
      ]
    },
    "951": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%2#0",
        "aggregate%encoded_bool%0#0",
        "1",
        "maybe_exists%1#0"
      ]
    },
    "953": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%0#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "aggregate%set_bit%0#0"
      ]
    },
    "954": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%set_bit%0#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "aggregate%set_bit%0#0",
        "2"
      ]
    },
    "956": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%set_bit%0#0",
        "2",
        "maybe_exists%2#0"
      ]
    },
    "958": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%1#0"
      ],
      "stack_out": [
        "aggregate%set_bit%1#0"
      ]
    },
    "959": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%set_bit%1#0"
      ],
      "stack_out": [
        "aggregate%set_bit%1#0",
        "0x151f7c75"
      ]
    },
    "960": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%set_bit%1#0"
      ]
    },
    "961": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "962": {
      "op": "log",
      "stack_out": []
    },
    "963": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "964": {
      "op": "return",
      "stack_out": []
    },
    "965": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.slice_box[routing]",
      "params": {},
      "block": "slice_box",
      "stack_in": [],
      "op": "bytec 6 // \"0\"",
      "defined_out": [
        "\"0\""
      ],
      "stack_out": [
        "\"0\""
      ]
    },
    "967": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "968": {
      "op": "pop",
      "stack_out": []
    },
    "969": {
      "op": "bytec 6 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "971": {
      "op": "pushbytes 0x54657374696e672074657374696e6720313233",
      "defined_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ],
      "stack_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ]
    },
    "992": {
      "op": "box_put",
      "stack_out": []
    },
    "993": {
      "op": "bytec 6 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "995": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "996": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "997": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "998": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "999": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "tmp%0#0 (copy)"
      ]
    },
    "1001": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1002": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7"
      ]
    },
    "1004": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7",
        "tmp%0#0 (copy)"
      ]
    },
    "1006": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1007": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1009": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "7"
      ]
    },
    "1011": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%4#0"
      ]
    },
    "1013": {
      "op": "select",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1014": {
      "op": "dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1016": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "1017": {
      "op": "bytec 6 // \"0\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"0\""
      ]
    },
    "1019": {
      "op": "cover 2",
      "stack_out": [
        "\"0\"",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "1021": {
      "op": "box_extract",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1022": {
      "op": "pushbytes 0x54657374696e67",
      "defined_out": [
        "0x54657374696e67",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x54657374696e67"
      ]
    },
    "1031": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1032": {
      "op": "assert",
      "stack_out": []
    },
    "1033": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1034": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1035": {
      "op": "pop",
      "stack_out": []
    },
    "1036": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1037": {
      "op": "pushbytes 0x000548656c6c6f",
      "defined_out": [
        "0x000548656c6c6f",
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43",
        "0x000548656c6c6f"
      ]
    },
    "1046": {
      "op": "box_put",
      "stack_out": []
    },
    "1047": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1048": {
      "op": "box_len",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1049": {
      "op": "pop",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1050": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "2"
      ]
    },
    "1052": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "2",
        "tmp%10#0 (copy)"
      ]
    },
    "1054": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "1055": {
      "op": "dig 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1057": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%10#0 (copy)",
        "2"
      ]
    },
    "1059": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "2",
        "tmp%12#0"
      ]
    },
    "1061": {
      "op": "select",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "1062": {
      "op": "intc_3 // 10",
      "defined_out": [
        "10",
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "10"
      ]
    },
    "1063": {
      "op": "dig 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "10",
        "tmp%10#0 (copy)"
      ]
    },
    "1065": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1066": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0"
      ]
    },
    "1068": {
      "op": "intc_3 // 10",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0",
        "10"
      ]
    },
    "1069": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0",
        "10",
        "tmp%14#0"
      ]
    },
    "1071": {
      "op": "select",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "1072": {
      "op": "dig 1",
      "defined_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%13#0 (copy)"
      ]
    },
    "1074": {
      "op": "-",
      "defined_out": [
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "1075": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0",
        "0x424f585f43"
      ]
    },
    "1076": {
      "op": "cover 2",
      "stack_out": [
        "0x424f585f43",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "1078": {
      "op": "box_extract",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1079": {
      "op": "pushbytes 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x48656c6c6f"
      ]
    },
    "1086": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1087": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "1088": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_exists[routing]",
      "params": {},
      "block": "box_map_exists",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1091": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1092": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1093": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1094": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1096": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "1097": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "1098": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "1100": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1101": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "1102": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1103": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1104": {
      "op": "log",
      "stack_out": []
    },
    "1105": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1106": {
      "op": "return",
      "stack_out": []
    },
    "1107": {
      "subroutine": "smart_contracts.box_storage.contract.BoxStorage.box_map_struct_exists[routing]",
      "params": {},
      "block": "box_map_struct_exists",
      "stack_in": [],
      "op": "bytec 9 // \"users\"",
      "defined_out": [
        "\"users\""
      ],
      "stack_out": [
        "\"users\""
      ]
    },
    "1109": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"users\"",
        "key#0"
      ],
      "stack_out": [
        "\"users\"",
        "key#0"
      ]
    },
    "1112": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1113": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1114": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1116": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "1117": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "1118": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "1120": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1121": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "1122": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1123": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1124": {
      "op": "log",
      "stack_out": []
    },
    "1125": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1126": {
      "op": "return",
      "stack_out": []
    }
  }
}