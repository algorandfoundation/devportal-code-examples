{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "32: increment_via_inner:",
              "39: itxn_begin",
              "42: pushint 1717",
              "43: itxn_field ApplicationID",
              "50: bytec_1",
              "51: itxn_field ApplicationArgs",
              "52: intc_0",
              "53: itxn_field TypeEnum",
              "56: intc_1",
              "57: itxn_field Fee",
              "64: itxn_submit",
              "65: itxn LastLog",
              "66: dup",
              "67: extract 4 0",
              "68: swap",
              "69: extract 0 4",
              "70: bytec_0",
              "71: ==",
              "72: assert",
              "75: bytec_0",
              "76: swap",
              "77: concat",
              "78: log",
              "79: intc_2",
              "80: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "84: increment_via_inner_with_arg:",
              "87: txna ApplicationArgs 1",
              "88: btoi",
              "92: itxn_begin",
              "93: itxn_field ApplicationID",
              "94: bytec_1",
              "95: itxn_field ApplicationArgs",
              "96: intc_0",
              "97: itxn_field TypeEnum",
              "98: intc_1",
              "99: itxn_field Fee",
              "100: itxn_submit",
              "101: itxn LastLog",
              "102: dup",
              "103: extract 4 0",
              "104: swap",
              "105: extract 0 4",
              "106: bytec_0",
              "107: ==",
              "108: assert",
              "111: bytec_0",
              "112: swap",
              "113: concat",
              "114: log",
              "115: intc_2",
              "116: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "32: increment_via_inner:",
              "39: itxn_begin",
              "42: pushint 1717",
              "43: itxn_field ApplicationID",
              "50: bytec_1",
              "51: itxn_field ApplicationArgs",
              "52: intc_0",
              "53: itxn_field TypeEnum",
              "56: intc_1",
              "57: itxn_field Fee",
              "64: itxn_submit",
              "65: itxn LastLog",
              "66: dup",
              "67: extract 4 0",
              "68: swap",
              "69: extract 0 4",
              "70: bytec_0",
              "71: ==",
              "72: assert",
              "75: bytec_0",
              "76: swap",
              "77: concat",
              "78: log",
              "79: intc_2",
              "80: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "84: increment_via_inner_with_arg:",
              "87: txna ApplicationArgs 1",
              "88: btoi",
              "92: itxn_begin",
              "93: itxn_field ApplicationID",
              "94: bytec_1",
              "95: itxn_field ApplicationArgs",
              "96: intc_0",
              "97: itxn_field TypeEnum",
              "98: intc_1",
              "99: itxn_field Fee",
              "100: itxn_submit",
              "101: itxn LastLog",
              "102: dup",
              "103: extract 4 0",
              "104: swap",
              "105: extract 0 4",
              "106: bytec_0",
              "107: ==",
              "108: assert",
              "111: bytec_0",
              "112: swap",
              "113: concat",
              "114: log",
              "115: intc_2",
              "116: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "32: increment_via_inner:",
              "39: itxn_begin",
              "42: pushint 1717",
              "43: itxn_field ApplicationID",
              "50: bytec_1",
              "51: itxn_field ApplicationArgs",
              "52: intc_0",
              "53: itxn_field TypeEnum",
              "56: intc_1",
              "57: itxn_field Fee",
              "64: itxn_submit",
              "65: itxn LastLog",
              "66: dup",
              "67: extract 4 0",
              "68: swap",
              "69: extract 0 4",
              "70: bytec_0",
              "71: ==",
              "72: assert",
              "75: bytec_0",
              "76: swap",
              "77: concat",
              "78: log",
              "79: intc_2",
              "80: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "84: increment_via_inner_with_arg:",
              "87: txna ApplicationArgs 1",
              "88: btoi",
              "92: itxn_begin",
              "93: itxn_field ApplicationID",
              "94: bytec_1",
              "95: itxn_field ApplicationArgs",
              "96: intc_0",
              "97: itxn_field TypeEnum",
              "98: intc_1",
              "99: itxn_field Fee",
              "100: itxn_submit",
              "101: itxn LastLog",
              "102: dup",
              "103: extract 4 0",
              "104: swap",
              "105: extract 0 4",
              "106: bytec_0",
              "107: ==",
              "108: assert",
              "111: bytec_0",
              "112: swap",
              "113: concat",
              "114: log",
              "115: intc_2",
              "116: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "32: increment_via_inner:",
              "39: itxn_begin",
              "42: pushint 1717",
              "43: itxn_field ApplicationID",
              "50: bytec_1",
              "51: itxn_field ApplicationArgs",
              "52: intc_0",
              "53: itxn_field TypeEnum",
              "56: intc_1",
              "57: itxn_field Fee",
              "64: itxn_submit",
              "65: itxn LastLog",
              "66: dup",
              "67: extract 4 0",
              "68: swap",
              "69: extract 0 4",
              "70: bytec_0",
              "71: ==",
              "72: assert",
              "75: bytec_0",
              "76: swap",
              "77: concat",
              "78: log",
              "79: intc_2",
              "80: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "84: increment_via_inner_with_arg:",
              "87: txna ApplicationArgs 1",
              "88: btoi",
              "92: itxn_begin",
              "93: itxn_field ApplicationID",
              "94: bytec_1",
              "95: itxn_field ApplicationArgs",
              "96: intc_0",
              "97: itxn_field TypeEnum",
              "98: intc_1",
              "99: itxn_field Fee",
              "100: itxn_submit",
              "101: itxn LastLog",
              "102: dup",
              "103: extract 4 0",
              "104: swap",
              "105: extract 0 4",
              "106: bytec_0",
              "107: ==",
              "108: assert",
              "111: bytec_0",
              "112: swap",
              "113: concat",
              "114: log",
              "115: intc_2",
              "116: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "32: increment_via_inner:",
              "39: itxn_begin",
              "42: pushint 1717",
              "43: itxn_field ApplicationID",
              "50: bytec_1",
              "51: itxn_field ApplicationArgs",
              "52: intc_0",
              "53: itxn_field TypeEnum",
              "56: intc_1",
              "57: itxn_field Fee",
              "64: itxn_submit",
              "65: itxn LastLog",
              "66: dup",
              "67: extract 4 0",
              "68: swap",
              "69: extract 0 4",
              "70: bytec_0",
              "71: ==",
              "72: assert",
              "75: bytec_0",
              "76: swap",
              "77: concat",
              "78: log",
              "79: intc_2",
              "80: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "84: increment_via_inner_with_arg:",
              "87: txna ApplicationArgs 1",
              "88: btoi",
              "92: itxn_begin",
              "93: itxn_field ApplicationID",
              "94: bytec_1",
              "95: itxn_field ApplicationArgs",
              "96: intc_0",
              "97: itxn_field TypeEnum",
              "98: intc_1",
              "99: itxn_field Fee",
              "100: itxn_submit",
              "101: itxn LastLog",
              "102: dup",
              "103: extract 4 0",
              "104: swap",
              "105: extract 0 4",
              "106: bytec_0",
              "107: ==",
              "108: assert",
              "111: bytec_0",
              "112: swap",
              "113: concat",
              "114: log",
              "115: intc_2",
              "116: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "22: main___algopy_default_create@9:",
              "23: txn OnCompletion",
              "24: !",
              "25: txn ApplicationID",
              "26: !",
              "27: &&",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "32: increment_via_inner:",
              "39: itxn_begin",
              "42: pushint 1717",
              "43: itxn_field ApplicationID",
              "50: bytec_1",
              "51: itxn_field ApplicationArgs",
              "52: intc_0",
              "53: itxn_field TypeEnum",
              "56: intc_1",
              "57: itxn_field Fee",
              "64: itxn_submit",
              "65: itxn LastLog",
              "66: dup",
              "67: extract 4 0",
              "68: swap",
              "69: extract 0 4",
              "70: bytec_0",
              "71: ==",
              "72: assert",
              "75: bytec_0",
              "76: swap",
              "77: concat",
              "78: log",
              "79: intc_2",
              "80: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xd06846a9 0xa1f6b235",
              "18: txna ApplicationArgs 0",
              "19: match increment_via_inner increment_via_inner_with_arg"
            ],
            [
              "84: increment_via_inner_with_arg:",
              "87: txna ApplicationArgs 1",
              "88: btoi",
              "92: itxn_begin",
              "93: itxn_field ApplicationID",
              "94: bytec_1",
              "95: itxn_field ApplicationArgs",
              "96: intc_0",
              "97: itxn_field TypeEnum",
              "98: intc_1",
              "99: itxn_field Fee",
              "100: itxn_submit",
              "101: itxn LastLog",
              "102: dup",
              "103: extract 4 0",
              "104: swap",
              "105: extract 0 4",
              "106: bytec_0",
              "107: ==",
              "108: assert",
              "111: bytec_0",
              "112: swap",
              "113: concat",
              "114: log",
              "115: intc_2",
              "116: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 6 0 1",
              "7: bytecblock 0x151f7c75 0x4a325901",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@9"
            ],
            [
              "22: main___algopy_default_create@9:",
              "23: txn OnCompletion",
              "24: !",
              "25: txn ApplicationID",
              "26: !",
              "27: &&",
              "28: return"
            ]
          ]
        }
      ]
    }
  ]
}