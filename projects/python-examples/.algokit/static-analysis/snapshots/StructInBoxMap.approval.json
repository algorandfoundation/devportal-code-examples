{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "32: box_map_test:",
              "35: bytec_0",
              "36: box_del",
              "37: pop",
              "38: bytec_0",
              "41: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "44: box_put",
              "47: bytec_0",
              "48: box_len",
              "49: pop",
              "50: pushint 28",
              "51: ==",
              "52: assert",
              "55: bytec_2",
              "56: log",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "62: box_map_set:",
              "65: txna ApplicationArgs 2",
              "68: bytec_1",
              "71: txna ApplicationArgs 1",
              "74: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: swap",
              "79: box_put",
              "82: bytec_2",
              "83: log",
              "84: intc_0",
              "85: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "89: box_map_get:",
              "92: bytec_1",
              "95: txna ApplicationArgs 1",
              "98: concat",
              "99: box_get",
              "100: assert",
              "103: bytec_3",
              "104: swap",
              "105: concat",
              "106: log",
              "107: intc_0",
              "108: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "112: box_map_exists:",
              "115: bytec_1",
              "118: txna ApplicationArgs 1",
              "121: concat",
              "122: box_len",
              "123: bury 1",
              "126: pushbytes 0x00",
              "127: pushint 0",
              "128: uncover 2",
              "129: setbit",
              "130: bytec_3",
              "131: swap",
              "132: concat",
              "133: log",
              "134: intc_0",
              "135: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "32: box_map_test:",
              "35: bytec_0",
              "36: box_del",
              "37: pop",
              "38: bytec_0",
              "41: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "44: box_put",
              "47: bytec_0",
              "48: box_len",
              "49: pop",
              "50: pushint 28",
              "51: ==",
              "52: assert",
              "55: bytec_2",
              "56: log",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "62: box_map_set:",
              "65: txna ApplicationArgs 2",
              "68: bytec_1",
              "71: txna ApplicationArgs 1",
              "74: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: swap",
              "79: box_put",
              "82: bytec_2",
              "83: log",
              "84: intc_0",
              "85: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "89: box_map_get:",
              "92: bytec_1",
              "95: txna ApplicationArgs 1",
              "98: concat",
              "99: box_get",
              "100: assert",
              "103: bytec_3",
              "104: swap",
              "105: concat",
              "106: log",
              "107: intc_0",
              "108: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "112: box_map_exists:",
              "115: bytec_1",
              "118: txna ApplicationArgs 1",
              "121: concat",
              "122: box_len",
              "123: bury 1",
              "126: pushbytes 0x00",
              "127: pushint 0",
              "128: uncover 2",
              "129: setbit",
              "130: bytec_3",
              "131: swap",
              "132: concat",
              "133: log",
              "134: intc_0",
              "135: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "32: box_map_test:",
              "35: bytec_0",
              "36: box_del",
              "37: pop",
              "38: bytec_0",
              "41: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "44: box_put",
              "47: bytec_0",
              "48: box_len",
              "49: pop",
              "50: pushint 28",
              "51: ==",
              "52: assert",
              "55: bytec_2",
              "56: log",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "62: box_map_set:",
              "65: txna ApplicationArgs 2",
              "68: bytec_1",
              "71: txna ApplicationArgs 1",
              "74: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: swap",
              "79: box_put",
              "82: bytec_2",
              "83: log",
              "84: intc_0",
              "85: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "89: box_map_get:",
              "92: bytec_1",
              "95: txna ApplicationArgs 1",
              "98: concat",
              "99: box_get",
              "100: assert",
              "103: bytec_3",
              "104: swap",
              "105: concat",
              "106: log",
              "107: intc_0",
              "108: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "112: box_map_exists:",
              "115: bytec_1",
              "118: txna ApplicationArgs 1",
              "121: concat",
              "122: box_len",
              "123: bury 1",
              "126: pushbytes 0x00",
              "127: pushint 0",
              "128: uncover 2",
              "129: setbit",
              "130: bytec_3",
              "131: swap",
              "132: concat",
              "133: log",
              "134: intc_0",
              "135: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "32: box_map_test:",
              "35: bytec_0",
              "36: box_del",
              "37: pop",
              "38: bytec_0",
              "41: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "44: box_put",
              "47: bytec_0",
              "48: box_len",
              "49: pop",
              "50: pushint 28",
              "51: ==",
              "52: assert",
              "55: bytec_2",
              "56: log",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "62: box_map_set:",
              "65: txna ApplicationArgs 2",
              "68: bytec_1",
              "71: txna ApplicationArgs 1",
              "74: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: swap",
              "79: box_put",
              "82: bytec_2",
              "83: log",
              "84: intc_0",
              "85: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "89: box_map_get:",
              "92: bytec_1",
              "95: txna ApplicationArgs 1",
              "98: concat",
              "99: box_get",
              "100: assert",
              "103: bytec_3",
              "104: swap",
              "105: concat",
              "106: log",
              "107: intc_0",
              "108: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "112: box_map_exists:",
              "115: bytec_1",
              "118: txna ApplicationArgs 1",
              "121: concat",
              "122: box_len",
              "123: bury 1",
              "126: pushbytes 0x00",
              "127: pushint 0",
              "128: uncover 2",
              "129: setbit",
              "130: bytec_3",
              "131: swap",
              "132: concat",
              "133: log",
              "134: intc_0",
              "135: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "32: box_map_test:",
              "35: bytec_0",
              "36: box_del",
              "37: pop",
              "38: bytec_0",
              "41: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "44: box_put",
              "47: bytec_0",
              "48: box_len",
              "49: pop",
              "50: pushint 28",
              "51: ==",
              "52: assert",
              "55: bytec_2",
              "56: log",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "62: box_map_set:",
              "65: txna ApplicationArgs 2",
              "68: bytec_1",
              "71: txna ApplicationArgs 1",
              "74: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: swap",
              "79: box_put",
              "82: bytec_2",
              "83: log",
              "84: intc_0",
              "85: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "89: box_map_get:",
              "92: bytec_1",
              "95: txna ApplicationArgs 1",
              "98: concat",
              "99: box_get",
              "100: assert",
              "103: bytec_3",
              "104: swap",
              "105: concat",
              "106: log",
              "107: intc_0",
              "108: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "112: box_map_exists:",
              "115: bytec_1",
              "118: txna ApplicationArgs 1",
              "121: concat",
              "122: box_len",
              "123: bury 1",
              "126: pushbytes 0x00",
              "127: pushint 0",
              "128: uncover 2",
              "129: setbit",
              "130: bytec_3",
              "131: swap",
              "132: concat",
              "133: log",
              "134: intc_0",
              "135: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "22: main___algopy_default_create@13:",
              "23: txn OnCompletion",
              "24: !",
              "25: txn ApplicationID",
              "26: !",
              "27: &&",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "32: box_map_test:",
              "35: bytec_0",
              "36: box_del",
              "37: pop",
              "38: bytec_0",
              "41: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "44: box_put",
              "47: bytec_0",
              "48: box_len",
              "49: pop",
              "50: pushint 28",
              "51: ==",
              "52: assert",
              "55: bytec_2",
              "56: log",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "62: box_map_set:",
              "65: txna ApplicationArgs 2",
              "68: bytec_1",
              "71: txna ApplicationArgs 1",
              "74: concat",
              "75: dup",
              "76: box_del",
              "77: pop",
              "78: swap",
              "79: box_put",
              "82: bytec_2",
              "83: log",
              "84: intc_0",
              "85: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "89: box_map_get:",
              "92: bytec_1",
              "95: txna ApplicationArgs 1",
              "98: concat",
              "99: box_get",
              "100: assert",
              "103: bytec_3",
              "104: swap",
              "105: concat",
              "106: log",
              "107: intc_0",
              "108: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0xcaad1623 0x079c27bd 0x6a02b350 0x8ee2c364",
              "18: txna ApplicationArgs 0",
              "19: match box_map_test box_map_set box_map_get box_map_exists"
            ],
            [
              "112: box_map_exists:",
              "115: bytec_1",
              "118: txna ApplicationArgs 1",
              "121: concat",
              "122: box_len",
              "123: bury 1",
              "126: pushbytes 0x00",
              "127: pushint 0",
              "128: uncover 2",
              "129: setbit",
              "130: bytec_3",
              "131: swap",
              "132: concat",
              "133: log",
              "134: intc_0",
              "135: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "7: bytecblock 0x75736572730000000000000000 \"users\" 0x151f7c7580 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "22: main___algopy_default_create@13:",
              "23: txn OnCompletion",
              "24: !",
              "25: txn ApplicationID",
              "26: !",
              "27: &&",
              "28: return"
            ]
          ]
        }
      ]
    }
  ]
}