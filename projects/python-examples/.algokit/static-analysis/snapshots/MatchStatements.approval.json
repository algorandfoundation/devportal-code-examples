{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 8,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "62: pushbytes \"Invalid day\""
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 15 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "128: get_day_switch_case_0@2:",
              "131: pushbytes \"Monday\"",
              "134: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "120: get_day_switch_case_1@3:",
              "123: pushbytes \"Tuesday\"",
              "126: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 13 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "112: get_day_switch_case_2@4:",
              "115: pushbytes \"Wednesday\"",
              "118: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 12 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "104: get_day_switch_case_3@5:",
              "107: pushbytes \"Thursday\"",
              "110: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 11 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "96: get_day_switch_case_4@6:",
              "99: pushbytes \"Friday\"",
              "102: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 10 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "88: get_day_switch_case_5@7:",
              "91: pushbytes \"Saturday\"",
              "94: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 9 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "80: get_day_switch_case_6@8:",
              "83: pushbytes \"Sunday\"",
              "86: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 8,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "62: pushbytes \"Invalid day\""
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 15 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "128: get_day_switch_case_0@2:",
              "131: pushbytes \"Monday\"",
              "134: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "120: get_day_switch_case_1@3:",
              "123: pushbytes \"Tuesday\"",
              "126: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 13 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "112: get_day_switch_case_2@4:",
              "115: pushbytes \"Wednesday\"",
              "118: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 12 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "104: get_day_switch_case_3@5:",
              "107: pushbytes \"Thursday\"",
              "110: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 11 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "96: get_day_switch_case_4@6:",
              "99: pushbytes \"Friday\"",
              "102: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 10 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "88: get_day_switch_case_5@7:",
              "91: pushbytes \"Saturday\"",
              "94: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 9 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "80: get_day_switch_case_6@8:",
              "83: pushbytes \"Sunday\"",
              "86: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 8,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "62: pushbytes \"Invalid day\""
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 15 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "128: get_day_switch_case_0@2:",
              "131: pushbytes \"Monday\"",
              "134: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "120: get_day_switch_case_1@3:",
              "123: pushbytes \"Tuesday\"",
              "126: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 13 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "112: get_day_switch_case_2@4:",
              "115: pushbytes \"Wednesday\"",
              "118: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 12 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "104: get_day_switch_case_3@5:",
              "107: pushbytes \"Thursday\"",
              "110: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 11 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "96: get_day_switch_case_4@6:",
              "99: pushbytes \"Friday\"",
              "102: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 10 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "88: get_day_switch_case_5@7:",
              "91: pushbytes \"Saturday\"",
              "94: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 9 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "80: get_day_switch_case_6@8:",
              "83: pushbytes \"Sunday\"",
              "86: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 8,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "62: pushbytes \"Invalid day\""
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 15 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "128: get_day_switch_case_0@2:",
              "131: pushbytes \"Monday\"",
              "134: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "120: get_day_switch_case_1@3:",
              "123: pushbytes \"Tuesday\"",
              "126: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 13 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "112: get_day_switch_case_2@4:",
              "115: pushbytes \"Wednesday\"",
              "118: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 12 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "104: get_day_switch_case_3@5:",
              "107: pushbytes \"Thursday\"",
              "110: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 11 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "96: get_day_switch_case_4@6:",
              "99: pushbytes \"Friday\"",
              "102: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 10 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "88: get_day_switch_case_5@7:",
              "91: pushbytes \"Saturday\"",
              "94: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 9 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "80: get_day_switch_case_6@8:",
              "83: pushbytes \"Sunday\"",
              "86: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 9,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "62: pushbytes \"Invalid day\""
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 15 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "128: get_day_switch_case_0@2:",
              "131: pushbytes \"Monday\"",
              "134: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "120: get_day_switch_case_1@3:",
              "123: pushbytes \"Tuesday\"",
              "126: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 13 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "112: get_day_switch_case_2@4:",
              "115: pushbytes \"Wednesday\"",
              "118: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 12 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "104: get_day_switch_case_3@5:",
              "107: pushbytes \"Thursday\"",
              "110: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 11 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "96: get_day_switch_case_4@6:",
              "99: pushbytes \"Friday\"",
              "102: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 10 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "88: get_day_switch_case_5@7:",
              "91: pushbytes \"Saturday\"",
              "94: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 9 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "80: get_day_switch_case_6@8:",
              "83: pushbytes \"Sunday\"",
              "86: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "26: main___algopy_default_create@5:",
              "27: txn OnCompletion",
              "28: !",
              "29: txn ApplicationID",
              "30: !",
              "31: &&",
              "32: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 9,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "62: pushbytes \"Invalid day\""
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 15 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "128: get_day_switch_case_0@2:",
              "131: pushbytes \"Monday\"",
              "134: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 14 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "120: get_day_switch_case_1@3:",
              "123: pushbytes \"Tuesday\"",
              "126: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 13 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "112: get_day_switch_case_2@4:",
              "115: pushbytes \"Wednesday\"",
              "118: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 12 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "104: get_day_switch_case_3@5:",
              "107: pushbytes \"Thursday\"",
              "110: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 11 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "96: get_day_switch_case_4@6:",
              "99: pushbytes \"Friday\"",
              "102: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 10 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "88: get_day_switch_case_5@7:",
              "91: pushbytes \"Saturday\"",
              "94: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 9 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "11: pushbytes 0xe5a4ea52",
              "12: txna ApplicationArgs 0",
              "13: match main_get_day_route@3"
            ],
            [
              "16: main_get_day_route@3:",
              "19: txn OnCompletion",
              "20: !",
              "21: txn ApplicationID",
              "22: &&",
              "23: assert",
              "24: b get_day"
            ],
            [
              "36: get_day:",
              "39: txna ApplicationArgs 1",
              "40: btoi",
              "59: switch get_day_switch_case_0@2 get_day_switch_case_1@3 get_day_switch_case_2@4 get_day_switch_case_3@5 get_day_switch_case_4@6 get_day_switch_case_5@7 get_day_switch_case_6@8"
            ],
            [
              "80: get_day_switch_case_6@8:",
              "83: pushbytes \"Sunday\"",
              "86: b get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10"
            ],
            [
              "64: get_day_after_inlined_smart_contracts.control_flow.contract.MatchStatements.get_day@10:",
              "67: dup",
              "68: len",
              "69: itob",
              "70: extract 6 2",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x151f7c75",
              "74: swap",
              "75: concat",
              "76: log",
              "77: pushint 1",
              "78: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@5"
            ],
            [
              "26: main___algopy_default_create@5:",
              "27: txn OnCompletion",
              "28: !",
              "29: txn ApplicationID",
              "30: !",
              "31: &&",
              "32: return"
            ]
          ]
        }
      ]
    }
  ]
}