{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "40: goodbye:",
              "43: pushbytes 0x151f7c7500020004000f0009476f6f642062796520",
              "44: txna ApplicationArgs 1",
              "45: concat",
              "46: log",
              "47: intc_1",
              "48: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7 -> 8 -> 10 -> 11 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "52: hello:",
              "53: intc_2",
              "54: dup",
              "55: pushbytes \"\"",
              "56: dup",
              "59: txna ApplicationArgs 1",
              "62: dup",
              "63: len",
              "64: pushint 4",
              "65: +",
              "66: itob",
              "67: extract 6 2",
              "68: pushbytes 0x00020004",
              "69: swap",
              "70: concat",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x000121",
              "74: concat",
              "77: dup",
              "78: extract 2 0",
              "79: swap",
              "80: intc_2",
              "81: extract_uint16",
              "82: dup",
              "83: intc_0",
              "84: *",
              "85: dig 2",
              "86: len",
              "87: uncover 3",
              "88: dig 2",
              "89: uncover 2",
              "90: substring3",
              "91: intc_1",
              "92: uncover 3",
              "93: +",
              "94: dup",
              "95: itob",
              "96: extract 6 2",
              "97: cover 3",
              "98: uncover 2",
              "99: bzero",
              "100: pushbytes 0x0002",
              "101: swap",
              "102: concat",
              "103: pushbytes 0x000648656c6c6f20",
              "104: concat",
              "105: uncover 2",
              "106: concat",
              "107: swap",
              "108: intc_0",
              "109: *",
              "110: dup",
              "111: intc_2"
            ],
            [
              "113: hello_for_header@7:",
              "114: dup",
              "115: dig 3",
              "116: <",
              "117: bz hello_after_for@9"
            ],
            [
              "141: hello_after_for@9:",
              "142: dig 4",
              "143: dig 4",
              "144: concat",
              "145: dup",
              "146: bury 10",
              "149: pushbytes \"\"",
              "150: bury 9",
              "153: intc_2",
              "154: extract_uint16",
              "155: bury 7",
              "156: intc_2",
              "157: bury 6"
            ],
            [
              "159: hello_for_header@2:",
              "162: dig 5",
              "163: dig 7",
              "164: <",
              "165: bz hello_after_for@5"
            ],
            [
              "193: hello_after_for@5:",
              "196: dig 7",
              "197: dup",
              "198: len",
              "199: itob",
              "200: extract 6 2",
              "201: swap",
              "202: concat",
              "203: pushbytes 0x151f7c75",
              "204: swap",
              "205: concat",
              "206: log",
              "207: intc_1",
              "208: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "21: main_arc4_dynamic_bytes_route@6:",
              "25: pushbytes 0x151f7c75000600ffffaabbff",
              "26: log",
              "27: intc_1",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "40: goodbye:",
              "43: pushbytes 0x151f7c7500020004000f0009476f6f642062796520",
              "44: txna ApplicationArgs 1",
              "45: concat",
              "46: log",
              "47: intc_1",
              "48: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7 -> 8 -> 10 -> 11 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "52: hello:",
              "53: intc_2",
              "54: dup",
              "55: pushbytes \"\"",
              "56: dup",
              "59: txna ApplicationArgs 1",
              "62: dup",
              "63: len",
              "64: pushint 4",
              "65: +",
              "66: itob",
              "67: extract 6 2",
              "68: pushbytes 0x00020004",
              "69: swap",
              "70: concat",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x000121",
              "74: concat",
              "77: dup",
              "78: extract 2 0",
              "79: swap",
              "80: intc_2",
              "81: extract_uint16",
              "82: dup",
              "83: intc_0",
              "84: *",
              "85: dig 2",
              "86: len",
              "87: uncover 3",
              "88: dig 2",
              "89: uncover 2",
              "90: substring3",
              "91: intc_1",
              "92: uncover 3",
              "93: +",
              "94: dup",
              "95: itob",
              "96: extract 6 2",
              "97: cover 3",
              "98: uncover 2",
              "99: bzero",
              "100: pushbytes 0x0002",
              "101: swap",
              "102: concat",
              "103: pushbytes 0x000648656c6c6f20",
              "104: concat",
              "105: uncover 2",
              "106: concat",
              "107: swap",
              "108: intc_0",
              "109: *",
              "110: dup",
              "111: intc_2"
            ],
            [
              "113: hello_for_header@7:",
              "114: dup",
              "115: dig 3",
              "116: <",
              "117: bz hello_after_for@9"
            ],
            [
              "141: hello_after_for@9:",
              "142: dig 4",
              "143: dig 4",
              "144: concat",
              "145: dup",
              "146: bury 10",
              "149: pushbytes \"\"",
              "150: bury 9",
              "153: intc_2",
              "154: extract_uint16",
              "155: bury 7",
              "156: intc_2",
              "157: bury 6"
            ],
            [
              "159: hello_for_header@2:",
              "162: dig 5",
              "163: dig 7",
              "164: <",
              "165: bz hello_after_for@5"
            ],
            [
              "193: hello_after_for@5:",
              "196: dig 7",
              "197: dup",
              "198: len",
              "199: itob",
              "200: extract 6 2",
              "201: swap",
              "202: concat",
              "203: pushbytes 0x151f7c75",
              "204: swap",
              "205: concat",
              "206: log",
              "207: intc_1",
              "208: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "21: main_arc4_dynamic_bytes_route@6:",
              "25: pushbytes 0x151f7c75000600ffffaabbff",
              "26: log",
              "27: intc_1",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "40: goodbye:",
              "43: pushbytes 0x151f7c7500020004000f0009476f6f642062796520",
              "44: txna ApplicationArgs 1",
              "45: concat",
              "46: log",
              "47: intc_1",
              "48: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7 -> 8 -> 10 -> 11 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "52: hello:",
              "53: intc_2",
              "54: dup",
              "55: pushbytes \"\"",
              "56: dup",
              "59: txna ApplicationArgs 1",
              "62: dup",
              "63: len",
              "64: pushint 4",
              "65: +",
              "66: itob",
              "67: extract 6 2",
              "68: pushbytes 0x00020004",
              "69: swap",
              "70: concat",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x000121",
              "74: concat",
              "77: dup",
              "78: extract 2 0",
              "79: swap",
              "80: intc_2",
              "81: extract_uint16",
              "82: dup",
              "83: intc_0",
              "84: *",
              "85: dig 2",
              "86: len",
              "87: uncover 3",
              "88: dig 2",
              "89: uncover 2",
              "90: substring3",
              "91: intc_1",
              "92: uncover 3",
              "93: +",
              "94: dup",
              "95: itob",
              "96: extract 6 2",
              "97: cover 3",
              "98: uncover 2",
              "99: bzero",
              "100: pushbytes 0x0002",
              "101: swap",
              "102: concat",
              "103: pushbytes 0x000648656c6c6f20",
              "104: concat",
              "105: uncover 2",
              "106: concat",
              "107: swap",
              "108: intc_0",
              "109: *",
              "110: dup",
              "111: intc_2"
            ],
            [
              "113: hello_for_header@7:",
              "114: dup",
              "115: dig 3",
              "116: <",
              "117: bz hello_after_for@9"
            ],
            [
              "141: hello_after_for@9:",
              "142: dig 4",
              "143: dig 4",
              "144: concat",
              "145: dup",
              "146: bury 10",
              "149: pushbytes \"\"",
              "150: bury 9",
              "153: intc_2",
              "154: extract_uint16",
              "155: bury 7",
              "156: intc_2",
              "157: bury 6"
            ],
            [
              "159: hello_for_header@2:",
              "162: dig 5",
              "163: dig 7",
              "164: <",
              "165: bz hello_after_for@5"
            ],
            [
              "193: hello_after_for@5:",
              "196: dig 7",
              "197: dup",
              "198: len",
              "199: itob",
              "200: extract 6 2",
              "201: swap",
              "202: concat",
              "203: pushbytes 0x151f7c75",
              "204: swap",
              "205: concat",
              "206: log",
              "207: intc_1",
              "208: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "21: main_arc4_dynamic_bytes_route@6:",
              "25: pushbytes 0x151f7c75000600ffffaabbff",
              "26: log",
              "27: intc_1",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "40: goodbye:",
              "43: pushbytes 0x151f7c7500020004000f0009476f6f642062796520",
              "44: txna ApplicationArgs 1",
              "45: concat",
              "46: log",
              "47: intc_1",
              "48: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7 -> 8 -> 10 -> 11 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "52: hello:",
              "53: intc_2",
              "54: dup",
              "55: pushbytes \"\"",
              "56: dup",
              "59: txna ApplicationArgs 1",
              "62: dup",
              "63: len",
              "64: pushint 4",
              "65: +",
              "66: itob",
              "67: extract 6 2",
              "68: pushbytes 0x00020004",
              "69: swap",
              "70: concat",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x000121",
              "74: concat",
              "77: dup",
              "78: extract 2 0",
              "79: swap",
              "80: intc_2",
              "81: extract_uint16",
              "82: dup",
              "83: intc_0",
              "84: *",
              "85: dig 2",
              "86: len",
              "87: uncover 3",
              "88: dig 2",
              "89: uncover 2",
              "90: substring3",
              "91: intc_1",
              "92: uncover 3",
              "93: +",
              "94: dup",
              "95: itob",
              "96: extract 6 2",
              "97: cover 3",
              "98: uncover 2",
              "99: bzero",
              "100: pushbytes 0x0002",
              "101: swap",
              "102: concat",
              "103: pushbytes 0x000648656c6c6f20",
              "104: concat",
              "105: uncover 2",
              "106: concat",
              "107: swap",
              "108: intc_0",
              "109: *",
              "110: dup",
              "111: intc_2"
            ],
            [
              "113: hello_for_header@7:",
              "114: dup",
              "115: dig 3",
              "116: <",
              "117: bz hello_after_for@9"
            ],
            [
              "141: hello_after_for@9:",
              "142: dig 4",
              "143: dig 4",
              "144: concat",
              "145: dup",
              "146: bury 10",
              "149: pushbytes \"\"",
              "150: bury 9",
              "153: intc_2",
              "154: extract_uint16",
              "155: bury 7",
              "156: intc_2",
              "157: bury 6"
            ],
            [
              "159: hello_for_header@2:",
              "162: dig 5",
              "163: dig 7",
              "164: <",
              "165: bz hello_after_for@5"
            ],
            [
              "193: hello_after_for@5:",
              "196: dig 7",
              "197: dup",
              "198: len",
              "199: itob",
              "200: extract 6 2",
              "201: swap",
              "202: concat",
              "203: pushbytes 0x151f7c75",
              "204: swap",
              "205: concat",
              "206: log",
              "207: intc_1",
              "208: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "21: main_arc4_dynamic_bytes_route@6:",
              "25: pushbytes 0x151f7c75000600ffffaabbff",
              "26: log",
              "27: intc_1",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "40: goodbye:",
              "43: pushbytes 0x151f7c7500020004000f0009476f6f642062796520",
              "44: txna ApplicationArgs 1",
              "45: concat",
              "46: log",
              "47: intc_1",
              "48: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7 -> 8 -> 10 -> 11 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "52: hello:",
              "53: intc_2",
              "54: dup",
              "55: pushbytes \"\"",
              "56: dup",
              "59: txna ApplicationArgs 1",
              "62: dup",
              "63: len",
              "64: pushint 4",
              "65: +",
              "66: itob",
              "67: extract 6 2",
              "68: pushbytes 0x00020004",
              "69: swap",
              "70: concat",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x000121",
              "74: concat",
              "77: dup",
              "78: extract 2 0",
              "79: swap",
              "80: intc_2",
              "81: extract_uint16",
              "82: dup",
              "83: intc_0",
              "84: *",
              "85: dig 2",
              "86: len",
              "87: uncover 3",
              "88: dig 2",
              "89: uncover 2",
              "90: substring3",
              "91: intc_1",
              "92: uncover 3",
              "93: +",
              "94: dup",
              "95: itob",
              "96: extract 6 2",
              "97: cover 3",
              "98: uncover 2",
              "99: bzero",
              "100: pushbytes 0x0002",
              "101: swap",
              "102: concat",
              "103: pushbytes 0x000648656c6c6f20",
              "104: concat",
              "105: uncover 2",
              "106: concat",
              "107: swap",
              "108: intc_0",
              "109: *",
              "110: dup",
              "111: intc_2"
            ],
            [
              "113: hello_for_header@7:",
              "114: dup",
              "115: dig 3",
              "116: <",
              "117: bz hello_after_for@9"
            ],
            [
              "141: hello_after_for@9:",
              "142: dig 4",
              "143: dig 4",
              "144: concat",
              "145: dup",
              "146: bury 10",
              "149: pushbytes \"\"",
              "150: bury 9",
              "153: intc_2",
              "154: extract_uint16",
              "155: bury 7",
              "156: intc_2",
              "157: bury 6"
            ],
            [
              "159: hello_for_header@2:",
              "162: dig 5",
              "163: dig 7",
              "164: <",
              "165: bz hello_after_for@5"
            ],
            [
              "193: hello_after_for@5:",
              "196: dig 7",
              "197: dup",
              "198: len",
              "199: itob",
              "200: extract 6 2",
              "201: swap",
              "202: concat",
              "203: pushbytes 0x151f7c75",
              "204: swap",
              "205: concat",
              "206: log",
              "207: intc_1",
              "208: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "21: main_arc4_dynamic_bytes_route@6:",
              "25: pushbytes 0x151f7c75000600ffffaabbff",
              "26: log",
              "27: intc_1",
              "28: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "30: main___algopy_default_create@10:",
              "31: txn OnCompletion",
              "32: !",
              "33: txn ApplicationID",
              "34: !",
              "35: &&",
              "36: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "40: goodbye:",
              "43: pushbytes 0x151f7c7500020004000f0009476f6f642062796520",
              "44: txna ApplicationArgs 1",
              "45: concat",
              "46: log",
              "47: intc_1",
              "48: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7 -> 8 -> 10 -> 11 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "52: hello:",
              "53: intc_2",
              "54: dup",
              "55: pushbytes \"\"",
              "56: dup",
              "59: txna ApplicationArgs 1",
              "62: dup",
              "63: len",
              "64: pushint 4",
              "65: +",
              "66: itob",
              "67: extract 6 2",
              "68: pushbytes 0x00020004",
              "69: swap",
              "70: concat",
              "71: swap",
              "72: concat",
              "73: pushbytes 0x000121",
              "74: concat",
              "77: dup",
              "78: extract 2 0",
              "79: swap",
              "80: intc_2",
              "81: extract_uint16",
              "82: dup",
              "83: intc_0",
              "84: *",
              "85: dig 2",
              "86: len",
              "87: uncover 3",
              "88: dig 2",
              "89: uncover 2",
              "90: substring3",
              "91: intc_1",
              "92: uncover 3",
              "93: +",
              "94: dup",
              "95: itob",
              "96: extract 6 2",
              "97: cover 3",
              "98: uncover 2",
              "99: bzero",
              "100: pushbytes 0x0002",
              "101: swap",
              "102: concat",
              "103: pushbytes 0x000648656c6c6f20",
              "104: concat",
              "105: uncover 2",
              "106: concat",
              "107: swap",
              "108: intc_0",
              "109: *",
              "110: dup",
              "111: intc_2"
            ],
            [
              "113: hello_for_header@7:",
              "114: dup",
              "115: dig 3",
              "116: <",
              "117: bz hello_after_for@9"
            ],
            [
              "141: hello_after_for@9:",
              "142: dig 4",
              "143: dig 4",
              "144: concat",
              "145: dup",
              "146: bury 10",
              "149: pushbytes \"\"",
              "150: bury 9",
              "153: intc_2",
              "154: extract_uint16",
              "155: bury 7",
              "156: intc_2",
              "157: bury 6"
            ],
            [
              "159: hello_for_header@2:",
              "162: dig 5",
              "163: dig 7",
              "164: <",
              "165: bz hello_after_for@5"
            ],
            [
              "193: hello_after_for@5:",
              "196: dig 7",
              "197: dup",
              "198: len",
              "199: itob",
              "200: extract 6 2",
              "201: swap",
              "202: concat",
              "203: pushbytes 0x151f7c75",
              "204: swap",
              "205: concat",
              "206: log",
              "207: intc_1",
              "208: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x8ad12a2b 0x02bece11 0x95d64116",
              "17: txna ApplicationArgs 0",
              "18: match goodbye hello main_arc4_dynamic_bytes_route@6"
            ],
            [
              "21: main_arc4_dynamic_bytes_route@6:",
              "25: pushbytes 0x151f7c75000600ffffaabbff",
              "26: log",
              "27: intc_1",
              "28: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 2 1 0",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@10"
            ],
            [
              "30: main___algopy_default_create@10:",
              "31: txn OnCompletion",
              "32: !",
              "33: txn ApplicationID",
              "34: !",
              "35: &&",
              "36: return"
            ]
          ]
        }
      ]
    }
  ]
}