{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 10,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "77: get_global_state:",
              "80: intc_0",
              "81: bytec_0",
              "82: app_global_get_ex",
              "83: intc_0",
              "84: cover 2",
              "85: select",
              "89: itob",
              "90: bytec 10",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_1",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 9 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "113: intc_0",
              "114: bury 1"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "135: get_global_state_example:",
              "138: intc_0",
              "139: bytec_0",
              "140: app_global_get_ex",
              "141: intc_0",
              "142: cover 2",
              "143: select",
              "144: intc_3",
              "145: ==",
              "146: assert",
              "149: intc_0",
              "150: bytec 6",
              "151: app_global_get_ex",
              "152: assert",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_0",
              "159: bytec 11",
              "160: app_global_get_ex",
              "161: intc_0",
              "162: cover 2",
              "163: select",
              "164: !",
              "165: assert",
              "168: intc_0",
              "169: bytec_2",
              "170: app_global_get_ex",
              "171: pushbytes 0x64656661756c74",
              "172: cover 2",
              "173: select",
              "174: bytec_1",
              "175: ==",
              "176: assert",
              "179: bytec_3",
              "180: log",
              "181: intc_1",
              "182: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "186: maybe_global_state_example:",
              "189: intc_0",
              "190: bytec_0",
              "191: app_global_get_ex",
              "194: assert",
              "197: intc_3",
              "198: ==",
              "199: assert",
              "202: intc_0",
              "203: bytec_2",
              "204: app_global_get_ex",
              "207: dup",
              "208: assert",
              "211: swap",
              "212: bytec_1",
              "213: ==",
              "214: assert",
              "217: !",
              "218: assert",
              "221: intc_0",
              "222: bytec 4",
              "223: app_global_get_ex",
              "226: assert",
              "229: assert",
              "232: intc_0",
              "233: bytec 5",
              "234: app_global_get_ex",
              "237: assert",
              "240: intc_2",
              "241: ==",
              "242: assert",
              "245: intc_0",
              "246: bytec 12",
              "247: app_global_get_ex",
              "250: assert",
              "253: intc_2",
              "254: ==",
              "255: assert",
              "259: bytec_3",
              "260: log",
              "261: intc_1",
              "262: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "266: check_global_state_example:",
              "269: intc_0",
              "270: bytec_0",
              "271: app_global_get_ex",
              "272: assert",
              "273: intc_3",
              "274: ==",
              "275: assert",
              "278: intc_0",
              "279: bytec_2",
              "280: app_global_get_ex",
              "281: assert",
              "282: bytec_1",
              "283: ==",
              "284: assert",
              "287: intc_0",
              "288: bytec 6",
              "289: app_global_get_ex",
              "290: assert",
              "291: intc_2",
              "292: ==",
              "293: assert",
              "296: intc_0",
              "297: bytec 8",
              "298: app_global_get_ex",
              "299: assert",
              "300: bytec_1",
              "301: ==",
              "302: assert",
              "305: intc_0",
              "306: bytec 9",
              "307: app_global_get_ex",
              "308: assert",
              "309: assert",
              "312: intc_0",
              "313: bytec 11",
              "314: app_global_get_ex",
              "315: bury 1",
              "316: !",
              "317: assert",
              "320: intc_0",
              "321: bytec 7",
              "322: app_global_get_ex",
              "323: bury 1",
              "324: !",
              "325: assert",
              "328: intc_0",
              "329: bytec 4",
              "330: app_global_get_ex",
              "331: bury 1",
              "332: !",
              "333: assert",
              "336: intc_0",
              "337: bytec 5",
              "338: app_global_get_ex",
              "339: assert",
              "340: intc_2",
              "341: ==",
              "342: assert",
              "345: intc_0",
              "346: bytec 12",
              "347: app_global_get_ex",
              "348: assert",
              "349: intc_2",
              "350: ==",
              "351: assert",
              "354: intc_0",
              "355: pushbytes \"global_account\"",
              "356: app_global_get_ex",
              "357: assert",
              "358: intc_0",
              "359: assert",
              "360: bytec_1",
              "361: ==",
              "362: assert",
              "366: bytec_3",
              "367: log",
              "368: intc_1",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "373: set_global_state:",
              "377: txna ApplicationArgs 1",
              "378: extract 2 0",
              "381: bytec_2",
              "382: swap",
              "383: app_global_put",
              "387: intc_1",
              "388: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "392: set_global_state_example:",
              "396: txna ApplicationArgs 1",
              "397: extract 2 0",
              "398: txna ApplicationArgs 2",
              "399: btoi",
              "400: txna ApplicationArgs 3",
              "401: intc_0",
              "402: getbit",
              "405: bytec 7",
              "406: uncover 3",
              "407: app_global_put",
              "410: bytec 4",
              "411: dig 1",
              "412: app_global_put",
              "415: assert",
              "418: bytec 5",
              "419: swap",
              "420: app_global_put",
              "424: intc_1",
              "425: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "429: del_global_state:",
              "432: bytec_0",
              "433: app_global_del",
              "437: bytec_3",
              "438: log",
              "439: intc_1",
              "440: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "444: del_global_state_example:",
              "447: bytec 7",
              "448: app_global_del",
              "451: bytec 4",
              "452: app_global_del",
              "455: bytec 5",
              "456: app_global_del",
              "460: bytec_3",
              "461: log",
              "462: intc_1",
              "463: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 10,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "77: get_global_state:",
              "80: intc_0",
              "81: bytec_0",
              "82: app_global_get_ex",
              "83: intc_0",
              "84: cover 2",
              "85: select",
              "89: itob",
              "90: bytec 10",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_1",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 9 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "113: intc_0",
              "114: bury 1"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "135: get_global_state_example:",
              "138: intc_0",
              "139: bytec_0",
              "140: app_global_get_ex",
              "141: intc_0",
              "142: cover 2",
              "143: select",
              "144: intc_3",
              "145: ==",
              "146: assert",
              "149: intc_0",
              "150: bytec 6",
              "151: app_global_get_ex",
              "152: assert",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_0",
              "159: bytec 11",
              "160: app_global_get_ex",
              "161: intc_0",
              "162: cover 2",
              "163: select",
              "164: !",
              "165: assert",
              "168: intc_0",
              "169: bytec_2",
              "170: app_global_get_ex",
              "171: pushbytes 0x64656661756c74",
              "172: cover 2",
              "173: select",
              "174: bytec_1",
              "175: ==",
              "176: assert",
              "179: bytec_3",
              "180: log",
              "181: intc_1",
              "182: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "186: maybe_global_state_example:",
              "189: intc_0",
              "190: bytec_0",
              "191: app_global_get_ex",
              "194: assert",
              "197: intc_3",
              "198: ==",
              "199: assert",
              "202: intc_0",
              "203: bytec_2",
              "204: app_global_get_ex",
              "207: dup",
              "208: assert",
              "211: swap",
              "212: bytec_1",
              "213: ==",
              "214: assert",
              "217: !",
              "218: assert",
              "221: intc_0",
              "222: bytec 4",
              "223: app_global_get_ex",
              "226: assert",
              "229: assert",
              "232: intc_0",
              "233: bytec 5",
              "234: app_global_get_ex",
              "237: assert",
              "240: intc_2",
              "241: ==",
              "242: assert",
              "245: intc_0",
              "246: bytec 12",
              "247: app_global_get_ex",
              "250: assert",
              "253: intc_2",
              "254: ==",
              "255: assert",
              "259: bytec_3",
              "260: log",
              "261: intc_1",
              "262: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "266: check_global_state_example:",
              "269: intc_0",
              "270: bytec_0",
              "271: app_global_get_ex",
              "272: assert",
              "273: intc_3",
              "274: ==",
              "275: assert",
              "278: intc_0",
              "279: bytec_2",
              "280: app_global_get_ex",
              "281: assert",
              "282: bytec_1",
              "283: ==",
              "284: assert",
              "287: intc_0",
              "288: bytec 6",
              "289: app_global_get_ex",
              "290: assert",
              "291: intc_2",
              "292: ==",
              "293: assert",
              "296: intc_0",
              "297: bytec 8",
              "298: app_global_get_ex",
              "299: assert",
              "300: bytec_1",
              "301: ==",
              "302: assert",
              "305: intc_0",
              "306: bytec 9",
              "307: app_global_get_ex",
              "308: assert",
              "309: assert",
              "312: intc_0",
              "313: bytec 11",
              "314: app_global_get_ex",
              "315: bury 1",
              "316: !",
              "317: assert",
              "320: intc_0",
              "321: bytec 7",
              "322: app_global_get_ex",
              "323: bury 1",
              "324: !",
              "325: assert",
              "328: intc_0",
              "329: bytec 4",
              "330: app_global_get_ex",
              "331: bury 1",
              "332: !",
              "333: assert",
              "336: intc_0",
              "337: bytec 5",
              "338: app_global_get_ex",
              "339: assert",
              "340: intc_2",
              "341: ==",
              "342: assert",
              "345: intc_0",
              "346: bytec 12",
              "347: app_global_get_ex",
              "348: assert",
              "349: intc_2",
              "350: ==",
              "351: assert",
              "354: intc_0",
              "355: pushbytes \"global_account\"",
              "356: app_global_get_ex",
              "357: assert",
              "358: intc_0",
              "359: assert",
              "360: bytec_1",
              "361: ==",
              "362: assert",
              "366: bytec_3",
              "367: log",
              "368: intc_1",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "373: set_global_state:",
              "377: txna ApplicationArgs 1",
              "378: extract 2 0",
              "381: bytec_2",
              "382: swap",
              "383: app_global_put",
              "387: intc_1",
              "388: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "392: set_global_state_example:",
              "396: txna ApplicationArgs 1",
              "397: extract 2 0",
              "398: txna ApplicationArgs 2",
              "399: btoi",
              "400: txna ApplicationArgs 3",
              "401: intc_0",
              "402: getbit",
              "405: bytec 7",
              "406: uncover 3",
              "407: app_global_put",
              "410: bytec 4",
              "411: dig 1",
              "412: app_global_put",
              "415: assert",
              "418: bytec 5",
              "419: swap",
              "420: app_global_put",
              "424: intc_1",
              "425: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "429: del_global_state:",
              "432: bytec_0",
              "433: app_global_del",
              "437: bytec_3",
              "438: log",
              "439: intc_1",
              "440: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "444: del_global_state_example:",
              "447: bytec 7",
              "448: app_global_del",
              "451: bytec 4",
              "452: app_global_del",
              "455: bytec 5",
              "456: app_global_del",
              "460: bytec_3",
              "461: log",
              "462: intc_1",
              "463: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 10,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "77: get_global_state:",
              "80: intc_0",
              "81: bytec_0",
              "82: app_global_get_ex",
              "83: intc_0",
              "84: cover 2",
              "85: select",
              "89: itob",
              "90: bytec 10",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_1",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 9 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "113: intc_0",
              "114: bury 1"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "135: get_global_state_example:",
              "138: intc_0",
              "139: bytec_0",
              "140: app_global_get_ex",
              "141: intc_0",
              "142: cover 2",
              "143: select",
              "144: intc_3",
              "145: ==",
              "146: assert",
              "149: intc_0",
              "150: bytec 6",
              "151: app_global_get_ex",
              "152: assert",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_0",
              "159: bytec 11",
              "160: app_global_get_ex",
              "161: intc_0",
              "162: cover 2",
              "163: select",
              "164: !",
              "165: assert",
              "168: intc_0",
              "169: bytec_2",
              "170: app_global_get_ex",
              "171: pushbytes 0x64656661756c74",
              "172: cover 2",
              "173: select",
              "174: bytec_1",
              "175: ==",
              "176: assert",
              "179: bytec_3",
              "180: log",
              "181: intc_1",
              "182: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "186: maybe_global_state_example:",
              "189: intc_0",
              "190: bytec_0",
              "191: app_global_get_ex",
              "194: assert",
              "197: intc_3",
              "198: ==",
              "199: assert",
              "202: intc_0",
              "203: bytec_2",
              "204: app_global_get_ex",
              "207: dup",
              "208: assert",
              "211: swap",
              "212: bytec_1",
              "213: ==",
              "214: assert",
              "217: !",
              "218: assert",
              "221: intc_0",
              "222: bytec 4",
              "223: app_global_get_ex",
              "226: assert",
              "229: assert",
              "232: intc_0",
              "233: bytec 5",
              "234: app_global_get_ex",
              "237: assert",
              "240: intc_2",
              "241: ==",
              "242: assert",
              "245: intc_0",
              "246: bytec 12",
              "247: app_global_get_ex",
              "250: assert",
              "253: intc_2",
              "254: ==",
              "255: assert",
              "259: bytec_3",
              "260: log",
              "261: intc_1",
              "262: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "266: check_global_state_example:",
              "269: intc_0",
              "270: bytec_0",
              "271: app_global_get_ex",
              "272: assert",
              "273: intc_3",
              "274: ==",
              "275: assert",
              "278: intc_0",
              "279: bytec_2",
              "280: app_global_get_ex",
              "281: assert",
              "282: bytec_1",
              "283: ==",
              "284: assert",
              "287: intc_0",
              "288: bytec 6",
              "289: app_global_get_ex",
              "290: assert",
              "291: intc_2",
              "292: ==",
              "293: assert",
              "296: intc_0",
              "297: bytec 8",
              "298: app_global_get_ex",
              "299: assert",
              "300: bytec_1",
              "301: ==",
              "302: assert",
              "305: intc_0",
              "306: bytec 9",
              "307: app_global_get_ex",
              "308: assert",
              "309: assert",
              "312: intc_0",
              "313: bytec 11",
              "314: app_global_get_ex",
              "315: bury 1",
              "316: !",
              "317: assert",
              "320: intc_0",
              "321: bytec 7",
              "322: app_global_get_ex",
              "323: bury 1",
              "324: !",
              "325: assert",
              "328: intc_0",
              "329: bytec 4",
              "330: app_global_get_ex",
              "331: bury 1",
              "332: !",
              "333: assert",
              "336: intc_0",
              "337: bytec 5",
              "338: app_global_get_ex",
              "339: assert",
              "340: intc_2",
              "341: ==",
              "342: assert",
              "345: intc_0",
              "346: bytec 12",
              "347: app_global_get_ex",
              "348: assert",
              "349: intc_2",
              "350: ==",
              "351: assert",
              "354: intc_0",
              "355: pushbytes \"global_account\"",
              "356: app_global_get_ex",
              "357: assert",
              "358: intc_0",
              "359: assert",
              "360: bytec_1",
              "361: ==",
              "362: assert",
              "366: bytec_3",
              "367: log",
              "368: intc_1",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "373: set_global_state:",
              "377: txna ApplicationArgs 1",
              "378: extract 2 0",
              "381: bytec_2",
              "382: swap",
              "383: app_global_put",
              "387: intc_1",
              "388: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "392: set_global_state_example:",
              "396: txna ApplicationArgs 1",
              "397: extract 2 0",
              "398: txna ApplicationArgs 2",
              "399: btoi",
              "400: txna ApplicationArgs 3",
              "401: intc_0",
              "402: getbit",
              "405: bytec 7",
              "406: uncover 3",
              "407: app_global_put",
              "410: bytec 4",
              "411: dig 1",
              "412: app_global_put",
              "415: assert",
              "418: bytec 5",
              "419: swap",
              "420: app_global_put",
              "424: intc_1",
              "425: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "429: del_global_state:",
              "432: bytec_0",
              "433: app_global_del",
              "437: bytec_3",
              "438: log",
              "439: intc_1",
              "440: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "444: del_global_state_example:",
              "447: bytec 7",
              "448: app_global_del",
              "451: bytec 4",
              "452: app_global_del",
              "455: bytec 5",
              "456: app_global_del",
              "460: bytec_3",
              "461: log",
              "462: intc_1",
              "463: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 10,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "77: get_global_state:",
              "80: intc_0",
              "81: bytec_0",
              "82: app_global_get_ex",
              "83: intc_0",
              "84: cover 2",
              "85: select",
              "89: itob",
              "90: bytec 10",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_1",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 9 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "113: intc_0",
              "114: bury 1"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "135: get_global_state_example:",
              "138: intc_0",
              "139: bytec_0",
              "140: app_global_get_ex",
              "141: intc_0",
              "142: cover 2",
              "143: select",
              "144: intc_3",
              "145: ==",
              "146: assert",
              "149: intc_0",
              "150: bytec 6",
              "151: app_global_get_ex",
              "152: assert",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_0",
              "159: bytec 11",
              "160: app_global_get_ex",
              "161: intc_0",
              "162: cover 2",
              "163: select",
              "164: !",
              "165: assert",
              "168: intc_0",
              "169: bytec_2",
              "170: app_global_get_ex",
              "171: pushbytes 0x64656661756c74",
              "172: cover 2",
              "173: select",
              "174: bytec_1",
              "175: ==",
              "176: assert",
              "179: bytec_3",
              "180: log",
              "181: intc_1",
              "182: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "186: maybe_global_state_example:",
              "189: intc_0",
              "190: bytec_0",
              "191: app_global_get_ex",
              "194: assert",
              "197: intc_3",
              "198: ==",
              "199: assert",
              "202: intc_0",
              "203: bytec_2",
              "204: app_global_get_ex",
              "207: dup",
              "208: assert",
              "211: swap",
              "212: bytec_1",
              "213: ==",
              "214: assert",
              "217: !",
              "218: assert",
              "221: intc_0",
              "222: bytec 4",
              "223: app_global_get_ex",
              "226: assert",
              "229: assert",
              "232: intc_0",
              "233: bytec 5",
              "234: app_global_get_ex",
              "237: assert",
              "240: intc_2",
              "241: ==",
              "242: assert",
              "245: intc_0",
              "246: bytec 12",
              "247: app_global_get_ex",
              "250: assert",
              "253: intc_2",
              "254: ==",
              "255: assert",
              "259: bytec_3",
              "260: log",
              "261: intc_1",
              "262: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "266: check_global_state_example:",
              "269: intc_0",
              "270: bytec_0",
              "271: app_global_get_ex",
              "272: assert",
              "273: intc_3",
              "274: ==",
              "275: assert",
              "278: intc_0",
              "279: bytec_2",
              "280: app_global_get_ex",
              "281: assert",
              "282: bytec_1",
              "283: ==",
              "284: assert",
              "287: intc_0",
              "288: bytec 6",
              "289: app_global_get_ex",
              "290: assert",
              "291: intc_2",
              "292: ==",
              "293: assert",
              "296: intc_0",
              "297: bytec 8",
              "298: app_global_get_ex",
              "299: assert",
              "300: bytec_1",
              "301: ==",
              "302: assert",
              "305: intc_0",
              "306: bytec 9",
              "307: app_global_get_ex",
              "308: assert",
              "309: assert",
              "312: intc_0",
              "313: bytec 11",
              "314: app_global_get_ex",
              "315: bury 1",
              "316: !",
              "317: assert",
              "320: intc_0",
              "321: bytec 7",
              "322: app_global_get_ex",
              "323: bury 1",
              "324: !",
              "325: assert",
              "328: intc_0",
              "329: bytec 4",
              "330: app_global_get_ex",
              "331: bury 1",
              "332: !",
              "333: assert",
              "336: intc_0",
              "337: bytec 5",
              "338: app_global_get_ex",
              "339: assert",
              "340: intc_2",
              "341: ==",
              "342: assert",
              "345: intc_0",
              "346: bytec 12",
              "347: app_global_get_ex",
              "348: assert",
              "349: intc_2",
              "350: ==",
              "351: assert",
              "354: intc_0",
              "355: pushbytes \"global_account\"",
              "356: app_global_get_ex",
              "357: assert",
              "358: intc_0",
              "359: assert",
              "360: bytec_1",
              "361: ==",
              "362: assert",
              "366: bytec_3",
              "367: log",
              "368: intc_1",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "373: set_global_state:",
              "377: txna ApplicationArgs 1",
              "378: extract 2 0",
              "381: bytec_2",
              "382: swap",
              "383: app_global_put",
              "387: intc_1",
              "388: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "392: set_global_state_example:",
              "396: txna ApplicationArgs 1",
              "397: extract 2 0",
              "398: txna ApplicationArgs 2",
              "399: btoi",
              "400: txna ApplicationArgs 3",
              "401: intc_0",
              "402: getbit",
              "405: bytec 7",
              "406: uncover 3",
              "407: app_global_put",
              "410: bytec 4",
              "411: dig 1",
              "412: app_global_put",
              "415: assert",
              "418: bytec 5",
              "419: swap",
              "420: app_global_put",
              "424: intc_1",
              "425: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "429: del_global_state:",
              "432: bytec_0",
              "433: app_global_del",
              "437: bytec_3",
              "438: log",
              "439: intc_1",
              "440: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "444: del_global_state_example:",
              "447: bytec 7",
              "448: app_global_del",
              "451: bytec 4",
              "452: app_global_del",
              "455: bytec 5",
              "456: app_global_del",
              "460: bytec_3",
              "461: log",
              "462: intc_1",
              "463: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 22,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "77: get_global_state:",
              "80: intc_0",
              "81: bytec_0",
              "82: app_global_get_ex",
              "83: intc_0",
              "84: cover 2",
              "85: select",
              "89: itob",
              "90: bytec 10",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_1",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 8 -> 9 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "113: intc_0",
              "114: bury 1"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 8 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "135: get_global_state_example:",
              "138: intc_0",
              "139: bytec_0",
              "140: app_global_get_ex",
              "141: intc_0",
              "142: cover 2",
              "143: select",
              "144: intc_3",
              "145: ==",
              "146: assert",
              "149: intc_0",
              "150: bytec 6",
              "151: app_global_get_ex",
              "152: assert",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_0",
              "159: bytec 11",
              "160: app_global_get_ex",
              "161: intc_0",
              "162: cover 2",
              "163: select",
              "164: !",
              "165: assert",
              "168: intc_0",
              "169: bytec_2",
              "170: app_global_get_ex",
              "171: pushbytes 0x64656661756c74",
              "172: cover 2",
              "173: select",
              "174: bytec_1",
              "175: ==",
              "176: assert",
              "179: bytec_3",
              "180: log",
              "181: intc_1",
              "182: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "186: maybe_global_state_example:",
              "189: intc_0",
              "190: bytec_0",
              "191: app_global_get_ex",
              "194: assert",
              "197: intc_3",
              "198: ==",
              "199: assert",
              "202: intc_0",
              "203: bytec_2",
              "204: app_global_get_ex",
              "207: dup",
              "208: assert",
              "211: swap",
              "212: bytec_1",
              "213: ==",
              "214: assert",
              "217: !",
              "218: assert",
              "221: intc_0",
              "222: bytec 4",
              "223: app_global_get_ex",
              "226: assert",
              "229: assert",
              "232: intc_0",
              "233: bytec 5",
              "234: app_global_get_ex",
              "237: assert",
              "240: intc_2",
              "241: ==",
              "242: assert",
              "245: intc_0",
              "246: bytec 12",
              "247: app_global_get_ex",
              "250: assert",
              "253: intc_2",
              "254: ==",
              "255: assert",
              "259: bytec_3",
              "260: log",
              "261: intc_1",
              "262: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "266: check_global_state_example:",
              "269: intc_0",
              "270: bytec_0",
              "271: app_global_get_ex",
              "272: assert",
              "273: intc_3",
              "274: ==",
              "275: assert",
              "278: intc_0",
              "279: bytec_2",
              "280: app_global_get_ex",
              "281: assert",
              "282: bytec_1",
              "283: ==",
              "284: assert",
              "287: intc_0",
              "288: bytec 6",
              "289: app_global_get_ex",
              "290: assert",
              "291: intc_2",
              "292: ==",
              "293: assert",
              "296: intc_0",
              "297: bytec 8",
              "298: app_global_get_ex",
              "299: assert",
              "300: bytec_1",
              "301: ==",
              "302: assert",
              "305: intc_0",
              "306: bytec 9",
              "307: app_global_get_ex",
              "308: assert",
              "309: assert",
              "312: intc_0",
              "313: bytec 11",
              "314: app_global_get_ex",
              "315: bury 1",
              "316: !",
              "317: assert",
              "320: intc_0",
              "321: bytec 7",
              "322: app_global_get_ex",
              "323: bury 1",
              "324: !",
              "325: assert",
              "328: intc_0",
              "329: bytec 4",
              "330: app_global_get_ex",
              "331: bury 1",
              "332: !",
              "333: assert",
              "336: intc_0",
              "337: bytec 5",
              "338: app_global_get_ex",
              "339: assert",
              "340: intc_2",
              "341: ==",
              "342: assert",
              "345: intc_0",
              "346: bytec 12",
              "347: app_global_get_ex",
              "348: assert",
              "349: intc_2",
              "350: ==",
              "351: assert",
              "354: intc_0",
              "355: pushbytes \"global_account\"",
              "356: app_global_get_ex",
              "357: assert",
              "358: intc_0",
              "359: assert",
              "360: bytec_1",
              "361: ==",
              "362: assert",
              "366: bytec_3",
              "367: log",
              "368: intc_1",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "373: set_global_state:",
              "377: txna ApplicationArgs 1",
              "378: extract 2 0",
              "381: bytec_2",
              "382: swap",
              "383: app_global_put",
              "387: intc_1",
              "388: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "392: set_global_state_example:",
              "396: txna ApplicationArgs 1",
              "397: extract 2 0",
              "398: txna ApplicationArgs 2",
              "399: btoi",
              "400: txna ApplicationArgs 3",
              "401: intc_0",
              "402: getbit",
              "405: bytec 7",
              "406: uncover 3",
              "407: app_global_put",
              "410: bytec 4",
              "411: dig 1",
              "412: app_global_put",
              "415: assert",
              "418: bytec 5",
              "419: swap",
              "420: app_global_put",
              "424: intc_1",
              "425: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "429: del_global_state:",
              "432: bytec_0",
              "433: app_global_del",
              "437: bytec_3",
              "438: log",
              "439: intc_1",
              "440: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "444: del_global_state_example:",
              "447: bytec 7",
              "448: app_global_del",
              "451: bytec 4",
              "452: app_global_del",
              "455: bytec 5",
              "456: app_global_del",
              "460: bytec_3",
              "461: log",
              "462: intc_1",
              "463: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "67: main___algopy_default_create@18:",
              "68: txn OnCompletion",
              "69: !",
              "70: txn ApplicationID",
              "71: !",
              "72: &&",
              "73: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "77: get_global_state:",
              "80: intc_0",
              "81: bytec_0",
              "82: app_global_get_ex",
              "83: intc_0",
              "84: cover 2",
              "85: select",
              "89: itob",
              "90: bytec 10",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_1",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 9 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "113: intc_0",
              "114: bury 1"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "135: get_global_state_example:",
              "138: intc_0",
              "139: bytec_0",
              "140: app_global_get_ex",
              "141: intc_0",
              "142: cover 2",
              "143: select",
              "144: intc_3",
              "145: ==",
              "146: assert",
              "149: intc_0",
              "150: bytec 6",
              "151: app_global_get_ex",
              "152: assert",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_0",
              "159: bytec 11",
              "160: app_global_get_ex",
              "161: intc_0",
              "162: cover 2",
              "163: select",
              "164: !",
              "165: assert",
              "168: intc_0",
              "169: bytec_2",
              "170: app_global_get_ex",
              "171: pushbytes 0x64656661756c74",
              "172: cover 2",
              "173: select",
              "174: bytec_1",
              "175: ==",
              "176: assert",
              "179: bytec_3",
              "180: log",
              "181: intc_1",
              "182: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "186: maybe_global_state_example:",
              "189: intc_0",
              "190: bytec_0",
              "191: app_global_get_ex",
              "194: assert",
              "197: intc_3",
              "198: ==",
              "199: assert",
              "202: intc_0",
              "203: bytec_2",
              "204: app_global_get_ex",
              "207: dup",
              "208: assert",
              "211: swap",
              "212: bytec_1",
              "213: ==",
              "214: assert",
              "217: !",
              "218: assert",
              "221: intc_0",
              "222: bytec 4",
              "223: app_global_get_ex",
              "226: assert",
              "229: assert",
              "232: intc_0",
              "233: bytec 5",
              "234: app_global_get_ex",
              "237: assert",
              "240: intc_2",
              "241: ==",
              "242: assert",
              "245: intc_0",
              "246: bytec 12",
              "247: app_global_get_ex",
              "250: assert",
              "253: intc_2",
              "254: ==",
              "255: assert",
              "259: bytec_3",
              "260: log",
              "261: intc_1",
              "262: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "266: check_global_state_example:",
              "269: intc_0",
              "270: bytec_0",
              "271: app_global_get_ex",
              "272: assert",
              "273: intc_3",
              "274: ==",
              "275: assert",
              "278: intc_0",
              "279: bytec_2",
              "280: app_global_get_ex",
              "281: assert",
              "282: bytec_1",
              "283: ==",
              "284: assert",
              "287: intc_0",
              "288: bytec 6",
              "289: app_global_get_ex",
              "290: assert",
              "291: intc_2",
              "292: ==",
              "293: assert",
              "296: intc_0",
              "297: bytec 8",
              "298: app_global_get_ex",
              "299: assert",
              "300: bytec_1",
              "301: ==",
              "302: assert",
              "305: intc_0",
              "306: bytec 9",
              "307: app_global_get_ex",
              "308: assert",
              "309: assert",
              "312: intc_0",
              "313: bytec 11",
              "314: app_global_get_ex",
              "315: bury 1",
              "316: !",
              "317: assert",
              "320: intc_0",
              "321: bytec 7",
              "322: app_global_get_ex",
              "323: bury 1",
              "324: !",
              "325: assert",
              "328: intc_0",
              "329: bytec 4",
              "330: app_global_get_ex",
              "331: bury 1",
              "332: !",
              "333: assert",
              "336: intc_0",
              "337: bytec 5",
              "338: app_global_get_ex",
              "339: assert",
              "340: intc_2",
              "341: ==",
              "342: assert",
              "345: intc_0",
              "346: bytec 12",
              "347: app_global_get_ex",
              "348: assert",
              "349: intc_2",
              "350: ==",
              "351: assert",
              "354: intc_0",
              "355: pushbytes \"global_account\"",
              "356: app_global_get_ex",
              "357: assert",
              "358: intc_0",
              "359: assert",
              "360: bytec_1",
              "361: ==",
              "362: assert",
              "366: bytec_3",
              "367: log",
              "368: intc_1",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "373: set_global_state:",
              "377: txna ApplicationArgs 1",
              "378: extract 2 0",
              "381: bytec_2",
              "382: swap",
              "383: app_global_put",
              "387: intc_1",
              "388: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "392: set_global_state_example:",
              "396: txna ApplicationArgs 1",
              "397: extract 2 0",
              "398: txna ApplicationArgs 2",
              "399: btoi",
              "400: txna ApplicationArgs 3",
              "401: intc_0",
              "402: getbit",
              "405: bytec 7",
              "406: uncover 3",
              "407: app_global_put",
              "410: bytec 4",
              "411: dig 1",
              "412: app_global_put",
              "415: assert",
              "418: bytec 5",
              "419: swap",
              "420: app_global_put",
              "424: intc_1",
              "425: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "429: del_global_state:",
              "432: bytec_0",
              "433: app_global_del",
              "437: bytec_3",
              "438: log",
              "439: intc_1",
              "440: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "444: del_global_state_example:",
              "447: bytec 7",
              "448: app_global_del",
              "451: bytec 4",
              "452: app_global_del",
              "455: bytec 5",
              "456: app_global_del",
              "460: bytec_3",
              "461: log",
              "462: intc_1",
              "463: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "67: main___algopy_default_create@18:",
              "68: txn OnCompletion",
              "69: !",
              "70: txn ApplicationID",
              "71: !",
              "72: &&",
              "73: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 22,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "77: get_global_state:",
              "80: intc_0",
              "81: bytec_0",
              "82: app_global_get_ex",
              "83: intc_0",
              "84: cover 2",
              "85: select",
              "89: itob",
              "90: bytec 10",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_1",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 8 -> 9 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "113: intc_0",
              "114: bury 1"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 8 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "135: get_global_state_example:",
              "138: intc_0",
              "139: bytec_0",
              "140: app_global_get_ex",
              "141: intc_0",
              "142: cover 2",
              "143: select",
              "144: intc_3",
              "145: ==",
              "146: assert",
              "149: intc_0",
              "150: bytec 6",
              "151: app_global_get_ex",
              "152: assert",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_0",
              "159: bytec 11",
              "160: app_global_get_ex",
              "161: intc_0",
              "162: cover 2",
              "163: select",
              "164: !",
              "165: assert",
              "168: intc_0",
              "169: bytec_2",
              "170: app_global_get_ex",
              "171: pushbytes 0x64656661756c74",
              "172: cover 2",
              "173: select",
              "174: bytec_1",
              "175: ==",
              "176: assert",
              "179: bytec_3",
              "180: log",
              "181: intc_1",
              "182: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "186: maybe_global_state_example:",
              "189: intc_0",
              "190: bytec_0",
              "191: app_global_get_ex",
              "194: assert",
              "197: intc_3",
              "198: ==",
              "199: assert",
              "202: intc_0",
              "203: bytec_2",
              "204: app_global_get_ex",
              "207: dup",
              "208: assert",
              "211: swap",
              "212: bytec_1",
              "213: ==",
              "214: assert",
              "217: !",
              "218: assert",
              "221: intc_0",
              "222: bytec 4",
              "223: app_global_get_ex",
              "226: assert",
              "229: assert",
              "232: intc_0",
              "233: bytec 5",
              "234: app_global_get_ex",
              "237: assert",
              "240: intc_2",
              "241: ==",
              "242: assert",
              "245: intc_0",
              "246: bytec 12",
              "247: app_global_get_ex",
              "250: assert",
              "253: intc_2",
              "254: ==",
              "255: assert",
              "259: bytec_3",
              "260: log",
              "261: intc_1",
              "262: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "266: check_global_state_example:",
              "269: intc_0",
              "270: bytec_0",
              "271: app_global_get_ex",
              "272: assert",
              "273: intc_3",
              "274: ==",
              "275: assert",
              "278: intc_0",
              "279: bytec_2",
              "280: app_global_get_ex",
              "281: assert",
              "282: bytec_1",
              "283: ==",
              "284: assert",
              "287: intc_0",
              "288: bytec 6",
              "289: app_global_get_ex",
              "290: assert",
              "291: intc_2",
              "292: ==",
              "293: assert",
              "296: intc_0",
              "297: bytec 8",
              "298: app_global_get_ex",
              "299: assert",
              "300: bytec_1",
              "301: ==",
              "302: assert",
              "305: intc_0",
              "306: bytec 9",
              "307: app_global_get_ex",
              "308: assert",
              "309: assert",
              "312: intc_0",
              "313: bytec 11",
              "314: app_global_get_ex",
              "315: bury 1",
              "316: !",
              "317: assert",
              "320: intc_0",
              "321: bytec 7",
              "322: app_global_get_ex",
              "323: bury 1",
              "324: !",
              "325: assert",
              "328: intc_0",
              "329: bytec 4",
              "330: app_global_get_ex",
              "331: bury 1",
              "332: !",
              "333: assert",
              "336: intc_0",
              "337: bytec 5",
              "338: app_global_get_ex",
              "339: assert",
              "340: intc_2",
              "341: ==",
              "342: assert",
              "345: intc_0",
              "346: bytec 12",
              "347: app_global_get_ex",
              "348: assert",
              "349: intc_2",
              "350: ==",
              "351: assert",
              "354: intc_0",
              "355: pushbytes \"global_account\"",
              "356: app_global_get_ex",
              "357: assert",
              "358: intc_0",
              "359: assert",
              "360: bytec_1",
              "361: ==",
              "362: assert",
              "366: bytec_3",
              "367: log",
              "368: intc_1",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "373: set_global_state:",
              "377: txna ApplicationArgs 1",
              "378: extract 2 0",
              "381: bytec_2",
              "382: swap",
              "383: app_global_put",
              "387: intc_1",
              "388: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "392: set_global_state_example:",
              "396: txna ApplicationArgs 1",
              "397: extract 2 0",
              "398: txna ApplicationArgs 2",
              "399: btoi",
              "400: txna ApplicationArgs 3",
              "401: intc_0",
              "402: getbit",
              "405: bytec 7",
              "406: uncover 3",
              "407: app_global_put",
              "410: bytec 4",
              "411: dig 1",
              "412: app_global_put",
              "415: assert",
              "418: bytec 5",
              "419: swap",
              "420: app_global_put",
              "424: intc_1",
              "425: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "429: del_global_state:",
              "432: bytec_0",
              "433: app_global_del",
              "437: bytec_3",
              "438: log",
              "439: intc_1",
              "440: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "444: del_global_state_example:",
              "447: bytec 7",
              "448: app_global_del",
              "451: bytec 4",
              "452: app_global_del",
              "455: bytec 5",
              "456: app_global_del",
              "460: bytec_3",
              "461: log",
              "462: intc_1",
              "463: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: intc_3",
              "14: app_global_put",
              "17: bytec 6",
              "22: intc_2",
              "23: app_global_put",
              "27: bytec_2",
              "30: bytec_1",
              "36: app_global_put",
              "39: bytec 8",
              "44: bytec_1",
              "45: app_global_put",
              "48: bytec 9",
              "49: intc_1",
              "50: app_global_put"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "67: main___algopy_default_create@18:",
              "68: txn OnCompletion",
              "69: !",
              "70: txn ApplicationID",
              "71: !",
              "72: &&",
              "73: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "77: get_global_state:",
              "80: intc_0",
              "81: bytec_0",
              "82: app_global_get_ex",
              "83: intc_0",
              "84: cover 2",
              "85: select",
              "89: itob",
              "90: bytec 10",
              "91: swap",
              "92: concat",
              "93: log",
              "94: intc_1",
              "95: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 9 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "113: intc_0",
              "114: bury 1"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 8 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "99: maybe_global_state:",
              "102: intc_0",
              "103: bytec_0",
              "104: app_global_get_ex",
              "105: dup",
              "106: uncover 2",
              "107: swap",
              "110: bnz maybe_global_state_after_if_else@3"
            ],
            [
              "116: maybe_global_state_after_if_else@3:",
              "119: dup",
              "120: itob",
              "121: pushbytes 0x00",
              "122: intc_0",
              "123: dig 4",
              "124: setbit",
              "125: concat",
              "126: bytec 10",
              "127: swap",
              "128: concat",
              "129: log",
              "130: intc_1",
              "131: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "135: get_global_state_example:",
              "138: intc_0",
              "139: bytec_0",
              "140: app_global_get_ex",
              "141: intc_0",
              "142: cover 2",
              "143: select",
              "144: intc_3",
              "145: ==",
              "146: assert",
              "149: intc_0",
              "150: bytec 6",
              "151: app_global_get_ex",
              "152: assert",
              "153: intc_2",
              "154: ==",
              "155: assert",
              "158: intc_0",
              "159: bytec 11",
              "160: app_global_get_ex",
              "161: intc_0",
              "162: cover 2",
              "163: select",
              "164: !",
              "165: assert",
              "168: intc_0",
              "169: bytec_2",
              "170: app_global_get_ex",
              "171: pushbytes 0x64656661756c74",
              "172: cover 2",
              "173: select",
              "174: bytec_1",
              "175: ==",
              "176: assert",
              "179: bytec_3",
              "180: log",
              "181: intc_1",
              "182: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "186: maybe_global_state_example:",
              "189: intc_0",
              "190: bytec_0",
              "191: app_global_get_ex",
              "194: assert",
              "197: intc_3",
              "198: ==",
              "199: assert",
              "202: intc_0",
              "203: bytec_2",
              "204: app_global_get_ex",
              "207: dup",
              "208: assert",
              "211: swap",
              "212: bytec_1",
              "213: ==",
              "214: assert",
              "217: !",
              "218: assert",
              "221: intc_0",
              "222: bytec 4",
              "223: app_global_get_ex",
              "226: assert",
              "229: assert",
              "232: intc_0",
              "233: bytec 5",
              "234: app_global_get_ex",
              "237: assert",
              "240: intc_2",
              "241: ==",
              "242: assert",
              "245: intc_0",
              "246: bytec 12",
              "247: app_global_get_ex",
              "250: assert",
              "253: intc_2",
              "254: ==",
              "255: assert",
              "259: bytec_3",
              "260: log",
              "261: intc_1",
              "262: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "266: check_global_state_example:",
              "269: intc_0",
              "270: bytec_0",
              "271: app_global_get_ex",
              "272: assert",
              "273: intc_3",
              "274: ==",
              "275: assert",
              "278: intc_0",
              "279: bytec_2",
              "280: app_global_get_ex",
              "281: assert",
              "282: bytec_1",
              "283: ==",
              "284: assert",
              "287: intc_0",
              "288: bytec 6",
              "289: app_global_get_ex",
              "290: assert",
              "291: intc_2",
              "292: ==",
              "293: assert",
              "296: intc_0",
              "297: bytec 8",
              "298: app_global_get_ex",
              "299: assert",
              "300: bytec_1",
              "301: ==",
              "302: assert",
              "305: intc_0",
              "306: bytec 9",
              "307: app_global_get_ex",
              "308: assert",
              "309: assert",
              "312: intc_0",
              "313: bytec 11",
              "314: app_global_get_ex",
              "315: bury 1",
              "316: !",
              "317: assert",
              "320: intc_0",
              "321: bytec 7",
              "322: app_global_get_ex",
              "323: bury 1",
              "324: !",
              "325: assert",
              "328: intc_0",
              "329: bytec 4",
              "330: app_global_get_ex",
              "331: bury 1",
              "332: !",
              "333: assert",
              "336: intc_0",
              "337: bytec 5",
              "338: app_global_get_ex",
              "339: assert",
              "340: intc_2",
              "341: ==",
              "342: assert",
              "345: intc_0",
              "346: bytec 12",
              "347: app_global_get_ex",
              "348: assert",
              "349: intc_2",
              "350: ==",
              "351: assert",
              "354: intc_0",
              "355: pushbytes \"global_account\"",
              "356: app_global_get_ex",
              "357: assert",
              "358: intc_0",
              "359: assert",
              "360: bytec_1",
              "361: ==",
              "362: assert",
              "366: bytec_3",
              "367: log",
              "368: intc_1",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "373: set_global_state:",
              "377: txna ApplicationArgs 1",
              "378: extract 2 0",
              "381: bytec_2",
              "382: swap",
              "383: app_global_put",
              "387: intc_1",
              "388: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "392: set_global_state_example:",
              "396: txna ApplicationArgs 1",
              "397: extract 2 0",
              "398: txna ApplicationArgs 2",
              "399: btoi",
              "400: txna ApplicationArgs 3",
              "401: intc_0",
              "402: getbit",
              "405: bytec 7",
              "406: uncover 3",
              "407: app_global_put",
              "410: bytec 4",
              "411: dig 1",
              "412: app_global_put",
              "415: assert",
              "418: bytec 5",
              "419: swap",
              "420: app_global_put",
              "424: intc_1",
              "425: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "429: del_global_state:",
              "432: bytec_0",
              "433: app_global_del",
              "437: bytec_3",
              "438: log",
              "439: intc_1",
              "440: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "57: txn OnCompletion",
              "58: !",
              "59: assert",
              "60: txn ApplicationID",
              "61: assert",
              "62: pushbytess 0xce16d083 0x89e2e128 0xcf665878 0xd49869da 0x5ba4f469 0x866d4484 0xb10b3872 0x3feae30e 0x8fd05d5a",
              "63: txna ApplicationArgs 0",
              "64: match get_global_state maybe_global_state get_global_state_example maybe_global_state_example check_global_state_example set_global_state set_global_state_example del_global_state del_global_state_example"
            ],
            [
              "444: del_global_state_example:",
              "447: bytec 7",
              "448: app_global_del",
              "451: bytec 4",
              "452: app_global_del",
              "455: bytec 5",
              "456: app_global_del",
              "460: bytec_3",
              "461: log",
              "462: intc_1",
              "463: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10 50",
              "7: bytecblock \"global_int_full\" 0x48656c6c6f \"global_bytes_full\" 0x151f7c7580 \"global_bool_no_default\" \"global_asset\" \"global_int_simplified\" \"global_bytes_no_default\" \"global_bytes_simplified\" \"global_bool_simplified\" 0x151f7c75 \"global_int_no_default\" \"global_application\"",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "52: main_after_if_else@2:",
              "55: txn NumAppArgs",
              "56: bz main___algopy_default_create@18"
            ],
            [
              "67: main___algopy_default_create@18:",
              "68: txn OnCompletion",
              "69: !",
              "70: txn ApplicationID",
              "71: !",
              "72: &&",
              "73: return"
            ]
          ]
        }
      ]
    }
  ]
}