{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 31,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "70: get_box:",
              "73: bytec_0",
              "74: box_get",
              "75: assert",
              "76: btoi",
              "80: itob",
              "81: bytec_1",
              "82: swap",
              "83: concat",
              "84: log",
              "85: intc_0",
              "86: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "90: get_item_box_map:",
              "93: txna ApplicationArgs 1",
              "94: btoi",
              "97: itob",
              "98: box_get",
              "99: assert",
              "102: dup",
              "103: len",
              "104: itob",
              "105: extract 6 2",
              "106: swap",
              "107: concat",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "117: get_box_map:",
              "120: intc_0",
              "123: itob",
              "124: box_get",
              "125: bytec 7",
              "126: cover 2",
              "127: select",
              "130: dup",
              "131: len",
              "132: itob",
              "133: extract 6 2",
              "134: swap",
              "135: concat",
              "136: bytec_1",
              "137: swap",
              "138: concat",
              "139: log",
              "140: intc_0",
              "141: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "145: maybe_box:",
              "148: bytec_0",
              "149: box_get",
              "150: swap",
              "151: btoi",
              "154: itob",
              "155: bytec_3",
              "156: intc_1",
              "157: uncover 3",
              "158: setbit",
              "159: concat",
              "160: bytec_1",
              "161: swap",
              "162: concat",
              "163: log",
              "164: intc_0",
              "165: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 14 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "185: pushbytes \"\"",
              "186: bury 1"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "215: get_box_example:",
              "218: bytec_0",
              "219: box_get",
              "220: assert",
              "221: btoi",
              "224: bytec 4",
              "225: box_get",
              "226: assert",
              "227: extract 2 0",
              "230: bytec_2",
              "231: box_get",
              "232: assert",
              "236: uncover 2",
              "237: itob",
              "238: dig 2",
              "239: len",
              "240: itob",
              "241: extract 6 2",
              "242: uncover 3",
              "243: concat",
              "244: swap",
              "245: pushbytes 0x000c",
              "246: concat",
              "247: dig 1",
              "248: len",
              "249: pushint 12",
              "250: +",
              "251: itob",
              "252: extract 6 2",
              "253: concat",
              "254: swap",
              "255: concat",
              "256: swap",
              "257: concat",
              "258: bytec_1",
              "259: swap",
              "260: concat",
              "261: log",
              "262: intc_0",
              "263: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "267: get_box_map_example:",
              "270: intc_0",
              "273: itob",
              "274: box_get",
              "275: bytec 7",
              "276: cover 2",
              "277: select",
              "278: bytec 7",
              "279: ==",
              "280: assert",
              "283: bytec 8",
              "284: log",
              "285: intc_0",
              "286: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "290: maybe_box_example:",
              "293: bytec_0",
              "294: box_del",
              "295: pop",
              "298: bytec_0",
              "299: box_get",
              "300: swap",
              "301: btoi",
              "302: intc_2",
              "303: dig 1",
              "304: dig 3",
              "305: select",
              "306: intc_2",
              "307: ==",
              "308: assert",
              "311: swap",
              "312: !",
              "313: assert",
              "316: !",
              "319: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 19",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "323: maybe_box_map_example:",
              "326: intc_0",
              "329: itob",
              "330: box_len",
              "331: bury 1",
              "334: !",
              "335: assert",
              "338: intc_1",
              "341: itob",
              "342: box_len",
              "343: bury 1",
              "346: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 20",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "350: get_box_map_struct:",
              "353: bytec 9",
              "356: txna ApplicationArgs 1",
              "359: concat",
              "360: box_get",
              "361: assert",
              "364: bytec_1",
              "365: swap",
              "366: concat",
              "367: log",
              "368: intc_0",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 21",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "373: set_box:",
              "377: txna ApplicationArgs 1",
              "378: btoi",
              "381: itob",
              "382: bytec_0",
              "383: swap",
              "384: box_put",
              "388: intc_0",
              "389: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 22",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "393: set_box_map:",
              "396: txna ApplicationArgs 1",
              "397: btoi",
              "398: txna ApplicationArgs 2",
              "399: extract 2 0",
              "402: swap",
              "403: itob",
              "404: dup",
              "405: box_del",
              "406: pop",
              "407: swap",
              "408: box_put",
              "411: intc_0",
              "412: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 23",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "416: set_box_map_struct:",
              "419: txna ApplicationArgs 2",
              "422: bytec 9",
              "425: txna ApplicationArgs 1",
              "428: concat",
              "429: dup",
              "430: box_del",
              "431: pop",
              "432: swap",
              "433: box_put",
              "436: bytec 8",
              "437: log",
              "438: intc_0",
              "439: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "443: set_box_example:",
              "447: txna ApplicationArgs 1",
              "448: btoi",
              "449: txna ApplicationArgs 2",
              "450: txna ApplicationArgs 3",
              "453: uncover 2",
              "454: itob",
              "455: bytec_0",
              "456: swap",
              "457: box_put",
              "460: bytec 4",
              "461: box_del",
              "462: pop",
              "463: bytec 4",
              "464: dig 2",
              "465: box_put",
              "468: bytec_2",
              "469: box_del",
              "470: pop",
              "471: bytec_2",
              "472: swap",
              "473: box_put",
              "476: extract 2 0",
              "477: bytec 10",
              "478: box_del",
              "479: pop",
              "480: bytec 10",
              "481: swap",
              "482: box_put",
              "485: bytec_0",
              "486: box_get",
              "487: assert",
              "488: btoi",
              "489: pushint 3",
              "490: +",
              "491: itob",
              "492: bytec_0",
              "493: swap",
              "494: box_put",
              "498: intc_0",
              "499: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "503: delete_box:",
              "506: bytec_0",
              "507: box_del",
              "508: pop",
              "511: bytec 4",
              "512: box_del",
              "513: pop",
              "516: bytec_2",
              "517: box_del",
              "518: pop",
              "521: bytec_0",
              "522: box_get",
              "523: swap",
              "524: btoi",
              "525: intc_2",
              "526: swap",
              "527: uncover 2",
              "528: select",
              "529: intc_2",
              "530: ==",
              "531: assert",
              "534: bytec 4",
              "535: box_get",
              "536: bytec 11",
              "537: cover 2",
              "538: select",
              "539: extract 2 0",
              "540: pushbytes 0x3432",
              "541: ==",
              "546: assert",
              "549: bytec_2",
              "550: box_get",
              "551: bytec 11",
              "552: cover 2",
              "553: select",
              "554: bytec 11",
              "555: ==",
              "559: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 26",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "563: delete_box_map:",
              "566: txna ApplicationArgs 1",
              "567: btoi",
              "570: itob",
              "571: box_del",
              "572: pop",
              "575: intc_0",
              "576: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 28 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "593: intc_1"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 30 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "607: box_map_length_after_if_else@3:",
              "610: dup",
              "611: box_len",
              "612: assert",
              "616: b box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "620: box_map_struct_length:",
              "623: bytec 12",
              "624: box_del",
              "625: pop",
              "626: bytec 12",
              "629: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "632: box_put",
              "635: bytec 12",
              "636: box_len",
              "637: pop",
              "638: pushint 28",
              "639: ==",
              "640: assert",
              "643: bytec 8",
              "644: log",
              "645: intc_0",
              "646: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 32",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "650: box_map_length_example:",
              "653: intc_1",
              "656: itob",
              "657: dup",
              "658: box_del",
              "659: pop",
              "660: dup",
              "663: pushbytes \"Hmmmmm\"",
              "666: box_put",
              "669: box_len",
              "670: pop",
              "671: pushint 6",
              "672: ==",
              "676: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 33",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "680: extract_box:",
              "683: bytec 5",
              "686: pushint 32",
              "687: box_create",
              "688: assert",
              "691: txn Sender",
              "694: global CurrentApplicationAddress",
              "697: bytec 5",
              "700: intc_1",
              "701: dig 3",
              "702: box_replace",
              "705: bytec 5",
              "708: intc_1",
              "709: dup",
              "710: dig 3",
              "711: UNSUPPORTED box_splice",
              "714: bytec 5",
              "717: pushint 64",
              "720: bytec 13",
              "723: box_replace",
              "726: bytec 5",
              "729: intc_1",
              "730: pushint 69",
              "731: box_extract",
              "734: swap",
              "735: uncover 2",
              "736: concat",
              "739: bytec 13",
              "742: concat",
              "743: ==",
              "747: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 34",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "751: value_box:",
              "754: bytec_0",
              "755: box_get",
              "756: assert",
              "757: btoi",
              "758: intc_3",
              "759: ==",
              "763: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 35",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "767: exist_box:",
              "770: bytec_0",
              "771: box_len",
              "772: bury 1",
              "775: bytec_3",
              "776: intc_1",
              "777: uncover 2",
              "778: setbit",
              "779: bytec_1",
              "780: swap",
              "781: concat",
              "782: log",
              "783: intc_0",
              "784: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 36",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "788: exist_box_example:",
              "791: bytec 4",
              "792: box_len",
              "793: bury 1",
              "794: bytec_2",
              "795: box_len",
              "796: cover 2",
              "797: pop",
              "798: bytec 10",
              "799: box_len",
              "800: cover 3",
              "801: pop",
              "804: bytec_3",
              "805: intc_1",
              "806: uncover 2",
              "807: setbit",
              "808: intc_0",
              "809: uncover 2",
              "810: setbit",
              "811: pushint 2",
              "812: uncover 2",
              "813: setbit",
              "814: bytec_1",
              "815: swap",
              "816: concat",
              "817: log",
              "818: intc_0",
              "819: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 37",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "823: slice_box:",
              "826: bytec 6",
              "829: box_del",
              "830: pop",
              "833: bytec 6",
              "836: pushbytes 0x54657374696e672074657374696e6720313233",
              "837: box_put",
              "840: bytec 6",
              "843: box_len",
              "844: pop",
              "845: dup",
              "846: intc_1",
              "847: dig 2",
              "848: select",
              "849: pushint 7",
              "850: dig 2",
              "851: <",
              "852: uncover 2",
              "853: pushint 7",
              "854: uncover 2",
              "855: select",
              "856: dig 1",
              "857: -",
              "860: bytec 6",
              "863: cover 2",
              "864: box_extract",
              "865: pushbytes 0x54657374696e67",
              "866: ==",
              "867: assert",
              "870: bytec_2",
              "871: box_del",
              "872: pop",
              "873: bytec_2",
              "874: pushbytes 0x000548656c6c6f",
              "875: box_put",
              "878: bytec_2",
              "879: box_len",
              "880: pop",
              "881: pushint 2",
              "882: dig 1",
              "883: <",
              "884: dig 1",
              "885: pushint 2",
              "886: uncover 2",
              "887: select",
              "888: intc_3",
              "889: dig 2",
              "890: <",
              "891: uncover 2",
              "892: intc_3",
              "893: uncover 2",
              "894: select",
              "895: dig 1",
              "896: -",
              "897: bytec_2",
              "898: cover 2",
              "899: box_extract",
              "900: pushbytes 0x48656c6c6f",
              "901: ==",
              "904: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "43: main_arc4_box_route@30:",
              "49: pushbytess 0x64 0x00010203",
              "54: box_put",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "35: main_key_box_route@31:",
              "38: pushbytes 0x151f7c750007626f785f696e74",
              "39: log",
              "40: intc_0",
              "41: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 38",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "908: box_map_exists:",
              "912: txna ApplicationArgs 1",
              "913: btoi",
              "916: itob",
              "917: box_len",
              "918: bury 1",
              "922: bytec_3",
              "923: intc_1",
              "924: uncover 2",
              "925: setbit",
              "926: bytec_1",
              "927: swap",
              "928: concat",
              "929: log",
              "930: intc_0",
              "931: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 39",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "935: box_map_struct_exists:",
              "938: bytec 9",
              "941: txna ApplicationArgs 1",
              "944: concat",
              "945: box_len",
              "946: bury 1",
              "949: bytec_3",
              "950: intc_1",
              "951: uncover 2",
              "952: setbit",
              "953: bytec_1",
              "954: swap",
              "955: concat",
              "956: log",
              "957: intc_0",
              "958: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "22: main_key_prefix_box_map_route@35:",
              "25: pushbytes 0x151f7c750000",
              "26: log",
              "27: intc_0",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 31,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "70: get_box:",
              "73: bytec_0",
              "74: box_get",
              "75: assert",
              "76: btoi",
              "80: itob",
              "81: bytec_1",
              "82: swap",
              "83: concat",
              "84: log",
              "85: intc_0",
              "86: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "90: get_item_box_map:",
              "93: txna ApplicationArgs 1",
              "94: btoi",
              "97: itob",
              "98: box_get",
              "99: assert",
              "102: dup",
              "103: len",
              "104: itob",
              "105: extract 6 2",
              "106: swap",
              "107: concat",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "117: get_box_map:",
              "120: intc_0",
              "123: itob",
              "124: box_get",
              "125: bytec 7",
              "126: cover 2",
              "127: select",
              "130: dup",
              "131: len",
              "132: itob",
              "133: extract 6 2",
              "134: swap",
              "135: concat",
              "136: bytec_1",
              "137: swap",
              "138: concat",
              "139: log",
              "140: intc_0",
              "141: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "145: maybe_box:",
              "148: bytec_0",
              "149: box_get",
              "150: swap",
              "151: btoi",
              "154: itob",
              "155: bytec_3",
              "156: intc_1",
              "157: uncover 3",
              "158: setbit",
              "159: concat",
              "160: bytec_1",
              "161: swap",
              "162: concat",
              "163: log",
              "164: intc_0",
              "165: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 14 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "185: pushbytes \"\"",
              "186: bury 1"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "215: get_box_example:",
              "218: bytec_0",
              "219: box_get",
              "220: assert",
              "221: btoi",
              "224: bytec 4",
              "225: box_get",
              "226: assert",
              "227: extract 2 0",
              "230: bytec_2",
              "231: box_get",
              "232: assert",
              "236: uncover 2",
              "237: itob",
              "238: dig 2",
              "239: len",
              "240: itob",
              "241: extract 6 2",
              "242: uncover 3",
              "243: concat",
              "244: swap",
              "245: pushbytes 0x000c",
              "246: concat",
              "247: dig 1",
              "248: len",
              "249: pushint 12",
              "250: +",
              "251: itob",
              "252: extract 6 2",
              "253: concat",
              "254: swap",
              "255: concat",
              "256: swap",
              "257: concat",
              "258: bytec_1",
              "259: swap",
              "260: concat",
              "261: log",
              "262: intc_0",
              "263: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "267: get_box_map_example:",
              "270: intc_0",
              "273: itob",
              "274: box_get",
              "275: bytec 7",
              "276: cover 2",
              "277: select",
              "278: bytec 7",
              "279: ==",
              "280: assert",
              "283: bytec 8",
              "284: log",
              "285: intc_0",
              "286: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "290: maybe_box_example:",
              "293: bytec_0",
              "294: box_del",
              "295: pop",
              "298: bytec_0",
              "299: box_get",
              "300: swap",
              "301: btoi",
              "302: intc_2",
              "303: dig 1",
              "304: dig 3",
              "305: select",
              "306: intc_2",
              "307: ==",
              "308: assert",
              "311: swap",
              "312: !",
              "313: assert",
              "316: !",
              "319: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 19",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "323: maybe_box_map_example:",
              "326: intc_0",
              "329: itob",
              "330: box_len",
              "331: bury 1",
              "334: !",
              "335: assert",
              "338: intc_1",
              "341: itob",
              "342: box_len",
              "343: bury 1",
              "346: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 20",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "350: get_box_map_struct:",
              "353: bytec 9",
              "356: txna ApplicationArgs 1",
              "359: concat",
              "360: box_get",
              "361: assert",
              "364: bytec_1",
              "365: swap",
              "366: concat",
              "367: log",
              "368: intc_0",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 21",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "373: set_box:",
              "377: txna ApplicationArgs 1",
              "378: btoi",
              "381: itob",
              "382: bytec_0",
              "383: swap",
              "384: box_put",
              "388: intc_0",
              "389: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 22",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "393: set_box_map:",
              "396: txna ApplicationArgs 1",
              "397: btoi",
              "398: txna ApplicationArgs 2",
              "399: extract 2 0",
              "402: swap",
              "403: itob",
              "404: dup",
              "405: box_del",
              "406: pop",
              "407: swap",
              "408: box_put",
              "411: intc_0",
              "412: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 23",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "416: set_box_map_struct:",
              "419: txna ApplicationArgs 2",
              "422: bytec 9",
              "425: txna ApplicationArgs 1",
              "428: concat",
              "429: dup",
              "430: box_del",
              "431: pop",
              "432: swap",
              "433: box_put",
              "436: bytec 8",
              "437: log",
              "438: intc_0",
              "439: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "443: set_box_example:",
              "447: txna ApplicationArgs 1",
              "448: btoi",
              "449: txna ApplicationArgs 2",
              "450: txna ApplicationArgs 3",
              "453: uncover 2",
              "454: itob",
              "455: bytec_0",
              "456: swap",
              "457: box_put",
              "460: bytec 4",
              "461: box_del",
              "462: pop",
              "463: bytec 4",
              "464: dig 2",
              "465: box_put",
              "468: bytec_2",
              "469: box_del",
              "470: pop",
              "471: bytec_2",
              "472: swap",
              "473: box_put",
              "476: extract 2 0",
              "477: bytec 10",
              "478: box_del",
              "479: pop",
              "480: bytec 10",
              "481: swap",
              "482: box_put",
              "485: bytec_0",
              "486: box_get",
              "487: assert",
              "488: btoi",
              "489: pushint 3",
              "490: +",
              "491: itob",
              "492: bytec_0",
              "493: swap",
              "494: box_put",
              "498: intc_0",
              "499: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "503: delete_box:",
              "506: bytec_0",
              "507: box_del",
              "508: pop",
              "511: bytec 4",
              "512: box_del",
              "513: pop",
              "516: bytec_2",
              "517: box_del",
              "518: pop",
              "521: bytec_0",
              "522: box_get",
              "523: swap",
              "524: btoi",
              "525: intc_2",
              "526: swap",
              "527: uncover 2",
              "528: select",
              "529: intc_2",
              "530: ==",
              "531: assert",
              "534: bytec 4",
              "535: box_get",
              "536: bytec 11",
              "537: cover 2",
              "538: select",
              "539: extract 2 0",
              "540: pushbytes 0x3432",
              "541: ==",
              "546: assert",
              "549: bytec_2",
              "550: box_get",
              "551: bytec 11",
              "552: cover 2",
              "553: select",
              "554: bytec 11",
              "555: ==",
              "559: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 26",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "563: delete_box_map:",
              "566: txna ApplicationArgs 1",
              "567: btoi",
              "570: itob",
              "571: box_del",
              "572: pop",
              "575: intc_0",
              "576: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 28 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "593: intc_1"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 30 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "607: box_map_length_after_if_else@3:",
              "610: dup",
              "611: box_len",
              "612: assert",
              "616: b box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "620: box_map_struct_length:",
              "623: bytec 12",
              "624: box_del",
              "625: pop",
              "626: bytec 12",
              "629: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "632: box_put",
              "635: bytec 12",
              "636: box_len",
              "637: pop",
              "638: pushint 28",
              "639: ==",
              "640: assert",
              "643: bytec 8",
              "644: log",
              "645: intc_0",
              "646: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 32",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "650: box_map_length_example:",
              "653: intc_1",
              "656: itob",
              "657: dup",
              "658: box_del",
              "659: pop",
              "660: dup",
              "663: pushbytes \"Hmmmmm\"",
              "666: box_put",
              "669: box_len",
              "670: pop",
              "671: pushint 6",
              "672: ==",
              "676: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 33",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "680: extract_box:",
              "683: bytec 5",
              "686: pushint 32",
              "687: box_create",
              "688: assert",
              "691: txn Sender",
              "694: global CurrentApplicationAddress",
              "697: bytec 5",
              "700: intc_1",
              "701: dig 3",
              "702: box_replace",
              "705: bytec 5",
              "708: intc_1",
              "709: dup",
              "710: dig 3",
              "711: UNSUPPORTED box_splice",
              "714: bytec 5",
              "717: pushint 64",
              "720: bytec 13",
              "723: box_replace",
              "726: bytec 5",
              "729: intc_1",
              "730: pushint 69",
              "731: box_extract",
              "734: swap",
              "735: uncover 2",
              "736: concat",
              "739: bytec 13",
              "742: concat",
              "743: ==",
              "747: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 34",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "751: value_box:",
              "754: bytec_0",
              "755: box_get",
              "756: assert",
              "757: btoi",
              "758: intc_3",
              "759: ==",
              "763: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 35",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "767: exist_box:",
              "770: bytec_0",
              "771: box_len",
              "772: bury 1",
              "775: bytec_3",
              "776: intc_1",
              "777: uncover 2",
              "778: setbit",
              "779: bytec_1",
              "780: swap",
              "781: concat",
              "782: log",
              "783: intc_0",
              "784: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 36",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "788: exist_box_example:",
              "791: bytec 4",
              "792: box_len",
              "793: bury 1",
              "794: bytec_2",
              "795: box_len",
              "796: cover 2",
              "797: pop",
              "798: bytec 10",
              "799: box_len",
              "800: cover 3",
              "801: pop",
              "804: bytec_3",
              "805: intc_1",
              "806: uncover 2",
              "807: setbit",
              "808: intc_0",
              "809: uncover 2",
              "810: setbit",
              "811: pushint 2",
              "812: uncover 2",
              "813: setbit",
              "814: bytec_1",
              "815: swap",
              "816: concat",
              "817: log",
              "818: intc_0",
              "819: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 37",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "823: slice_box:",
              "826: bytec 6",
              "829: box_del",
              "830: pop",
              "833: bytec 6",
              "836: pushbytes 0x54657374696e672074657374696e6720313233",
              "837: box_put",
              "840: bytec 6",
              "843: box_len",
              "844: pop",
              "845: dup",
              "846: intc_1",
              "847: dig 2",
              "848: select",
              "849: pushint 7",
              "850: dig 2",
              "851: <",
              "852: uncover 2",
              "853: pushint 7",
              "854: uncover 2",
              "855: select",
              "856: dig 1",
              "857: -",
              "860: bytec 6",
              "863: cover 2",
              "864: box_extract",
              "865: pushbytes 0x54657374696e67",
              "866: ==",
              "867: assert",
              "870: bytec_2",
              "871: box_del",
              "872: pop",
              "873: bytec_2",
              "874: pushbytes 0x000548656c6c6f",
              "875: box_put",
              "878: bytec_2",
              "879: box_len",
              "880: pop",
              "881: pushint 2",
              "882: dig 1",
              "883: <",
              "884: dig 1",
              "885: pushint 2",
              "886: uncover 2",
              "887: select",
              "888: intc_3",
              "889: dig 2",
              "890: <",
              "891: uncover 2",
              "892: intc_3",
              "893: uncover 2",
              "894: select",
              "895: dig 1",
              "896: -",
              "897: bytec_2",
              "898: cover 2",
              "899: box_extract",
              "900: pushbytes 0x48656c6c6f",
              "901: ==",
              "904: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "43: main_arc4_box_route@30:",
              "49: pushbytess 0x64 0x00010203",
              "54: box_put",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "35: main_key_box_route@31:",
              "38: pushbytes 0x151f7c750007626f785f696e74",
              "39: log",
              "40: intc_0",
              "41: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 38",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "908: box_map_exists:",
              "912: txna ApplicationArgs 1",
              "913: btoi",
              "916: itob",
              "917: box_len",
              "918: bury 1",
              "922: bytec_3",
              "923: intc_1",
              "924: uncover 2",
              "925: setbit",
              "926: bytec_1",
              "927: swap",
              "928: concat",
              "929: log",
              "930: intc_0",
              "931: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 39",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "935: box_map_struct_exists:",
              "938: bytec 9",
              "941: txna ApplicationArgs 1",
              "944: concat",
              "945: box_len",
              "946: bury 1",
              "949: bytec_3",
              "950: intc_1",
              "951: uncover 2",
              "952: setbit",
              "953: bytec_1",
              "954: swap",
              "955: concat",
              "956: log",
              "957: intc_0",
              "958: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "22: main_key_prefix_box_map_route@35:",
              "25: pushbytes 0x151f7c750000",
              "26: log",
              "27: intc_0",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 31,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "70: get_box:",
              "73: bytec_0",
              "74: box_get",
              "75: assert",
              "76: btoi",
              "80: itob",
              "81: bytec_1",
              "82: swap",
              "83: concat",
              "84: log",
              "85: intc_0",
              "86: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "90: get_item_box_map:",
              "93: txna ApplicationArgs 1",
              "94: btoi",
              "97: itob",
              "98: box_get",
              "99: assert",
              "102: dup",
              "103: len",
              "104: itob",
              "105: extract 6 2",
              "106: swap",
              "107: concat",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "117: get_box_map:",
              "120: intc_0",
              "123: itob",
              "124: box_get",
              "125: bytec 7",
              "126: cover 2",
              "127: select",
              "130: dup",
              "131: len",
              "132: itob",
              "133: extract 6 2",
              "134: swap",
              "135: concat",
              "136: bytec_1",
              "137: swap",
              "138: concat",
              "139: log",
              "140: intc_0",
              "141: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "145: maybe_box:",
              "148: bytec_0",
              "149: box_get",
              "150: swap",
              "151: btoi",
              "154: itob",
              "155: bytec_3",
              "156: intc_1",
              "157: uncover 3",
              "158: setbit",
              "159: concat",
              "160: bytec_1",
              "161: swap",
              "162: concat",
              "163: log",
              "164: intc_0",
              "165: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 14 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "185: pushbytes \"\"",
              "186: bury 1"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "215: get_box_example:",
              "218: bytec_0",
              "219: box_get",
              "220: assert",
              "221: btoi",
              "224: bytec 4",
              "225: box_get",
              "226: assert",
              "227: extract 2 0",
              "230: bytec_2",
              "231: box_get",
              "232: assert",
              "236: uncover 2",
              "237: itob",
              "238: dig 2",
              "239: len",
              "240: itob",
              "241: extract 6 2",
              "242: uncover 3",
              "243: concat",
              "244: swap",
              "245: pushbytes 0x000c",
              "246: concat",
              "247: dig 1",
              "248: len",
              "249: pushint 12",
              "250: +",
              "251: itob",
              "252: extract 6 2",
              "253: concat",
              "254: swap",
              "255: concat",
              "256: swap",
              "257: concat",
              "258: bytec_1",
              "259: swap",
              "260: concat",
              "261: log",
              "262: intc_0",
              "263: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "267: get_box_map_example:",
              "270: intc_0",
              "273: itob",
              "274: box_get",
              "275: bytec 7",
              "276: cover 2",
              "277: select",
              "278: bytec 7",
              "279: ==",
              "280: assert",
              "283: bytec 8",
              "284: log",
              "285: intc_0",
              "286: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "290: maybe_box_example:",
              "293: bytec_0",
              "294: box_del",
              "295: pop",
              "298: bytec_0",
              "299: box_get",
              "300: swap",
              "301: btoi",
              "302: intc_2",
              "303: dig 1",
              "304: dig 3",
              "305: select",
              "306: intc_2",
              "307: ==",
              "308: assert",
              "311: swap",
              "312: !",
              "313: assert",
              "316: !",
              "319: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 19",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "323: maybe_box_map_example:",
              "326: intc_0",
              "329: itob",
              "330: box_len",
              "331: bury 1",
              "334: !",
              "335: assert",
              "338: intc_1",
              "341: itob",
              "342: box_len",
              "343: bury 1",
              "346: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 20",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "350: get_box_map_struct:",
              "353: bytec 9",
              "356: txna ApplicationArgs 1",
              "359: concat",
              "360: box_get",
              "361: assert",
              "364: bytec_1",
              "365: swap",
              "366: concat",
              "367: log",
              "368: intc_0",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 21",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "373: set_box:",
              "377: txna ApplicationArgs 1",
              "378: btoi",
              "381: itob",
              "382: bytec_0",
              "383: swap",
              "384: box_put",
              "388: intc_0",
              "389: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 22",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "393: set_box_map:",
              "396: txna ApplicationArgs 1",
              "397: btoi",
              "398: txna ApplicationArgs 2",
              "399: extract 2 0",
              "402: swap",
              "403: itob",
              "404: dup",
              "405: box_del",
              "406: pop",
              "407: swap",
              "408: box_put",
              "411: intc_0",
              "412: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 23",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "416: set_box_map_struct:",
              "419: txna ApplicationArgs 2",
              "422: bytec 9",
              "425: txna ApplicationArgs 1",
              "428: concat",
              "429: dup",
              "430: box_del",
              "431: pop",
              "432: swap",
              "433: box_put",
              "436: bytec 8",
              "437: log",
              "438: intc_0",
              "439: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "443: set_box_example:",
              "447: txna ApplicationArgs 1",
              "448: btoi",
              "449: txna ApplicationArgs 2",
              "450: txna ApplicationArgs 3",
              "453: uncover 2",
              "454: itob",
              "455: bytec_0",
              "456: swap",
              "457: box_put",
              "460: bytec 4",
              "461: box_del",
              "462: pop",
              "463: bytec 4",
              "464: dig 2",
              "465: box_put",
              "468: bytec_2",
              "469: box_del",
              "470: pop",
              "471: bytec_2",
              "472: swap",
              "473: box_put",
              "476: extract 2 0",
              "477: bytec 10",
              "478: box_del",
              "479: pop",
              "480: bytec 10",
              "481: swap",
              "482: box_put",
              "485: bytec_0",
              "486: box_get",
              "487: assert",
              "488: btoi",
              "489: pushint 3",
              "490: +",
              "491: itob",
              "492: bytec_0",
              "493: swap",
              "494: box_put",
              "498: intc_0",
              "499: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "503: delete_box:",
              "506: bytec_0",
              "507: box_del",
              "508: pop",
              "511: bytec 4",
              "512: box_del",
              "513: pop",
              "516: bytec_2",
              "517: box_del",
              "518: pop",
              "521: bytec_0",
              "522: box_get",
              "523: swap",
              "524: btoi",
              "525: intc_2",
              "526: swap",
              "527: uncover 2",
              "528: select",
              "529: intc_2",
              "530: ==",
              "531: assert",
              "534: bytec 4",
              "535: box_get",
              "536: bytec 11",
              "537: cover 2",
              "538: select",
              "539: extract 2 0",
              "540: pushbytes 0x3432",
              "541: ==",
              "546: assert",
              "549: bytec_2",
              "550: box_get",
              "551: bytec 11",
              "552: cover 2",
              "553: select",
              "554: bytec 11",
              "555: ==",
              "559: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 26",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "563: delete_box_map:",
              "566: txna ApplicationArgs 1",
              "567: btoi",
              "570: itob",
              "571: box_del",
              "572: pop",
              "575: intc_0",
              "576: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 28 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "593: intc_1"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 30 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "607: box_map_length_after_if_else@3:",
              "610: dup",
              "611: box_len",
              "612: assert",
              "616: b box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "620: box_map_struct_length:",
              "623: bytec 12",
              "624: box_del",
              "625: pop",
              "626: bytec 12",
              "629: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "632: box_put",
              "635: bytec 12",
              "636: box_len",
              "637: pop",
              "638: pushint 28",
              "639: ==",
              "640: assert",
              "643: bytec 8",
              "644: log",
              "645: intc_0",
              "646: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 32",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "650: box_map_length_example:",
              "653: intc_1",
              "656: itob",
              "657: dup",
              "658: box_del",
              "659: pop",
              "660: dup",
              "663: pushbytes \"Hmmmmm\"",
              "666: box_put",
              "669: box_len",
              "670: pop",
              "671: pushint 6",
              "672: ==",
              "676: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 33",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "680: extract_box:",
              "683: bytec 5",
              "686: pushint 32",
              "687: box_create",
              "688: assert",
              "691: txn Sender",
              "694: global CurrentApplicationAddress",
              "697: bytec 5",
              "700: intc_1",
              "701: dig 3",
              "702: box_replace",
              "705: bytec 5",
              "708: intc_1",
              "709: dup",
              "710: dig 3",
              "711: UNSUPPORTED box_splice",
              "714: bytec 5",
              "717: pushint 64",
              "720: bytec 13",
              "723: box_replace",
              "726: bytec 5",
              "729: intc_1",
              "730: pushint 69",
              "731: box_extract",
              "734: swap",
              "735: uncover 2",
              "736: concat",
              "739: bytec 13",
              "742: concat",
              "743: ==",
              "747: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 34",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "751: value_box:",
              "754: bytec_0",
              "755: box_get",
              "756: assert",
              "757: btoi",
              "758: intc_3",
              "759: ==",
              "763: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 35",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "767: exist_box:",
              "770: bytec_0",
              "771: box_len",
              "772: bury 1",
              "775: bytec_3",
              "776: intc_1",
              "777: uncover 2",
              "778: setbit",
              "779: bytec_1",
              "780: swap",
              "781: concat",
              "782: log",
              "783: intc_0",
              "784: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 36",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "788: exist_box_example:",
              "791: bytec 4",
              "792: box_len",
              "793: bury 1",
              "794: bytec_2",
              "795: box_len",
              "796: cover 2",
              "797: pop",
              "798: bytec 10",
              "799: box_len",
              "800: cover 3",
              "801: pop",
              "804: bytec_3",
              "805: intc_1",
              "806: uncover 2",
              "807: setbit",
              "808: intc_0",
              "809: uncover 2",
              "810: setbit",
              "811: pushint 2",
              "812: uncover 2",
              "813: setbit",
              "814: bytec_1",
              "815: swap",
              "816: concat",
              "817: log",
              "818: intc_0",
              "819: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 37",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "823: slice_box:",
              "826: bytec 6",
              "829: box_del",
              "830: pop",
              "833: bytec 6",
              "836: pushbytes 0x54657374696e672074657374696e6720313233",
              "837: box_put",
              "840: bytec 6",
              "843: box_len",
              "844: pop",
              "845: dup",
              "846: intc_1",
              "847: dig 2",
              "848: select",
              "849: pushint 7",
              "850: dig 2",
              "851: <",
              "852: uncover 2",
              "853: pushint 7",
              "854: uncover 2",
              "855: select",
              "856: dig 1",
              "857: -",
              "860: bytec 6",
              "863: cover 2",
              "864: box_extract",
              "865: pushbytes 0x54657374696e67",
              "866: ==",
              "867: assert",
              "870: bytec_2",
              "871: box_del",
              "872: pop",
              "873: bytec_2",
              "874: pushbytes 0x000548656c6c6f",
              "875: box_put",
              "878: bytec_2",
              "879: box_len",
              "880: pop",
              "881: pushint 2",
              "882: dig 1",
              "883: <",
              "884: dig 1",
              "885: pushint 2",
              "886: uncover 2",
              "887: select",
              "888: intc_3",
              "889: dig 2",
              "890: <",
              "891: uncover 2",
              "892: intc_3",
              "893: uncover 2",
              "894: select",
              "895: dig 1",
              "896: -",
              "897: bytec_2",
              "898: cover 2",
              "899: box_extract",
              "900: pushbytes 0x48656c6c6f",
              "901: ==",
              "904: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "43: main_arc4_box_route@30:",
              "49: pushbytess 0x64 0x00010203",
              "54: box_put",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "35: main_key_box_route@31:",
              "38: pushbytes 0x151f7c750007626f785f696e74",
              "39: log",
              "40: intc_0",
              "41: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 38",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "908: box_map_exists:",
              "912: txna ApplicationArgs 1",
              "913: btoi",
              "916: itob",
              "917: box_len",
              "918: bury 1",
              "922: bytec_3",
              "923: intc_1",
              "924: uncover 2",
              "925: setbit",
              "926: bytec_1",
              "927: swap",
              "928: concat",
              "929: log",
              "930: intc_0",
              "931: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 39",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "935: box_map_struct_exists:",
              "938: bytec 9",
              "941: txna ApplicationArgs 1",
              "944: concat",
              "945: box_len",
              "946: bury 1",
              "949: bytec_3",
              "950: intc_1",
              "951: uncover 2",
              "952: setbit",
              "953: bytec_1",
              "954: swap",
              "955: concat",
              "956: log",
              "957: intc_0",
              "958: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "22: main_key_prefix_box_map_route@35:",
              "25: pushbytes 0x151f7c750000",
              "26: log",
              "27: intc_0",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 31,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "70: get_box:",
              "73: bytec_0",
              "74: box_get",
              "75: assert",
              "76: btoi",
              "80: itob",
              "81: bytec_1",
              "82: swap",
              "83: concat",
              "84: log",
              "85: intc_0",
              "86: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "90: get_item_box_map:",
              "93: txna ApplicationArgs 1",
              "94: btoi",
              "97: itob",
              "98: box_get",
              "99: assert",
              "102: dup",
              "103: len",
              "104: itob",
              "105: extract 6 2",
              "106: swap",
              "107: concat",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "117: get_box_map:",
              "120: intc_0",
              "123: itob",
              "124: box_get",
              "125: bytec 7",
              "126: cover 2",
              "127: select",
              "130: dup",
              "131: len",
              "132: itob",
              "133: extract 6 2",
              "134: swap",
              "135: concat",
              "136: bytec_1",
              "137: swap",
              "138: concat",
              "139: log",
              "140: intc_0",
              "141: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "145: maybe_box:",
              "148: bytec_0",
              "149: box_get",
              "150: swap",
              "151: btoi",
              "154: itob",
              "155: bytec_3",
              "156: intc_1",
              "157: uncover 3",
              "158: setbit",
              "159: concat",
              "160: bytec_1",
              "161: swap",
              "162: concat",
              "163: log",
              "164: intc_0",
              "165: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 14 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "185: pushbytes \"\"",
              "186: bury 1"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "215: get_box_example:",
              "218: bytec_0",
              "219: box_get",
              "220: assert",
              "221: btoi",
              "224: bytec 4",
              "225: box_get",
              "226: assert",
              "227: extract 2 0",
              "230: bytec_2",
              "231: box_get",
              "232: assert",
              "236: uncover 2",
              "237: itob",
              "238: dig 2",
              "239: len",
              "240: itob",
              "241: extract 6 2",
              "242: uncover 3",
              "243: concat",
              "244: swap",
              "245: pushbytes 0x000c",
              "246: concat",
              "247: dig 1",
              "248: len",
              "249: pushint 12",
              "250: +",
              "251: itob",
              "252: extract 6 2",
              "253: concat",
              "254: swap",
              "255: concat",
              "256: swap",
              "257: concat",
              "258: bytec_1",
              "259: swap",
              "260: concat",
              "261: log",
              "262: intc_0",
              "263: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "267: get_box_map_example:",
              "270: intc_0",
              "273: itob",
              "274: box_get",
              "275: bytec 7",
              "276: cover 2",
              "277: select",
              "278: bytec 7",
              "279: ==",
              "280: assert",
              "283: bytec 8",
              "284: log",
              "285: intc_0",
              "286: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "290: maybe_box_example:",
              "293: bytec_0",
              "294: box_del",
              "295: pop",
              "298: bytec_0",
              "299: box_get",
              "300: swap",
              "301: btoi",
              "302: intc_2",
              "303: dig 1",
              "304: dig 3",
              "305: select",
              "306: intc_2",
              "307: ==",
              "308: assert",
              "311: swap",
              "312: !",
              "313: assert",
              "316: !",
              "319: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 19",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "323: maybe_box_map_example:",
              "326: intc_0",
              "329: itob",
              "330: box_len",
              "331: bury 1",
              "334: !",
              "335: assert",
              "338: intc_1",
              "341: itob",
              "342: box_len",
              "343: bury 1",
              "346: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 20",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "350: get_box_map_struct:",
              "353: bytec 9",
              "356: txna ApplicationArgs 1",
              "359: concat",
              "360: box_get",
              "361: assert",
              "364: bytec_1",
              "365: swap",
              "366: concat",
              "367: log",
              "368: intc_0",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 21",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "373: set_box:",
              "377: txna ApplicationArgs 1",
              "378: btoi",
              "381: itob",
              "382: bytec_0",
              "383: swap",
              "384: box_put",
              "388: intc_0",
              "389: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 22",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "393: set_box_map:",
              "396: txna ApplicationArgs 1",
              "397: btoi",
              "398: txna ApplicationArgs 2",
              "399: extract 2 0",
              "402: swap",
              "403: itob",
              "404: dup",
              "405: box_del",
              "406: pop",
              "407: swap",
              "408: box_put",
              "411: intc_0",
              "412: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 23",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "416: set_box_map_struct:",
              "419: txna ApplicationArgs 2",
              "422: bytec 9",
              "425: txna ApplicationArgs 1",
              "428: concat",
              "429: dup",
              "430: box_del",
              "431: pop",
              "432: swap",
              "433: box_put",
              "436: bytec 8",
              "437: log",
              "438: intc_0",
              "439: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "443: set_box_example:",
              "447: txna ApplicationArgs 1",
              "448: btoi",
              "449: txna ApplicationArgs 2",
              "450: txna ApplicationArgs 3",
              "453: uncover 2",
              "454: itob",
              "455: bytec_0",
              "456: swap",
              "457: box_put",
              "460: bytec 4",
              "461: box_del",
              "462: pop",
              "463: bytec 4",
              "464: dig 2",
              "465: box_put",
              "468: bytec_2",
              "469: box_del",
              "470: pop",
              "471: bytec_2",
              "472: swap",
              "473: box_put",
              "476: extract 2 0",
              "477: bytec 10",
              "478: box_del",
              "479: pop",
              "480: bytec 10",
              "481: swap",
              "482: box_put",
              "485: bytec_0",
              "486: box_get",
              "487: assert",
              "488: btoi",
              "489: pushint 3",
              "490: +",
              "491: itob",
              "492: bytec_0",
              "493: swap",
              "494: box_put",
              "498: intc_0",
              "499: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "503: delete_box:",
              "506: bytec_0",
              "507: box_del",
              "508: pop",
              "511: bytec 4",
              "512: box_del",
              "513: pop",
              "516: bytec_2",
              "517: box_del",
              "518: pop",
              "521: bytec_0",
              "522: box_get",
              "523: swap",
              "524: btoi",
              "525: intc_2",
              "526: swap",
              "527: uncover 2",
              "528: select",
              "529: intc_2",
              "530: ==",
              "531: assert",
              "534: bytec 4",
              "535: box_get",
              "536: bytec 11",
              "537: cover 2",
              "538: select",
              "539: extract 2 0",
              "540: pushbytes 0x3432",
              "541: ==",
              "546: assert",
              "549: bytec_2",
              "550: box_get",
              "551: bytec 11",
              "552: cover 2",
              "553: select",
              "554: bytec 11",
              "555: ==",
              "559: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 26",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "563: delete_box_map:",
              "566: txna ApplicationArgs 1",
              "567: btoi",
              "570: itob",
              "571: box_del",
              "572: pop",
              "575: intc_0",
              "576: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 28 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "593: intc_1"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 30 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "607: box_map_length_after_if_else@3:",
              "610: dup",
              "611: box_len",
              "612: assert",
              "616: b box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "620: box_map_struct_length:",
              "623: bytec 12",
              "624: box_del",
              "625: pop",
              "626: bytec 12",
              "629: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "632: box_put",
              "635: bytec 12",
              "636: box_len",
              "637: pop",
              "638: pushint 28",
              "639: ==",
              "640: assert",
              "643: bytec 8",
              "644: log",
              "645: intc_0",
              "646: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 32",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "650: box_map_length_example:",
              "653: intc_1",
              "656: itob",
              "657: dup",
              "658: box_del",
              "659: pop",
              "660: dup",
              "663: pushbytes \"Hmmmmm\"",
              "666: box_put",
              "669: box_len",
              "670: pop",
              "671: pushint 6",
              "672: ==",
              "676: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 33",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "680: extract_box:",
              "683: bytec 5",
              "686: pushint 32",
              "687: box_create",
              "688: assert",
              "691: txn Sender",
              "694: global CurrentApplicationAddress",
              "697: bytec 5",
              "700: intc_1",
              "701: dig 3",
              "702: box_replace",
              "705: bytec 5",
              "708: intc_1",
              "709: dup",
              "710: dig 3",
              "711: UNSUPPORTED box_splice",
              "714: bytec 5",
              "717: pushint 64",
              "720: bytec 13",
              "723: box_replace",
              "726: bytec 5",
              "729: intc_1",
              "730: pushint 69",
              "731: box_extract",
              "734: swap",
              "735: uncover 2",
              "736: concat",
              "739: bytec 13",
              "742: concat",
              "743: ==",
              "747: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 34",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "751: value_box:",
              "754: bytec_0",
              "755: box_get",
              "756: assert",
              "757: btoi",
              "758: intc_3",
              "759: ==",
              "763: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 35",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "767: exist_box:",
              "770: bytec_0",
              "771: box_len",
              "772: bury 1",
              "775: bytec_3",
              "776: intc_1",
              "777: uncover 2",
              "778: setbit",
              "779: bytec_1",
              "780: swap",
              "781: concat",
              "782: log",
              "783: intc_0",
              "784: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 36",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "788: exist_box_example:",
              "791: bytec 4",
              "792: box_len",
              "793: bury 1",
              "794: bytec_2",
              "795: box_len",
              "796: cover 2",
              "797: pop",
              "798: bytec 10",
              "799: box_len",
              "800: cover 3",
              "801: pop",
              "804: bytec_3",
              "805: intc_1",
              "806: uncover 2",
              "807: setbit",
              "808: intc_0",
              "809: uncover 2",
              "810: setbit",
              "811: pushint 2",
              "812: uncover 2",
              "813: setbit",
              "814: bytec_1",
              "815: swap",
              "816: concat",
              "817: log",
              "818: intc_0",
              "819: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 37",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "823: slice_box:",
              "826: bytec 6",
              "829: box_del",
              "830: pop",
              "833: bytec 6",
              "836: pushbytes 0x54657374696e672074657374696e6720313233",
              "837: box_put",
              "840: bytec 6",
              "843: box_len",
              "844: pop",
              "845: dup",
              "846: intc_1",
              "847: dig 2",
              "848: select",
              "849: pushint 7",
              "850: dig 2",
              "851: <",
              "852: uncover 2",
              "853: pushint 7",
              "854: uncover 2",
              "855: select",
              "856: dig 1",
              "857: -",
              "860: bytec 6",
              "863: cover 2",
              "864: box_extract",
              "865: pushbytes 0x54657374696e67",
              "866: ==",
              "867: assert",
              "870: bytec_2",
              "871: box_del",
              "872: pop",
              "873: bytec_2",
              "874: pushbytes 0x000548656c6c6f",
              "875: box_put",
              "878: bytec_2",
              "879: box_len",
              "880: pop",
              "881: pushint 2",
              "882: dig 1",
              "883: <",
              "884: dig 1",
              "885: pushint 2",
              "886: uncover 2",
              "887: select",
              "888: intc_3",
              "889: dig 2",
              "890: <",
              "891: uncover 2",
              "892: intc_3",
              "893: uncover 2",
              "894: select",
              "895: dig 1",
              "896: -",
              "897: bytec_2",
              "898: cover 2",
              "899: box_extract",
              "900: pushbytes 0x48656c6c6f",
              "901: ==",
              "904: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "43: main_arc4_box_route@30:",
              "49: pushbytess 0x64 0x00010203",
              "54: box_put",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "35: main_key_box_route@31:",
              "38: pushbytes 0x151f7c750007626f785f696e74",
              "39: log",
              "40: intc_0",
              "41: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 38",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "908: box_map_exists:",
              "912: txna ApplicationArgs 1",
              "913: btoi",
              "916: itob",
              "917: box_len",
              "918: bury 1",
              "922: bytec_3",
              "923: intc_1",
              "924: uncover 2",
              "925: setbit",
              "926: bytec_1",
              "927: swap",
              "928: concat",
              "929: log",
              "930: intc_0",
              "931: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 39",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "935: box_map_struct_exists:",
              "938: bytec 9",
              "941: txna ApplicationArgs 1",
              "944: concat",
              "945: box_len",
              "946: bury 1",
              "949: bytec_3",
              "950: intc_1",
              "951: uncover 2",
              "952: setbit",
              "953: bytec_1",
              "954: swap",
              "955: concat",
              "956: log",
              "957: intc_0",
              "958: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "22: main_key_prefix_box_map_route@35:",
              "25: pushbytes 0x151f7c750000",
              "26: log",
              "27: intc_0",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 32,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "70: get_box:",
              "73: bytec_0",
              "74: box_get",
              "75: assert",
              "76: btoi",
              "80: itob",
              "81: bytec_1",
              "82: swap",
              "83: concat",
              "84: log",
              "85: intc_0",
              "86: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "90: get_item_box_map:",
              "93: txna ApplicationArgs 1",
              "94: btoi",
              "97: itob",
              "98: box_get",
              "99: assert",
              "102: dup",
              "103: len",
              "104: itob",
              "105: extract 6 2",
              "106: swap",
              "107: concat",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "117: get_box_map:",
              "120: intc_0",
              "123: itob",
              "124: box_get",
              "125: bytec 7",
              "126: cover 2",
              "127: select",
              "130: dup",
              "131: len",
              "132: itob",
              "133: extract 6 2",
              "134: swap",
              "135: concat",
              "136: bytec_1",
              "137: swap",
              "138: concat",
              "139: log",
              "140: intc_0",
              "141: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "145: maybe_box:",
              "148: bytec_0",
              "149: box_get",
              "150: swap",
              "151: btoi",
              "154: itob",
              "155: bytec_3",
              "156: intc_1",
              "157: uncover 3",
              "158: setbit",
              "159: concat",
              "160: bytec_1",
              "161: swap",
              "162: concat",
              "163: log",
              "164: intc_0",
              "165: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 14 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "185: pushbytes \"\"",
              "186: bury 1"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "215: get_box_example:",
              "218: bytec_0",
              "219: box_get",
              "220: assert",
              "221: btoi",
              "224: bytec 4",
              "225: box_get",
              "226: assert",
              "227: extract 2 0",
              "230: bytec_2",
              "231: box_get",
              "232: assert",
              "236: uncover 2",
              "237: itob",
              "238: dig 2",
              "239: len",
              "240: itob",
              "241: extract 6 2",
              "242: uncover 3",
              "243: concat",
              "244: swap",
              "245: pushbytes 0x000c",
              "246: concat",
              "247: dig 1",
              "248: len",
              "249: pushint 12",
              "250: +",
              "251: itob",
              "252: extract 6 2",
              "253: concat",
              "254: swap",
              "255: concat",
              "256: swap",
              "257: concat",
              "258: bytec_1",
              "259: swap",
              "260: concat",
              "261: log",
              "262: intc_0",
              "263: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "267: get_box_map_example:",
              "270: intc_0",
              "273: itob",
              "274: box_get",
              "275: bytec 7",
              "276: cover 2",
              "277: select",
              "278: bytec 7",
              "279: ==",
              "280: assert",
              "283: bytec 8",
              "284: log",
              "285: intc_0",
              "286: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "290: maybe_box_example:",
              "293: bytec_0",
              "294: box_del",
              "295: pop",
              "298: bytec_0",
              "299: box_get",
              "300: swap",
              "301: btoi",
              "302: intc_2",
              "303: dig 1",
              "304: dig 3",
              "305: select",
              "306: intc_2",
              "307: ==",
              "308: assert",
              "311: swap",
              "312: !",
              "313: assert",
              "316: !",
              "319: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 19",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "323: maybe_box_map_example:",
              "326: intc_0",
              "329: itob",
              "330: box_len",
              "331: bury 1",
              "334: !",
              "335: assert",
              "338: intc_1",
              "341: itob",
              "342: box_len",
              "343: bury 1",
              "346: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 20",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "350: get_box_map_struct:",
              "353: bytec 9",
              "356: txna ApplicationArgs 1",
              "359: concat",
              "360: box_get",
              "361: assert",
              "364: bytec_1",
              "365: swap",
              "366: concat",
              "367: log",
              "368: intc_0",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 21",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "373: set_box:",
              "377: txna ApplicationArgs 1",
              "378: btoi",
              "381: itob",
              "382: bytec_0",
              "383: swap",
              "384: box_put",
              "388: intc_0",
              "389: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 22",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "393: set_box_map:",
              "396: txna ApplicationArgs 1",
              "397: btoi",
              "398: txna ApplicationArgs 2",
              "399: extract 2 0",
              "402: swap",
              "403: itob",
              "404: dup",
              "405: box_del",
              "406: pop",
              "407: swap",
              "408: box_put",
              "411: intc_0",
              "412: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 23",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "416: set_box_map_struct:",
              "419: txna ApplicationArgs 2",
              "422: bytec 9",
              "425: txna ApplicationArgs 1",
              "428: concat",
              "429: dup",
              "430: box_del",
              "431: pop",
              "432: swap",
              "433: box_put",
              "436: bytec 8",
              "437: log",
              "438: intc_0",
              "439: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "443: set_box_example:",
              "447: txna ApplicationArgs 1",
              "448: btoi",
              "449: txna ApplicationArgs 2",
              "450: txna ApplicationArgs 3",
              "453: uncover 2",
              "454: itob",
              "455: bytec_0",
              "456: swap",
              "457: box_put",
              "460: bytec 4",
              "461: box_del",
              "462: pop",
              "463: bytec 4",
              "464: dig 2",
              "465: box_put",
              "468: bytec_2",
              "469: box_del",
              "470: pop",
              "471: bytec_2",
              "472: swap",
              "473: box_put",
              "476: extract 2 0",
              "477: bytec 10",
              "478: box_del",
              "479: pop",
              "480: bytec 10",
              "481: swap",
              "482: box_put",
              "485: bytec_0",
              "486: box_get",
              "487: assert",
              "488: btoi",
              "489: pushint 3",
              "490: +",
              "491: itob",
              "492: bytec_0",
              "493: swap",
              "494: box_put",
              "498: intc_0",
              "499: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "503: delete_box:",
              "506: bytec_0",
              "507: box_del",
              "508: pop",
              "511: bytec 4",
              "512: box_del",
              "513: pop",
              "516: bytec_2",
              "517: box_del",
              "518: pop",
              "521: bytec_0",
              "522: box_get",
              "523: swap",
              "524: btoi",
              "525: intc_2",
              "526: swap",
              "527: uncover 2",
              "528: select",
              "529: intc_2",
              "530: ==",
              "531: assert",
              "534: bytec 4",
              "535: box_get",
              "536: bytec 11",
              "537: cover 2",
              "538: select",
              "539: extract 2 0",
              "540: pushbytes 0x3432",
              "541: ==",
              "546: assert",
              "549: bytec_2",
              "550: box_get",
              "551: bytec 11",
              "552: cover 2",
              "553: select",
              "554: bytec 11",
              "555: ==",
              "559: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 26",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "563: delete_box_map:",
              "566: txna ApplicationArgs 1",
              "567: btoi",
              "570: itob",
              "571: box_del",
              "572: pop",
              "575: intc_0",
              "576: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 28 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "593: intc_1"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 30 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "607: box_map_length_after_if_else@3:",
              "610: dup",
              "611: box_len",
              "612: assert",
              "616: b box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "620: box_map_struct_length:",
              "623: bytec 12",
              "624: box_del",
              "625: pop",
              "626: bytec 12",
              "629: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "632: box_put",
              "635: bytec 12",
              "636: box_len",
              "637: pop",
              "638: pushint 28",
              "639: ==",
              "640: assert",
              "643: bytec 8",
              "644: log",
              "645: intc_0",
              "646: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 32",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "650: box_map_length_example:",
              "653: intc_1",
              "656: itob",
              "657: dup",
              "658: box_del",
              "659: pop",
              "660: dup",
              "663: pushbytes \"Hmmmmm\"",
              "666: box_put",
              "669: box_len",
              "670: pop",
              "671: pushint 6",
              "672: ==",
              "676: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 33",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "680: extract_box:",
              "683: bytec 5",
              "686: pushint 32",
              "687: box_create",
              "688: assert",
              "691: txn Sender",
              "694: global CurrentApplicationAddress",
              "697: bytec 5",
              "700: intc_1",
              "701: dig 3",
              "702: box_replace",
              "705: bytec 5",
              "708: intc_1",
              "709: dup",
              "710: dig 3",
              "711: UNSUPPORTED box_splice",
              "714: bytec 5",
              "717: pushint 64",
              "720: bytec 13",
              "723: box_replace",
              "726: bytec 5",
              "729: intc_1",
              "730: pushint 69",
              "731: box_extract",
              "734: swap",
              "735: uncover 2",
              "736: concat",
              "739: bytec 13",
              "742: concat",
              "743: ==",
              "747: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 34",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "751: value_box:",
              "754: bytec_0",
              "755: box_get",
              "756: assert",
              "757: btoi",
              "758: intc_3",
              "759: ==",
              "763: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 35",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "767: exist_box:",
              "770: bytec_0",
              "771: box_len",
              "772: bury 1",
              "775: bytec_3",
              "776: intc_1",
              "777: uncover 2",
              "778: setbit",
              "779: bytec_1",
              "780: swap",
              "781: concat",
              "782: log",
              "783: intc_0",
              "784: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 36",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "788: exist_box_example:",
              "791: bytec 4",
              "792: box_len",
              "793: bury 1",
              "794: bytec_2",
              "795: box_len",
              "796: cover 2",
              "797: pop",
              "798: bytec 10",
              "799: box_len",
              "800: cover 3",
              "801: pop",
              "804: bytec_3",
              "805: intc_1",
              "806: uncover 2",
              "807: setbit",
              "808: intc_0",
              "809: uncover 2",
              "810: setbit",
              "811: pushint 2",
              "812: uncover 2",
              "813: setbit",
              "814: bytec_1",
              "815: swap",
              "816: concat",
              "817: log",
              "818: intc_0",
              "819: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 37",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "823: slice_box:",
              "826: bytec 6",
              "829: box_del",
              "830: pop",
              "833: bytec 6",
              "836: pushbytes 0x54657374696e672074657374696e6720313233",
              "837: box_put",
              "840: bytec 6",
              "843: box_len",
              "844: pop",
              "845: dup",
              "846: intc_1",
              "847: dig 2",
              "848: select",
              "849: pushint 7",
              "850: dig 2",
              "851: <",
              "852: uncover 2",
              "853: pushint 7",
              "854: uncover 2",
              "855: select",
              "856: dig 1",
              "857: -",
              "860: bytec 6",
              "863: cover 2",
              "864: box_extract",
              "865: pushbytes 0x54657374696e67",
              "866: ==",
              "867: assert",
              "870: bytec_2",
              "871: box_del",
              "872: pop",
              "873: bytec_2",
              "874: pushbytes 0x000548656c6c6f",
              "875: box_put",
              "878: bytec_2",
              "879: box_len",
              "880: pop",
              "881: pushint 2",
              "882: dig 1",
              "883: <",
              "884: dig 1",
              "885: pushint 2",
              "886: uncover 2",
              "887: select",
              "888: intc_3",
              "889: dig 2",
              "890: <",
              "891: uncover 2",
              "892: intc_3",
              "893: uncover 2",
              "894: select",
              "895: dig 1",
              "896: -",
              "897: bytec_2",
              "898: cover 2",
              "899: box_extract",
              "900: pushbytes 0x48656c6c6f",
              "901: ==",
              "904: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "43: main_arc4_box_route@30:",
              "49: pushbytess 0x64 0x00010203",
              "54: box_put",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "35: main_key_box_route@31:",
              "38: pushbytes 0x151f7c750007626f785f696e74",
              "39: log",
              "40: intc_0",
              "41: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 38",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "908: box_map_exists:",
              "912: txna ApplicationArgs 1",
              "913: btoi",
              "916: itob",
              "917: box_len",
              "918: bury 1",
              "922: bytec_3",
              "923: intc_1",
              "924: uncover 2",
              "925: setbit",
              "926: bytec_1",
              "927: swap",
              "928: concat",
              "929: log",
              "930: intc_0",
              "931: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 39",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "935: box_map_struct_exists:",
              "938: bytec 9",
              "941: txna ApplicationArgs 1",
              "944: concat",
              "945: box_len",
              "946: bury 1",
              "949: bytec_3",
              "950: intc_1",
              "951: uncover 2",
              "952: setbit",
              "953: bytec_1",
              "954: swap",
              "955: concat",
              "956: log",
              "957: intc_0",
              "958: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "22: main_key_prefix_box_map_route@35:",
              "25: pushbytes 0x151f7c750000",
              "26: log",
              "27: intc_0",
              "28: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "60: main___algopy_default_create@39:",
              "61: txn OnCompletion",
              "62: !",
              "63: txn ApplicationID",
              "64: !",
              "65: &&",
              "66: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 32,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "70: get_box:",
              "73: bytec_0",
              "74: box_get",
              "75: assert",
              "76: btoi",
              "80: itob",
              "81: bytec_1",
              "82: swap",
              "83: concat",
              "84: log",
              "85: intc_0",
              "86: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "90: get_item_box_map:",
              "93: txna ApplicationArgs 1",
              "94: btoi",
              "97: itob",
              "98: box_get",
              "99: assert",
              "102: dup",
              "103: len",
              "104: itob",
              "105: extract 6 2",
              "106: swap",
              "107: concat",
              "108: bytec_1",
              "109: swap",
              "110: concat",
              "111: log",
              "112: intc_0",
              "113: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "117: get_box_map:",
              "120: intc_0",
              "123: itob",
              "124: box_get",
              "125: bytec 7",
              "126: cover 2",
              "127: select",
              "130: dup",
              "131: len",
              "132: itob",
              "133: extract 6 2",
              "134: swap",
              "135: concat",
              "136: bytec_1",
              "137: swap",
              "138: concat",
              "139: log",
              "140: intc_0",
              "141: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "145: maybe_box:",
              "148: bytec_0",
              "149: box_get",
              "150: swap",
              "151: btoi",
              "154: itob",
              "155: bytec_3",
              "156: intc_1",
              "157: uncover 3",
              "158: setbit",
              "159: concat",
              "160: bytec_1",
              "161: swap",
              "162: concat",
              "163: log",
              "164: intc_0",
              "165: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 14 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "185: pushbytes \"\"",
              "186: bury 1"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "169: maybe_box_map:",
              "172: intc_0",
              "175: itob",
              "176: box_get",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_box_map_after_if_else@3"
            ],
            [
              "188: maybe_box_map_after_if_else@3:",
              "191: dupn 2",
              "192: len",
              "193: itob",
              "194: extract 6 2",
              "195: swap",
              "196: concat",
              "197: bytec_3",
              "198: intc_1",
              "199: dig 4",
              "200: setbit",
              "201: pushbytes 0x0003",
              "202: swap",
              "203: concat",
              "204: swap",
              "205: concat",
              "206: bytec_1",
              "207: swap",
              "208: concat",
              "209: log",
              "210: intc_0",
              "211: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "215: get_box_example:",
              "218: bytec_0",
              "219: box_get",
              "220: assert",
              "221: btoi",
              "224: bytec 4",
              "225: box_get",
              "226: assert",
              "227: extract 2 0",
              "230: bytec_2",
              "231: box_get",
              "232: assert",
              "236: uncover 2",
              "237: itob",
              "238: dig 2",
              "239: len",
              "240: itob",
              "241: extract 6 2",
              "242: uncover 3",
              "243: concat",
              "244: swap",
              "245: pushbytes 0x000c",
              "246: concat",
              "247: dig 1",
              "248: len",
              "249: pushint 12",
              "250: +",
              "251: itob",
              "252: extract 6 2",
              "253: concat",
              "254: swap",
              "255: concat",
              "256: swap",
              "257: concat",
              "258: bytec_1",
              "259: swap",
              "260: concat",
              "261: log",
              "262: intc_0",
              "263: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "267: get_box_map_example:",
              "270: intc_0",
              "273: itob",
              "274: box_get",
              "275: bytec 7",
              "276: cover 2",
              "277: select",
              "278: bytec 7",
              "279: ==",
              "280: assert",
              "283: bytec 8",
              "284: log",
              "285: intc_0",
              "286: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "290: maybe_box_example:",
              "293: bytec_0",
              "294: box_del",
              "295: pop",
              "298: bytec_0",
              "299: box_get",
              "300: swap",
              "301: btoi",
              "302: intc_2",
              "303: dig 1",
              "304: dig 3",
              "305: select",
              "306: intc_2",
              "307: ==",
              "308: assert",
              "311: swap",
              "312: !",
              "313: assert",
              "316: !",
              "319: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 19",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "323: maybe_box_map_example:",
              "326: intc_0",
              "329: itob",
              "330: box_len",
              "331: bury 1",
              "334: !",
              "335: assert",
              "338: intc_1",
              "341: itob",
              "342: box_len",
              "343: bury 1",
              "346: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 20",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "350: get_box_map_struct:",
              "353: bytec 9",
              "356: txna ApplicationArgs 1",
              "359: concat",
              "360: box_get",
              "361: assert",
              "364: bytec_1",
              "365: swap",
              "366: concat",
              "367: log",
              "368: intc_0",
              "369: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 21",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "373: set_box:",
              "377: txna ApplicationArgs 1",
              "378: btoi",
              "381: itob",
              "382: bytec_0",
              "383: swap",
              "384: box_put",
              "388: intc_0",
              "389: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 22",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "393: set_box_map:",
              "396: txna ApplicationArgs 1",
              "397: btoi",
              "398: txna ApplicationArgs 2",
              "399: extract 2 0",
              "402: swap",
              "403: itob",
              "404: dup",
              "405: box_del",
              "406: pop",
              "407: swap",
              "408: box_put",
              "411: intc_0",
              "412: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 23",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "416: set_box_map_struct:",
              "419: txna ApplicationArgs 2",
              "422: bytec 9",
              "425: txna ApplicationArgs 1",
              "428: concat",
              "429: dup",
              "430: box_del",
              "431: pop",
              "432: swap",
              "433: box_put",
              "436: bytec 8",
              "437: log",
              "438: intc_0",
              "439: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "443: set_box_example:",
              "447: txna ApplicationArgs 1",
              "448: btoi",
              "449: txna ApplicationArgs 2",
              "450: txna ApplicationArgs 3",
              "453: uncover 2",
              "454: itob",
              "455: bytec_0",
              "456: swap",
              "457: box_put",
              "460: bytec 4",
              "461: box_del",
              "462: pop",
              "463: bytec 4",
              "464: dig 2",
              "465: box_put",
              "468: bytec_2",
              "469: box_del",
              "470: pop",
              "471: bytec_2",
              "472: swap",
              "473: box_put",
              "476: extract 2 0",
              "477: bytec 10",
              "478: box_del",
              "479: pop",
              "480: bytec 10",
              "481: swap",
              "482: box_put",
              "485: bytec_0",
              "486: box_get",
              "487: assert",
              "488: btoi",
              "489: pushint 3",
              "490: +",
              "491: itob",
              "492: bytec_0",
              "493: swap",
              "494: box_put",
              "498: intc_0",
              "499: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 25",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "503: delete_box:",
              "506: bytec_0",
              "507: box_del",
              "508: pop",
              "511: bytec 4",
              "512: box_del",
              "513: pop",
              "516: bytec_2",
              "517: box_del",
              "518: pop",
              "521: bytec_0",
              "522: box_get",
              "523: swap",
              "524: btoi",
              "525: intc_2",
              "526: swap",
              "527: uncover 2",
              "528: select",
              "529: intc_2",
              "530: ==",
              "531: assert",
              "534: bytec 4",
              "535: box_get",
              "536: bytec 11",
              "537: cover 2",
              "538: select",
              "539: extract 2 0",
              "540: pushbytes 0x3432",
              "541: ==",
              "546: assert",
              "549: bytec_2",
              "550: box_get",
              "551: bytec 11",
              "552: cover 2",
              "553: select",
              "554: bytec 11",
              "555: ==",
              "559: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 26",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "563: delete_box_map:",
              "566: txna ApplicationArgs 1",
              "567: btoi",
              "570: itob",
              "571: box_del",
              "572: pop",
              "575: intc_0",
              "576: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 28 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "593: intc_1"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 27 -> 30 -> 29",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "580: box_map_length:",
              "583: intc_1",
              "586: itob",
              "587: dup",
              "588: box_len",
              "589: bury 1",
              "590: bnz box_map_length_after_if_else@3"
            ],
            [
              "607: box_map_length_after_if_else@3:",
              "610: dup",
              "611: box_len",
              "612: assert",
              "616: b box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4"
            ],
            [
              "595: box_map_length_after_inlined_smart_contracts.box_storage.contract.BoxStorage.box_map_length@4:",
              "599: itob",
              "600: bytec_1",
              "601: swap",
              "602: concat",
              "603: log",
              "604: intc_0",
              "605: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "620: box_map_struct_length:",
              "623: bytec 12",
              "624: box_del",
              "625: pop",
              "626: bytec 12",
              "629: pushbytes 0x0012000000000000004600000000000000020008746573744e616d65",
              "632: box_put",
              "635: bytec 12",
              "636: box_len",
              "637: pop",
              "638: pushint 28",
              "639: ==",
              "640: assert",
              "643: bytec 8",
              "644: log",
              "645: intc_0",
              "646: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 32",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "650: box_map_length_example:",
              "653: intc_1",
              "656: itob",
              "657: dup",
              "658: box_del",
              "659: pop",
              "660: dup",
              "663: pushbytes \"Hmmmmm\"",
              "666: box_put",
              "669: box_len",
              "670: pop",
              "671: pushint 6",
              "672: ==",
              "676: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 33",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "680: extract_box:",
              "683: bytec 5",
              "686: pushint 32",
              "687: box_create",
              "688: assert",
              "691: txn Sender",
              "694: global CurrentApplicationAddress",
              "697: bytec 5",
              "700: intc_1",
              "701: dig 3",
              "702: box_replace",
              "705: bytec 5",
              "708: intc_1",
              "709: dup",
              "710: dig 3",
              "711: UNSUPPORTED box_splice",
              "714: bytec 5",
              "717: pushint 64",
              "720: bytec 13",
              "723: box_replace",
              "726: bytec 5",
              "729: intc_1",
              "730: pushint 69",
              "731: box_extract",
              "734: swap",
              "735: uncover 2",
              "736: concat",
              "739: bytec 13",
              "742: concat",
              "743: ==",
              "747: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 34",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "751: value_box:",
              "754: bytec_0",
              "755: box_get",
              "756: assert",
              "757: btoi",
              "758: intc_3",
              "759: ==",
              "763: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 35",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "767: exist_box:",
              "770: bytec_0",
              "771: box_len",
              "772: bury 1",
              "775: bytec_3",
              "776: intc_1",
              "777: uncover 2",
              "778: setbit",
              "779: bytec_1",
              "780: swap",
              "781: concat",
              "782: log",
              "783: intc_0",
              "784: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 36",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "788: exist_box_example:",
              "791: bytec 4",
              "792: box_len",
              "793: bury 1",
              "794: bytec_2",
              "795: box_len",
              "796: cover 2",
              "797: pop",
              "798: bytec 10",
              "799: box_len",
              "800: cover 3",
              "801: pop",
              "804: bytec_3",
              "805: intc_1",
              "806: uncover 2",
              "807: setbit",
              "808: intc_0",
              "809: uncover 2",
              "810: setbit",
              "811: pushint 2",
              "812: uncover 2",
              "813: setbit",
              "814: bytec_1",
              "815: swap",
              "816: concat",
              "817: log",
              "818: intc_0",
              "819: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 37",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "823: slice_box:",
              "826: bytec 6",
              "829: box_del",
              "830: pop",
              "833: bytec 6",
              "836: pushbytes 0x54657374696e672074657374696e6720313233",
              "837: box_put",
              "840: bytec 6",
              "843: box_len",
              "844: pop",
              "845: dup",
              "846: intc_1",
              "847: dig 2",
              "848: select",
              "849: pushint 7",
              "850: dig 2",
              "851: <",
              "852: uncover 2",
              "853: pushint 7",
              "854: uncover 2",
              "855: select",
              "856: dig 1",
              "857: -",
              "860: bytec 6",
              "863: cover 2",
              "864: box_extract",
              "865: pushbytes 0x54657374696e67",
              "866: ==",
              "867: assert",
              "870: bytec_2",
              "871: box_del",
              "872: pop",
              "873: bytec_2",
              "874: pushbytes 0x000548656c6c6f",
              "875: box_put",
              "878: bytec_2",
              "879: box_len",
              "880: pop",
              "881: pushint 2",
              "882: dig 1",
              "883: <",
              "884: dig 1",
              "885: pushint 2",
              "886: uncover 2",
              "887: select",
              "888: intc_3",
              "889: dig 2",
              "890: <",
              "891: uncover 2",
              "892: intc_3",
              "893: uncover 2",
              "894: select",
              "895: dig 1",
              "896: -",
              "897: bytec_2",
              "898: cover 2",
              "899: box_extract",
              "900: pushbytes 0x48656c6c6f",
              "901: ==",
              "904: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "43: main_arc4_box_route@30:",
              "49: pushbytess 0x64 0x00010203",
              "54: box_put",
              "57: intc_0",
              "58: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "35: main_key_box_route@31:",
              "38: pushbytes 0x151f7c750007626f785f696e74",
              "39: log",
              "40: intc_0",
              "41: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 38",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "908: box_map_exists:",
              "912: txna ApplicationArgs 1",
              "913: btoi",
              "916: itob",
              "917: box_len",
              "918: bury 1",
              "922: bytec_3",
              "923: intc_1",
              "924: uncover 2",
              "925: setbit",
              "926: bytec_1",
              "927: swap",
              "928: concat",
              "929: log",
              "930: intc_0",
              "931: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 39",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "935: box_map_struct_exists:",
              "938: bytec 9",
              "941: txna ApplicationArgs 1",
              "944: concat",
              "945: box_len",
              "946: bury 1",
              "949: bytec_3",
              "950: intc_1",
              "951: uncover 2",
              "952: setbit",
              "953: bytec_1",
              "954: swap",
              "955: concat",
              "956: log",
              "957: intc_0",
              "958: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x5888b998 0x18d0fbe3 0x3af23728 0x4fc279e1 0x9ef66971 0x4e6f089e 0x12806f6b 0x75ed3485 0x58e27eaf 0xaf911590 0xae84ac4d 0xeff5b657 0x1b8dade0 0x65c3063e 0x82708565 0x47bb7043 0x78b0734e 0xd67789eb 0x94e5d3f4 0xbd052d6a 0x79df57fc 0xf76125b9 0x21aca6ff 0x04ef4971 0x23ecb32c 0xecd1d1f9 0x7fa2d1c0 0x8ee2c364 0x9802088c 0x36f86c8e",
              "18: txna ApplicationArgs 0",
              "19: match get_box get_item_box_map get_box_map maybe_box maybe_box_map get_box_example get_box_map_example maybe_box_example maybe_box_map_example get_box_map_struct set_box set_box_map set_box_map_struct set_box_example delete_box delete_box_map box_map_length box_map_struct_length box_map_length_example extract_box value_box exist_box exist_box_example slice_box main_arc4_box_route@30 main_key_box_route@31 main_key_box_example_route@32 box_map_exists box_map_struct_exists main_key_prefix_box_map_route@35"
            ],
            [
              "22: main_key_prefix_box_map_route@35:",
              "25: pushbytes 0x151f7c750000",
              "26: log",
              "27: intc_0",
              "28: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0 42 10",
              "7: bytecblock \"box_int\" 0x151f7c75 0x424f585f43 0x00 \"b\" \"blob\" \"0\" \"default\" 0x151f7c7580 \"users\" \"box_bytes\" 0x00023432 0x75736572730000000000000000 0x68656c6c6f",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@39"
            ],
            [
              "60: main___algopy_default_create@39:",
              "61: txn OnCompletion",
              "62: !",
              "63: txn ApplicationID",
              "64: !",
              "65: &&",
              "66: return"
            ]
          ]
        }
      ]
    }
  ]
}