{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 8 -> 9 -> 11 -> 12 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "21: main_for_loop_route@3:",
              "25: txn OnCompletion",
              "26: !",
              "27: assert",
              "28: txn ApplicationID",
              "29: assert",
              "30: callsub for_loop"
            ],
            [
              "51: for_loop:",
              "56: proto 0 1",
              "59: pushbytess \"\" 0x00000000",
              "62: pushint 3",
              "63: intc_1"
            ],
            [
              "65: for_loop_for_body@2:",
              "68: frame_dig 2",
              "69: dup",
              "70: itob",
              "71: extract 7 1",
              "72: frame_dig 3",
              "73: dup",
              "74: pushint 4",
              "75: <",
              "76: assert",
              "77: frame_dig 1",
              "78: swap",
              "79: uncover 2",
              "80: replace3",
              "81: frame_bury 1",
              "84: bz for_loop_after_for@5"
            ],
            [
              "95: for_loop_after_for@5:",
              "98: intc_1",
              "99: frame_bury 0",
              "102: intc_0",
              "103: frame_bury 2"
            ],
            [
              "105: for_loop_for_header@6:",
              "108: frame_dig 2",
              "109: pushint 5",
              "110: <",
              "111: bz for_loop_after_for@9"
            ],
            [
              "127: for_loop_after_for@9:",
              "130: frame_dig 0",
              "131: pushint 10",
              "132: ==",
              "133: assert",
              "136: frame_dig 1",
              "137: frame_bury 0",
              "138: retsub"
            ],
            [
              "31: pushbytes 0x151f7c75",
              "32: swap",
              "33: concat",
              "34: log",
              "35: intc_0",
              "36: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 8 -> 9 -> 11 -> 12 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "21: main_for_loop_route@3:",
              "25: txn OnCompletion",
              "26: !",
              "27: assert",
              "28: txn ApplicationID",
              "29: assert",
              "30: callsub for_loop"
            ],
            [
              "51: for_loop:",
              "56: proto 0 1",
              "59: pushbytess \"\" 0x00000000",
              "62: pushint 3",
              "63: intc_1"
            ],
            [
              "65: for_loop_for_body@2:",
              "68: frame_dig 2",
              "69: dup",
              "70: itob",
              "71: extract 7 1",
              "72: frame_dig 3",
              "73: dup",
              "74: pushint 4",
              "75: <",
              "76: assert",
              "77: frame_dig 1",
              "78: swap",
              "79: uncover 2",
              "80: replace3",
              "81: frame_bury 1",
              "84: bz for_loop_after_for@5"
            ],
            [
              "95: for_loop_after_for@5:",
              "98: intc_1",
              "99: frame_bury 0",
              "102: intc_0",
              "103: frame_bury 2"
            ],
            [
              "105: for_loop_for_header@6:",
              "108: frame_dig 2",
              "109: pushint 5",
              "110: <",
              "111: bz for_loop_after_for@9"
            ],
            [
              "127: for_loop_after_for@9:",
              "130: frame_dig 0",
              "131: pushint 10",
              "132: ==",
              "133: assert",
              "136: frame_dig 1",
              "137: frame_bury 0",
              "138: retsub"
            ],
            [
              "31: pushbytes 0x151f7c75",
              "32: swap",
              "33: concat",
              "34: log",
              "35: intc_0",
              "36: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 8 -> 9 -> 11 -> 12 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "21: main_for_loop_route@3:",
              "25: txn OnCompletion",
              "26: !",
              "27: assert",
              "28: txn ApplicationID",
              "29: assert",
              "30: callsub for_loop"
            ],
            [
              "51: for_loop:",
              "56: proto 0 1",
              "59: pushbytess \"\" 0x00000000",
              "62: pushint 3",
              "63: intc_1"
            ],
            [
              "65: for_loop_for_body@2:",
              "68: frame_dig 2",
              "69: dup",
              "70: itob",
              "71: extract 7 1",
              "72: frame_dig 3",
              "73: dup",
              "74: pushint 4",
              "75: <",
              "76: assert",
              "77: frame_dig 1",
              "78: swap",
              "79: uncover 2",
              "80: replace3",
              "81: frame_bury 1",
              "84: bz for_loop_after_for@5"
            ],
            [
              "95: for_loop_after_for@5:",
              "98: intc_1",
              "99: frame_bury 0",
              "102: intc_0",
              "103: frame_bury 2"
            ],
            [
              "105: for_loop_for_header@6:",
              "108: frame_dig 2",
              "109: pushint 5",
              "110: <",
              "111: bz for_loop_after_for@9"
            ],
            [
              "127: for_loop_after_for@9:",
              "130: frame_dig 0",
              "131: pushint 10",
              "132: ==",
              "133: assert",
              "136: frame_dig 1",
              "137: frame_bury 0",
              "138: retsub"
            ],
            [
              "31: pushbytes 0x151f7c75",
              "32: swap",
              "33: concat",
              "34: log",
              "35: intc_0",
              "36: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 8 -> 9 -> 11 -> 12 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "21: main_for_loop_route@3:",
              "25: txn OnCompletion",
              "26: !",
              "27: assert",
              "28: txn ApplicationID",
              "29: assert",
              "30: callsub for_loop"
            ],
            [
              "51: for_loop:",
              "56: proto 0 1",
              "59: pushbytess \"\" 0x00000000",
              "62: pushint 3",
              "63: intc_1"
            ],
            [
              "65: for_loop_for_body@2:",
              "68: frame_dig 2",
              "69: dup",
              "70: itob",
              "71: extract 7 1",
              "72: frame_dig 3",
              "73: dup",
              "74: pushint 4",
              "75: <",
              "76: assert",
              "77: frame_dig 1",
              "78: swap",
              "79: uncover 2",
              "80: replace3",
              "81: frame_bury 1",
              "84: bz for_loop_after_for@5"
            ],
            [
              "95: for_loop_after_for@5:",
              "98: intc_1",
              "99: frame_bury 0",
              "102: intc_0",
              "103: frame_bury 2"
            ],
            [
              "105: for_loop_for_header@6:",
              "108: frame_dig 2",
              "109: pushint 5",
              "110: <",
              "111: bz for_loop_after_for@9"
            ],
            [
              "127: for_loop_after_for@9:",
              "130: frame_dig 0",
              "131: pushint 10",
              "132: ==",
              "133: assert",
              "136: frame_dig 1",
              "137: frame_bury 0",
              "138: retsub"
            ],
            [
              "31: pushbytes 0x151f7c75",
              "32: swap",
              "33: concat",
              "34: log",
              "35: intc_0",
              "36: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 8 -> 9 -> 11 -> 12 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "21: main_for_loop_route@3:",
              "25: txn OnCompletion",
              "26: !",
              "27: assert",
              "28: txn ApplicationID",
              "29: assert",
              "30: callsub for_loop"
            ],
            [
              "51: for_loop:",
              "56: proto 0 1",
              "59: pushbytess \"\" 0x00000000",
              "62: pushint 3",
              "63: intc_1"
            ],
            [
              "65: for_loop_for_body@2:",
              "68: frame_dig 2",
              "69: dup",
              "70: itob",
              "71: extract 7 1",
              "72: frame_dig 3",
              "73: dup",
              "74: pushint 4",
              "75: <",
              "76: assert",
              "77: frame_dig 1",
              "78: swap",
              "79: uncover 2",
              "80: replace3",
              "81: frame_bury 1",
              "84: bz for_loop_after_for@5"
            ],
            [
              "95: for_loop_after_for@5:",
              "98: intc_1",
              "99: frame_bury 0",
              "102: intc_0",
              "103: frame_bury 2"
            ],
            [
              "105: for_loop_for_header@6:",
              "108: frame_dig 2",
              "109: pushint 5",
              "110: <",
              "111: bz for_loop_after_for@9"
            ],
            [
              "127: for_loop_after_for@9:",
              "130: frame_dig 0",
              "131: pushint 10",
              "132: ==",
              "133: assert",
              "136: frame_dig 1",
              "137: frame_bury 0",
              "138: retsub"
            ],
            [
              "31: pushbytes 0x151f7c75",
              "32: swap",
              "33: concat",
              "34: log",
              "35: intc_0",
              "36: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "43: txn ApplicationID",
              "44: !",
              "45: assert",
              "46: intc_0",
              "47: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 4,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 8 -> 9 -> 11 -> 12 -> 14 -> 5",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "11: pushbytes 0x91d632fb",
              "12: txna ApplicationArgs 0",
              "13: match main_for_loop_route@3"
            ],
            [
              "21: main_for_loop_route@3:",
              "25: txn OnCompletion",
              "26: !",
              "27: assert",
              "28: txn ApplicationID",
              "29: assert",
              "30: callsub for_loop"
            ],
            [
              "51: for_loop:",
              "56: proto 0 1",
              "59: pushbytess \"\" 0x00000000",
              "62: pushint 3",
              "63: intc_1"
            ],
            [
              "65: for_loop_for_body@2:",
              "68: frame_dig 2",
              "69: dup",
              "70: itob",
              "71: extract 7 1",
              "72: frame_dig 3",
              "73: dup",
              "74: pushint 4",
              "75: <",
              "76: assert",
              "77: frame_dig 1",
              "78: swap",
              "79: uncover 2",
              "80: replace3",
              "81: frame_bury 1",
              "84: bz for_loop_after_for@5"
            ],
            [
              "95: for_loop_after_for@5:",
              "98: intc_1",
              "99: frame_bury 0",
              "102: intc_0",
              "103: frame_bury 2"
            ],
            [
              "105: for_loop_for_header@6:",
              "108: frame_dig 2",
              "109: pushint 5",
              "110: <",
              "111: bz for_loop_after_for@9"
            ],
            [
              "127: for_loop_after_for@9:",
              "130: frame_dig 0",
              "131: pushint 10",
              "132: ==",
              "133: assert",
              "136: frame_dig 1",
              "137: frame_bury 0",
              "138: retsub"
            ],
            [
              "31: pushbytes 0x151f7c75",
              "32: swap",
              "33: concat",
              "34: log",
              "35: intc_0",
              "36: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "43: txn ApplicationID",
              "44: !",
              "45: assert",
              "46: intc_0",
              "47: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 6 -> 3",
          "blocks": [
            [
              "1: #pragma version 10",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 0",
              "9: txn NumAppArgs",
              "10: bz main_bare_routing@6"
            ],
            [
              "38: main_bare_routing@6:",
              "41: txn OnCompletion",
              "42: bnz main_after_if_else@10"
            ],
            [
              "15: main_after_if_else@10:",
              "18: intc_1",
              "19: return"
            ]
          ]
        }
      ]
    }
  ]
}