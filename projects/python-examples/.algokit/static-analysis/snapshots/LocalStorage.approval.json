{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 13,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "32: contains_local_data:",
              "36: txna ApplicationArgs 1",
              "39: intc_0",
              "40: bytec_0",
              "41: app_local_get_ex",
              "42: bury 1",
              "43: assert",
              "47: bytec_1",
              "48: log",
              "49: intc_1",
              "50: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "54: contains_local_data_example:",
              "58: txna ApplicationArgs 1",
              "61: dup",
              "62: intc_0",
              "63: bytec_0",
              "64: app_local_get_ex",
              "65: bury 1",
              "66: assert",
              "69: dup",
              "70: intc_0",
              "71: bytec_3",
              "72: app_local_get_ex",
              "73: bury 1",
              "74: assert",
              "77: dup",
              "78: intc_0",
              "79: bytec 4",
              "80: app_local_get_ex",
              "81: bury 1",
              "82: assert",
              "85: dup",
              "86: intc_0",
              "87: bytec 5",
              "88: app_local_get_ex",
              "89: bury 1",
              "90: assert",
              "93: dup",
              "94: intc_0",
              "95: bytec 6",
              "96: app_local_get_ex",
              "97: bury 1",
              "98: assert",
              "101: intc_0",
              "102: bytec_2",
              "103: app_local_get_ex",
              "104: bury 1",
              "105: assert",
              "109: bytec_1",
              "110: log",
              "111: intc_1",
              "112: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "116: get_item_local_data:",
              "120: txna ApplicationArgs 1",
              "123: intc_0",
              "124: bytec_0",
              "125: app_local_get_ex",
              "126: assert",
              "130: itob",
              "131: bytec 8",
              "132: swap",
              "133: concat",
              "134: log",
              "135: intc_1",
              "136: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "140: get_local_data_with_default_int:",
              "144: txna ApplicationArgs 1",
              "147: intc_0",
              "148: bytec_0",
              "149: app_local_get_ex",
              "150: intc_0",
              "151: cover 2",
              "152: select",
              "156: itob",
              "157: bytec 8",
              "158: swap",
              "159: concat",
              "160: log",
              "161: intc_1",
              "162: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "185: intc_0",
              "186: bury 1"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "208: get_item_local_data_example:",
              "212: txna ApplicationArgs 1",
              "215: dup",
              "216: intc_0",
              "217: bytec_0",
              "218: app_local_get_ex",
              "219: assert",
              "224: intc_2",
              "225: ==",
              "226: assert",
              "229: dup",
              "230: intc_0",
              "231: bytec_3",
              "232: app_local_get_ex",
              "233: assert",
              "234: bytec 7",
              "235: ==",
              "236: assert",
              "239: dup",
              "240: intc_0",
              "241: bytec 4",
              "242: app_local_get_ex",
              "243: assert",
              "244: assert",
              "247: dup",
              "248: intc_0",
              "249: bytec 5",
              "250: app_local_get_ex",
              "251: assert",
              "252: intc_2",
              "253: ==",
              "254: assert",
              "257: dup",
              "258: intc_0",
              "259: bytec 6",
              "260: app_local_get_ex",
              "261: assert",
              "264: intc_2",
              "269: ==",
              "270: assert",
              "273: intc_0",
              "274: bytec_2",
              "275: app_local_get_ex",
              "276: assert",
              "277: intc_0",
              "278: assert",
              "279: bytec 7",
              "280: ==",
              "281: assert",
              "285: bytec_1",
              "286: log",
              "287: intc_1",
              "288: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "292: get_local_data_with_default:",
              "295: txna ApplicationArgs 1",
              "298: dup",
              "299: intc_0",
              "300: bytec_0",
              "301: app_local_get_ex",
              "302: intc_0",
              "303: cover 2",
              "304: select",
              "309: intc_2",
              "310: ==",
              "311: assert",
              "316: dup",
              "317: intc_0",
              "320: bytec_3",
              "325: app_local_get_ex",
              "328: bytec 9",
              "333: cover 2",
              "334: select",
              "339: bytec 7",
              "346: ==",
              "347: assert",
              "350: dup",
              "351: intc_0",
              "352: bytec 4",
              "353: app_local_get_ex",
              "354: intc_0",
              "355: cover 2",
              "356: select",
              "357: assert",
              "360: dup",
              "361: intc_0",
              "362: bytec 5",
              "363: app_local_get_ex",
              "364: intc_0",
              "365: cover 2",
              "366: select",
              "369: intc_2",
              "374: ==",
              "375: assert",
              "380: dup",
              "381: intc_0",
              "384: bytec 6",
              "389: app_local_get_ex",
              "392: intc_0",
              "397: cover 2",
              "398: select",
              "401: intc_2",
              "408: ==",
              "409: assert",
              "412: intc_0",
              "413: assert",
              "418: intc_0",
              "421: bytec_2",
              "426: app_local_get_ex",
              "429: bytec 9",
              "434: cover 2",
              "435: select",
              "438: bytec 7",
              "445: ==",
              "446: assert",
              "449: bytec_1",
              "450: log",
              "451: intc_1",
              "452: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "456: maybe_local_data_example:",
              "459: txna ApplicationArgs 1",
              "462: dup",
              "463: intc_0",
              "464: bytec_0",
              "465: app_local_get_ex",
              "468: assert",
              "471: intc_2",
              "472: ==",
              "473: assert",
              "476: dup",
              "477: intc_0",
              "478: bytec_3",
              "479: app_local_get_ex",
              "482: assert",
              "485: bytec 7",
              "486: ==",
              "487: assert",
              "490: dup",
              "491: intc_0",
              "492: bytec 4",
              "493: app_local_get_ex",
              "496: assert",
              "499: assert",
              "502: dup",
              "503: intc_0",
              "504: bytec 5",
              "505: app_local_get_ex",
              "508: assert",
              "511: intc_2",
              "512: ==",
              "513: assert",
              "516: dup",
              "517: intc_0",
              "518: bytec 6",
              "519: app_local_get_ex",
              "522: assert",
              "525: intc_2",
              "526: ==",
              "527: assert",
              "530: intc_0",
              "531: bytec_2",
              "532: app_local_get_ex",
              "535: assert",
              "538: intc_0",
              "539: assert",
              "540: bytec 7",
              "541: ==",
              "542: assert",
              "545: bytec_1",
              "546: log",
              "547: intc_1",
              "548: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "552: set_local_int:",
              "556: txna ApplicationArgs 1",
              "557: txna ApplicationArgs 2",
              "558: btoi",
              "561: bytec_0",
              "562: swap",
              "563: app_local_put",
              "567: intc_1",
              "568: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "572: set_local_data_example:",
              "576: txna ApplicationArgs 1",
              "577: txna ApplicationArgs 2",
              "578: btoi",
              "579: txna ApplicationArgs 3",
              "580: txna ApplicationArgs 4",
              "581: btoi",
              "582: txna ApplicationArgs 5",
              "583: extract 2 0",
              "584: txna ApplicationArgs 6",
              "585: intc_0",
              "586: getbit",
              "589: dig 5",
              "590: bytec_3",
              "591: uncover 3",
              "592: app_local_put",
              "595: dig 4",
              "596: bytec 4",
              "597: uncover 2",
              "598: app_local_put",
              "601: dig 3",
              "602: bytec 5",
              "603: uncover 4",
              "604: app_local_put",
              "607: dig 2",
              "608: bytec 6",
              "609: uncover 2",
              "610: app_local_put",
              "613: bytec_2",
              "614: swap",
              "615: app_local_put",
              "619: bytec_1",
              "620: log",
              "621: intc_1",
              "622: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "626: delete_local_data:",
              "630: txna ApplicationArgs 1",
              "633: bytec_2",
              "634: app_local_del",
              "638: intc_1",
              "639: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "643: delete_local_data_example:",
              "647: txna ApplicationArgs 1",
              "650: dup",
              "651: bytec_0",
              "652: app_local_del",
              "655: dup",
              "656: bytec_3",
              "657: app_local_del",
              "660: dup",
              "661: bytec 4",
              "662: app_local_del",
              "665: dup",
              "666: bytec 5",
              "667: app_local_del",
              "670: dup",
              "671: bytec 6",
              "672: app_local_del",
              "675: bytec_2",
              "676: app_local_del",
              "680: bytec_1",
              "681: log",
              "682: intc_1",
              "683: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 13,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "32: contains_local_data:",
              "36: txna ApplicationArgs 1",
              "39: intc_0",
              "40: bytec_0",
              "41: app_local_get_ex",
              "42: bury 1",
              "43: assert",
              "47: bytec_1",
              "48: log",
              "49: intc_1",
              "50: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "54: contains_local_data_example:",
              "58: txna ApplicationArgs 1",
              "61: dup",
              "62: intc_0",
              "63: bytec_0",
              "64: app_local_get_ex",
              "65: bury 1",
              "66: assert",
              "69: dup",
              "70: intc_0",
              "71: bytec_3",
              "72: app_local_get_ex",
              "73: bury 1",
              "74: assert",
              "77: dup",
              "78: intc_0",
              "79: bytec 4",
              "80: app_local_get_ex",
              "81: bury 1",
              "82: assert",
              "85: dup",
              "86: intc_0",
              "87: bytec 5",
              "88: app_local_get_ex",
              "89: bury 1",
              "90: assert",
              "93: dup",
              "94: intc_0",
              "95: bytec 6",
              "96: app_local_get_ex",
              "97: bury 1",
              "98: assert",
              "101: intc_0",
              "102: bytec_2",
              "103: app_local_get_ex",
              "104: bury 1",
              "105: assert",
              "109: bytec_1",
              "110: log",
              "111: intc_1",
              "112: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "116: get_item_local_data:",
              "120: txna ApplicationArgs 1",
              "123: intc_0",
              "124: bytec_0",
              "125: app_local_get_ex",
              "126: assert",
              "130: itob",
              "131: bytec 8",
              "132: swap",
              "133: concat",
              "134: log",
              "135: intc_1",
              "136: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "140: get_local_data_with_default_int:",
              "144: txna ApplicationArgs 1",
              "147: intc_0",
              "148: bytec_0",
              "149: app_local_get_ex",
              "150: intc_0",
              "151: cover 2",
              "152: select",
              "156: itob",
              "157: bytec 8",
              "158: swap",
              "159: concat",
              "160: log",
              "161: intc_1",
              "162: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "185: intc_0",
              "186: bury 1"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "208: get_item_local_data_example:",
              "212: txna ApplicationArgs 1",
              "215: dup",
              "216: intc_0",
              "217: bytec_0",
              "218: app_local_get_ex",
              "219: assert",
              "224: intc_2",
              "225: ==",
              "226: assert",
              "229: dup",
              "230: intc_0",
              "231: bytec_3",
              "232: app_local_get_ex",
              "233: assert",
              "234: bytec 7",
              "235: ==",
              "236: assert",
              "239: dup",
              "240: intc_0",
              "241: bytec 4",
              "242: app_local_get_ex",
              "243: assert",
              "244: assert",
              "247: dup",
              "248: intc_0",
              "249: bytec 5",
              "250: app_local_get_ex",
              "251: assert",
              "252: intc_2",
              "253: ==",
              "254: assert",
              "257: dup",
              "258: intc_0",
              "259: bytec 6",
              "260: app_local_get_ex",
              "261: assert",
              "264: intc_2",
              "269: ==",
              "270: assert",
              "273: intc_0",
              "274: bytec_2",
              "275: app_local_get_ex",
              "276: assert",
              "277: intc_0",
              "278: assert",
              "279: bytec 7",
              "280: ==",
              "281: assert",
              "285: bytec_1",
              "286: log",
              "287: intc_1",
              "288: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "292: get_local_data_with_default:",
              "295: txna ApplicationArgs 1",
              "298: dup",
              "299: intc_0",
              "300: bytec_0",
              "301: app_local_get_ex",
              "302: intc_0",
              "303: cover 2",
              "304: select",
              "309: intc_2",
              "310: ==",
              "311: assert",
              "316: dup",
              "317: intc_0",
              "320: bytec_3",
              "325: app_local_get_ex",
              "328: bytec 9",
              "333: cover 2",
              "334: select",
              "339: bytec 7",
              "346: ==",
              "347: assert",
              "350: dup",
              "351: intc_0",
              "352: bytec 4",
              "353: app_local_get_ex",
              "354: intc_0",
              "355: cover 2",
              "356: select",
              "357: assert",
              "360: dup",
              "361: intc_0",
              "362: bytec 5",
              "363: app_local_get_ex",
              "364: intc_0",
              "365: cover 2",
              "366: select",
              "369: intc_2",
              "374: ==",
              "375: assert",
              "380: dup",
              "381: intc_0",
              "384: bytec 6",
              "389: app_local_get_ex",
              "392: intc_0",
              "397: cover 2",
              "398: select",
              "401: intc_2",
              "408: ==",
              "409: assert",
              "412: intc_0",
              "413: assert",
              "418: intc_0",
              "421: bytec_2",
              "426: app_local_get_ex",
              "429: bytec 9",
              "434: cover 2",
              "435: select",
              "438: bytec 7",
              "445: ==",
              "446: assert",
              "449: bytec_1",
              "450: log",
              "451: intc_1",
              "452: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "456: maybe_local_data_example:",
              "459: txna ApplicationArgs 1",
              "462: dup",
              "463: intc_0",
              "464: bytec_0",
              "465: app_local_get_ex",
              "468: assert",
              "471: intc_2",
              "472: ==",
              "473: assert",
              "476: dup",
              "477: intc_0",
              "478: bytec_3",
              "479: app_local_get_ex",
              "482: assert",
              "485: bytec 7",
              "486: ==",
              "487: assert",
              "490: dup",
              "491: intc_0",
              "492: bytec 4",
              "493: app_local_get_ex",
              "496: assert",
              "499: assert",
              "502: dup",
              "503: intc_0",
              "504: bytec 5",
              "505: app_local_get_ex",
              "508: assert",
              "511: intc_2",
              "512: ==",
              "513: assert",
              "516: dup",
              "517: intc_0",
              "518: bytec 6",
              "519: app_local_get_ex",
              "522: assert",
              "525: intc_2",
              "526: ==",
              "527: assert",
              "530: intc_0",
              "531: bytec_2",
              "532: app_local_get_ex",
              "535: assert",
              "538: intc_0",
              "539: assert",
              "540: bytec 7",
              "541: ==",
              "542: assert",
              "545: bytec_1",
              "546: log",
              "547: intc_1",
              "548: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "552: set_local_int:",
              "556: txna ApplicationArgs 1",
              "557: txna ApplicationArgs 2",
              "558: btoi",
              "561: bytec_0",
              "562: swap",
              "563: app_local_put",
              "567: intc_1",
              "568: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "572: set_local_data_example:",
              "576: txna ApplicationArgs 1",
              "577: txna ApplicationArgs 2",
              "578: btoi",
              "579: txna ApplicationArgs 3",
              "580: txna ApplicationArgs 4",
              "581: btoi",
              "582: txna ApplicationArgs 5",
              "583: extract 2 0",
              "584: txna ApplicationArgs 6",
              "585: intc_0",
              "586: getbit",
              "589: dig 5",
              "590: bytec_3",
              "591: uncover 3",
              "592: app_local_put",
              "595: dig 4",
              "596: bytec 4",
              "597: uncover 2",
              "598: app_local_put",
              "601: dig 3",
              "602: bytec 5",
              "603: uncover 4",
              "604: app_local_put",
              "607: dig 2",
              "608: bytec 6",
              "609: uncover 2",
              "610: app_local_put",
              "613: bytec_2",
              "614: swap",
              "615: app_local_put",
              "619: bytec_1",
              "620: log",
              "621: intc_1",
              "622: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "626: delete_local_data:",
              "630: txna ApplicationArgs 1",
              "633: bytec_2",
              "634: app_local_del",
              "638: intc_1",
              "639: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "643: delete_local_data_example:",
              "647: txna ApplicationArgs 1",
              "650: dup",
              "651: bytec_0",
              "652: app_local_del",
              "655: dup",
              "656: bytec_3",
              "657: app_local_del",
              "660: dup",
              "661: bytec 4",
              "662: app_local_del",
              "665: dup",
              "666: bytec 5",
              "667: app_local_del",
              "670: dup",
              "671: bytec 6",
              "672: app_local_del",
              "675: bytec_2",
              "676: app_local_del",
              "680: bytec_1",
              "681: log",
              "682: intc_1",
              "683: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 13,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "32: contains_local_data:",
              "36: txna ApplicationArgs 1",
              "39: intc_0",
              "40: bytec_0",
              "41: app_local_get_ex",
              "42: bury 1",
              "43: assert",
              "47: bytec_1",
              "48: log",
              "49: intc_1",
              "50: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "54: contains_local_data_example:",
              "58: txna ApplicationArgs 1",
              "61: dup",
              "62: intc_0",
              "63: bytec_0",
              "64: app_local_get_ex",
              "65: bury 1",
              "66: assert",
              "69: dup",
              "70: intc_0",
              "71: bytec_3",
              "72: app_local_get_ex",
              "73: bury 1",
              "74: assert",
              "77: dup",
              "78: intc_0",
              "79: bytec 4",
              "80: app_local_get_ex",
              "81: bury 1",
              "82: assert",
              "85: dup",
              "86: intc_0",
              "87: bytec 5",
              "88: app_local_get_ex",
              "89: bury 1",
              "90: assert",
              "93: dup",
              "94: intc_0",
              "95: bytec 6",
              "96: app_local_get_ex",
              "97: bury 1",
              "98: assert",
              "101: intc_0",
              "102: bytec_2",
              "103: app_local_get_ex",
              "104: bury 1",
              "105: assert",
              "109: bytec_1",
              "110: log",
              "111: intc_1",
              "112: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "116: get_item_local_data:",
              "120: txna ApplicationArgs 1",
              "123: intc_0",
              "124: bytec_0",
              "125: app_local_get_ex",
              "126: assert",
              "130: itob",
              "131: bytec 8",
              "132: swap",
              "133: concat",
              "134: log",
              "135: intc_1",
              "136: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "140: get_local_data_with_default_int:",
              "144: txna ApplicationArgs 1",
              "147: intc_0",
              "148: bytec_0",
              "149: app_local_get_ex",
              "150: intc_0",
              "151: cover 2",
              "152: select",
              "156: itob",
              "157: bytec 8",
              "158: swap",
              "159: concat",
              "160: log",
              "161: intc_1",
              "162: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "185: intc_0",
              "186: bury 1"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "208: get_item_local_data_example:",
              "212: txna ApplicationArgs 1",
              "215: dup",
              "216: intc_0",
              "217: bytec_0",
              "218: app_local_get_ex",
              "219: assert",
              "224: intc_2",
              "225: ==",
              "226: assert",
              "229: dup",
              "230: intc_0",
              "231: bytec_3",
              "232: app_local_get_ex",
              "233: assert",
              "234: bytec 7",
              "235: ==",
              "236: assert",
              "239: dup",
              "240: intc_0",
              "241: bytec 4",
              "242: app_local_get_ex",
              "243: assert",
              "244: assert",
              "247: dup",
              "248: intc_0",
              "249: bytec 5",
              "250: app_local_get_ex",
              "251: assert",
              "252: intc_2",
              "253: ==",
              "254: assert",
              "257: dup",
              "258: intc_0",
              "259: bytec 6",
              "260: app_local_get_ex",
              "261: assert",
              "264: intc_2",
              "269: ==",
              "270: assert",
              "273: intc_0",
              "274: bytec_2",
              "275: app_local_get_ex",
              "276: assert",
              "277: intc_0",
              "278: assert",
              "279: bytec 7",
              "280: ==",
              "281: assert",
              "285: bytec_1",
              "286: log",
              "287: intc_1",
              "288: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "292: get_local_data_with_default:",
              "295: txna ApplicationArgs 1",
              "298: dup",
              "299: intc_0",
              "300: bytec_0",
              "301: app_local_get_ex",
              "302: intc_0",
              "303: cover 2",
              "304: select",
              "309: intc_2",
              "310: ==",
              "311: assert",
              "316: dup",
              "317: intc_0",
              "320: bytec_3",
              "325: app_local_get_ex",
              "328: bytec 9",
              "333: cover 2",
              "334: select",
              "339: bytec 7",
              "346: ==",
              "347: assert",
              "350: dup",
              "351: intc_0",
              "352: bytec 4",
              "353: app_local_get_ex",
              "354: intc_0",
              "355: cover 2",
              "356: select",
              "357: assert",
              "360: dup",
              "361: intc_0",
              "362: bytec 5",
              "363: app_local_get_ex",
              "364: intc_0",
              "365: cover 2",
              "366: select",
              "369: intc_2",
              "374: ==",
              "375: assert",
              "380: dup",
              "381: intc_0",
              "384: bytec 6",
              "389: app_local_get_ex",
              "392: intc_0",
              "397: cover 2",
              "398: select",
              "401: intc_2",
              "408: ==",
              "409: assert",
              "412: intc_0",
              "413: assert",
              "418: intc_0",
              "421: bytec_2",
              "426: app_local_get_ex",
              "429: bytec 9",
              "434: cover 2",
              "435: select",
              "438: bytec 7",
              "445: ==",
              "446: assert",
              "449: bytec_1",
              "450: log",
              "451: intc_1",
              "452: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "456: maybe_local_data_example:",
              "459: txna ApplicationArgs 1",
              "462: dup",
              "463: intc_0",
              "464: bytec_0",
              "465: app_local_get_ex",
              "468: assert",
              "471: intc_2",
              "472: ==",
              "473: assert",
              "476: dup",
              "477: intc_0",
              "478: bytec_3",
              "479: app_local_get_ex",
              "482: assert",
              "485: bytec 7",
              "486: ==",
              "487: assert",
              "490: dup",
              "491: intc_0",
              "492: bytec 4",
              "493: app_local_get_ex",
              "496: assert",
              "499: assert",
              "502: dup",
              "503: intc_0",
              "504: bytec 5",
              "505: app_local_get_ex",
              "508: assert",
              "511: intc_2",
              "512: ==",
              "513: assert",
              "516: dup",
              "517: intc_0",
              "518: bytec 6",
              "519: app_local_get_ex",
              "522: assert",
              "525: intc_2",
              "526: ==",
              "527: assert",
              "530: intc_0",
              "531: bytec_2",
              "532: app_local_get_ex",
              "535: assert",
              "538: intc_0",
              "539: assert",
              "540: bytec 7",
              "541: ==",
              "542: assert",
              "545: bytec_1",
              "546: log",
              "547: intc_1",
              "548: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "552: set_local_int:",
              "556: txna ApplicationArgs 1",
              "557: txna ApplicationArgs 2",
              "558: btoi",
              "561: bytec_0",
              "562: swap",
              "563: app_local_put",
              "567: intc_1",
              "568: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "572: set_local_data_example:",
              "576: txna ApplicationArgs 1",
              "577: txna ApplicationArgs 2",
              "578: btoi",
              "579: txna ApplicationArgs 3",
              "580: txna ApplicationArgs 4",
              "581: btoi",
              "582: txna ApplicationArgs 5",
              "583: extract 2 0",
              "584: txna ApplicationArgs 6",
              "585: intc_0",
              "586: getbit",
              "589: dig 5",
              "590: bytec_3",
              "591: uncover 3",
              "592: app_local_put",
              "595: dig 4",
              "596: bytec 4",
              "597: uncover 2",
              "598: app_local_put",
              "601: dig 3",
              "602: bytec 5",
              "603: uncover 4",
              "604: app_local_put",
              "607: dig 2",
              "608: bytec 6",
              "609: uncover 2",
              "610: app_local_put",
              "613: bytec_2",
              "614: swap",
              "615: app_local_put",
              "619: bytec_1",
              "620: log",
              "621: intc_1",
              "622: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "626: delete_local_data:",
              "630: txna ApplicationArgs 1",
              "633: bytec_2",
              "634: app_local_del",
              "638: intc_1",
              "639: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "643: delete_local_data_example:",
              "647: txna ApplicationArgs 1",
              "650: dup",
              "651: bytec_0",
              "652: app_local_del",
              "655: dup",
              "656: bytec_3",
              "657: app_local_del",
              "660: dup",
              "661: bytec 4",
              "662: app_local_del",
              "665: dup",
              "666: bytec 5",
              "667: app_local_del",
              "670: dup",
              "671: bytec 6",
              "672: app_local_del",
              "675: bytec_2",
              "676: app_local_del",
              "680: bytec_1",
              "681: log",
              "682: intc_1",
              "683: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 13,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "32: contains_local_data:",
              "36: txna ApplicationArgs 1",
              "39: intc_0",
              "40: bytec_0",
              "41: app_local_get_ex",
              "42: bury 1",
              "43: assert",
              "47: bytec_1",
              "48: log",
              "49: intc_1",
              "50: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "54: contains_local_data_example:",
              "58: txna ApplicationArgs 1",
              "61: dup",
              "62: intc_0",
              "63: bytec_0",
              "64: app_local_get_ex",
              "65: bury 1",
              "66: assert",
              "69: dup",
              "70: intc_0",
              "71: bytec_3",
              "72: app_local_get_ex",
              "73: bury 1",
              "74: assert",
              "77: dup",
              "78: intc_0",
              "79: bytec 4",
              "80: app_local_get_ex",
              "81: bury 1",
              "82: assert",
              "85: dup",
              "86: intc_0",
              "87: bytec 5",
              "88: app_local_get_ex",
              "89: bury 1",
              "90: assert",
              "93: dup",
              "94: intc_0",
              "95: bytec 6",
              "96: app_local_get_ex",
              "97: bury 1",
              "98: assert",
              "101: intc_0",
              "102: bytec_2",
              "103: app_local_get_ex",
              "104: bury 1",
              "105: assert",
              "109: bytec_1",
              "110: log",
              "111: intc_1",
              "112: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "116: get_item_local_data:",
              "120: txna ApplicationArgs 1",
              "123: intc_0",
              "124: bytec_0",
              "125: app_local_get_ex",
              "126: assert",
              "130: itob",
              "131: bytec 8",
              "132: swap",
              "133: concat",
              "134: log",
              "135: intc_1",
              "136: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "140: get_local_data_with_default_int:",
              "144: txna ApplicationArgs 1",
              "147: intc_0",
              "148: bytec_0",
              "149: app_local_get_ex",
              "150: intc_0",
              "151: cover 2",
              "152: select",
              "156: itob",
              "157: bytec 8",
              "158: swap",
              "159: concat",
              "160: log",
              "161: intc_1",
              "162: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "185: intc_0",
              "186: bury 1"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "208: get_item_local_data_example:",
              "212: txna ApplicationArgs 1",
              "215: dup",
              "216: intc_0",
              "217: bytec_0",
              "218: app_local_get_ex",
              "219: assert",
              "224: intc_2",
              "225: ==",
              "226: assert",
              "229: dup",
              "230: intc_0",
              "231: bytec_3",
              "232: app_local_get_ex",
              "233: assert",
              "234: bytec 7",
              "235: ==",
              "236: assert",
              "239: dup",
              "240: intc_0",
              "241: bytec 4",
              "242: app_local_get_ex",
              "243: assert",
              "244: assert",
              "247: dup",
              "248: intc_0",
              "249: bytec 5",
              "250: app_local_get_ex",
              "251: assert",
              "252: intc_2",
              "253: ==",
              "254: assert",
              "257: dup",
              "258: intc_0",
              "259: bytec 6",
              "260: app_local_get_ex",
              "261: assert",
              "264: intc_2",
              "269: ==",
              "270: assert",
              "273: intc_0",
              "274: bytec_2",
              "275: app_local_get_ex",
              "276: assert",
              "277: intc_0",
              "278: assert",
              "279: bytec 7",
              "280: ==",
              "281: assert",
              "285: bytec_1",
              "286: log",
              "287: intc_1",
              "288: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "292: get_local_data_with_default:",
              "295: txna ApplicationArgs 1",
              "298: dup",
              "299: intc_0",
              "300: bytec_0",
              "301: app_local_get_ex",
              "302: intc_0",
              "303: cover 2",
              "304: select",
              "309: intc_2",
              "310: ==",
              "311: assert",
              "316: dup",
              "317: intc_0",
              "320: bytec_3",
              "325: app_local_get_ex",
              "328: bytec 9",
              "333: cover 2",
              "334: select",
              "339: bytec 7",
              "346: ==",
              "347: assert",
              "350: dup",
              "351: intc_0",
              "352: bytec 4",
              "353: app_local_get_ex",
              "354: intc_0",
              "355: cover 2",
              "356: select",
              "357: assert",
              "360: dup",
              "361: intc_0",
              "362: bytec 5",
              "363: app_local_get_ex",
              "364: intc_0",
              "365: cover 2",
              "366: select",
              "369: intc_2",
              "374: ==",
              "375: assert",
              "380: dup",
              "381: intc_0",
              "384: bytec 6",
              "389: app_local_get_ex",
              "392: intc_0",
              "397: cover 2",
              "398: select",
              "401: intc_2",
              "408: ==",
              "409: assert",
              "412: intc_0",
              "413: assert",
              "418: intc_0",
              "421: bytec_2",
              "426: app_local_get_ex",
              "429: bytec 9",
              "434: cover 2",
              "435: select",
              "438: bytec 7",
              "445: ==",
              "446: assert",
              "449: bytec_1",
              "450: log",
              "451: intc_1",
              "452: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "456: maybe_local_data_example:",
              "459: txna ApplicationArgs 1",
              "462: dup",
              "463: intc_0",
              "464: bytec_0",
              "465: app_local_get_ex",
              "468: assert",
              "471: intc_2",
              "472: ==",
              "473: assert",
              "476: dup",
              "477: intc_0",
              "478: bytec_3",
              "479: app_local_get_ex",
              "482: assert",
              "485: bytec 7",
              "486: ==",
              "487: assert",
              "490: dup",
              "491: intc_0",
              "492: bytec 4",
              "493: app_local_get_ex",
              "496: assert",
              "499: assert",
              "502: dup",
              "503: intc_0",
              "504: bytec 5",
              "505: app_local_get_ex",
              "508: assert",
              "511: intc_2",
              "512: ==",
              "513: assert",
              "516: dup",
              "517: intc_0",
              "518: bytec 6",
              "519: app_local_get_ex",
              "522: assert",
              "525: intc_2",
              "526: ==",
              "527: assert",
              "530: intc_0",
              "531: bytec_2",
              "532: app_local_get_ex",
              "535: assert",
              "538: intc_0",
              "539: assert",
              "540: bytec 7",
              "541: ==",
              "542: assert",
              "545: bytec_1",
              "546: log",
              "547: intc_1",
              "548: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "552: set_local_int:",
              "556: txna ApplicationArgs 1",
              "557: txna ApplicationArgs 2",
              "558: btoi",
              "561: bytec_0",
              "562: swap",
              "563: app_local_put",
              "567: intc_1",
              "568: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "572: set_local_data_example:",
              "576: txna ApplicationArgs 1",
              "577: txna ApplicationArgs 2",
              "578: btoi",
              "579: txna ApplicationArgs 3",
              "580: txna ApplicationArgs 4",
              "581: btoi",
              "582: txna ApplicationArgs 5",
              "583: extract 2 0",
              "584: txna ApplicationArgs 6",
              "585: intc_0",
              "586: getbit",
              "589: dig 5",
              "590: bytec_3",
              "591: uncover 3",
              "592: app_local_put",
              "595: dig 4",
              "596: bytec 4",
              "597: uncover 2",
              "598: app_local_put",
              "601: dig 3",
              "602: bytec 5",
              "603: uncover 4",
              "604: app_local_put",
              "607: dig 2",
              "608: bytec 6",
              "609: uncover 2",
              "610: app_local_put",
              "613: bytec_2",
              "614: swap",
              "615: app_local_put",
              "619: bytec_1",
              "620: log",
              "621: intc_1",
              "622: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "626: delete_local_data:",
              "630: txna ApplicationArgs 1",
              "633: bytec_2",
              "634: app_local_del",
              "638: intc_1",
              "639: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "643: delete_local_data_example:",
              "647: txna ApplicationArgs 1",
              "650: dup",
              "651: bytec_0",
              "652: app_local_del",
              "655: dup",
              "656: bytec_3",
              "657: app_local_del",
              "660: dup",
              "661: bytec 4",
              "662: app_local_del",
              "665: dup",
              "666: bytec 5",
              "667: app_local_del",
              "670: dup",
              "671: bytec 6",
              "672: app_local_del",
              "675: bytec_2",
              "676: app_local_del",
              "680: bytec_1",
              "681: log",
              "682: intc_1",
              "683: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 14,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "32: contains_local_data:",
              "36: txna ApplicationArgs 1",
              "39: intc_0",
              "40: bytec_0",
              "41: app_local_get_ex",
              "42: bury 1",
              "43: assert",
              "47: bytec_1",
              "48: log",
              "49: intc_1",
              "50: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "54: contains_local_data_example:",
              "58: txna ApplicationArgs 1",
              "61: dup",
              "62: intc_0",
              "63: bytec_0",
              "64: app_local_get_ex",
              "65: bury 1",
              "66: assert",
              "69: dup",
              "70: intc_0",
              "71: bytec_3",
              "72: app_local_get_ex",
              "73: bury 1",
              "74: assert",
              "77: dup",
              "78: intc_0",
              "79: bytec 4",
              "80: app_local_get_ex",
              "81: bury 1",
              "82: assert",
              "85: dup",
              "86: intc_0",
              "87: bytec 5",
              "88: app_local_get_ex",
              "89: bury 1",
              "90: assert",
              "93: dup",
              "94: intc_0",
              "95: bytec 6",
              "96: app_local_get_ex",
              "97: bury 1",
              "98: assert",
              "101: intc_0",
              "102: bytec_2",
              "103: app_local_get_ex",
              "104: bury 1",
              "105: assert",
              "109: bytec_1",
              "110: log",
              "111: intc_1",
              "112: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "116: get_item_local_data:",
              "120: txna ApplicationArgs 1",
              "123: intc_0",
              "124: bytec_0",
              "125: app_local_get_ex",
              "126: assert",
              "130: itob",
              "131: bytec 8",
              "132: swap",
              "133: concat",
              "134: log",
              "135: intc_1",
              "136: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "140: get_local_data_with_default_int:",
              "144: txna ApplicationArgs 1",
              "147: intc_0",
              "148: bytec_0",
              "149: app_local_get_ex",
              "150: intc_0",
              "151: cover 2",
              "152: select",
              "156: itob",
              "157: bytec 8",
              "158: swap",
              "159: concat",
              "160: log",
              "161: intc_1",
              "162: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "185: intc_0",
              "186: bury 1"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "208: get_item_local_data_example:",
              "212: txna ApplicationArgs 1",
              "215: dup",
              "216: intc_0",
              "217: bytec_0",
              "218: app_local_get_ex",
              "219: assert",
              "224: intc_2",
              "225: ==",
              "226: assert",
              "229: dup",
              "230: intc_0",
              "231: bytec_3",
              "232: app_local_get_ex",
              "233: assert",
              "234: bytec 7",
              "235: ==",
              "236: assert",
              "239: dup",
              "240: intc_0",
              "241: bytec 4",
              "242: app_local_get_ex",
              "243: assert",
              "244: assert",
              "247: dup",
              "248: intc_0",
              "249: bytec 5",
              "250: app_local_get_ex",
              "251: assert",
              "252: intc_2",
              "253: ==",
              "254: assert",
              "257: dup",
              "258: intc_0",
              "259: bytec 6",
              "260: app_local_get_ex",
              "261: assert",
              "264: intc_2",
              "269: ==",
              "270: assert",
              "273: intc_0",
              "274: bytec_2",
              "275: app_local_get_ex",
              "276: assert",
              "277: intc_0",
              "278: assert",
              "279: bytec 7",
              "280: ==",
              "281: assert",
              "285: bytec_1",
              "286: log",
              "287: intc_1",
              "288: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "292: get_local_data_with_default:",
              "295: txna ApplicationArgs 1",
              "298: dup",
              "299: intc_0",
              "300: bytec_0",
              "301: app_local_get_ex",
              "302: intc_0",
              "303: cover 2",
              "304: select",
              "309: intc_2",
              "310: ==",
              "311: assert",
              "316: dup",
              "317: intc_0",
              "320: bytec_3",
              "325: app_local_get_ex",
              "328: bytec 9",
              "333: cover 2",
              "334: select",
              "339: bytec 7",
              "346: ==",
              "347: assert",
              "350: dup",
              "351: intc_0",
              "352: bytec 4",
              "353: app_local_get_ex",
              "354: intc_0",
              "355: cover 2",
              "356: select",
              "357: assert",
              "360: dup",
              "361: intc_0",
              "362: bytec 5",
              "363: app_local_get_ex",
              "364: intc_0",
              "365: cover 2",
              "366: select",
              "369: intc_2",
              "374: ==",
              "375: assert",
              "380: dup",
              "381: intc_0",
              "384: bytec 6",
              "389: app_local_get_ex",
              "392: intc_0",
              "397: cover 2",
              "398: select",
              "401: intc_2",
              "408: ==",
              "409: assert",
              "412: intc_0",
              "413: assert",
              "418: intc_0",
              "421: bytec_2",
              "426: app_local_get_ex",
              "429: bytec 9",
              "434: cover 2",
              "435: select",
              "438: bytec 7",
              "445: ==",
              "446: assert",
              "449: bytec_1",
              "450: log",
              "451: intc_1",
              "452: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "456: maybe_local_data_example:",
              "459: txna ApplicationArgs 1",
              "462: dup",
              "463: intc_0",
              "464: bytec_0",
              "465: app_local_get_ex",
              "468: assert",
              "471: intc_2",
              "472: ==",
              "473: assert",
              "476: dup",
              "477: intc_0",
              "478: bytec_3",
              "479: app_local_get_ex",
              "482: assert",
              "485: bytec 7",
              "486: ==",
              "487: assert",
              "490: dup",
              "491: intc_0",
              "492: bytec 4",
              "493: app_local_get_ex",
              "496: assert",
              "499: assert",
              "502: dup",
              "503: intc_0",
              "504: bytec 5",
              "505: app_local_get_ex",
              "508: assert",
              "511: intc_2",
              "512: ==",
              "513: assert",
              "516: dup",
              "517: intc_0",
              "518: bytec 6",
              "519: app_local_get_ex",
              "522: assert",
              "525: intc_2",
              "526: ==",
              "527: assert",
              "530: intc_0",
              "531: bytec_2",
              "532: app_local_get_ex",
              "535: assert",
              "538: intc_0",
              "539: assert",
              "540: bytec 7",
              "541: ==",
              "542: assert",
              "545: bytec_1",
              "546: log",
              "547: intc_1",
              "548: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "552: set_local_int:",
              "556: txna ApplicationArgs 1",
              "557: txna ApplicationArgs 2",
              "558: btoi",
              "561: bytec_0",
              "562: swap",
              "563: app_local_put",
              "567: intc_1",
              "568: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "572: set_local_data_example:",
              "576: txna ApplicationArgs 1",
              "577: txna ApplicationArgs 2",
              "578: btoi",
              "579: txna ApplicationArgs 3",
              "580: txna ApplicationArgs 4",
              "581: btoi",
              "582: txna ApplicationArgs 5",
              "583: extract 2 0",
              "584: txna ApplicationArgs 6",
              "585: intc_0",
              "586: getbit",
              "589: dig 5",
              "590: bytec_3",
              "591: uncover 3",
              "592: app_local_put",
              "595: dig 4",
              "596: bytec 4",
              "597: uncover 2",
              "598: app_local_put",
              "601: dig 3",
              "602: bytec 5",
              "603: uncover 4",
              "604: app_local_put",
              "607: dig 2",
              "608: bytec 6",
              "609: uncover 2",
              "610: app_local_put",
              "613: bytec_2",
              "614: swap",
              "615: app_local_put",
              "619: bytec_1",
              "620: log",
              "621: intc_1",
              "622: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "626: delete_local_data:",
              "630: txna ApplicationArgs 1",
              "633: bytec_2",
              "634: app_local_del",
              "638: intc_1",
              "639: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "643: delete_local_data_example:",
              "647: txna ApplicationArgs 1",
              "650: dup",
              "651: bytec_0",
              "652: app_local_del",
              "655: dup",
              "656: bytec_3",
              "657: app_local_del",
              "660: dup",
              "661: bytec 4",
              "662: app_local_del",
              "665: dup",
              "666: bytec 5",
              "667: app_local_del",
              "670: dup",
              "671: bytec 6",
              "672: app_local_del",
              "675: bytec_2",
              "676: app_local_del",
              "680: bytec_1",
              "681: log",
              "682: intc_1",
              "683: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "22: main___algopy_default_create@21:",
              "23: txn OnCompletion",
              "24: !",
              "25: txn ApplicationID",
              "26: !",
              "27: &&",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 14,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "32: contains_local_data:",
              "36: txna ApplicationArgs 1",
              "39: intc_0",
              "40: bytec_0",
              "41: app_local_get_ex",
              "42: bury 1",
              "43: assert",
              "47: bytec_1",
              "48: log",
              "49: intc_1",
              "50: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "54: contains_local_data_example:",
              "58: txna ApplicationArgs 1",
              "61: dup",
              "62: intc_0",
              "63: bytec_0",
              "64: app_local_get_ex",
              "65: bury 1",
              "66: assert",
              "69: dup",
              "70: intc_0",
              "71: bytec_3",
              "72: app_local_get_ex",
              "73: bury 1",
              "74: assert",
              "77: dup",
              "78: intc_0",
              "79: bytec 4",
              "80: app_local_get_ex",
              "81: bury 1",
              "82: assert",
              "85: dup",
              "86: intc_0",
              "87: bytec 5",
              "88: app_local_get_ex",
              "89: bury 1",
              "90: assert",
              "93: dup",
              "94: intc_0",
              "95: bytec 6",
              "96: app_local_get_ex",
              "97: bury 1",
              "98: assert",
              "101: intc_0",
              "102: bytec_2",
              "103: app_local_get_ex",
              "104: bury 1",
              "105: assert",
              "109: bytec_1",
              "110: log",
              "111: intc_1",
              "112: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "116: get_item_local_data:",
              "120: txna ApplicationArgs 1",
              "123: intc_0",
              "124: bytec_0",
              "125: app_local_get_ex",
              "126: assert",
              "130: itob",
              "131: bytec 8",
              "132: swap",
              "133: concat",
              "134: log",
              "135: intc_1",
              "136: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "140: get_local_data_with_default_int:",
              "144: txna ApplicationArgs 1",
              "147: intc_0",
              "148: bytec_0",
              "149: app_local_get_ex",
              "150: intc_0",
              "151: cover 2",
              "152: select",
              "156: itob",
              "157: bytec 8",
              "158: swap",
              "159: concat",
              "160: log",
              "161: intc_1",
              "162: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "185: intc_0",
              "186: bury 1"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "166: maybe_local_data:",
              "170: txna ApplicationArgs 1",
              "174: intc_0",
              "175: bytec_0",
              "176: app_local_get_ex",
              "177: dup",
              "178: uncover 2",
              "179: swap",
              "182: bnz maybe_local_data_after_if_else@3"
            ],
            [
              "188: maybe_local_data_after_if_else@3:",
              "192: dup",
              "193: itob",
              "194: pushbytes 0x00",
              "195: intc_0",
              "196: dig 4",
              "197: setbit",
              "198: concat",
              "199: bytec 8",
              "200: swap",
              "201: concat",
              "202: log",
              "203: intc_1",
              "204: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 12",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "208: get_item_local_data_example:",
              "212: txna ApplicationArgs 1",
              "215: dup",
              "216: intc_0",
              "217: bytec_0",
              "218: app_local_get_ex",
              "219: assert",
              "224: intc_2",
              "225: ==",
              "226: assert",
              "229: dup",
              "230: intc_0",
              "231: bytec_3",
              "232: app_local_get_ex",
              "233: assert",
              "234: bytec 7",
              "235: ==",
              "236: assert",
              "239: dup",
              "240: intc_0",
              "241: bytec 4",
              "242: app_local_get_ex",
              "243: assert",
              "244: assert",
              "247: dup",
              "248: intc_0",
              "249: bytec 5",
              "250: app_local_get_ex",
              "251: assert",
              "252: intc_2",
              "253: ==",
              "254: assert",
              "257: dup",
              "258: intc_0",
              "259: bytec 6",
              "260: app_local_get_ex",
              "261: assert",
              "264: intc_2",
              "269: ==",
              "270: assert",
              "273: intc_0",
              "274: bytec_2",
              "275: app_local_get_ex",
              "276: assert",
              "277: intc_0",
              "278: assert",
              "279: bytec 7",
              "280: ==",
              "281: assert",
              "285: bytec_1",
              "286: log",
              "287: intc_1",
              "288: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "292: get_local_data_with_default:",
              "295: txna ApplicationArgs 1",
              "298: dup",
              "299: intc_0",
              "300: bytec_0",
              "301: app_local_get_ex",
              "302: intc_0",
              "303: cover 2",
              "304: select",
              "309: intc_2",
              "310: ==",
              "311: assert",
              "316: dup",
              "317: intc_0",
              "320: bytec_3",
              "325: app_local_get_ex",
              "328: bytec 9",
              "333: cover 2",
              "334: select",
              "339: bytec 7",
              "346: ==",
              "347: assert",
              "350: dup",
              "351: intc_0",
              "352: bytec 4",
              "353: app_local_get_ex",
              "354: intc_0",
              "355: cover 2",
              "356: select",
              "357: assert",
              "360: dup",
              "361: intc_0",
              "362: bytec 5",
              "363: app_local_get_ex",
              "364: intc_0",
              "365: cover 2",
              "366: select",
              "369: intc_2",
              "374: ==",
              "375: assert",
              "380: dup",
              "381: intc_0",
              "384: bytec 6",
              "389: app_local_get_ex",
              "392: intc_0",
              "397: cover 2",
              "398: select",
              "401: intc_2",
              "408: ==",
              "409: assert",
              "412: intc_0",
              "413: assert",
              "418: intc_0",
              "421: bytec_2",
              "426: app_local_get_ex",
              "429: bytec 9",
              "434: cover 2",
              "435: select",
              "438: bytec 7",
              "445: ==",
              "446: assert",
              "449: bytec_1",
              "450: log",
              "451: intc_1",
              "452: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 14",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "456: maybe_local_data_example:",
              "459: txna ApplicationArgs 1",
              "462: dup",
              "463: intc_0",
              "464: bytec_0",
              "465: app_local_get_ex",
              "468: assert",
              "471: intc_2",
              "472: ==",
              "473: assert",
              "476: dup",
              "477: intc_0",
              "478: bytec_3",
              "479: app_local_get_ex",
              "482: assert",
              "485: bytec 7",
              "486: ==",
              "487: assert",
              "490: dup",
              "491: intc_0",
              "492: bytec 4",
              "493: app_local_get_ex",
              "496: assert",
              "499: assert",
              "502: dup",
              "503: intc_0",
              "504: bytec 5",
              "505: app_local_get_ex",
              "508: assert",
              "511: intc_2",
              "512: ==",
              "513: assert",
              "516: dup",
              "517: intc_0",
              "518: bytec 6",
              "519: app_local_get_ex",
              "522: assert",
              "525: intc_2",
              "526: ==",
              "527: assert",
              "530: intc_0",
              "531: bytec_2",
              "532: app_local_get_ex",
              "535: assert",
              "538: intc_0",
              "539: assert",
              "540: bytec 7",
              "541: ==",
              "542: assert",
              "545: bytec_1",
              "546: log",
              "547: intc_1",
              "548: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 15",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "552: set_local_int:",
              "556: txna ApplicationArgs 1",
              "557: txna ApplicationArgs 2",
              "558: btoi",
              "561: bytec_0",
              "562: swap",
              "563: app_local_put",
              "567: intc_1",
              "568: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 16",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "572: set_local_data_example:",
              "576: txna ApplicationArgs 1",
              "577: txna ApplicationArgs 2",
              "578: btoi",
              "579: txna ApplicationArgs 3",
              "580: txna ApplicationArgs 4",
              "581: btoi",
              "582: txna ApplicationArgs 5",
              "583: extract 2 0",
              "584: txna ApplicationArgs 6",
              "585: intc_0",
              "586: getbit",
              "589: dig 5",
              "590: bytec_3",
              "591: uncover 3",
              "592: app_local_put",
              "595: dig 4",
              "596: bytec 4",
              "597: uncover 2",
              "598: app_local_put",
              "601: dig 3",
              "602: bytec 5",
              "603: uncover 4",
              "604: app_local_put",
              "607: dig 2",
              "608: bytec 6",
              "609: uncover 2",
              "610: app_local_put",
              "613: bytec_2",
              "614: swap",
              "615: app_local_put",
              "619: bytec_1",
              "620: log",
              "621: intc_1",
              "622: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 17",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "626: delete_local_data:",
              "630: txna ApplicationArgs 1",
              "633: bytec_2",
              "634: app_local_del",
              "638: intc_1",
              "639: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 18",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x570d296b 0x92331992 0x2ab7c72e 0x7f09ae89 0x0eb84838 0x8ee78f12 0xfe174ae3 0xcde8cbe6 0x859dc9f3 0xf61fd76c 0x77ecd4e9 0xa3d3d255",
              "18: txna ApplicationArgs 0",
              "19: match contains_local_data contains_local_data_example get_item_local_data get_local_data_with_default_int maybe_local_data get_item_local_data_example get_local_data_with_default maybe_local_data_example set_local_int set_local_data_example delete_local_data delete_local_data_example"
            ],
            [
              "643: delete_local_data_example:",
              "647: txna ApplicationArgs 1",
              "650: dup",
              "651: bytec_0",
              "652: app_local_del",
              "655: dup",
              "656: bytec_3",
              "657: app_local_del",
              "660: dup",
              "661: bytec 4",
              "662: app_local_del",
              "665: dup",
              "666: bytec 5",
              "667: app_local_del",
              "670: dup",
              "671: bytec 6",
              "672: app_local_del",
              "675: bytec_2",
              "676: app_local_del",
              "680: bytec_1",
              "681: log",
              "682: intc_1",
              "683: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 1 10",
              "7: bytecblock \"local_int\" 0x151f7c7580 \"local_account\" \"local_bytes\" \"local_bool\" \"local_asset\" \"local_application\" 0x48656c6c6f 0x151f7c75 0x44656661756c742056616c7565",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@21"
            ],
            [
              "22: main___algopy_default_create@21:",
              "23: txn OnCompletion",
              "24: !",
              "25: txn ApplicationID",
              "26: !",
              "27: &&",
              "28: return"
            ]
          ]
        }
      ]
    }
  ]
}