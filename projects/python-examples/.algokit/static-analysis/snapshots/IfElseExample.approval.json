{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "45: pushbytes \"This account is rich!\""
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "73: pushbytes \"This account is doing well.\"",
              "77: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "79: is_rich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "86: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "101: pushbytes \"Even\""
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "120: is_even_ternary_false@3:",
              "123: pushbytes \"Odd\"",
              "124: b is_even_ternary_merge@4"
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "45: pushbytes \"This account is rich!\""
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "73: pushbytes \"This account is doing well.\"",
              "77: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "79: is_rich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "86: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "101: pushbytes \"Even\""
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "120: is_even_ternary_false@3:",
              "123: pushbytes \"Odd\"",
              "124: b is_even_ternary_merge@4"
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "45: pushbytes \"This account is rich!\""
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "73: pushbytes \"This account is doing well.\"",
              "77: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "79: is_rich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "86: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "101: pushbytes \"Even\""
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "120: is_even_ternary_false@3:",
              "123: pushbytes \"Odd\"",
              "124: b is_even_ternary_merge@4"
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "45: pushbytes \"This account is rich!\""
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "73: pushbytes \"This account is doing well.\"",
              "77: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "79: is_rich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "86: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "101: pushbytes \"Even\""
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "120: is_even_ternary_false@3:",
              "123: pushbytes \"Odd\"",
              "124: b is_even_ternary_merge@4"
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 6,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "45: pushbytes \"This account is rich!\""
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "73: pushbytes \"This account is doing well.\"",
              "77: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "79: is_rich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "86: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "101: pushbytes \"Even\""
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "120: is_even_ternary_false@3:",
              "123: pushbytes \"Odd\"",
              "124: b is_even_ternary_merge@4"
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "21: main___algopy_default_create@9:",
              "22: txn OnCompletion",
              "23: !",
              "24: txn ApplicationID",
              "25: !",
              "26: &&",
              "27: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 6,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5 -> 6 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "45: pushbytes \"This account is rich!\""
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 9 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "73: pushbytes \"This account is doing well.\"",
              "77: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 5 -> 8 -> 10 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "31: is_rich:",
              "35: txna ApplicationArgs 1",
              "36: btoi",
              "37: dup",
              "40: pushint 1000",
              "41: >",
              "42: bz is_rich_else_body@3"
            ],
            [
              "64: is_rich_else_body@3:",
              "67: dup",
              "68: pushint 100",
              "69: >",
              "70: bz is_rich_else_body@5"
            ],
            [
              "79: is_rich_else_body@5:",
              "82: pushbytes \"This account is poor :(\"",
              "86: b is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6"
            ],
            [
              "47: is_rich_after_inlined_smart_contracts.control_flow.contract.IfElseExample.is_rich@6:",
              "51: dup",
              "52: len",
              "53: itob",
              "54: extract 6 2",
              "55: swap",
              "56: concat",
              "57: bytec_0",
              "58: swap",
              "59: concat",
              "60: log",
              "61: pushint 1",
              "62: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 12 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "101: pushbytes \"Even\""
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 11 -> 14 -> 13",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "11: txn OnCompletion",
              "12: !",
              "13: assert",
              "14: txn ApplicationID",
              "15: assert",
              "16: pushbytess 0x37c01090 0x6632c2d6",
              "17: txna ApplicationArgs 0",
              "18: match is_rich is_even"
            ],
            [
              "90: is_even:",
              "94: txna ApplicationArgs 1",
              "95: btoi",
              "98: pushint 2",
              "99: %",
              "100: bnz is_even_ternary_false@3"
            ],
            [
              "120: is_even_ternary_false@3:",
              "123: pushbytes \"Odd\"",
              "124: b is_even_ternary_merge@4"
            ],
            [
              "103: is_even_ternary_merge@4:",
              "107: dup",
              "108: len",
              "109: itob",
              "110: extract 6 2",
              "111: swap",
              "112: concat",
              "113: bytec_0",
              "114: swap",
              "115: concat",
              "116: log",
              "117: pushint 1",
              "118: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: bytecblock 0x151f7c75",
              "9: txn NumAppArgs",
              "10: bz main___algopy_default_create@9"
            ],
            [
              "21: main___algopy_default_create@9:",
              "22: txn OnCompletion",
              "23: !",
              "24: txn ApplicationID",
              "25: !",
              "26: &&",
              "27: return"
            ]
          ]
        }
      ]
    }
  ]
}