{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 6,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "32: add_arc4_uint64:",
              "36: txna ApplicationArgs 2",
              "37: txna ApplicationArgs 1",
              "41: btoi",
              "42: swap",
              "43: btoi",
              "44: +",
              "48: itob",
              "52: bytec_0",
              "53: swap",
              "54: concat",
              "55: log",
              "56: intc_0",
              "57: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "61: add_arc4_uint_n:",
              "65: txna ApplicationArgs 1",
              "66: txna ApplicationArgs 2",
              "67: txna ApplicationArgs 3",
              "68: txna ApplicationArgs 4",
              "71: dig 3",
              "72: len",
              "73: intc_0",
              "74: ==",
              "75: assert",
              "78: dig 2",
              "79: len",
              "80: pushint 2",
              "81: ==",
              "82: assert",
              "85: dig 1",
              "86: len",
              "87: pushint 4",
              "88: ==",
              "89: assert",
              "92: dup",
              "93: len",
              "94: intc_2",
              "95: ==",
              "96: assert",
              "99: uncover 3",
              "100: btoi",
              "101: uncover 3",
              "102: btoi",
              "103: +",
              "104: uncover 2",
              "105: btoi",
              "106: +",
              "107: swap",
              "108: btoi",
              "109: +",
              "112: itob",
              "116: bytec_0",
              "117: swap",
              "118: concat",
              "119: log",
              "120: intc_0",
              "121: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "125: add_arc4_biguint_n:",
              "129: txna ApplicationArgs 1",
              "130: txna ApplicationArgs 2",
              "131: txna ApplicationArgs 3",
              "134: dig 2",
              "135: len",
              "136: pushint 16",
              "137: ==",
              "138: assert",
              "141: dig 1",
              "142: len",
              "143: pushint 32",
              "144: ==",
              "145: assert",
              "148: dup",
              "149: len",
              "150: intc_1",
              "151: ==",
              "152: assert",
              "155: cover 2",
              "156: b+",
              "157: b+",
              "160: dup",
              "161: len",
              "162: intc_1",
              "163: <=",
              "164: assert",
              "165: intc_1",
              "166: bzero",
              "167: b|",
              "171: bytec_0",
              "172: swap",
              "173: concat",
              "174: log",
              "175: intc_0",
              "176: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "180: arc4_byte:",
              "184: txna ApplicationArgs 1",
              "187: btoi",
              "188: intc_0",
              "189: +",
              "190: itob",
              "191: dup",
              "192: bitlen",
              "193: intc_2",
              "194: <=",
              "195: assert",
              "196: extract 7 1",
              "200: bytec_0",
              "201: swap",
              "202: concat",
              "203: log",
              "204: intc_0",
              "205: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "209: arc4_address_properties:",
              "213: txna ApplicationArgs 1",
              "216: dup",
              "217: acct_params_get AcctBalance",
              "218: assert",
              "221: swap",
              "222: acct_params_get AcctTotalAssets",
              "223: bury 1",
              "224: assert",
              "228: itob",
              "229: bytec_0",
              "230: swap",
              "231: concat",
              "232: log",
              "233: intc_0",
              "234: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "238: arc4_address_return:",
              "241: bytec_0",
              "242: txna ApplicationArgs 1",
              "243: concat",
              "244: log",
              "245: intc_0",
              "246: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 6,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "32: add_arc4_uint64:",
              "36: txna ApplicationArgs 2",
              "37: txna ApplicationArgs 1",
              "41: btoi",
              "42: swap",
              "43: btoi",
              "44: +",
              "48: itob",
              "52: bytec_0",
              "53: swap",
              "54: concat",
              "55: log",
              "56: intc_0",
              "57: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "61: add_arc4_uint_n:",
              "65: txna ApplicationArgs 1",
              "66: txna ApplicationArgs 2",
              "67: txna ApplicationArgs 3",
              "68: txna ApplicationArgs 4",
              "71: dig 3",
              "72: len",
              "73: intc_0",
              "74: ==",
              "75: assert",
              "78: dig 2",
              "79: len",
              "80: pushint 2",
              "81: ==",
              "82: assert",
              "85: dig 1",
              "86: len",
              "87: pushint 4",
              "88: ==",
              "89: assert",
              "92: dup",
              "93: len",
              "94: intc_2",
              "95: ==",
              "96: assert",
              "99: uncover 3",
              "100: btoi",
              "101: uncover 3",
              "102: btoi",
              "103: +",
              "104: uncover 2",
              "105: btoi",
              "106: +",
              "107: swap",
              "108: btoi",
              "109: +",
              "112: itob",
              "116: bytec_0",
              "117: swap",
              "118: concat",
              "119: log",
              "120: intc_0",
              "121: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "125: add_arc4_biguint_n:",
              "129: txna ApplicationArgs 1",
              "130: txna ApplicationArgs 2",
              "131: txna ApplicationArgs 3",
              "134: dig 2",
              "135: len",
              "136: pushint 16",
              "137: ==",
              "138: assert",
              "141: dig 1",
              "142: len",
              "143: pushint 32",
              "144: ==",
              "145: assert",
              "148: dup",
              "149: len",
              "150: intc_1",
              "151: ==",
              "152: assert",
              "155: cover 2",
              "156: b+",
              "157: b+",
              "160: dup",
              "161: len",
              "162: intc_1",
              "163: <=",
              "164: assert",
              "165: intc_1",
              "166: bzero",
              "167: b|",
              "171: bytec_0",
              "172: swap",
              "173: concat",
              "174: log",
              "175: intc_0",
              "176: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "180: arc4_byte:",
              "184: txna ApplicationArgs 1",
              "187: btoi",
              "188: intc_0",
              "189: +",
              "190: itob",
              "191: dup",
              "192: bitlen",
              "193: intc_2",
              "194: <=",
              "195: assert",
              "196: extract 7 1",
              "200: bytec_0",
              "201: swap",
              "202: concat",
              "203: log",
              "204: intc_0",
              "205: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "209: arc4_address_properties:",
              "213: txna ApplicationArgs 1",
              "216: dup",
              "217: acct_params_get AcctBalance",
              "218: assert",
              "221: swap",
              "222: acct_params_get AcctTotalAssets",
              "223: bury 1",
              "224: assert",
              "228: itob",
              "229: bytec_0",
              "230: swap",
              "231: concat",
              "232: log",
              "233: intc_0",
              "234: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "238: arc4_address_return:",
              "241: bytec_0",
              "242: txna ApplicationArgs 1",
              "243: concat",
              "244: log",
              "245: intc_0",
              "246: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 6,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "32: add_arc4_uint64:",
              "36: txna ApplicationArgs 2",
              "37: txna ApplicationArgs 1",
              "41: btoi",
              "42: swap",
              "43: btoi",
              "44: +",
              "48: itob",
              "52: bytec_0",
              "53: swap",
              "54: concat",
              "55: log",
              "56: intc_0",
              "57: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "61: add_arc4_uint_n:",
              "65: txna ApplicationArgs 1",
              "66: txna ApplicationArgs 2",
              "67: txna ApplicationArgs 3",
              "68: txna ApplicationArgs 4",
              "71: dig 3",
              "72: len",
              "73: intc_0",
              "74: ==",
              "75: assert",
              "78: dig 2",
              "79: len",
              "80: pushint 2",
              "81: ==",
              "82: assert",
              "85: dig 1",
              "86: len",
              "87: pushint 4",
              "88: ==",
              "89: assert",
              "92: dup",
              "93: len",
              "94: intc_2",
              "95: ==",
              "96: assert",
              "99: uncover 3",
              "100: btoi",
              "101: uncover 3",
              "102: btoi",
              "103: +",
              "104: uncover 2",
              "105: btoi",
              "106: +",
              "107: swap",
              "108: btoi",
              "109: +",
              "112: itob",
              "116: bytec_0",
              "117: swap",
              "118: concat",
              "119: log",
              "120: intc_0",
              "121: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "125: add_arc4_biguint_n:",
              "129: txna ApplicationArgs 1",
              "130: txna ApplicationArgs 2",
              "131: txna ApplicationArgs 3",
              "134: dig 2",
              "135: len",
              "136: pushint 16",
              "137: ==",
              "138: assert",
              "141: dig 1",
              "142: len",
              "143: pushint 32",
              "144: ==",
              "145: assert",
              "148: dup",
              "149: len",
              "150: intc_1",
              "151: ==",
              "152: assert",
              "155: cover 2",
              "156: b+",
              "157: b+",
              "160: dup",
              "161: len",
              "162: intc_1",
              "163: <=",
              "164: assert",
              "165: intc_1",
              "166: bzero",
              "167: b|",
              "171: bytec_0",
              "172: swap",
              "173: concat",
              "174: log",
              "175: intc_0",
              "176: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "180: arc4_byte:",
              "184: txna ApplicationArgs 1",
              "187: btoi",
              "188: intc_0",
              "189: +",
              "190: itob",
              "191: dup",
              "192: bitlen",
              "193: intc_2",
              "194: <=",
              "195: assert",
              "196: extract 7 1",
              "200: bytec_0",
              "201: swap",
              "202: concat",
              "203: log",
              "204: intc_0",
              "205: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "209: arc4_address_properties:",
              "213: txna ApplicationArgs 1",
              "216: dup",
              "217: acct_params_get AcctBalance",
              "218: assert",
              "221: swap",
              "222: acct_params_get AcctTotalAssets",
              "223: bury 1",
              "224: assert",
              "228: itob",
              "229: bytec_0",
              "230: swap",
              "231: concat",
              "232: log",
              "233: intc_0",
              "234: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "238: arc4_address_return:",
              "241: bytec_0",
              "242: txna ApplicationArgs 1",
              "243: concat",
              "244: log",
              "245: intc_0",
              "246: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 6,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "32: add_arc4_uint64:",
              "36: txna ApplicationArgs 2",
              "37: txna ApplicationArgs 1",
              "41: btoi",
              "42: swap",
              "43: btoi",
              "44: +",
              "48: itob",
              "52: bytec_0",
              "53: swap",
              "54: concat",
              "55: log",
              "56: intc_0",
              "57: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "61: add_arc4_uint_n:",
              "65: txna ApplicationArgs 1",
              "66: txna ApplicationArgs 2",
              "67: txna ApplicationArgs 3",
              "68: txna ApplicationArgs 4",
              "71: dig 3",
              "72: len",
              "73: intc_0",
              "74: ==",
              "75: assert",
              "78: dig 2",
              "79: len",
              "80: pushint 2",
              "81: ==",
              "82: assert",
              "85: dig 1",
              "86: len",
              "87: pushint 4",
              "88: ==",
              "89: assert",
              "92: dup",
              "93: len",
              "94: intc_2",
              "95: ==",
              "96: assert",
              "99: uncover 3",
              "100: btoi",
              "101: uncover 3",
              "102: btoi",
              "103: +",
              "104: uncover 2",
              "105: btoi",
              "106: +",
              "107: swap",
              "108: btoi",
              "109: +",
              "112: itob",
              "116: bytec_0",
              "117: swap",
              "118: concat",
              "119: log",
              "120: intc_0",
              "121: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "125: add_arc4_biguint_n:",
              "129: txna ApplicationArgs 1",
              "130: txna ApplicationArgs 2",
              "131: txna ApplicationArgs 3",
              "134: dig 2",
              "135: len",
              "136: pushint 16",
              "137: ==",
              "138: assert",
              "141: dig 1",
              "142: len",
              "143: pushint 32",
              "144: ==",
              "145: assert",
              "148: dup",
              "149: len",
              "150: intc_1",
              "151: ==",
              "152: assert",
              "155: cover 2",
              "156: b+",
              "157: b+",
              "160: dup",
              "161: len",
              "162: intc_1",
              "163: <=",
              "164: assert",
              "165: intc_1",
              "166: bzero",
              "167: b|",
              "171: bytec_0",
              "172: swap",
              "173: concat",
              "174: log",
              "175: intc_0",
              "176: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "180: arc4_byte:",
              "184: txna ApplicationArgs 1",
              "187: btoi",
              "188: intc_0",
              "189: +",
              "190: itob",
              "191: dup",
              "192: bitlen",
              "193: intc_2",
              "194: <=",
              "195: assert",
              "196: extract 7 1",
              "200: bytec_0",
              "201: swap",
              "202: concat",
              "203: log",
              "204: intc_0",
              "205: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "209: arc4_address_properties:",
              "213: txna ApplicationArgs 1",
              "216: dup",
              "217: acct_params_get AcctBalance",
              "218: assert",
              "221: swap",
              "222: acct_params_get AcctTotalAssets",
              "223: bury 1",
              "224: assert",
              "228: itob",
              "229: bytec_0",
              "230: swap",
              "231: concat",
              "232: log",
              "233: intc_0",
              "234: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "238: arc4_address_return:",
              "241: bytec_0",
              "242: txna ApplicationArgs 1",
              "243: concat",
              "244: log",
              "245: intc_0",
              "246: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 7,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "32: add_arc4_uint64:",
              "36: txna ApplicationArgs 2",
              "37: txna ApplicationArgs 1",
              "41: btoi",
              "42: swap",
              "43: btoi",
              "44: +",
              "48: itob",
              "52: bytec_0",
              "53: swap",
              "54: concat",
              "55: log",
              "56: intc_0",
              "57: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "61: add_arc4_uint_n:",
              "65: txna ApplicationArgs 1",
              "66: txna ApplicationArgs 2",
              "67: txna ApplicationArgs 3",
              "68: txna ApplicationArgs 4",
              "71: dig 3",
              "72: len",
              "73: intc_0",
              "74: ==",
              "75: assert",
              "78: dig 2",
              "79: len",
              "80: pushint 2",
              "81: ==",
              "82: assert",
              "85: dig 1",
              "86: len",
              "87: pushint 4",
              "88: ==",
              "89: assert",
              "92: dup",
              "93: len",
              "94: intc_2",
              "95: ==",
              "96: assert",
              "99: uncover 3",
              "100: btoi",
              "101: uncover 3",
              "102: btoi",
              "103: +",
              "104: uncover 2",
              "105: btoi",
              "106: +",
              "107: swap",
              "108: btoi",
              "109: +",
              "112: itob",
              "116: bytec_0",
              "117: swap",
              "118: concat",
              "119: log",
              "120: intc_0",
              "121: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "125: add_arc4_biguint_n:",
              "129: txna ApplicationArgs 1",
              "130: txna ApplicationArgs 2",
              "131: txna ApplicationArgs 3",
              "134: dig 2",
              "135: len",
              "136: pushint 16",
              "137: ==",
              "138: assert",
              "141: dig 1",
              "142: len",
              "143: pushint 32",
              "144: ==",
              "145: assert",
              "148: dup",
              "149: len",
              "150: intc_1",
              "151: ==",
              "152: assert",
              "155: cover 2",
              "156: b+",
              "157: b+",
              "160: dup",
              "161: len",
              "162: intc_1",
              "163: <=",
              "164: assert",
              "165: intc_1",
              "166: bzero",
              "167: b|",
              "171: bytec_0",
              "172: swap",
              "173: concat",
              "174: log",
              "175: intc_0",
              "176: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "180: arc4_byte:",
              "184: txna ApplicationArgs 1",
              "187: btoi",
              "188: intc_0",
              "189: +",
              "190: itob",
              "191: dup",
              "192: bitlen",
              "193: intc_2",
              "194: <=",
              "195: assert",
              "196: extract 7 1",
              "200: bytec_0",
              "201: swap",
              "202: concat",
              "203: log",
              "204: intc_0",
              "205: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "209: arc4_address_properties:",
              "213: txna ApplicationArgs 1",
              "216: dup",
              "217: acct_params_get AcctBalance",
              "218: assert",
              "221: swap",
              "222: acct_params_get AcctTotalAssets",
              "223: bury 1",
              "224: assert",
              "228: itob",
              "229: bytec_0",
              "230: swap",
              "231: concat",
              "232: log",
              "233: intc_0",
              "234: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "238: arc4_address_return:",
              "241: bytec_0",
              "242: txna ApplicationArgs 1",
              "243: concat",
              "244: log",
              "245: intc_0",
              "246: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "22: main___algopy_default_create@13:",
              "23: txn OnCompletion",
              "24: !",
              "25: txn ApplicationID",
              "26: !",
              "27: &&",
              "28: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 7,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "32: add_arc4_uint64:",
              "36: txna ApplicationArgs 2",
              "37: txna ApplicationArgs 1",
              "41: btoi",
              "42: swap",
              "43: btoi",
              "44: +",
              "48: itob",
              "52: bytec_0",
              "53: swap",
              "54: concat",
              "55: log",
              "56: intc_0",
              "57: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "61: add_arc4_uint_n:",
              "65: txna ApplicationArgs 1",
              "66: txna ApplicationArgs 2",
              "67: txna ApplicationArgs 3",
              "68: txna ApplicationArgs 4",
              "71: dig 3",
              "72: len",
              "73: intc_0",
              "74: ==",
              "75: assert",
              "78: dig 2",
              "79: len",
              "80: pushint 2",
              "81: ==",
              "82: assert",
              "85: dig 1",
              "86: len",
              "87: pushint 4",
              "88: ==",
              "89: assert",
              "92: dup",
              "93: len",
              "94: intc_2",
              "95: ==",
              "96: assert",
              "99: uncover 3",
              "100: btoi",
              "101: uncover 3",
              "102: btoi",
              "103: +",
              "104: uncover 2",
              "105: btoi",
              "106: +",
              "107: swap",
              "108: btoi",
              "109: +",
              "112: itob",
              "116: bytec_0",
              "117: swap",
              "118: concat",
              "119: log",
              "120: intc_0",
              "121: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 7",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "125: add_arc4_biguint_n:",
              "129: txna ApplicationArgs 1",
              "130: txna ApplicationArgs 2",
              "131: txna ApplicationArgs 3",
              "134: dig 2",
              "135: len",
              "136: pushint 16",
              "137: ==",
              "138: assert",
              "141: dig 1",
              "142: len",
              "143: pushint 32",
              "144: ==",
              "145: assert",
              "148: dup",
              "149: len",
              "150: intc_1",
              "151: ==",
              "152: assert",
              "155: cover 2",
              "156: b+",
              "157: b+",
              "160: dup",
              "161: len",
              "162: intc_1",
              "163: <=",
              "164: assert",
              "165: intc_1",
              "166: bzero",
              "167: b|",
              "171: bytec_0",
              "172: swap",
              "173: concat",
              "174: log",
              "175: intc_0",
              "176: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 8",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "180: arc4_byte:",
              "184: txna ApplicationArgs 1",
              "187: btoi",
              "188: intc_0",
              "189: +",
              "190: itob",
              "191: dup",
              "192: bitlen",
              "193: intc_2",
              "194: <=",
              "195: assert",
              "196: extract 7 1",
              "200: bytec_0",
              "201: swap",
              "202: concat",
              "203: log",
              "204: intc_0",
              "205: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "209: arc4_address_properties:",
              "213: txna ApplicationArgs 1",
              "216: dup",
              "217: acct_params_get AcctBalance",
              "218: assert",
              "221: swap",
              "222: acct_params_get AcctTotalAssets",
              "223: bury 1",
              "224: assert",
              "228: itob",
              "229: bytec_0",
              "230: swap",
              "231: concat",
              "232: log",
              "233: intc_0",
              "234: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 10",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "12: txn OnCompletion",
              "13: !",
              "14: assert",
              "15: txn ApplicationID",
              "16: assert",
              "17: pushbytess 0x05943917 0x845b0685 0xead170cf 0xdcb6897f 0xfddcf44f 0xf2ec8e58",
              "18: txna ApplicationArgs 0",
              "19: match add_arc4_uint64 add_arc4_uint_n add_arc4_biguint_n arc4_byte arc4_address_properties arc4_address_return"
            ],
            [
              "238: arc4_address_return:",
              "241: bytec_0",
              "242: txna ApplicationArgs 1",
              "243: concat",
              "244: log",
              "245: intc_0",
              "246: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 4",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1 64 8",
              "7: bytecblock 0x151f7c75",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@13"
            ],
            [
              "22: main___algopy_default_create@13:",
              "23: txn OnCompletion",
              "24: !",
              "25: txn ApplicationID",
              "26: !",
              "27: &&",
              "28: return"
            ]
          ]
        }
      ]
    }
  ]
}