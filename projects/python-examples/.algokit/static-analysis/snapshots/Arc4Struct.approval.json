{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 8 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "66: pushbytes 0x00010002",
              "67: swap",
              "68: concat",
              "69: bytec_0",
              "70: swap",
              "71: app_global_put"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 10 -> 11 -> 13 -> 14 -> 16 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "89: add_todo_else_body@3:",
              "92: intc_0",
              "93: bytec_0",
              "94: app_global_get_ex",
              "95: assert",
              "96: dup",
              "97: intc_0",
              "98: extract_uint16",
              "99: dup",
              "100: cover 2",
              "101: bury 7",
              "102: extract 2 0",
              "103: bury 9",
              "104: pushbytes 0x0002",
              "105: uncover 2",
              "106: concat",
              "107: bury 6",
              "108: bytec_1",
              "109: bury 7",
              "110: intc_1",
              "111: *",
              "112: bury 1",
              "113: intc_0",
              "114: bury 2"
            ],
            [
              "116: add_todo_for_header@6:",
              "117: dup2",
              "118: <",
              "119: bz add_todo_after_for@8"
            ],
            [
              "138: add_todo_after_for@8:",
              "139: dig 6",
              "140: len",
              "141: bury 3",
              "142: intc_0",
              "143: bury 2"
            ],
            [
              "145: add_todo_for_header@9:",
              "146: dig 1",
              "147: intc_1",
              "148: <",
              "149: bz add_todo_after_for@11"
            ],
            [
              "168: add_todo_after_for@11:",
              "169: dig 3",
              "172: intc_2",
              "173: +",
              "174: itob",
              "175: extract 6 2",
              "176: dig 6",
              "177: concat",
              "178: dig 7",
              "179: dig 2",
              "180: dig 5",
              "181: substring3",
              "182: concat",
              "183: dig 5",
              "184: extract 2 0",
              "185: concat",
              "188: bytec_0",
              "189: swap",
              "190: app_global_put",
              "191: b add_todo_after_if_else@4"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 19 -> 20 -> 21 -> 23 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "222: intc_0",
              "223: bytec_0",
              "224: app_global_get_ex",
              "225: assert",
              "226: dup",
              "227: extract 2 0",
              "228: swap",
              "229: intc_0",
              "230: extract_uint16",
              "231: dig 2",
              "232: dup",
              "233: intc_1",
              "234: *",
              "235: dup",
              "236: bury 13",
              "237: dig 3",
              "238: swap",
              "239: extract_uint16",
              "240: swap",
              "241: intc_2",
              "242: +",
              "243: dup",
              "244: cover 4",
              "245: uncover 2",
              "246: dig 1",
              "247: -",
              "248: dig 3",
              "249: len",
              "250: uncover 2",
              "251: intc_1",
              "252: *",
              "253: dup",
              "254: bury 14",
              "255: dig 4",
              "256: swap",
              "257: extract_uint16",
              "258: uncover 2",
              "259: select",
              "260: substring3",
              "261: dup",
              "262: intc_0",
              "263: extract_uint16",
              "264: dig 1",
              "265: len",
              "266: substring3",
              "267: dig 4",
              "268: ==",
              "269: bz complete_todo_after_if_else@5"
            ],
            [
              "272: intc_0",
              "273: bytec_0",
              "274: app_global_get_ex",
              "275: assert",
              "276: dup",
              "277: extract 2 0",
              "278: dig 1",
              "279: intc_0",
              "280: extract_uint16",
              "281: dig 1",
              "282: dig 13",
              "283: extract_uint16",
              "284: dig 1",
              "285: uncover 5",
              "286: -",
              "287: dig 3",
              "288: len",
              "289: dig 4",
              "290: dig 14",
              "291: dup",
              "292: cover 8",
              "293: extract_uint16",
              "294: dup2",
              "295: uncover 4",
              "296: select",
              "297: dig 5",
              "298: dig 4",
              "299: uncover 2",
              "300: substring3",
              "301: pushint 16",
              "302: intc_2",
              "303: setbit",
              "304: dig 8",
              "305: dup",
              "306: uncover 6",
              "307: <",
              "308: assert",
              "309: uncover 6",
              "310: substring 0 2",
              "311: dup",
              "312: bury 18",
              "313: btoi",
              "314: dup",
              "315: uncover 2",
              "316: -",
              "317: intc_2",
              "318: -",
              "319: dig 4",
              "320: uncover 4",
              "321: uncover 2",
              "322: select",
              "323: dup",
              "324: dig 5",
              "325: -",
              "326: bury 12",
              "327: dig 2",
              "328: len",
              "329: bury 13",
              "330: dig 5",
              "331: intc_0",
              "332: uncover 6",
              "333: substring3",
              "334: uncover 3",
              "335: concat",
              "336: uncover 4",
              "337: uncover 2",
              "338: uncover 4",
              "339: substring3",
              "340: concat",
              "341: bury 13",
              "342: intc_1",
              "343: *",
              "344: bury 5",
              "345: bury 7"
            ],
            [
              "347: complete_todo_for_header@9:",
              "348: dig 6",
              "349: dig 4",
              "350: <",
              "351: bz complete_todo_after_for@11"
            ],
            [
              "373: complete_todo_after_for@11:",
              "374: dig 9",
              "375: dig 11",
              "376: concat",
              "379: bytec_0",
              "380: swap",
              "381: app_global_put"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 26 -> 27 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "395: return_todo:",
              "396: bytec_1",
              "397: dupn 2",
              "400: txna ApplicationArgs 1",
              "401: intc_0",
              "405: dupn 2",
              "408: bytec_0",
              "409: app_global_get_ex",
              "410: assert",
              "411: intc_0",
              "412: extract_uint16",
              "413: intc_0"
            ],
            [
              "415: return_todo_for_header@2:",
              "418: dup",
              "419: dig 2",
              "420: <",
              "421: bz return_todo_after_for@7"
            ],
            [
              "508: return_todo_after_for@7:",
              "511: dig 2",
              "512: assert",
              "515: bytec_3",
              "516: dig 4",
              "517: concat",
              "518: log",
              "519: intc_2",
              "520: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 8 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "66: pushbytes 0x00010002",
              "67: swap",
              "68: concat",
              "69: bytec_0",
              "70: swap",
              "71: app_global_put"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 10 -> 11 -> 13 -> 14 -> 16 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "89: add_todo_else_body@3:",
              "92: intc_0",
              "93: bytec_0",
              "94: app_global_get_ex",
              "95: assert",
              "96: dup",
              "97: intc_0",
              "98: extract_uint16",
              "99: dup",
              "100: cover 2",
              "101: bury 7",
              "102: extract 2 0",
              "103: bury 9",
              "104: pushbytes 0x0002",
              "105: uncover 2",
              "106: concat",
              "107: bury 6",
              "108: bytec_1",
              "109: bury 7",
              "110: intc_1",
              "111: *",
              "112: bury 1",
              "113: intc_0",
              "114: bury 2"
            ],
            [
              "116: add_todo_for_header@6:",
              "117: dup2",
              "118: <",
              "119: bz add_todo_after_for@8"
            ],
            [
              "138: add_todo_after_for@8:",
              "139: dig 6",
              "140: len",
              "141: bury 3",
              "142: intc_0",
              "143: bury 2"
            ],
            [
              "145: add_todo_for_header@9:",
              "146: dig 1",
              "147: intc_1",
              "148: <",
              "149: bz add_todo_after_for@11"
            ],
            [
              "168: add_todo_after_for@11:",
              "169: dig 3",
              "172: intc_2",
              "173: +",
              "174: itob",
              "175: extract 6 2",
              "176: dig 6",
              "177: concat",
              "178: dig 7",
              "179: dig 2",
              "180: dig 5",
              "181: substring3",
              "182: concat",
              "183: dig 5",
              "184: extract 2 0",
              "185: concat",
              "188: bytec_0",
              "189: swap",
              "190: app_global_put",
              "191: b add_todo_after_if_else@4"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 19 -> 20 -> 21 -> 23 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "222: intc_0",
              "223: bytec_0",
              "224: app_global_get_ex",
              "225: assert",
              "226: dup",
              "227: extract 2 0",
              "228: swap",
              "229: intc_0",
              "230: extract_uint16",
              "231: dig 2",
              "232: dup",
              "233: intc_1",
              "234: *",
              "235: dup",
              "236: bury 13",
              "237: dig 3",
              "238: swap",
              "239: extract_uint16",
              "240: swap",
              "241: intc_2",
              "242: +",
              "243: dup",
              "244: cover 4",
              "245: uncover 2",
              "246: dig 1",
              "247: -",
              "248: dig 3",
              "249: len",
              "250: uncover 2",
              "251: intc_1",
              "252: *",
              "253: dup",
              "254: bury 14",
              "255: dig 4",
              "256: swap",
              "257: extract_uint16",
              "258: uncover 2",
              "259: select",
              "260: substring3",
              "261: dup",
              "262: intc_0",
              "263: extract_uint16",
              "264: dig 1",
              "265: len",
              "266: substring3",
              "267: dig 4",
              "268: ==",
              "269: bz complete_todo_after_if_else@5"
            ],
            [
              "272: intc_0",
              "273: bytec_0",
              "274: app_global_get_ex",
              "275: assert",
              "276: dup",
              "277: extract 2 0",
              "278: dig 1",
              "279: intc_0",
              "280: extract_uint16",
              "281: dig 1",
              "282: dig 13",
              "283: extract_uint16",
              "284: dig 1",
              "285: uncover 5",
              "286: -",
              "287: dig 3",
              "288: len",
              "289: dig 4",
              "290: dig 14",
              "291: dup",
              "292: cover 8",
              "293: extract_uint16",
              "294: dup2",
              "295: uncover 4",
              "296: select",
              "297: dig 5",
              "298: dig 4",
              "299: uncover 2",
              "300: substring3",
              "301: pushint 16",
              "302: intc_2",
              "303: setbit",
              "304: dig 8",
              "305: dup",
              "306: uncover 6",
              "307: <",
              "308: assert",
              "309: uncover 6",
              "310: substring 0 2",
              "311: dup",
              "312: bury 18",
              "313: btoi",
              "314: dup",
              "315: uncover 2",
              "316: -",
              "317: intc_2",
              "318: -",
              "319: dig 4",
              "320: uncover 4",
              "321: uncover 2",
              "322: select",
              "323: dup",
              "324: dig 5",
              "325: -",
              "326: bury 12",
              "327: dig 2",
              "328: len",
              "329: bury 13",
              "330: dig 5",
              "331: intc_0",
              "332: uncover 6",
              "333: substring3",
              "334: uncover 3",
              "335: concat",
              "336: uncover 4",
              "337: uncover 2",
              "338: uncover 4",
              "339: substring3",
              "340: concat",
              "341: bury 13",
              "342: intc_1",
              "343: *",
              "344: bury 5",
              "345: bury 7"
            ],
            [
              "347: complete_todo_for_header@9:",
              "348: dig 6",
              "349: dig 4",
              "350: <",
              "351: bz complete_todo_after_for@11"
            ],
            [
              "373: complete_todo_after_for@11:",
              "374: dig 9",
              "375: dig 11",
              "376: concat",
              "379: bytec_0",
              "380: swap",
              "381: app_global_put"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 26 -> 27 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "395: return_todo:",
              "396: bytec_1",
              "397: dupn 2",
              "400: txna ApplicationArgs 1",
              "401: intc_0",
              "405: dupn 2",
              "408: bytec_0",
              "409: app_global_get_ex",
              "410: assert",
              "411: intc_0",
              "412: extract_uint16",
              "413: intc_0"
            ],
            [
              "415: return_todo_for_header@2:",
              "418: dup",
              "419: dig 2",
              "420: <",
              "421: bz return_todo_after_for@7"
            ],
            [
              "508: return_todo_after_for@7:",
              "511: dig 2",
              "512: assert",
              "515: bytec_3",
              "516: dig 4",
              "517: concat",
              "518: log",
              "519: intc_2",
              "520: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 8 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "66: pushbytes 0x00010002",
              "67: swap",
              "68: concat",
              "69: bytec_0",
              "70: swap",
              "71: app_global_put"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 10 -> 11 -> 13 -> 14 -> 16 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "89: add_todo_else_body@3:",
              "92: intc_0",
              "93: bytec_0",
              "94: app_global_get_ex",
              "95: assert",
              "96: dup",
              "97: intc_0",
              "98: extract_uint16",
              "99: dup",
              "100: cover 2",
              "101: bury 7",
              "102: extract 2 0",
              "103: bury 9",
              "104: pushbytes 0x0002",
              "105: uncover 2",
              "106: concat",
              "107: bury 6",
              "108: bytec_1",
              "109: bury 7",
              "110: intc_1",
              "111: *",
              "112: bury 1",
              "113: intc_0",
              "114: bury 2"
            ],
            [
              "116: add_todo_for_header@6:",
              "117: dup2",
              "118: <",
              "119: bz add_todo_after_for@8"
            ],
            [
              "138: add_todo_after_for@8:",
              "139: dig 6",
              "140: len",
              "141: bury 3",
              "142: intc_0",
              "143: bury 2"
            ],
            [
              "145: add_todo_for_header@9:",
              "146: dig 1",
              "147: intc_1",
              "148: <",
              "149: bz add_todo_after_for@11"
            ],
            [
              "168: add_todo_after_for@11:",
              "169: dig 3",
              "172: intc_2",
              "173: +",
              "174: itob",
              "175: extract 6 2",
              "176: dig 6",
              "177: concat",
              "178: dig 7",
              "179: dig 2",
              "180: dig 5",
              "181: substring3",
              "182: concat",
              "183: dig 5",
              "184: extract 2 0",
              "185: concat",
              "188: bytec_0",
              "189: swap",
              "190: app_global_put",
              "191: b add_todo_after_if_else@4"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 19 -> 20 -> 21 -> 23 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "222: intc_0",
              "223: bytec_0",
              "224: app_global_get_ex",
              "225: assert",
              "226: dup",
              "227: extract 2 0",
              "228: swap",
              "229: intc_0",
              "230: extract_uint16",
              "231: dig 2",
              "232: dup",
              "233: intc_1",
              "234: *",
              "235: dup",
              "236: bury 13",
              "237: dig 3",
              "238: swap",
              "239: extract_uint16",
              "240: swap",
              "241: intc_2",
              "242: +",
              "243: dup",
              "244: cover 4",
              "245: uncover 2",
              "246: dig 1",
              "247: -",
              "248: dig 3",
              "249: len",
              "250: uncover 2",
              "251: intc_1",
              "252: *",
              "253: dup",
              "254: bury 14",
              "255: dig 4",
              "256: swap",
              "257: extract_uint16",
              "258: uncover 2",
              "259: select",
              "260: substring3",
              "261: dup",
              "262: intc_0",
              "263: extract_uint16",
              "264: dig 1",
              "265: len",
              "266: substring3",
              "267: dig 4",
              "268: ==",
              "269: bz complete_todo_after_if_else@5"
            ],
            [
              "272: intc_0",
              "273: bytec_0",
              "274: app_global_get_ex",
              "275: assert",
              "276: dup",
              "277: extract 2 0",
              "278: dig 1",
              "279: intc_0",
              "280: extract_uint16",
              "281: dig 1",
              "282: dig 13",
              "283: extract_uint16",
              "284: dig 1",
              "285: uncover 5",
              "286: -",
              "287: dig 3",
              "288: len",
              "289: dig 4",
              "290: dig 14",
              "291: dup",
              "292: cover 8",
              "293: extract_uint16",
              "294: dup2",
              "295: uncover 4",
              "296: select",
              "297: dig 5",
              "298: dig 4",
              "299: uncover 2",
              "300: substring3",
              "301: pushint 16",
              "302: intc_2",
              "303: setbit",
              "304: dig 8",
              "305: dup",
              "306: uncover 6",
              "307: <",
              "308: assert",
              "309: uncover 6",
              "310: substring 0 2",
              "311: dup",
              "312: bury 18",
              "313: btoi",
              "314: dup",
              "315: uncover 2",
              "316: -",
              "317: intc_2",
              "318: -",
              "319: dig 4",
              "320: uncover 4",
              "321: uncover 2",
              "322: select",
              "323: dup",
              "324: dig 5",
              "325: -",
              "326: bury 12",
              "327: dig 2",
              "328: len",
              "329: bury 13",
              "330: dig 5",
              "331: intc_0",
              "332: uncover 6",
              "333: substring3",
              "334: uncover 3",
              "335: concat",
              "336: uncover 4",
              "337: uncover 2",
              "338: uncover 4",
              "339: substring3",
              "340: concat",
              "341: bury 13",
              "342: intc_1",
              "343: *",
              "344: bury 5",
              "345: bury 7"
            ],
            [
              "347: complete_todo_for_header@9:",
              "348: dig 6",
              "349: dig 4",
              "350: <",
              "351: bz complete_todo_after_for@11"
            ],
            [
              "373: complete_todo_after_for@11:",
              "374: dig 9",
              "375: dig 11",
              "376: concat",
              "379: bytec_0",
              "380: swap",
              "381: app_global_put"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 26 -> 27 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "395: return_todo:",
              "396: bytec_1",
              "397: dupn 2",
              "400: txna ApplicationArgs 1",
              "401: intc_0",
              "405: dupn 2",
              "408: bytec_0",
              "409: app_global_get_ex",
              "410: assert",
              "411: intc_0",
              "412: extract_uint16",
              "413: intc_0"
            ],
            [
              "415: return_todo_for_header@2:",
              "418: dup",
              "419: dig 2",
              "420: <",
              "421: bz return_todo_after_for@7"
            ],
            [
              "508: return_todo_after_for@7:",
              "511: dig 2",
              "512: assert",
              "515: bytec_3",
              "516: dig 4",
              "517: concat",
              "518: log",
              "519: intc_2",
              "520: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 5,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 8 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "66: pushbytes 0x00010002",
              "67: swap",
              "68: concat",
              "69: bytec_0",
              "70: swap",
              "71: app_global_put"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 10 -> 11 -> 13 -> 14 -> 16 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "89: add_todo_else_body@3:",
              "92: intc_0",
              "93: bytec_0",
              "94: app_global_get_ex",
              "95: assert",
              "96: dup",
              "97: intc_0",
              "98: extract_uint16",
              "99: dup",
              "100: cover 2",
              "101: bury 7",
              "102: extract 2 0",
              "103: bury 9",
              "104: pushbytes 0x0002",
              "105: uncover 2",
              "106: concat",
              "107: bury 6",
              "108: bytec_1",
              "109: bury 7",
              "110: intc_1",
              "111: *",
              "112: bury 1",
              "113: intc_0",
              "114: bury 2"
            ],
            [
              "116: add_todo_for_header@6:",
              "117: dup2",
              "118: <",
              "119: bz add_todo_after_for@8"
            ],
            [
              "138: add_todo_after_for@8:",
              "139: dig 6",
              "140: len",
              "141: bury 3",
              "142: intc_0",
              "143: bury 2"
            ],
            [
              "145: add_todo_for_header@9:",
              "146: dig 1",
              "147: intc_1",
              "148: <",
              "149: bz add_todo_after_for@11"
            ],
            [
              "168: add_todo_after_for@11:",
              "169: dig 3",
              "172: intc_2",
              "173: +",
              "174: itob",
              "175: extract 6 2",
              "176: dig 6",
              "177: concat",
              "178: dig 7",
              "179: dig 2",
              "180: dig 5",
              "181: substring3",
              "182: concat",
              "183: dig 5",
              "184: extract 2 0",
              "185: concat",
              "188: bytec_0",
              "189: swap",
              "190: app_global_put",
              "191: b add_todo_after_if_else@4"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 19 -> 20 -> 21 -> 23 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "222: intc_0",
              "223: bytec_0",
              "224: app_global_get_ex",
              "225: assert",
              "226: dup",
              "227: extract 2 0",
              "228: swap",
              "229: intc_0",
              "230: extract_uint16",
              "231: dig 2",
              "232: dup",
              "233: intc_1",
              "234: *",
              "235: dup",
              "236: bury 13",
              "237: dig 3",
              "238: swap",
              "239: extract_uint16",
              "240: swap",
              "241: intc_2",
              "242: +",
              "243: dup",
              "244: cover 4",
              "245: uncover 2",
              "246: dig 1",
              "247: -",
              "248: dig 3",
              "249: len",
              "250: uncover 2",
              "251: intc_1",
              "252: *",
              "253: dup",
              "254: bury 14",
              "255: dig 4",
              "256: swap",
              "257: extract_uint16",
              "258: uncover 2",
              "259: select",
              "260: substring3",
              "261: dup",
              "262: intc_0",
              "263: extract_uint16",
              "264: dig 1",
              "265: len",
              "266: substring3",
              "267: dig 4",
              "268: ==",
              "269: bz complete_todo_after_if_else@5"
            ],
            [
              "272: intc_0",
              "273: bytec_0",
              "274: app_global_get_ex",
              "275: assert",
              "276: dup",
              "277: extract 2 0",
              "278: dig 1",
              "279: intc_0",
              "280: extract_uint16",
              "281: dig 1",
              "282: dig 13",
              "283: extract_uint16",
              "284: dig 1",
              "285: uncover 5",
              "286: -",
              "287: dig 3",
              "288: len",
              "289: dig 4",
              "290: dig 14",
              "291: dup",
              "292: cover 8",
              "293: extract_uint16",
              "294: dup2",
              "295: uncover 4",
              "296: select",
              "297: dig 5",
              "298: dig 4",
              "299: uncover 2",
              "300: substring3",
              "301: pushint 16",
              "302: intc_2",
              "303: setbit",
              "304: dig 8",
              "305: dup",
              "306: uncover 6",
              "307: <",
              "308: assert",
              "309: uncover 6",
              "310: substring 0 2",
              "311: dup",
              "312: bury 18",
              "313: btoi",
              "314: dup",
              "315: uncover 2",
              "316: -",
              "317: intc_2",
              "318: -",
              "319: dig 4",
              "320: uncover 4",
              "321: uncover 2",
              "322: select",
              "323: dup",
              "324: dig 5",
              "325: -",
              "326: bury 12",
              "327: dig 2",
              "328: len",
              "329: bury 13",
              "330: dig 5",
              "331: intc_0",
              "332: uncover 6",
              "333: substring3",
              "334: uncover 3",
              "335: concat",
              "336: uncover 4",
              "337: uncover 2",
              "338: uncover 4",
              "339: substring3",
              "340: concat",
              "341: bury 13",
              "342: intc_1",
              "343: *",
              "344: bury 5",
              "345: bury 7"
            ],
            [
              "347: complete_todo_for_header@9:",
              "348: dig 6",
              "349: dig 4",
              "350: <",
              "351: bz complete_todo_after_for@11"
            ],
            [
              "373: complete_todo_after_for@11:",
              "374: dig 9",
              "375: dig 11",
              "376: concat",
              "379: bytec_0",
              "380: swap",
              "381: app_global_put"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 26 -> 27 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "395: return_todo:",
              "396: bytec_1",
              "397: dupn 2",
              "400: txna ApplicationArgs 1",
              "401: intc_0",
              "405: dupn 2",
              "408: bytec_0",
              "409: app_global_get_ex",
              "410: assert",
              "411: intc_0",
              "412: extract_uint16",
              "413: intc_0"
            ],
            [
              "415: return_todo_for_header@2:",
              "418: dup",
              "419: dig 2",
              "420: <",
              "421: bz return_todo_after_for@7"
            ],
            [
              "508: return_todo_after_for@7:",
              "511: dig 2",
              "512: assert",
              "515: bytec_3",
              "516: dig 4",
              "517: concat",
              "518: log",
              "519: intc_2",
              "520: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 12,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 7 -> 8 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "66: pushbytes 0x00010002",
              "67: swap",
              "68: concat",
              "69: bytec_0",
              "70: swap",
              "71: app_global_put"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 7 -> 10 -> 11 -> 13 -> 14 -> 16 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "89: add_todo_else_body@3:",
              "92: intc_0",
              "93: bytec_0",
              "94: app_global_get_ex",
              "95: assert",
              "96: dup",
              "97: intc_0",
              "98: extract_uint16",
              "99: dup",
              "100: cover 2",
              "101: bury 7",
              "102: extract 2 0",
              "103: bury 9",
              "104: pushbytes 0x0002",
              "105: uncover 2",
              "106: concat",
              "107: bury 6",
              "108: bytec_1",
              "109: bury 7",
              "110: intc_1",
              "111: *",
              "112: bury 1",
              "113: intc_0",
              "114: bury 2"
            ],
            [
              "116: add_todo_for_header@6:",
              "117: dup2",
              "118: <",
              "119: bz add_todo_after_for@8"
            ],
            [
              "138: add_todo_after_for@8:",
              "139: dig 6",
              "140: len",
              "141: bury 3",
              "142: intc_0",
              "143: bury 2"
            ],
            [
              "145: add_todo_for_header@9:",
              "146: dig 1",
              "147: intc_1",
              "148: <",
              "149: bz add_todo_after_for@11"
            ],
            [
              "168: add_todo_after_for@11:",
              "169: dig 3",
              "172: intc_2",
              "173: +",
              "174: itob",
              "175: extract 6 2",
              "176: dig 6",
              "177: concat",
              "178: dig 7",
              "179: dig 2",
              "180: dig 5",
              "181: substring3",
              "182: concat",
              "183: dig 5",
              "184: extract 2 0",
              "185: concat",
              "188: bytec_0",
              "189: swap",
              "190: app_global_put",
              "191: b add_todo_after_if_else@4"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 17 -> 18 -> 19 -> 20 -> 21 -> 23 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "222: intc_0",
              "223: bytec_0",
              "224: app_global_get_ex",
              "225: assert",
              "226: dup",
              "227: extract 2 0",
              "228: swap",
              "229: intc_0",
              "230: extract_uint16",
              "231: dig 2",
              "232: dup",
              "233: intc_1",
              "234: *",
              "235: dup",
              "236: bury 13",
              "237: dig 3",
              "238: swap",
              "239: extract_uint16",
              "240: swap",
              "241: intc_2",
              "242: +",
              "243: dup",
              "244: cover 4",
              "245: uncover 2",
              "246: dig 1",
              "247: -",
              "248: dig 3",
              "249: len",
              "250: uncover 2",
              "251: intc_1",
              "252: *",
              "253: dup",
              "254: bury 14",
              "255: dig 4",
              "256: swap",
              "257: extract_uint16",
              "258: uncover 2",
              "259: select",
              "260: substring3",
              "261: dup",
              "262: intc_0",
              "263: extract_uint16",
              "264: dig 1",
              "265: len",
              "266: substring3",
              "267: dig 4",
              "268: ==",
              "269: bz complete_todo_after_if_else@5"
            ],
            [
              "272: intc_0",
              "273: bytec_0",
              "274: app_global_get_ex",
              "275: assert",
              "276: dup",
              "277: extract 2 0",
              "278: dig 1",
              "279: intc_0",
              "280: extract_uint16",
              "281: dig 1",
              "282: dig 13",
              "283: extract_uint16",
              "284: dig 1",
              "285: uncover 5",
              "286: -",
              "287: dig 3",
              "288: len",
              "289: dig 4",
              "290: dig 14",
              "291: dup",
              "292: cover 8",
              "293: extract_uint16",
              "294: dup2",
              "295: uncover 4",
              "296: select",
              "297: dig 5",
              "298: dig 4",
              "299: uncover 2",
              "300: substring3",
              "301: pushint 16",
              "302: intc_2",
              "303: setbit",
              "304: dig 8",
              "305: dup",
              "306: uncover 6",
              "307: <",
              "308: assert",
              "309: uncover 6",
              "310: substring 0 2",
              "311: dup",
              "312: bury 18",
              "313: btoi",
              "314: dup",
              "315: uncover 2",
              "316: -",
              "317: intc_2",
              "318: -",
              "319: dig 4",
              "320: uncover 4",
              "321: uncover 2",
              "322: select",
              "323: dup",
              "324: dig 5",
              "325: -",
              "326: bury 12",
              "327: dig 2",
              "328: len",
              "329: bury 13",
              "330: dig 5",
              "331: intc_0",
              "332: uncover 6",
              "333: substring3",
              "334: uncover 3",
              "335: concat",
              "336: uncover 4",
              "337: uncover 2",
              "338: uncover 4",
              "339: substring3",
              "340: concat",
              "341: bury 13",
              "342: intc_1",
              "343: *",
              "344: bury 5",
              "345: bury 7"
            ],
            [
              "347: complete_todo_for_header@9:",
              "348: dig 6",
              "349: dig 4",
              "350: <",
              "351: bz complete_todo_after_for@11"
            ],
            [
              "373: complete_todo_after_for@11:",
              "374: dig 9",
              "375: dig 11",
              "376: concat",
              "379: bytec_0",
              "380: swap",
              "381: app_global_put"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 17 -> 18 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 26 -> 27 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "395: return_todo:",
              "396: bytec_1",
              "397: dupn 2",
              "400: txna ApplicationArgs 1",
              "401: intc_0",
              "405: dupn 2",
              "408: bytec_0",
              "409: app_global_get_ex",
              "410: assert",
              "411: intc_0",
              "412: extract_uint16",
              "413: intc_0"
            ],
            [
              "415: return_todo_for_header@2:",
              "418: dup",
              "419: dig 2",
              "420: <",
              "421: bz return_todo_after_for@7"
            ],
            [
              "508: return_todo_after_for@7:",
              "511: dig 2",
              "512: assert",
              "515: bytec_3",
              "516: dig 4",
              "517: concat",
              "518: log",
              "519: intc_2",
              "520: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "31: main___algopy_default_create@12:",
              "32: txn OnCompletion",
              "33: !",
              "34: txn ApplicationID",
              "35: !",
              "36: &&",
              "37: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 8 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "66: pushbytes 0x00010002",
              "67: swap",
              "68: concat",
              "69: bytec_0",
              "70: swap",
              "71: app_global_put"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 10 -> 11 -> 13 -> 14 -> 16 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "89: add_todo_else_body@3:",
              "92: intc_0",
              "93: bytec_0",
              "94: app_global_get_ex",
              "95: assert",
              "96: dup",
              "97: intc_0",
              "98: extract_uint16",
              "99: dup",
              "100: cover 2",
              "101: bury 7",
              "102: extract 2 0",
              "103: bury 9",
              "104: pushbytes 0x0002",
              "105: uncover 2",
              "106: concat",
              "107: bury 6",
              "108: bytec_1",
              "109: bury 7",
              "110: intc_1",
              "111: *",
              "112: bury 1",
              "113: intc_0",
              "114: bury 2"
            ],
            [
              "116: add_todo_for_header@6:",
              "117: dup2",
              "118: <",
              "119: bz add_todo_after_for@8"
            ],
            [
              "138: add_todo_after_for@8:",
              "139: dig 6",
              "140: len",
              "141: bury 3",
              "142: intc_0",
              "143: bury 2"
            ],
            [
              "145: add_todo_for_header@9:",
              "146: dig 1",
              "147: intc_1",
              "148: <",
              "149: bz add_todo_after_for@11"
            ],
            [
              "168: add_todo_after_for@11:",
              "169: dig 3",
              "172: intc_2",
              "173: +",
              "174: itob",
              "175: extract 6 2",
              "176: dig 6",
              "177: concat",
              "178: dig 7",
              "179: dig 2",
              "180: dig 5",
              "181: substring3",
              "182: concat",
              "183: dig 5",
              "184: extract 2 0",
              "185: concat",
              "188: bytec_0",
              "189: swap",
              "190: app_global_put",
              "191: b add_todo_after_if_else@4"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 19 -> 20 -> 21 -> 23 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "222: intc_0",
              "223: bytec_0",
              "224: app_global_get_ex",
              "225: assert",
              "226: dup",
              "227: extract 2 0",
              "228: swap",
              "229: intc_0",
              "230: extract_uint16",
              "231: dig 2",
              "232: dup",
              "233: intc_1",
              "234: *",
              "235: dup",
              "236: bury 13",
              "237: dig 3",
              "238: swap",
              "239: extract_uint16",
              "240: swap",
              "241: intc_2",
              "242: +",
              "243: dup",
              "244: cover 4",
              "245: uncover 2",
              "246: dig 1",
              "247: -",
              "248: dig 3",
              "249: len",
              "250: uncover 2",
              "251: intc_1",
              "252: *",
              "253: dup",
              "254: bury 14",
              "255: dig 4",
              "256: swap",
              "257: extract_uint16",
              "258: uncover 2",
              "259: select",
              "260: substring3",
              "261: dup",
              "262: intc_0",
              "263: extract_uint16",
              "264: dig 1",
              "265: len",
              "266: substring3",
              "267: dig 4",
              "268: ==",
              "269: bz complete_todo_after_if_else@5"
            ],
            [
              "272: intc_0",
              "273: bytec_0",
              "274: app_global_get_ex",
              "275: assert",
              "276: dup",
              "277: extract 2 0",
              "278: dig 1",
              "279: intc_0",
              "280: extract_uint16",
              "281: dig 1",
              "282: dig 13",
              "283: extract_uint16",
              "284: dig 1",
              "285: uncover 5",
              "286: -",
              "287: dig 3",
              "288: len",
              "289: dig 4",
              "290: dig 14",
              "291: dup",
              "292: cover 8",
              "293: extract_uint16",
              "294: dup2",
              "295: uncover 4",
              "296: select",
              "297: dig 5",
              "298: dig 4",
              "299: uncover 2",
              "300: substring3",
              "301: pushint 16",
              "302: intc_2",
              "303: setbit",
              "304: dig 8",
              "305: dup",
              "306: uncover 6",
              "307: <",
              "308: assert",
              "309: uncover 6",
              "310: substring 0 2",
              "311: dup",
              "312: bury 18",
              "313: btoi",
              "314: dup",
              "315: uncover 2",
              "316: -",
              "317: intc_2",
              "318: -",
              "319: dig 4",
              "320: uncover 4",
              "321: uncover 2",
              "322: select",
              "323: dup",
              "324: dig 5",
              "325: -",
              "326: bury 12",
              "327: dig 2",
              "328: len",
              "329: bury 13",
              "330: dig 5",
              "331: intc_0",
              "332: uncover 6",
              "333: substring3",
              "334: uncover 3",
              "335: concat",
              "336: uncover 4",
              "337: uncover 2",
              "338: uncover 4",
              "339: substring3",
              "340: concat",
              "341: bury 13",
              "342: intc_1",
              "343: *",
              "344: bury 5",
              "345: bury 7"
            ],
            [
              "347: complete_todo_for_header@9:",
              "348: dig 6",
              "349: dig 4",
              "350: <",
              "351: bz complete_todo_after_for@11"
            ],
            [
              "373: complete_todo_after_for@11:",
              "374: dig 9",
              "375: dig 11",
              "376: concat",
              "379: bytec_0",
              "380: swap",
              "381: app_global_put"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 26 -> 27 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "395: return_todo:",
              "396: bytec_1",
              "397: dupn 2",
              "400: txna ApplicationArgs 1",
              "401: intc_0",
              "405: dupn 2",
              "408: bytec_0",
              "409: app_global_get_ex",
              "410: assert",
              "411: intc_0",
              "412: extract_uint16",
              "413: intc_0"
            ],
            [
              "415: return_todo_for_header@2:",
              "418: dup",
              "419: dig 2",
              "420: <",
              "421: bz return_todo_after_for@7"
            ],
            [
              "508: return_todo_after_for@7:",
              "511: dig 2",
              "512: assert",
              "515: bytec_3",
              "516: dig 4",
              "517: concat",
              "518: log",
              "519: intc_2",
              "520: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "31: main___algopy_default_create@12:",
              "32: txn OnCompletion",
              "33: !",
              "34: txn ApplicationID",
              "35: !",
              "36: &&",
              "37: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 12,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 7 -> 8 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "66: pushbytes 0x00010002",
              "67: swap",
              "68: concat",
              "69: bytec_0",
              "70: swap",
              "71: app_global_put"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 7 -> 10 -> 11 -> 13 -> 14 -> 16 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "89: add_todo_else_body@3:",
              "92: intc_0",
              "93: bytec_0",
              "94: app_global_get_ex",
              "95: assert",
              "96: dup",
              "97: intc_0",
              "98: extract_uint16",
              "99: dup",
              "100: cover 2",
              "101: bury 7",
              "102: extract 2 0",
              "103: bury 9",
              "104: pushbytes 0x0002",
              "105: uncover 2",
              "106: concat",
              "107: bury 6",
              "108: bytec_1",
              "109: bury 7",
              "110: intc_1",
              "111: *",
              "112: bury 1",
              "113: intc_0",
              "114: bury 2"
            ],
            [
              "116: add_todo_for_header@6:",
              "117: dup2",
              "118: <",
              "119: bz add_todo_after_for@8"
            ],
            [
              "138: add_todo_after_for@8:",
              "139: dig 6",
              "140: len",
              "141: bury 3",
              "142: intc_0",
              "143: bury 2"
            ],
            [
              "145: add_todo_for_header@9:",
              "146: dig 1",
              "147: intc_1",
              "148: <",
              "149: bz add_todo_after_for@11"
            ],
            [
              "168: add_todo_after_for@11:",
              "169: dig 3",
              "172: intc_2",
              "173: +",
              "174: itob",
              "175: extract 6 2",
              "176: dig 6",
              "177: concat",
              "178: dig 7",
              "179: dig 2",
              "180: dig 5",
              "181: substring3",
              "182: concat",
              "183: dig 5",
              "184: extract 2 0",
              "185: concat",
              "188: bytec_0",
              "189: swap",
              "190: app_global_put",
              "191: b add_todo_after_if_else@4"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 17 -> 18 -> 19 -> 20 -> 21 -> 23 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "222: intc_0",
              "223: bytec_0",
              "224: app_global_get_ex",
              "225: assert",
              "226: dup",
              "227: extract 2 0",
              "228: swap",
              "229: intc_0",
              "230: extract_uint16",
              "231: dig 2",
              "232: dup",
              "233: intc_1",
              "234: *",
              "235: dup",
              "236: bury 13",
              "237: dig 3",
              "238: swap",
              "239: extract_uint16",
              "240: swap",
              "241: intc_2",
              "242: +",
              "243: dup",
              "244: cover 4",
              "245: uncover 2",
              "246: dig 1",
              "247: -",
              "248: dig 3",
              "249: len",
              "250: uncover 2",
              "251: intc_1",
              "252: *",
              "253: dup",
              "254: bury 14",
              "255: dig 4",
              "256: swap",
              "257: extract_uint16",
              "258: uncover 2",
              "259: select",
              "260: substring3",
              "261: dup",
              "262: intc_0",
              "263: extract_uint16",
              "264: dig 1",
              "265: len",
              "266: substring3",
              "267: dig 4",
              "268: ==",
              "269: bz complete_todo_after_if_else@5"
            ],
            [
              "272: intc_0",
              "273: bytec_0",
              "274: app_global_get_ex",
              "275: assert",
              "276: dup",
              "277: extract 2 0",
              "278: dig 1",
              "279: intc_0",
              "280: extract_uint16",
              "281: dig 1",
              "282: dig 13",
              "283: extract_uint16",
              "284: dig 1",
              "285: uncover 5",
              "286: -",
              "287: dig 3",
              "288: len",
              "289: dig 4",
              "290: dig 14",
              "291: dup",
              "292: cover 8",
              "293: extract_uint16",
              "294: dup2",
              "295: uncover 4",
              "296: select",
              "297: dig 5",
              "298: dig 4",
              "299: uncover 2",
              "300: substring3",
              "301: pushint 16",
              "302: intc_2",
              "303: setbit",
              "304: dig 8",
              "305: dup",
              "306: uncover 6",
              "307: <",
              "308: assert",
              "309: uncover 6",
              "310: substring 0 2",
              "311: dup",
              "312: bury 18",
              "313: btoi",
              "314: dup",
              "315: uncover 2",
              "316: -",
              "317: intc_2",
              "318: -",
              "319: dig 4",
              "320: uncover 4",
              "321: uncover 2",
              "322: select",
              "323: dup",
              "324: dig 5",
              "325: -",
              "326: bury 12",
              "327: dig 2",
              "328: len",
              "329: bury 13",
              "330: dig 5",
              "331: intc_0",
              "332: uncover 6",
              "333: substring3",
              "334: uncover 3",
              "335: concat",
              "336: uncover 4",
              "337: uncover 2",
              "338: uncover 4",
              "339: substring3",
              "340: concat",
              "341: bury 13",
              "342: intc_1",
              "343: *",
              "344: bury 5",
              "345: bury 7"
            ],
            [
              "347: complete_todo_for_header@9:",
              "348: dig 6",
              "349: dig 4",
              "350: <",
              "351: bz complete_todo_after_for@11"
            ],
            [
              "373: complete_todo_after_for@11:",
              "374: dig 9",
              "375: dig 11",
              "376: concat",
              "379: bytec_0",
              "380: swap",
              "381: app_global_put"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 17 -> 18 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 4 -> 26 -> 27 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "395: return_todo:",
              "396: bytec_1",
              "397: dupn 2",
              "400: txna ApplicationArgs 1",
              "401: intc_0",
              "405: dupn 2",
              "408: bytec_0",
              "409: app_global_get_ex",
              "410: assert",
              "411: intc_0",
              "412: extract_uint16",
              "413: intc_0"
            ],
            [
              "415: return_todo_for_header@2:",
              "418: dup",
              "419: dig 2",
              "420: <",
              "421: bz return_todo_after_for@7"
            ],
            [
              "508: return_todo_after_for@7:",
              "511: dig 2",
              "512: assert",
              "515: bytec_3",
              "516: dig 4",
              "517: concat",
              "518: log",
              "519: intc_2",
              "520: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 3 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "12: bytec_0",
              "13: bytec_2",
              "14: app_global_put"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "31: main___algopy_default_create@12:",
              "32: txn OnCompletion",
              "33: !",
              "34: txn ApplicationID",
              "35: !",
              "36: &&",
              "37: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 8 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "66: pushbytes 0x00010002",
              "67: swap",
              "68: concat",
              "69: bytec_0",
              "70: swap",
              "71: app_global_put"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 7 -> 10 -> 11 -> 13 -> 14 -> 16 -> 9",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "41: add_todo:",
              "42: intc_0",
              "43: dupn 2",
              "44: bytec_1",
              "45: dupn 3",
              "48: pushbytes 0x000300",
              "51: txna ApplicationArgs 1",
              "54: concat",
              "57: intc_0",
              "58: bytec_0",
              "59: app_global_get_ex",
              "60: assert",
              "61: bytec_2",
              "62: ==",
              "63: bz add_todo_else_body@3"
            ],
            [
              "89: add_todo_else_body@3:",
              "92: intc_0",
              "93: bytec_0",
              "94: app_global_get_ex",
              "95: assert",
              "96: dup",
              "97: intc_0",
              "98: extract_uint16",
              "99: dup",
              "100: cover 2",
              "101: bury 7",
              "102: extract 2 0",
              "103: bury 9",
              "104: pushbytes 0x0002",
              "105: uncover 2",
              "106: concat",
              "107: bury 6",
              "108: bytec_1",
              "109: bury 7",
              "110: intc_1",
              "111: *",
              "112: bury 1",
              "113: intc_0",
              "114: bury 2"
            ],
            [
              "116: add_todo_for_header@6:",
              "117: dup2",
              "118: <",
              "119: bz add_todo_after_for@8"
            ],
            [
              "138: add_todo_after_for@8:",
              "139: dig 6",
              "140: len",
              "141: bury 3",
              "142: intc_0",
              "143: bury 2"
            ],
            [
              "145: add_todo_for_header@9:",
              "146: dig 1",
              "147: intc_1",
              "148: <",
              "149: bz add_todo_after_for@11"
            ],
            [
              "168: add_todo_after_for@11:",
              "169: dig 3",
              "172: intc_2",
              "173: +",
              "174: itob",
              "175: extract 6 2",
              "176: dig 6",
              "177: concat",
              "178: dig 7",
              "179: dig 2",
              "180: dig 5",
              "181: substring3",
              "182: concat",
              "183: dig 5",
              "184: extract 2 0",
              "185: concat",
              "188: bytec_0",
              "189: swap",
              "190: app_global_put",
              "191: b add_todo_after_if_else@4"
            ],
            [
              "73: add_todo_after_if_else@4:",
              "76: intc_0",
              "77: bytec_0",
              "78: app_global_get_ex",
              "79: assert",
              "82: bytec_3",
              "83: swap",
              "84: concat",
              "85: log",
              "86: intc_2",
              "87: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 19 -> 20 -> 21 -> 23 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "222: intc_0",
              "223: bytec_0",
              "224: app_global_get_ex",
              "225: assert",
              "226: dup",
              "227: extract 2 0",
              "228: swap",
              "229: intc_0",
              "230: extract_uint16",
              "231: dig 2",
              "232: dup",
              "233: intc_1",
              "234: *",
              "235: dup",
              "236: bury 13",
              "237: dig 3",
              "238: swap",
              "239: extract_uint16",
              "240: swap",
              "241: intc_2",
              "242: +",
              "243: dup",
              "244: cover 4",
              "245: uncover 2",
              "246: dig 1",
              "247: -",
              "248: dig 3",
              "249: len",
              "250: uncover 2",
              "251: intc_1",
              "252: *",
              "253: dup",
              "254: bury 14",
              "255: dig 4",
              "256: swap",
              "257: extract_uint16",
              "258: uncover 2",
              "259: select",
              "260: substring3",
              "261: dup",
              "262: intc_0",
              "263: extract_uint16",
              "264: dig 1",
              "265: len",
              "266: substring3",
              "267: dig 4",
              "268: ==",
              "269: bz complete_todo_after_if_else@5"
            ],
            [
              "272: intc_0",
              "273: bytec_0",
              "274: app_global_get_ex",
              "275: assert",
              "276: dup",
              "277: extract 2 0",
              "278: dig 1",
              "279: intc_0",
              "280: extract_uint16",
              "281: dig 1",
              "282: dig 13",
              "283: extract_uint16",
              "284: dig 1",
              "285: uncover 5",
              "286: -",
              "287: dig 3",
              "288: len",
              "289: dig 4",
              "290: dig 14",
              "291: dup",
              "292: cover 8",
              "293: extract_uint16",
              "294: dup2",
              "295: uncover 4",
              "296: select",
              "297: dig 5",
              "298: dig 4",
              "299: uncover 2",
              "300: substring3",
              "301: pushint 16",
              "302: intc_2",
              "303: setbit",
              "304: dig 8",
              "305: dup",
              "306: uncover 6",
              "307: <",
              "308: assert",
              "309: uncover 6",
              "310: substring 0 2",
              "311: dup",
              "312: bury 18",
              "313: btoi",
              "314: dup",
              "315: uncover 2",
              "316: -",
              "317: intc_2",
              "318: -",
              "319: dig 4",
              "320: uncover 4",
              "321: uncover 2",
              "322: select",
              "323: dup",
              "324: dig 5",
              "325: -",
              "326: bury 12",
              "327: dig 2",
              "328: len",
              "329: bury 13",
              "330: dig 5",
              "331: intc_0",
              "332: uncover 6",
              "333: substring3",
              "334: uncover 3",
              "335: concat",
              "336: uncover 4",
              "337: uncover 2",
              "338: uncover 4",
              "339: substring3",
              "340: concat",
              "341: bury 13",
              "342: intc_1",
              "343: *",
              "344: bury 5",
              "345: bury 7"
            ],
            [
              "347: complete_todo_for_header@9:",
              "348: dig 6",
              "349: dig 4",
              "350: <",
              "351: bz complete_todo_after_for@11"
            ],
            [
              "373: complete_todo_after_for@11:",
              "374: dig 9",
              "375: dig 11",
              "376: concat",
              "379: bytec_0",
              "380: swap",
              "381: app_global_put"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 17 -> 18 -> 24",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "195: complete_todo:",
              "196: intc_0",
              "197: dup",
              "198: bytec_1",
              "199: dupn 5",
              "202: txna ApplicationArgs 1",
              "205: intc_0",
              "206: bytec_0",
              "207: app_global_get_ex",
              "208: assert",
              "209: intc_0",
              "210: extract_uint16",
              "211: intc_0"
            ],
            [
              "213: complete_todo_for_header@2:",
              "216: dup",
              "217: dig 2",
              "218: <",
              "219: bz complete_todo_after_for@7"
            ],
            [
              "383: complete_todo_after_for@7:",
              "386: intc_2",
              "387: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 4 -> 26 -> 27 -> 31",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "21: txn OnCompletion",
              "22: !",
              "23: assert",
              "24: txn ApplicationID",
              "25: assert",
              "26: pushbytess 0xf618a255 0x11cfe2d8 0xea9e2d9d",
              "27: txna ApplicationArgs 0",
              "28: match add_todo complete_todo return_todo"
            ],
            [
              "395: return_todo:",
              "396: bytec_1",
              "397: dupn 2",
              "400: txna ApplicationArgs 1",
              "401: intc_0",
              "405: dupn 2",
              "408: bytec_0",
              "409: app_global_get_ex",
              "410: assert",
              "411: intc_0",
              "412: extract_uint16",
              "413: intc_0"
            ],
            [
              "415: return_todo_for_header@2:",
              "418: dup",
              "419: dig 2",
              "420: <",
              "421: bz return_todo_after_for@7"
            ],
            [
              "508: return_todo_after_for@7:",
              "511: dig 2",
              "512: assert",
              "515: bytec_3",
              "516: dig 4",
              "517: concat",
              "518: log",
              "519: intc_2",
              "520: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 3 -> 6",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 0 2 1",
              "7: bytecblock \"todos\" 0x 0x0000 0x151f7c75",
              "8: txn ApplicationID",
              "9: bnz main_after_if_else@2"
            ],
            [
              "16: main_after_if_else@2:",
              "19: txn NumAppArgs",
              "20: bz main___algopy_default_create@12"
            ],
            [
              "31: main___algopy_default_create@12:",
              "32: txn OnCompletion",
              "33: !",
              "34: txn ApplicationID",
              "35: !",
              "36: &&",
              "37: return"
            ]
          ]
        }
      ]
    }
  ]
}