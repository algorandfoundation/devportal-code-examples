{
  "success": false,
  "error": null,
  "result": [
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"unprotected-deletable\", Impact: High, Confidence: High\nDescription: Unprotected Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-deletable-application\n",
      "check": "unprotected-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid deletable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "50: dig 1",
              "51: pushint 5",
              "52: >",
              "53: bz loop_after_if_else@5"
            ],
            [
              "70: loop_after_if_else@5:",
              "73: dig 1",
              "74: pushint 2",
              "75: -",
              "76: dup",
              "77: bury 3",
              "80: dig 1",
              "81: intc_0",
              "82: +",
              "83: bury 2",
              "86: intc_0",
              "87: ==",
              "88: bz loop_while_top@2"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"unprotected-updatable\", Impact: High, Confidence: High\nDescription: Unprotected Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#unprotected-updatable-application\n",
      "check": "unprotected-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid upgradable applications.\n- Add access controls to the vulnerable method.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "50: dig 1",
              "51: pushint 5",
              "52: >",
              "53: bz loop_after_if_else@5"
            ],
            [
              "70: loop_after_if_else@5:",
              "73: dig 1",
              "74: pushint 2",
              "75: -",
              "76: dup",
              "77: bury 3",
              "80: dig 1",
              "81: intc_0",
              "82: +",
              "83: bury 2",
              "86: intc_0",
              "87: ==",
              "88: bz loop_while_top@2"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-account\", Impact: High, Confidence: High\nDescription: Missing CloseRemainderTo field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-closeremainderto-field-validation\n",
      "check": "can-close-account",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `CloseRemainderTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"can-close-asset\", Impact: High, Confidence: High\nDescription: Missing AssetCloseTo Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-assetcloseto-field-validation\n",
      "check": "can-close-asset",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `AssetCloseTo` field in the LogicSig.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"is-deletable\", Impact: High, Confidence: High\nDescription: Deletable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#deletable-application\n",
      "check": "is-deletable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `DeleteApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "50: dig 1",
              "51: pushint 5",
              "52: >",
              "53: bz loop_after_if_else@5"
            ],
            [
              "70: loop_after_if_else@5:",
              "73: dig 1",
              "74: pushint 2",
              "75: -",
              "76: dup",
              "77: bury 3",
              "80: dig 1",
              "81: intc_0",
              "82: +",
              "83: bury 2",
              "86: intc_0",
              "87: ==",
              "88: bz loop_while_top@2"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 2,
      "description": "\nCheck: \"is-updatable\", Impact: High, Confidence: High\nDescription: Upgradable Applications\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#upgradable-application\n",
      "check": "is-updatable",
      "impact": "High",
      "confidence": "High",
      "help": "Do not approve `UpdateApplication` type application calls.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "50: dig 1",
              "51: pushint 5",
              "52: >",
              "53: bz loop_after_if_else@5"
            ],
            [
              "70: loop_after_if_else@5:",
              "73: dig 1",
              "74: pushint 2",
              "75: -",
              "76: dup",
              "77: bury 3",
              "80: dig 1",
              "81: intc_0",
              "82: +",
              "83: bury 2",
              "86: intc_0",
              "87: ==",
              "88: bz loop_while_top@2"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"missing-fee-check\", Impact: High, Confidence: High\nDescription: Missing Fee Field Validation\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-fee-field-validation\n",
      "check": "missing-fee-check",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `Fee` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "50: dig 1",
              "51: pushint 5",
              "52: >",
              "53: bz loop_after_if_else@5"
            ],
            [
              "70: loop_after_if_else@5:",
              "73: dig 1",
              "74: pushint 2",
              "75: -",
              "76: dup",
              "77: bury 3",
              "80: dig 1",
              "81: intc_0",
              "82: +",
              "83: bury 2",
              "86: intc_0",
              "87: ==",
              "88: bz loop_while_top@2"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "27: main___algopy_default_create@5:",
              "28: txn OnCompletion",
              "29: !",
              "30: txn ApplicationID",
              "31: !",
              "32: &&",
              "33: return"
            ]
          ]
        }
      ]
    },
    {
      "type": "ExecutionPaths",
      "count": 0,
      "description": "\nCheck: \"group-size-check\", Impact: High, Confidence: High\nDescription: Usage of absolute indexes without validating GroupSize\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#missing-groupsize-validation\n",
      "check": "group-size-check",
      "impact": "High",
      "confidence": "High",
      "help": "- Avoid using absolute indexes. Validate GroupSize if used.\n- Favor using ARC-4 ABI and relative indexes for group transactions.",
      "paths": []
    },
    {
      "type": "ExecutionPaths",
      "count": 3,
      "description": "\nCheck: \"rekey-to\", Impact: High, Confidence: High\nDescription: Rekeyable Logic Signatures\n\nWiki: https://github.com/crytic/tealer/wiki/Detector-Documentation#rekeyable-logicsig\n",
      "check": "rekey-to",
      "impact": "High",
      "confidence": "High",
      "help": "Validate `RekeyTo` field in the LogicSig.",
      "paths": [
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 8 -> 10 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "50: dig 1",
              "51: pushint 5",
              "52: >",
              "53: bz loop_after_if_else@5"
            ],
            [
              "70: loop_after_if_else@5:",
              "73: dig 1",
              "74: pushint 2",
              "75: -",
              "76: dup",
              "77: bury 3",
              "80: dig 1",
              "81: intc_0",
              "82: +",
              "83: bury 2",
              "86: intc_0",
              "87: ==",
              "88: bz loop_while_top@2"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 2 -> 4 -> 6 -> 7 -> 11",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "12: pushbytes 0xf82a2654",
              "13: txna ApplicationArgs 0",
              "14: match main_loop_route@3"
            ],
            [
              "17: main_loop_route@3:",
              "20: txn OnCompletion",
              "21: !",
              "22: txn ApplicationID",
              "23: &&",
              "24: assert",
              "25: b loop"
            ],
            [
              "37: loop:",
              "41: pushints 10 0"
            ],
            [
              "43: loop_while_top@2:",
              "46: dig 1",
              "47: bz loop_after_while@8"
            ],
            [
              "90: loop_after_while@8:",
              "93: dup",
              "94: itob",
              "95: pushbytes 0x151f7c75",
              "96: swap",
              "97: concat",
              "98: log",
              "99: intc_0",
              "100: return"
            ]
          ]
        },
        {
          "short": "0 -> 1 -> 5",
          "blocks": [
            [
              "1: #pragma version 11",
              "2: UNSUPPORTED #pragma typetrack false"
            ],
            [
              "5: main:",
              "6: intcblock 1",
              "10: txn NumAppArgs",
              "11: bz main___algopy_default_create@5"
            ],
            [
              "27: main___algopy_default_create@5:",
              "28: txn OnCompletion",
              "29: !",
              "30: txn ApplicationID",
              "31: !",
              "32: &&",
              "33: return"
            ]
          ]
        }
      ]
    }
  ]
}